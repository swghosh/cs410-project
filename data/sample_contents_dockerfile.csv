id,size,content,sample_repo_name,sample_path
f4abc38e22fc9bd551b5ae4c14c382309b506d13,153,"FROM daunnc/geodocker-accumulo:latest

MAINTAINER Pomadchin Grigory, daunnc@gmail.com

RUN /sbin/load-iterators.sh

ENTRYPOINT [ ""/sbin/entrypoint.sh"" ]
",geotrellis/geodocker-cluster,extras/accumulo-gis/Dockerfile
c6562467d9c7e80093cb8f0b743dabfe1cf2cbac,612,"FROM andreptb/oracle-java:6-alpine

MAINTAINER Luciano Mores <luciano.mores@gmail.com>

ENV MAVEN_VERSION 3.2.5
ENV MAVEN_HOME /usr/lib/maven
ENV PATH /usr/lib/maven/bin:$JAVA_HOME/bin:$PATH

RUN apk --no-cache add --virtual build-dependencies wget && \
    cd /tmp && \
    wget -q http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz -O - | tar xzf - && \
    mv /tmp/apache-maven-$MAVEN_VERSION /usr/lib/maven && \
    ln -s /usr/lib/maven/bin/mvn /usr/bin/mvn && \
    rm -rf /tmp/* && \
    apk del --purge build-dependencies

CMD [""mvn"", ""--version""]
",andreptb/Dockerfiles,maven/alpine/jdk-6/Dockerfile
88fe8ed4b008c4761f9ba9dd9b16c14961e822c9,2089,"[#ftl]
#
#  Copyright 2014-2015 by Cloudsoft Corporation Limited
#
#  Licensed under the Apache License, Version 2.0 (the ""License"");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

FROM ${fullyQualifiedImageName}
MAINTAINER Cloudsoft ""brooklyn@cloudsoftcorp.com""

# CLOCKER_VERSION_BELOW
LABEL version=""1.2.0-SNAPSHOT""

# setup locale
RUN type locale-gen ; if [ ""$?"" -eq ""0"" ] ; then locale-gen en_US.UTF-8 ; fi

# setup root account
RUN echo 'root:${entity.loginPassword}' | chpasswd

# install sshd
RUN if [ -x ""$(which apt-get)"" ] ; then \
        apt-get update ; \
        apt-get install -y openssh-server ; \
    elif [ -x ""/usr/bin/yum"" ] ; then \
        yum -y install openssh-server ; \
    elif [ -x ""$(which apk-install)"" ] ; then \
        apk-install openssh ; \
        sed -i ""s/UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g"" /etc/ssh/sshd_config ; \
    fi ; \
    mkdir /var/run/sshd ; \
    chmod 600 /var/run/sshd

# create host keys if absent
RUN if [ -f ""/etc/ssh/ssh_host_dsa_key"" -a -f ""/etc/ssh/ssh_host_rsa_key"" ] ; then \
        echo ""SSH host private keys already exists"" ; \
    else \
        ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa ; \
        ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa ; \
    fi

# configure sshd to allow login
RUN sed -i.bk 's/PermitRootLogin.*$/PermitRootLogin yes/g' /etc/ssh/sshd_config ; \
    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd || true

EXPOSE 22

CMD [ ""/usr/sbin/sshd"", ""-D"" ]
",brooklyncentral/clocker,docker/src/main/resources/clocker/docker/entity/container/SshdDockerfile
401a1578848bc4e8c2ddec31958db1f06180df67,993,"#
# ------------------------------------------------------
#                       Dockerfile
# ------------------------------------------------------
# image:    ansible-java
# tag:      latest
# name:     ansibleshipyard/ansible-java
# version:  v0.1.0
# repo:     https://github.com/AnsibleShipyard/ansible-java
# how-to:   docker build --force-rm -t ansibleshipyard/ansible-java .
# requires: ansibleshipyard/ansible-base-ubuntu
# authors:  github:@jasongiedymin,
#           github:
# ------------------------------------------------------

FROM ansibleshipyard/ansible-base-ubuntu
MAINTAINER ansibleshipyard

# -----> Env
ENV WORKDIR /tmp/build/roles/ansible-java
WORKDIR /tmp/build/roles/ansible-java

# -----> Add assets
ADD ./tasks $WORKDIR/tasks
ADD ./vars $WORKDIR/vars
ADD ./ci $WORKDIR/ci

# -----> Install Galaxy Dependencies

# -----> Execute
RUN ansible-playbook -i $WORKDIR/ci/inventory $WORKDIR/ci/playbook.yml -c local -vvvv

# -----> Cleanup
WORKDIR /
RUN rm -R /tmp/build
",pintostack/core,provisioning/roles/ansible-java/Dockerfile
8d013899004583b41184848569b1d8b81f1c66cc,725,"FROM ubuntu:vivid
MAINTAINER Joel Martin <github@martintribe.org>

##########################################################
# General requirements for testing or common across many
# implementations
##########################################################

RUN apt-get -y update

# Required for running tests
RUN apt-get -y install make python

# Some typical implementation and test requirements
RUN apt-get -y install curl libreadline-dev libedit-dev

RUN mkdir -p /mal
WORKDIR /mal

##########################################################
# Specific implementation requirements
##########################################################

# Install g++ for any C/C++ based implementations
RUN apt-get -y install g++
",kanaka/mal,cpp/Dockerfile
1b8d93465d25c370b40454eac054caac07cc43d9,1428,"# MediaBrowser Server
FROM ubuntu:trusty
MAINTAINER Carlos Hernandez <carlos@techbyte.ca>

# Let the container know that there is no tty
ENV DEBIAN_FRONTEND noninteractive

# Set locale to UTF-8
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LANG=en_US.UTF-8
RUN dpkg-reconfigure locales

# Set user nobody to uid and gid of unRAID, uncomment for unRAID
RUN usermod -u 99 nobody
RUN usermod -g 100 nobody

# Update ubuntu
RUN apt-mark hold initscripts udev plymouth mountall
RUN apt-get -q update
RUN apt-get dist-upgrade -qy && apt-get -q update

# Install MediaBrowser run dependencies
RUN apt-get install -qy --force-yes libmono-cil-dev Libgdiplus mediainfo wget libwebp-dev

# Download latest release from Dropbox
RUN wget https://github.com/MediaBrowser/MediaBrowser.Releases/raw/master/Server/mediabrowser.deb && dpkg -i mediabrowser.deb && apt-get install -f

# Uncomment for unRAID
RUN chown -R nobody:users /opt/mediabrowser

# Cleanup
RUN apt-get -y autoremove && rm mediabrowser.deb
RUN mkdir /config && chown -R nobody:users /config

VOLUME /config 

ADD ./start.sh /start.sh
RUN chmod u+x  /start.sh

# Default MB3 HTTP/tcp server port
EXPOSE 8096/tcp
# Default MB3 HTTPS/tcp server port
EXPOSE 8920/tcp
# UDP server port
EXPOSE 7359/udp
# ssdp port for UPnP / DLNA discovery
EXPOSE 1900/udp
# Run as default unRAID user nobody
USER nobody
ENTRYPOINT [""/start.sh""]
",MediaBrowser/Emby,Docker/Dockerfile
040794ad1be4678f518540e5667896b13f59147b,476,"FROM nodesource/fedora22-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_4.x/fc/22/x86_64/nodejs-4.2.4-1nodesource.fc22.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/22/node/4.2.4/Dockerfile
94fd2ff0da994244b34c5f5215f5163090d95d92,1711,"# CEPH BASE IMAGE
# CEPH VERSION: Jewel
# CEPH VERSION DETAIL: 0.94.x

FROM centos:7
MAINTAINER SÃ©bastien Han ""seb@redhat.com""

ENV ETCDCTL_VERSION v2.2.0
ENV ETCDCTL_ARCH linux-amd64
ENV CEPH_VERSION jewel
ENV KVIATOR_VERSION 0.0.7
ENV CONFD_VERSION 0.10.0

# Install prerequisites
RUN yum install -y unzip

# Install Runit
RUN curl -s https://packagecloud.io/install/repositories/imeyer/runit/script.rpm.sh | bash
RUN yum install -y runit-2.1.1-7.el7.centos.x86_64

# Install Ceph
RUN rpm --import 'https://download.ceph.com/keys/release.asc'
RUN rpm -Uvh http://download.ceph.com/rpm-${CEPH_VERSION}/el7/noarch/ceph-release-1-1.el7.noarch.rpm
RUN yum install -y epel-release && yum clean all
RUN yum install -y ceph ceph-radosgw sharutils python34 && yum clean all

# Install etcdctl
RUN curl -L --remote-name https://github.com/coreos/etcd/releases/download/${ETCDCTL_VERSION}/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}.tar.gz && tar xfz etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}.tar.gz -C /tmp/ etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl
RUN mv /tmp/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl /usr/local/bin/etcdctl

#install kviator
ADD https://github.com/AcalephStorage/kviator/releases/download/v${KVIATOR_VERSION}/kviator-${KVIATOR_VERSION}-linux-amd64.zip /tmp/kviator.zip
RUN cd /usr/local/bin && unzip /tmp/kviator.zip && chmod +x /usr/local/bin/kviator && rm /tmp/kviator.zip

# Install confd
ADD https://github.com/kelseyhightower/confd/releases/download/v${CONFD_VERSION}/confd-${CONFD_VERSION}-linux-amd64 /usr/local/bin/confd
RUN chmod +x /usr/local/bin/confd && mkdir -p /etc/confd/conf.d && mkdir -p /etc/confd/templates

ADD entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]

",ceph/ceph-docker,ceph-releases/jewel/centos/7/base/Dockerfile
c03d121f8928ce5baf7e0081e5ac3700afbec3ef,349,"# Composer Docker Container
FROM composer/composer:base-php5-alpine
MAINTAINER Rob Loach <robloach@gmail.com>

ENV COMPOSER_VERSION master

# Install Composer
RUN php /tmp/composer-setup.php --no-ansi --install-dir=/usr/local/bin --filename=composer --snapshot && rm -rf /tmp/composer-setup.php

# Display version information
RUN composer --version
",RobLoach/docker-composer,master/php5-alpine/Dockerfile
14d8a9fc9f7651699f2afb3d2d33e4d86864092a,571,"FROM ubuntu:latest

ENV package grafana-1.9.1
RUN apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y curl mini-httpd uuid-runtime

RUN curl -s http://grafanarel.s3.amazonaws.com/$package.tar.gz | tar -xz --strip-components=1 -C /srv
COPY config.js /srv/
RUN rm /srv/config.sample.js

WORKDIR /

LABEL \
  com.opentable.sous.repo_url=https://github.com/opentable/two.git \
  com.opentable.sous.repo_offset= \
  com.opentable.sous.version=1.1.1 \
  com.opentable.sous.revision=91495f1b1630084e301241100ecf2e775f6b672c

CMD mini-httpd -d /srv -p $PORT0 -D
",opentable/sous,lib/test/test-two/Dockerfile
cd19434a7a46d9ad896dafdb1cdc73c8fc6a76bd,1819,"# dockerhub - A repository for various dockerfiles
# For more information; http://github.com/cmfatih/dockerhub
#
# SlimerJS
#
# Test
#   sudo docker run fentas/slimerjs /usr/bin/slimerjs -v
#   sudo docker run fentas/slimerjs /usr/bin/casperjs | head -n 1
#   sudo docker run -v `pwd`:/mnt/test fentas/slimerjs /usr/bin/slimerjs /mnt/test/test.js

# VERSION 1.0.1

FROM ubuntu:wily

#MAINTAINER fentas <jan.guth.so>
MAINTAINER Joel Martin <github@martintribe.org>

# Env
ENV SLIMERJS_VERSION_F 0.9.6
ENV CASPERJS_VERSION_T master

# Commands
RUN \
  apt-get update && \
  apt-get upgrade -y && \
  apt-get install -y vim git wget xvfb libxrender-dev libasound2 libdbus-glib-1-2 libgtk2.0-0 bzip2

RUN \
  mkdir -p /srv/var && \
  wget -O /tmp/slimerjs-$SLIMERJS_VERSION_F-linux-x86_64.tar.bz2 http://download.slimerjs.org/releases/$SLIMERJS_VERSION_F/slimerjs-$SLIMERJS_VERSION_F-linux-x86_64.tar.bz2 && \
  tar -xjf /tmp/slimerjs-$SLIMERJS_VERSION_F-linux-x86_64.tar.bz2 -C /tmp && \
  rm -f /tmp/slimerjs-$SLIMERJS_VERSION_F-linux-x86_64.tar.bz2 && \
  mv /tmp/slimerjs-$SLIMERJS_VERSION_F/ /srv/var/slimerjs && \
  echo '#!/bin/bash\nxvfb-run /srv/var/slimerjs/slimerjs $*' > /srv/var/slimerjs/slimerjs.sh && \
  chmod 755 /srv/var/slimerjs/slimerjs.sh && \
  ln -s /srv/var/slimerjs/slimerjs.sh /usr/bin/slimerjs

RUN \
  git clone https://github.com/n1k0/casperjs.git /srv/var/casperjs && \
  cd /srv/var/casperjs && \
  git checkout $CASPERJS_VERSION_T && \
  echo '#!/bin/bash\n/srv/var/casperjs/bin/casperjs --engine=slimerjs $*' >> /srv/var/casperjs/casperjs.sh && \
  chmod 755 /srv/var/casperjs/casperjs.sh && \
  ln -s /srv/var/casperjs/casperjs.sh /usr/bin/casperjs

RUN \
  apt-get install -y nodejs npm

RUN \
  apt-get autoremove -y && \
  apt-get clean all

# Default command
CMD [""/usr/bin/slimerjs""]
",kanaka/raft.js,test/Dockerfile
d7e6f049c13b69f12aeb9987f4243e50d8753ee5,1914,"FROM openshift/origin
MAINTAINER Aaron Weitekamp <aweiteka@redhat.com>

ADD install.sh run.sh uninstall.sh /container/bin/
ADD registry-console-template.yaml \
    registry-login-template.html \
    registry-newproject-template-shared.json \
    registry-newproject-template-unshared.json \
    /container/etc/origin/

LABEL name=""projectatomic/atomic-registry-quickstart"" \
      vendor=""Project Atomic"" \
      url=""https://projectatomic.io/registry"" \
      summary=""Quickstart image for Atomic Registry"" \
      description=""This is a quickstart image to install Atomic Registry on a single host. It is an open source enterprise registry solution based on the Origin project featuring single sign-on (SSO) user experience, a robust web interface and advanced role-based access control (RBAC)."" \
      INSTALL='docker run -i --rm \
                --privileged --net=host \
                -v /var/run:/var/run:rw \
                -v /sys:/sys \
                -v /etc/localtime:/etc/localtime:ro \
                -v /var/lib/docker:/var/lib/docker:rw \
                -v /var/lib/origin/:/var/lib/origin/ \
                -v /etc/origin/:/etc/origin/ \
                -v /:/host \
                -e KUBECONFIG=/etc/origin/master/admin.kubeconfig \
                --entrypoint /container/bin/install.sh \
                $IMAGE' \
      RUN='docker run -i --rm --privileged \
                --net=host \
                -v /:/host \
                -v /var/lib/docker:/var/lib/docker:rw \
                -v /etc/origin:/etc/origin \
                -v /var/lib/registry:/var/lib/registry \
                -e KUBECONFIG=/etc/origin/master/admin.kubeconfig \
                --entrypoint /container/bin/run.sh \
                $IMAGE' \
      UNINSTALL='docker run -i --rm --privileged \
                -v /:/host \
                --entrypoint /container/bin/uninstall.sh \
                $IMAGE'
",openshift/origin,examples/atomic-registry/Dockerfile
492bf9d8f977e25c395f9eecbb216c375d93923f,4135,"FROM php:7-fpm

RUN apt-get update \
    && apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng12-dev \
        libxml2-dev \
        libsasl2-dev \
        libbz2-dev \
        build-essential \
        wget \
        git \
        gettext \
        mysql-client libmysqlclient-dev \
        postgresql-client libpq-dev \
        sqlite3 libsqlite3-dev

# composer
RUN curl -sS https://getcomposer.org/installer | php
RUN mv composer.phar /usr/bin/composer

# psysh console php
RUN wget psysh.org/psysh
RUN chmod +x psysh
RUN mv ./psysh /usr/bin/psysh

# phpunit
RUN wget https://phar.phpunit.de/phpunit.phar
RUN chmod +x phpunit.phar
RUN mv phpunit.phar /usr/local/bin/phpunit

# symfony cli
RUN curl -LsS http://symfony.com/installer -o /usr/local/bin/symfony
RUN chmod a+x /usr/local/bin/symfony

# entrypoint file
COPY phpfpm-foreground /usr/local/bin/
RUN chmod +x /usr/local/bin/phpfpm-foreground

# Memcache
RUN yes '' | pecl install -f memcache
RUN echo ""extension=memcache.so"" >> /usr/local/etc/php/conf.d/memcache.ini

# Memcached
RUN wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz
RUN tar xzf libmemcached-1.0.18.tar.gz
RUN ./libmemcached-1.0.18/configure --enable-sasl
RUN make install
RUN yes '' | pecl install -f memcached
RUN echo ""extension=memcached.so"" >> /usr/local/etc/php/conf.d/memcached.ini

# zendopcache
RUN yes '' | pecl install -f zendopcache-7.0.2

# APCu-4.0.10
RUN yes '' | pecl install -f apcu
RUN echo ""extension=apcu.so"" >> /usr/local/etc/php/conf.d/apcu.ini
RUN yes '' | pecl install -f APCu-4.0.10

# xdebug
RUN yes '' | pecl install -f xdebug
RUN echo "";zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20121212/xdebug.so \n\
xdebug.remote_enable=1 \n\
xdebug.remote_handler=dbgp \n\
xdebug.remote_autostart=0 \n\
xdebug.remote_connect_back=0 \n\
xdebug.remote_log=\""/var/log/xdebug.log\"""" >> /usr/local/etc/php/conf.d/xdebug.ini

# resolve impact xdebug in composer https://getcomposer.org/doc/articles/troubleshooting.md#xdebug-impact-on-composer 
RUN echo ""# Load xdebug Zend extension with php command"" >> ~/.bashrc
RUN echo ""alias php='php -dzend_extension=xdebug.so'""  >> ~/.bashrc
RUN echo ""# PHPUnit needs xdebug for coverage. In this case, just make an alias with php command prefix.""  >> ~/.bashrc
RUN echo ""alias phpunit='php $(which phpunit)'""  >> ~/.bashrc

RUN echo "";;;;;;;;;;;;;;;;;;; ; Module Settings ; ;;;;;;;;;;;;;;;;;;; \n\
[Date] \n\
; Defines the default timezone used by the date functions \n\
; http://www.php.net/manual/en/datetime.configuration.php#ini.date.timezone \n\
date.timezone = America/Sao_Paulo \n"" >> /usr/local/etc/php/conf.d/datetimezone.ini

# install php extension 
RUN docker-php-ext-install iconv
RUN docker-php-ext-install mcrypt
RUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
RUN docker-php-ext-install gd
RUN docker-php-ext-install zip
RUN docker-php-ext-install pdo
RUN docker-php-ext-install pdo_mysql
RUN docker-php-ext-install soap
RUN docker-php-ext-install shmop
RUN docker-php-ext-install sockets
RUN docker-php-ext-install sysvmsg
RUN docker-php-ext-install sysvsem
RUN docker-php-ext-install sysvshm
RUN docker-php-ext-install pcntl
RUN docker-php-ext-install mbstring
RUN docker-php-ext-install gettext
RUN docker-php-ext-install exif
RUN docker-php-ext-install dba
RUN docker-php-ext-install bcmath
RUN docker-php-ext-install calendar
RUN docker-php-ext-install bz2
RUN docker-php-ext-configure wddx
RUN docker-php-ext-install wddx
RUN docker-php-ext-install mysqli
RUN docker-php-ext-install pgsql
RUN docker-php-ext-install pdo_pgsql
RUN docker-php-ext-install pdo_sqlite
RUN docker-php-ext-install opcache

# mongo
RUN yes '' | pecl install -f mongo
RUN echo ""extension=mongo.so"" >> /usr/local/etc/php/conf.d/mongo.ini

# mongodb
RUN yes '' | pecl install -f mongodb
RUN echo ""extension=mongodb.so"" >> /usr/local/etc/php/conf.d/mongodb.ini

RUN rm -rf /var/lib/apt/lists/*

WORKDIR /var/www/html

EXPOSE 9004
EXPOSE 9000

ENTRYPOINT [""/usr/local/bin/phpfpm-foreground""]",rtancman/docker-symfony,php-7/Dockerfile
a3d90dd70ad5fdd63c7307244b2f8c8636aad21e,1332,"#################################################################
# Dockerfile
#
# Version:          2
# Software:         SAINTq
# Software Version: 0.0.2
# Description:      assigning confidence scores to protein-protein interactions based on quantitative proteomics
# Website:          http://saint-apms.sourceforge.net/Main.html
# Tags:             Proteomics
# Provides:         SAINTq 0.0.2
# Base Image:       biodckr/biodocker:latest
# Build Cmd:        docker build --rm -t biodckr/saintq 0.0.2/.
# Pull Cmd:         docker pull biodckr/saintq
# Run Cmd:          docker run --rm biodckr/saintq saintq
#################################################################

# Set the base image to biodckr/biodocker
FROM biodckr/biodocker:latest

################## BEGIN INSTALLATION ######################

USER biodocker

RUN ZIP=saintq.zip && \
  wget https://github.com/BioDocker/software-archive/releases/download/SAINTq/$ZIP -O /tmp/$ZIP && \
  unzip /tmp/$ZIP -d /home/biodocker/bin/SAINT/ && \
  chmod -R 755 /home/biodocker/bin/SAINT/* && \
  rm /tmp/$ZIP

ENV PATH /home/biodocker/bin/SAINT:$PATH

WORKDIR /data/

##################### INSTALLATION END #####################

# File Author / Maintainer
MAINTAINER Felipe da Veiga Leprevost <felipe@leprevost.com.br>
# Modified by Felipe da Veiga Leprevost 01-26-2016
",BioDocker/containers,saintq/0.0.2/Dockerfile
b0e9145f20ff7431a4660f909b13958394e11015,287,"FROM projectatomic/atomicapp:0.3.0

MAINTAINER Your Name <email@example.com>

LABEL io.projectatomic.nulecule.specversion 0.0.2
LABEL io.projectatomic.nulecule.providers = ""provider1,provider2""

ADD /Nulecule /Dockerfile /application-entity/
ADD /artifacts /application-entity/artifacts
",projectatomic/nulecule,spec/examples/template/Dockerfile
af1c0fca2d4c4749bb5d75474aea4c230b55feb3,202,"FROM selenium/standalone-firefox

USER root
RUN apt-get update && apt-get install -y redis-tools

WORKDIR /reg

ADD register.sh /reg/

RUN chmod +x /reg/register.sh

USER seluser

CMD /reg/register.sh

",ikreymer/browsertrix,browser-firefox/Dockerfile
201552e563ccc43d9bb477692ed529716ad25b26,1299,"# Dockerfile for building Ansible image for Ubuntu 16.04 (Xenial), with as few additional software as possible.
#
# @see https://launchpad.net/~ansible/+archive/ubuntu/ansible
#
# Version  1.0
#


# pull base image
FROM ubuntu:16.04

MAINTAINER William Yeh <william.pjyeh@gmail.com>


RUN echo ""===> Adding Ansible's PPA...""  && \
    echo ""deb http://ppa.launchpad.net/ansible/ansible/ubuntu xenial main"" | tee /etc/apt/sources.list.d/ansible.list           && \
    echo ""deb-src http://ppa.launchpad.net/ansible/ansible/ubuntu xenial main"" | tee -a /etc/apt/sources.list.d/ansible.list    && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7BB9C367    && \
    DEBIAN_FRONTEND=noninteractive  apt-get update  && \
    \
    \
    echo ""===> Installing Ansible...""  && \
    apt-get install -y ansible  && \
    \
    \
    echo ""===> Installing handy tools (not absolutely required)...""  && \
    apt-get install -y sshpass openssh-client  && \
    \
    \
    echo ""===> Removing Ansible PPA...""  && \
    rm -rf /var/lib/apt/lists/*  /etc/apt/sources.list.d/ansible.list  && \
    \
    \
    echo ""===> Adding hosts for convenience...""  && \
    echo 'localhost' > /etc/ansible/hosts


# default command: display Ansible version
CMD [ ""ansible-playbook"", ""--version"" ]
",William-Yeh/docker-ansible,ubuntu16.04/Dockerfile
d11ea5634e77d3d3dc29bcf29839881ecec2746f,102,"FROM unicon/shibboleth-idp:latest

MAINTAINER Unicon, Inc.

COPY shibboleth-idp/ /opt/shibboleth-idp/
",UniconLabs/dockerized-idp-testbed,idp/Dockerfile
3e976bb427d3ff88e17051eb68a57cfb929a1e68,407,"FROM bofm/oracle12c:installed
MAINTAINER bofm

RUN mkdir /data && chmod 777 /data
COPY db_template.dbt /tmp/
COPY colorecho /bin/
COPY entrypoint_oracle.sh /bin/
COPY create_database.sh ora_env /tmp/
RUN chmod +x /bin/entrypoint_oracle.sh /tmp/create_database.sh /tmp/ora_env /bin/colorecho
ENV PATH=$PATH:/usr/bin:/usr/local/bin
EXPOSE 1521
USER oracle
ENTRYPOINT [""entrypoint_oracle.sh""]
CMD [""database""]
",bofm/docker-oracle12c,step2/Dockerfile
602b942ffafe0126561dc345e6373f38b9a5c524,1302,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php:ubuntu-16.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/base-app:ubuntu-16.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm

COPY conf/ /opt/docker/

# Install php environment
RUN /usr/local/bin/apt-install \
        # Install tools
        imagemagick \
        graphicsmagick \
        # Install php (cli/fpm)
        php7.0-cli \
        php7.0-fpm \
        php7.0-json \
        php7.0-intl \
        php7.0-curl \
        php7.0-mysql \
        php7.0-mcrypt \
        php7.0-gd \
        php7.0-sqlite3 \
        php7.0-ldap \
        php7.0-opcache \
        php7.0-soap \
        php7.0-zip \
        php7.0-mbstring \
        php7.0-bcmath \
        php7.0-xmlrpc \
        php7.0-xsl \
        php7.0-bz2 \
        php-apcu \
        php-redis \
        php-memcached \
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-php \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 9000
",webdevops/Dockerfile,docker/php/ubuntu-16.04/Dockerfile
c9a2362feae8473aa654b4792f6cdb6011873e7a,2724,"FROM debian:jessie

# add our user and group first to make sure their IDs get assigned consistently
RUN groupadd -r kibana && useradd -r -m -g kibana kibana

RUN apt-get update && apt-get install -y \
		ca-certificates \
		wget \
	--no-install-recommends && rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
	&& wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
	&& wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
	&& gosu nobody true

# grab tini for signal processing and zombie killing
ENV TINI_VERSION v0.9.0
RUN set -x \
	&& wget -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini"" \
	&& wget -O /usr/local/bin/tini.asc ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini.asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 \
	&& gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/tini.asc \
	&& chmod +x /usr/local/bin/tini \
	&& tini -h

# https://www.elastic.co/guide/en/kibana/4.4/setup.html#kibana-apt
# https://packages.elasticsearch.org/GPG-KEY-elasticsearch
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 46095ACC8548582C1A2699A9D27D666CD88E42B4

ENV KIBANA_MAJOR 5.0
ENV KIBANA_VERSION 5.0.0-alpha3

#RUN echo ""deb http://packages.elastic.co/kibana/${KIBANA_MAJOR}/debian stable main"" > /etc/apt/sources.list.d/kibana.list
RUN echo 'deb http://packages.elastic.co/kibana/5.0.0-alpha/debian stable main' > /etc/apt/sources.list.d/kibana.list
# TODO figure out what's going on here and what it'll settle to for 5.0 GA

RUN set -x \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends kibana=$KIBANA_VERSION \
	&& chown -R kibana:kibana /opt/kibana \
	&& rm -rf /var/lib/apt/lists/* \
	\
# ensure the default configuration is useful when using --link
	&& sed -ri ""s!^(\#\s*)?(elasticsearch\.url:).*!\2 'http://elasticsearch:9200'!"" /opt/kibana/config/kibana.yml \
	&& grep -q 'elasticsearch:9200' /opt/kibana/config/kibana.yml

ENV PATH /opt/kibana/bin:$PATH

COPY docker-entrypoint.sh /

EXPOSE 5601
ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""kibana""]
",docker-library/kibana,5.0/Dockerfile
a66ecfb109e92e645a811c623e96bf71f51de2d4,405,"FROM ubuntu:16.04

MAINTAINER Scott Hansen <firecat4153@gmail.com>

RUN echo ""deb http://archive.ubuntu.com/ubuntu/ xenial multiverse"" >> /etc/apt/sources.list
RUN apt-get -q update && \
    apt-get install -qy --force-yes \
    handbrake-cli \
    libav-tools \
    mediainfo \
    mkvtoolnix \
    par2 \
    ranger \
    rsync \
    unrar && \
    rm -rf /var/lib/apt/lists/*

ENTRYPOINT [""/bin/bash""]
",firecat53/dockerfiles,media_tools/Dockerfile
b12bc014b1cc265cb6c1cb35ea78bf166c4a60cf,63,"FROM grpc/php:0.11-onbuild

CMD [""apache2ctl"", ""-DFOREGROUND""]
",grpc/grpc-docker-library,0.11/php/sample_app/Dockerfile
d23e0e67fd4f9fffb206264b94d54b296c0ac448,92,"FROM busybox
ENV QEMU_BIN_DIR=/usr/bin
ADD ./register.sh /register
ENTRYPOINT [""/register""]
",multiarch/qemu-user-static,register/Dockerfile
4e9f6e3ded7310deae72a98a097a639f7272e7c4,705,"# brunoric/docker-hhvm:deb
FROM ubuntu:trusty
MAINTAINER brunoric <brunoric@gmail.com>

ARG HHVM_VERSION=hhvm

# Installing packages
RUN apt-get update && apt-get upgrade -y
RUN apt-get -y install software-properties-common wget supervisor
RUN apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0x5a16e7281be7a449
RUN add-apt-repository ""deb http://dl.hhvm.com/ubuntu $(lsb_release -sc) main""
RUN apt-get update
RUN apt-get -y install ${HHVM_VERSION}
RUN apt-get clean && apt-get autoremove -y

# Scripts
ADD supervisor-config/ /etc/supervisor/conf.d/
ADD scripts/ /scripts/
RUN chmod 755 /scripts/*.sh

# Exposing HHVM-FastCGI port
EXPOSE 9000

# Default command
CMD [""/scripts/start.sh""]
",brunoric/docker-hhvm,deb/Dockerfile
9de6b90dbf8b8b65690ffe27d78a57f9c7cf1112,461,"# do not get FROM :onbuild because, this is just a base image of
# node and node-inspector. Not intended to be an image holding application files
FROM node:4

RUN npm install -g node-inspector

# setup the workdir
WORKDIR /opt/app/node
RUN cd /opt/app/node

# the node-inspector web host port
EXPOSE 8080

ENTRYPOINT [""node-debug"", ""--web-host"", ""0.0.0.0"", ""--cli"", ""true""]

# These are default parameters which can be overridden at run time
CMD [""./index.js""]
",glennschler/docker-debugnode,nodejs-inspector/v4/Dockerfile
72c822fc212a7cdf479ac10d1f5d6d23d16ecb12,1877,"# From https://github.com/phusion/baseimage
# baseimage image version 0.9.17
FROM phusion/baseimage:0.9.17
MAINTAINER PRX <sysadmin@prx.org>

# Set correct environment variables.
ENV HOME /root
ENV RAILS_ENV production

# Use baseimage-docker's init process.
CMD [""/sbin/my_init""]


### Prepare

# add scripts
RUN mkdir /fixer_scripts
ADD ./scripts/* /fixer_scripts/

# add the new user
RUN /fixer_scripts/appuser.sh

# add ruby repo
RUN apt-get install software-properties-common
RUN apt-add-repository ppa:brightbox/ruby-ng

# basics
RUN apt-get update -qq && apt-get install -y build-essential

# git
RUN apt-get install -y git


### Install Ruby

# ruby 2.2
RUN fixer_scripts/ruby2.2.sh

# nokogiri dependency
RUN apt-get install -y libxml2-dev libxslt1-dev

# redis
RUN apt-get install -y redis-tools

# postgres
RUN apt-get install -y libpq-dev

## For all kinds of stuff.
RUN apt-get install -y zlib1g-dev

# libsndfile for ruby_audio gem (waveformjson depends on it)
RUN apt-get install -y libsndfile1-dev


### Install Media Apps

# media
RUN apt-get install -y imagemagick libsox-fmt-all lame mp3val sox madplay twolame flac

# install ffmpeg
RUN /fixer_scripts/ffmpeg.sh

# js runtime
RUN apt-get install -y nodejs


### Clean

# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


### Deploy Fixer

# application home
ENV APP_HOME /home/app/webapp
RUN mkdir $APP_HOME
RUN chown -R app:app $APP_HOME
WORKDIR $APP_HOME
ADD Gemfile $APP_HOME/
ADD Gemfile.lock $APP_HOME/
RUN sudo -u app bundle config --local build.ruby-audio --with-cflags=-Wno-error=format-security
RUN sudo -u app bundle install --deployment --without development test

ADD . $APP_HOME
RUN chown -R app:app $APP_HOME

# add runit for the worker process
RUN mkdir /etc/service/worker
ADD worker.sh /etc/service/worker/run
RUN chmod +x /etc/service/worker/run
",PRX/fixer.prx.org,container/images/worker/Dockerfile
09f244ea05a2ed6a6bf1e6ae34ca558c5d4496e8,30,"FROM haproxy:1.5

COPY root /
",micromdm/micromdm,.docker/haproxy/Dockerfile
e30ba88719884705f4ae8473c1c46f2c417541e0,323,"FROM ubuntu:trusty
MAINTAINER edxops 
ENV ANSIBLE_REPO=""https://github.com/edx/ansible""
ENV CONFIGURATION_REPO=""https://github.com/edx/configuration.git""
ENV CONFIGURATION_VERSION=""master""

ADD util/install/ansible-bootstrap.sh /tmp/ansible-bootstrap.sh
RUN chmod +x /tmp/ansible-bootstrap.sh
RUN /tmp/ansible-bootstrap.sh
",edx/configuration,docker/build/trusty-common/Dockerfile
f85f0a80d3ad956fbd366bc73b88ef07e12e918e,33,"FROM scratch

ADD loader /loader
",kubernetes/contrib,scale-demo/vegeta/Dockerfile
dac609dcc9edc96a70794b5ce8723afe6e719031,405,"#
# This is the base image from which all OpenShift Origin images inherit. Only packages
# common to all downstream images should be here.
#
# The standard name for this image is openshift/origin-base
#
FROM centos:centos7

# components from EPEL must be installed in a separate yum install step
RUN yum install -y git tar wget socat hostname sysvinit-tools util-linux epel-release && \
    yum clean all
",projectatomic/atomic-enterprise,images/base/Dockerfile
c53af472ee33cffcfe482a0779ee055b4f4bf893,245,"FROM daocloud.io/library/java:8
MAINTAINER sxt i_sxt@3songhu.com
VOLUME /tmp
ADD hystrix-dashboard-1.0.0-SNAPSHOT.jar app.jar
RUN bash -c ""touch app.jar""
EXPOSE 7979
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]",zhuchuangang/spring-cloud-genisys,hystrix-dashboard/src/main/docker/Dockerfile
6df8a36a83bc7ec3569c57cd95fefa06b9629c04,745,"FROM tomcat:jre8
MAINTAINER Jason Rivard


# setup environment
RUN mkdir /config ; mkdir /appliance
ENV JAVA_HOME /usr
ENV PWM_APPLICATIONPATH /config
ENV PWM_APPLICATIONFLAGS Appliance,ManageHttps

VOLUME /config
EXPOSE 8443

RUN mkdir /usr/local/pwm

# clear tomcat webapps directory
RUN rm -rf /usr/local/tomcat/webapps/* ; mkdir /usr/local/tomcat/webapps/ROOT

# copy war
COPY pwm.war /appliance/pwm.war

# copy scripts
COPY startup.sh /appliance/startup.sh
COPY shell.sh /appliance/shell.sh

COPY ROOT-index.jsp /usr/local/tomcat/webapps/ROOT/index.jsp
COPY server.xml.source /appliance/server.xml.source
RUN chmod a+x /appliance/startup.sh; chmod a+x /appliance/shell.sh

VOLUME /config
EXPOSE 8443

WORKDIR /appliance
CMD ./startup.sh



",pwm-project/pwm,supplemental/docker/Dockerfile
b761172a44871612e23a68aaa39324f537f175c7,2837,"FROM debian:sid

MAINTAINER Martin Rumanek <martin@rumanek.cz>

ENV REFRESHED_AT 2015-07-14

## install packages
RUN apt-get -y  update && apt-get -y install unzip curl libtiff-tools imagemagick sox ffmpeg libsox-fmt-mp3 

# run tomcat
RUN curl -sL --no-verbose https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.26/bin/apache-tomcat-8.0.26.tar.gz -o /tmp/tomcat.tar.gz && \
    curl -sL --no-verbose http://ftp-devel.mzk.cz/jre/jdk-7u75-linux-x64.tar.gz -o /tmp/java.tar.gz
RUN mkdir -p /usr/local/java
ENV JAVA_HOME /usr/local/java/jdk1.7.0_75
ENV CATALINA_HOME /usr/local/tomcat
RUN tar xzf /tmp/java.tar.gz --directory=/usr/local/java

RUN tar xzf /tmp/tomcat.tar.gz --directory=/usr/local/ && mv /usr/local/apache-tomcat-* /usr/local/tomcat
ENV PATH  $CATALINA_HOME/bin:$JAVA_HOME/bin:$PATH


RUN curl -sL --no-verbose https://github.com/moravianlibrary/MEditor/archive/master.zip -o /tmp/meditor.zip 
RUN curl -sL  http://ftp-devel.mzk.cz/meditor/updateGwtp/meditor.war -o $CATALINA_HOME/webapps/meditor.war
RUN curl -sL https://jdbc.postgresql.org/download/postgresql-9.4-1201.jdbc41.jar -o $CATALINA_HOME/lib/postgresql-9.4-1201.jdbc41.jar
RUN unzip /tmp/meditor.zip -d /tmp/meditor/

#in archive is duplicated adore-djatoka-1.1 (so overwrite)
RUN unzip -o /tmp/meditor/MEditor-master/resources/djatoka/dist/djatoka.war -d $CATALINA_HOME/webapps/djatoka


RUN mkdir -p /root/.meditor

RUN mv /tmp/meditor/MEditor-master/resources/djatoka /root/.meditor/djatoka
RUN mv /tmp/meditor/MEditor-master/resources/xml /root/.meditor/xml
RUN mv /tmp/meditor/MEditor-master/resources/convertAudio /root/.meditor/convertAudio
ADD djatoka.properties $CATALINA_HOME/webapps/djatoka/WEB-INF/classes/djatoka.properties
ADD log4j.properties $CATALINA_HOME/webapps/djatoka/WEB-INF/classes/log4j.properties

ENV DJATOKA_HOME /root/.meditor/djatoka
ENV LIBPATH $DJATOKA_HOME/lib
ENV LD_LIBRARY_PATH $LIBPATH/Linux-x86-64
ENV KAKADU_HOME $DJATOKA_HOME/bin/Linux-x86-64
ENV KAKADU_LIBRARY_PATH -DLD_LIBRARY_PATH=$LIBPATH/Linux-x86-64
ENV JAVA_OPTS -Dfile.encoding=UTF8 -Djava.awt.headless=true -Dfile.encoding=UTF8 -XX:MaxPermSize=256m -Xms1024m -Xmx3072m -Dkakadu.home=$KAKADU_HOME -Djava.library.path=$LIBPATH/Linux-x86-64 $KAKADU_LIBRARY_PATH

#TLS
RUN keytool -genkey -alias tomcat  -dname ""CN=localhost, OU=mzk, S=cz, C=cz"" -keyalg RSA -storepass somekey -keypass somekey
ADD rewrite.config $CATALINA_HOME/conf/Catalina/localhost/
ADD server.xml $CATALINA_HOME/conf/
ADD tomcat-users.xml /tmp/tomcat-users.xml

# want empty properties configuration
RUN touch /root/.meditor/configuration.properties
ADD ldap.properties /root/.meditor/ldap.properties

EXPOSE 8080
EXPOSE 8843

ADD docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""catalina.sh"", ""run""]

# default conf
ENV hostanme=localhost
ENV inputQueue=/data/meditor/import

",moravianlibrary/MEditor,dockerfile/meditor-dev/Dockerfile
ccb07e60d42567dd34c594b935ed8ffd9771e336,1126,"# Start with CUDA Torch dependencies
FROM kaixhin/cuda-torch-deps:7.0
MAINTAINER Kai Arulkumaran <design@kaixhin.com>

# Run Torch7 installation scripts
RUN cd /root/torch && \
  ./install.sh

# Export environment variables manually
ENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua'
ENV LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so'
ENV PATH=/root/torch/install/bin:$PATH
ENV LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH
ENV DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH
ENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH

# Install cudnn manually as Torch opts for latest version
RUN luarocks install https://raw.githubusercontent.com/soumith/cudnn.torch/R4/cudnn-scm-1.rockspec

# Set ~/torch as working directory
WORKDIR /root/torch
",Kaixhin/dockerfiles,cuda-torch/cuda_v7.0/Dockerfile
3fcdb699267234be3d42955047a0cb8d187b47d4,182,"FROM cuda

RUN yum install -y \
        cuda-samples-$CUDA_PKG_VERSION && \
    rm -rf /var/cache/yum/*

WORKDIR /usr/local/cuda/samples/0_Simple/vectorAdd
RUN make

CMD ./vectorAdd
",NVIDIA/nvidia-docker,samples/centos/vectorAdd/Dockerfile
3a7dc9f103e70c3758cb908ec208c19cd6912a96,1249,"FROM ubuntu:14.04

####################
# Dependencies
####################

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        autoconf automake curl gcc liboauth-dev libssl-dev \
        libsasl2-dev libtool patch python ntp unzip \
        libboost-all-dev pkg-config git build-essential && \
     rm -rf /var/lib/apt/lists/*


####################
# Building Kudu
####################

ENV KUDU_VERSION=master \
    KUDU_HOME=/usr/local/kudu
ENV PATH=$PATH:$KUDU_HOME/thirdparty/installed/bin:$KUDU_HOME/build/latest

# Note: git and build-essential are required to build Kudu from source
RUN git clone https://github.com/cloudera/kudu.git $KUDU_HOME && \
    cd $KUDU_HOME && \
    ./thirdparty/build-if-necessary.sh && \
    cmake . && \
    make -j8 && \
    make install

VOLUME /data/kudu-master /data/kudu-tserver

####################
# PORTS
####################
#
# https://github.com/cloudera/kudu/blob/master/docs/installation.adoc
#
# TabletServer:
#   7050 = TabletServer RPC Port
#   8050 = TabletServer Web UI
# Kudu Master:
#   7051 = Master RPC Port
#   8051 = Master Web UI
#

ENV KUDU_OPTS=""""

COPY docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]
EXPOSE 8050 8051
CMD [""help""]
",bigdatafoundation/docker-kudu,kudu-src/Dockerfile
e5d822bdfd8d15ca403b13648f24040df40e460c,214,"FROM alpine
RUN echo ""http://dl-4.alpinelinux.org/alpine/edge/testing/"" >> /etc/apk/repositories && apk update && apk add strongswan bird iptables
COPY cgw.sh /usr/local/bin/
ENTRYPOINT [ ""/usr/local/bin/cgw.sh"" ]
",chandlerding/aws-cgw,cgw/Dockerfile
019412bf0a224671d184fa7d759babe7c6968a03,1253,"FROM relateiq/oracle-java7

# elasticsearch
RUN apt-get update
RUN apt-get install -y git curl build-essential make gcc wget

RUN wget --no-check-certificate https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.3.tar.gz
RUN tar -xf elasticsearch-0.90.3.tar.gz
RUN rm elasticsearch-0.90.3.tar.gz
RUN ln -sfn elasticsearch-0.90.3 elasticsearch
#RUN elasticsearch/bin/plugin -install elasticsearch/elasticsearch-mapper-attachments/1.8.0
#RUN elasticsearch/bin/plugin -i com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/1.7.0
RUN elasticsearch/bin/plugin -u https://github.com/downloads/jprante/elasticsearch-analysis-naturalsort/elasticsearch-analysis-naturalsort-1.0.0.zip -install elasticsearch-analysis-naturalsort
RUN elasticsearch/bin/plugin -install mobz/elasticsearch-head
RUN elasticsearch/bin/plugin -install lukas-vlcek/bigdesk
#RUN elasticsearch/bin/plugin -install elasticsearch/elasticsearch-cloud-aws/1.14.0

RUN mkdir /data
RUN mkdir /logs

VOLUME [ ""/logs"" ]
VOLUME [ ""/data"" ]

EXPOSE 9200
EXPOSE 9300

CMD [""elasticsearch/bin/elasticsearch"", ""-f"", ""-D"", ""es.path.logs=/logs"", ""-D"", ""es.path.data=/data"", ""-D"", ""es.network.publish_host=127.0.0.1"", ""-D"", ""es.cluster.name=search-localhost"" ]
",relateiq/docker_public,images/elasticsearch/Dockerfile
a4356de3051d56b277a3448a4cc47d3092d810eb,1998,"FROM phusion/baseimage:latest
MAINTAINER Stephen Packer <stephen.packer@wemonitorhome.com>
EXPOSE 80 443

ENV HOME=/root

CMD [""/sbin/my_init""]

# install php5.6 PPA, packages, upgrade security packages, and cleanup
#echo ""deb http://ppa.launchpad.net/ondrej/php-7.0/ubuntu trusty main"" > /etc/apt/sources.list.d/ondrej-php5-7-trusty.list \
RUN echo ""deb http://ppa.launchpad.net/ondrej/php5-5.6/ubuntu trusty main"" > /etc/apt/sources.list.d/ondrej-php5-5_6-trusty.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C \
    ; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes \
        nginx git vim curl openssl \
        php5-cli php5-fpm php5-curl php5-mcrypt php5-json php5-intl \
        php5-imap php5-xdebug php5-redis php5-mysql php5-mongo \
    && apt-get update && apt-get upgrade -y -o Dpkg::Options::=""--force-confold"" \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# install composer
RUN cd /root \
    && curl -sS https://getcomposer.org/installer | php \
    && mv composer.phar /usr/local/bin/composer \
    && mkdir -p /root/.composer


# install yii2 global dependency
RUN cd /tmp && composer global require ""fxp/composer-asset-plugin:1.0.3""


# move files into their respective places
COPY build /root/build/
RUN    mkdir -p /etc/service/php-fpm /etc/service/nginx \
    && mv /root/build/php-fpm.service /etc/service/php-fpm/run \
    && chmod 0755 /etc/service/php-fpm/run \
    && mv /root/build/nginx.service /etc/service/nginx/run \
    && chmod 0755 /etc/service/nginx/run \
    && mv /root/build/git-clone.sh /etc/my_init.d/git-clone.sh \
    && chmod 0755 /etc/my_init.d/git-clone.sh \
    && echo ""extension=mcrypt.so""   > /etc/php5/cli/conf.d/20-mcrypt.ini \
    && echo ""extension=mcrypt.so""   > /etc/php5/fpm/conf.d/20-mcrypt.ini \
    && echo ""extension=imap.so""     > /etc/php5/cli/conf.d/20-imap.ini \
    && echo ""extension=imap.so""     > /etc/php5/fpm/conf.d/20-imap.ini

",stevepacker/docker-containers,php-nginx/Dockerfile
227ac214b5a62227c65e1eb9a74a4091092eebc3,2463,"FROM php:5.6-cli

MAINTAINER Leandro Silva <leandro@leandrosilva.info>

COPY ../../build/apt-install ../../build/docker-php-pecl-install /usr/local/bin/

# Include composer
RUN apt-install 
	git \
	zlib1g-dev \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng12-dev \
        libpq-dev \
        zlib1g-dev \
        libicu-dev \
        vim \
	libxml2-dev \
	libaio1 \
	unzip

ENV COMPOSER_HOME /root/composer
ENV PATH vendor/bin:$COMPOSER_HOME/vendor/bin:$PATH
RUN curl -sS https://getcomposer.org/installer | php -- \
      --install-dir=/usr/local/bin \
      --filename=composer
VOLUME /root/composer/cache

COPY ../../build/instantclient-*.zip /tmp/
RUN unzip /tmp/instantclient-basic-linux.x64-12.1.0.2.0.zip -d /home/ \
    && unzip /tmp/instantclient-sdk-linux.x64-12.1.0.2.0.zip -d /home/ \
    && mv /home/instantclient_12_1 /home/oracle \
    && ln -s /home/oracle/libclntsh.so.12.1 /home/oracle/libclntsh.so \
    && ln -s /home/oracle/libclntshcore.so.12.1 /home/oracle/libclntshcore.so \
    && ln -s /home/oracle/libocci.so.12.1 /home/oracle/libocci.so \
    && rm -rf /tmp/instantclient-*.zip
ENV ORACLE_HOME /home/oracle

# Install useful extensions
RUN docker-php-ext-install \
        opcache \
	ctype \
	dom \
	fileinfo \
        intl \
	json \
        mbstring \
        mcrypt \
        mysqli \
	pcntl \
	pdo \
        pdo_mysql \
        pdo_pgsql \
	phar \
	simplexml \
	zip \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install gd \
    && docker-php-ext-configure oci8 --with-oci8=instantclient,/home/oracle \
    && docker-php-ext-install oci8 \
    && docker-php-pecl-install apcu \
    && docker-php-pecl-install imagick

RUN printf '[Date]\ndate.timezone=UTC' > /usr/local/etc/php/conf.d/timezone.ini \
	&& echo ""phar.readonly = off"" > /usr/local/etc/php/conf.d/phar.ini

# Setup the Xdebug version to install
ENV XDEBUG_VERSION 2.4.0
ENV XDEBUG_MD5 a9bc9c6b9e8bc913fb1f7c6f6d19f6222d430414

# Install Xdebug
RUN set -x \
	&& curl -SL ""http://xdebug.org/files/xdebug-$XDEBUG_VERSION.tgz"" -o xdebug.tgz \
	&& echo ""$XDEBUG_MD5  xdebug.tgz"" | shasum -c - \
	&& mkdir -p /usr/src/xdebug \
	&& tar -xf xdebug.tgz -C /usr/src/xdebug --strip-components=1 \
	&& rm xdebug.* \
	&& cd /usr/src/xdebug \
	&& phpize \
	&& ./configure \
	&& make -j""$(nproc)"" \
	&& make install \
	&& make clean

RUN a2enmod rewrite

",Lansoweb/docker-php,5.6/cli/Dockerfile
2dff261b0d2e06093e069252f18c3aee6cdbcdfc,434,"# docker build -t classificationbot/bot-standalone:latest -f dockerfiles/bot-standalone/Dockerfile .
# docker push classificationbot/bot-standalone:latest
FROM classificationbot/deploy-base:latest

COPY ./requirements-bot.txt /tmp/
RUN pip install -r /tmp/requirements-bot.txt

RUN pip install supervisor
COPY etc/supervisord.conf /etc/supervisord.conf
COPY etc/supervisord /etc/supervisord

ENTRYPOINT [""/usr/local/bin/supervisord""]
",AntreasAntoniou/DeepClassificationBot,dockerfiles/bot-standalone/Dockerfile
b71947dd560ae40b260f72c5e2e21f5eca68a7ab,812,"FROM centos:centos6

MAINTAINER SoftwareCollections.org <sclorg@redhat.com>

RUN yum -y --setopt=tsflags=nodocs install https://www.softwarecollections.org/en/scls/rhscl/devtoolset-4/epel-6-x86_64/download/rhscl-devtoolset-4-epel-6-x86_64.noarch.rpm && \
    yum clean all

RUN yum install -y --setopt=tsflags=nodocs devtoolset-4-elfutils && yum clean all



ENV	BASH_ENV=/etc/profile.d/cont-env.sh


ADD ./enabledevtoolset-4.sh /usr/share/cont-layer/common/env/enabledevtoolset-4.sh
ADD ./usr /usr
ADD ./etc /etc
ADD ./root /root

ENV HOME /home/default
RUN     groupadd -r default -f -g 1001 && \
        useradd -u 1001 -r -g default -d ${HOME} -s /sbin/nologin \
                        -c ""Default Application User"" default

USER 1001

ENTRYPOINT [""/usr/bin/container-entrypoint""]

CMD [""container-usage""]

",sclorg/rhscl-dockerfiles,centos6.devtoolset-4-elfutils/Dockerfile
319540e7a1c4401de1602f05cb7785f73fed06db,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.4.17-1-x86_64.pkg.tar.xz /tmp/php-5.4.17-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.4.17-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.4.17/Dockerfile
f1a574e70e8e660edf00d8e51f3e20b1fc6574d9,339,"FROM alpine:3.3
RUN apk upgrade --update

ENV PKG_DIR     /pkgs
ENV TEST_SCRIPT /test_installation

COPY *.apk ""${PKG_DIR}/""
COPY test_installation ""${TEST_SCRIPT}""

# NOTE: OpenRC doesn't work in a container
CMD (apk add --allow-untrusted ""${PKG_DIR}""/*.apk ||:) && \
    (/usr/libexec/jobberd&) && \
    sleep 2 && \
    ""${TEST_SCRIPT}""",dshearer/jobber,platform_tests/alpine_3.3/Dockerfile
c66269cd312ec9dde29710474eb040c0be4c48df,159,"#Build: docker build -t <%=appName%>/nginx .
#Run: docker run -p 80:80 --name <%=appName%> -d <%=appName%>/nginx
FROM nginx
COPY dist/web /usr/share/nginx/html",Appverse/generator-appverse-html5,generators/runtime/templates/docker/Dockerfile
eb65ec3c8385c4b7c2b2e39700d471132d447dc1,229,"FROM ubuntu:12.04
MAINTAINER Phusion <info@phusion.nl>

ENV HOME /root
RUN mkdir /build
ADD . /build

RUN /build/prepare.sh && \
	/build/system_services.sh && \
	/build/utilities.sh && \
	/build/cleanup.sh

CMD [""/sbin/my_init""]
",olberger/baseimage-docker,image/Dockerfile
49f36175911d8210d50017f0fd8032002ca2573b,2109,"# Docker containers are supposedly made to run 1 service per container,.
# this is a dev container for testing nagios quickly - it runs all the
# services needed in one container. Do NOT USE THIS IN PRODUCTION.

# install nagios 4.0.8 on centos 7
FROM centos:centos7

# info
MAINTAINER szboardstretcher version: 0.1

# update container
RUN yum -y update
RUN yum -y install epel-release
RUN yum -y install gd gd-devel wget httpd php gcc make perl tar sendmail supervisor

# users and groups
RUN adduser nagios
RUN groupadd nagcmd
RUN usermod -a -G nagcmd nagios
RUN usermod -a -G nagios apache

# get archives

ADD http://downloads.sourceforge.net/project/nagios/nagios-4.x/nagios-4.0.8/nagios-4.0.8.tar.gz nagios-4.0.8.tar.gz
ADD http://www.nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz nagios-plugins-2.0.3.tar.gz

# install nagios
RUN tar xf nagios-4.0.8.tar.gz
RUN cd nagios-4.0.8 && ./configure --with-command-group=nagcmd
RUN cd nagios-4.0.8 && make all && make install && make install-init
RUN cd nagios-4.0.8 && make install-config && make install-commandmode && make install-webconf

# user/password = nagiosadmin/nagiosadmin
RUN echo ""nagiosadmin:M.t9dyxR3OZ3E"" > /usr/local/nagios/etc/htpasswd.users
RUN chown nagios:nagios /usr/local/nagios/etc/htpasswd.users

# install plugins
RUN tar xf nagios-plugins-2.0.3.tar.gz
RUN cd nagios-plugins-2.0.3 && ./configure --with-nagios-user=nagios --with-nagios-group=nagios
RUN cd nagios-plugins-2.0.3 && make && make install

# create initial config
RUN /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg

# some bug fixes
RUN touch /var/www/html/index.html
RUN chown nagios.nagcmd /usr/local/nagios/var/rw
RUN chmod g+rwx /usr/local/nagios/var/rw
RUN chmod g+s /usr/local/nagios/var/rw

# init bug fix
# RUN sed -i '/$NagiosBin -d $NagiosCfgFile/a (sleep 10; chmod 666 \/usr\/local\/nagios\/var\/rw\/nagios\.cmd) &' /etc/init.d/nagios

# remove gcc
RUN yum -y remove gcc

# port 80
EXPOSE 25 80

# supervisor configuration
ADD supervisord.conf /etc/supervisord.conf

# start up nagios, sendmail, apache
CMD [""/usr/bin/supervisord""]
",boardstretcher/docker-files,nagios-4.0.8_centos7/Dockerfile
6b52d38a14d5bcc0bdac4dcda75ba01dcb73a2af,659,"FROM rezzza/docker-node:6.1

MAINTAINER SÃ©bastien HOUZÃ <sebastien.houze@verylastroom.com>

EXPOSE 3000

RUN apk upgrade --update-cache \
    && apk add --virtual .build-app-deps \
        curl \
        bash \
        git \
        make \
        automake \
        autoconf \
        nasm \
        gcc \
        g++ \
        binutils-gold \
        libgcc \
        libstdc++ \
        python \
        libpng-dev \
        libpng \
        jpeg-dev \
    && npm config set spin=false \
    && npm config set loglevel=http \
    && npm install -g pnpm \
    && rm -rf \
        /usr/share/man \
        /tmp/* \
        /var/cache/apk/*

CMD [ ""node"" ]
",rezzza/docker-node,vendor/property_onboarding.karibbu/Dockerfile
abad89b648612be696a09df13716929004233319,275,"FROM ingenieux/alpine-java8-supervisord:jdk-8u60-b27

RUN mkdir /app /app/log
ADD . /app
RUN chmod 755 /app/bin/app.sh

ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf

CMD [ ""/usr/bin/supervisord"", ""-c"", ""/etc/supervisor/conf.d/supervisord.conf"" ]

EXPOSE 8080
",ingenieux/beanstalker,elasticbeanstalk-docker-dropwizard-webapp-archetype/src/main/resources/archetype-resources/src/main/config/Dockerfile
9efb929ecdfa6a2630a5e1231423c4fd52464426,620,"# This dockerfile utilizes components licensed by their respective owners/authors.
# Prior to utilizing this file or resulting images please review the respective licenses at: http://nginx.org/LICENSE

FROM windowsservercore

LABEL Description=""Nginx"" Vendor=Nginx"" Version=""1.0.13""

RUN powershell -Command \
	$ErrorActionPreference = 'Stop'; \
	Invoke-WebRequest -Method Get -Uri http://nginx.org/download/nginx-1.9.13.zip -OutFile c:\nginx-1.9.13.zip ; \
	Expand-Archive -Path c:\nginx-1.9.13.zip -DestinationPath c:\ ; \
	Remove-Item c:\nginx-1.9.13.zip -Force

WORKDIR /nginx-1.9.13

CMD [""/nginx-1.9.13/nginx.exe""]",Microsoft/Virtualization-Documentation,windows-container-samples/windowsservercore/nginx/Dockerfile
defcbf6dd1cf30b0e9f0be7d5a2a87c5bd184776,1227,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/rpm/amd64/generate.sh""!
#

FROM oraclelinux:6

RUN yum groupinstall -y ""Development Tools""
RUN yum install -y btrfs-progs-devel device-mapper-devel glibc-static  libselinux-devel libtool-ltdl-devel pkgconfig selinux-policy selinux-policy-devel sqlite-devel  tar git

RUN yum install -y yum-utils && curl -o /etc/yum.repos.d/public-yum-ol6.repo http://yum.oracle.com/public-yum-ol6.repo && yum-config-manager -q --enable ol6_UEKR4
RUN yum install -y kernel-uek-devel-4.1.12-32.el6uek

ENV GO_VERSION 1.5.4
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1

ENV DOCKER_BUILDTAGS selinux
ENV RUNC_BUILDTAGS selinux

ENV CGO_CPPFLAGS -D__EXPORTED_HEADERS__ \
                 -I/usr/src/kernels/4.1.12-32.el6uek.x86_64/arch/x86/include/generated/uapi \
                 -I/usr/src/kernels/4.1.12-32.el6uek.x86_64/arch/x86/include/uapi \
                 -I/usr/src/kernels/4.1.12-32.el6uek.x86_64/include/generated/uapi \
                 -I/usr/src/kernels/4.1.12-32.el6uek.x86_64/include/uapi \
                 -I/usr/src/kernels/4.1.12-32.el6uek.x86_64/include

",Microsoft/docker,contrib/builder/rpm/amd64/oraclelinux-6/Dockerfile
83e820e132f8c4ec90eecd3a8180a09ce7aca76e,143,"FROM        scratch
MAINTAINER  Andrey Sibiryov <me@kobology.ru>

COPY gorb-docker-link   /gorb-docker-link

ENTRYPOINT  [""/gorb-docker-link""]
",kobolog/gorb,gorb-docker-link/docker/Dockerfile
43f4007ea7e18f4693c084d9b433e08e5b9c7c70,1626,"FROM ubuntu:12.04

# much of this was gleaned from https://github.com/lxc/lxc/blob/lxc-0.8.0/templates/lxc-ubuntu.in
# and then heavily modified and hacked like crazy

# we're going to want this bad boy installed so we can connect :)
RUN apt-get update && apt-get install -y ssh

ADD init-fake.conf /etc/init/fake-container-events.conf

# undo some leet hax of the base image
RUN rm /usr/sbin/policy-rc.d; \
	rm /sbin/initctl; dpkg-divert --rename --remove /sbin/initctl

# generate a nice UTF-8 locale for our use
RUN locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

# remove some pointless services
RUN /usr/sbin/update-rc.d -f ondemand remove; \
	for f in \
		/etc/init/u*.conf \
		/etc/init/mounted-dev.conf \
		/etc/init/mounted-proc.conf \
		/etc/init/mounted-run.conf \
		/etc/init/mounted-tmp.conf \
		/etc/init/mounted-var.conf \
		/etc/init/hostname.conf \
		/etc/init/networking.conf \
		/etc/init/tty*.conf \
		/etc/init/plymouth*.conf \
		/etc/init/hwclock*.conf \
		/etc/init/module*.conf\
	; do \
		dpkg-divert --local --rename --add ""$f""; \
	done; \
	echo '# /lib/init/fstab: cleared out for bare-bones Docker' > /lib/init/fstab

# small fix for SSH in 13.10 (that's harmless everywhere else)
RUN sed -ri 's/^session\s+required\s+pam_loginuid.so$/session optional pam_loginuid.so/' /etc/pam.d/sshd

RUN sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config

# let Upstart know it's in a container
ENV container docker

# set a cheap, simple password for great convenience
RUN echo 'root:docker.io' | chpasswd

# we can has SSH
EXPOSE 22

# prepare for takeoff
CMD [""/sbin/init""]
",tianon/dockerfiles,sbin-init/ubuntu/upstart/12.04/Dockerfile
f6b16c149895ce875426010de0e2594528aa6d01,770,"FROM centos:centos7

RUN rpm --import http://repos.azulsystems.com/RPM-GPG-KEY-azulsystems
RUN curl -s -o /etc/yum.repos.d/zulu.repo http://repos.azulsystems.com/rhel/zulu.repo
RUN yum -y update
RUN yum -y install zulu-8-8.13.0.5-1
RUN curl -s -L -o /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x /usr/bin/jq

ARG SNAP_API_KEY
ARG SNAP_PIPELINE_COUNTER

RUN curl -L -u ${SNAP_API_KEY} https://api.snap-ci.com/project/servicosgovbr/portal-de-servicos/branch/master/pipelines/${SNAP_PIPELINE_COUNTER} | jq '.stages[].workers[].artifacts[].download_url' | grep rpm | xargs curl -o portal-de-servicos-latest.rpm -L -u ${SNAP_API_KEY} && yum install -y portal-de-servicos-latest.rpm

ADD run.sh /run.sh

EXPOSE 8080
CMD sh /run.sh
",servicosgovbr/docker,portal-de-servicos/Dockerfile
37b2793a7de1ebc70eb2317bcba86d05144dc2f1,1315,"# Dockerfile for building image that contains software stack provisioned by Ansible.
#
# USAGE:
#   $ docker build -t wordpress .
#   $ docker run -d -v $(pwd):/data wordpress
#
# Version  1.1
#


# pull base image
FROM williamyeh/ansible:ubuntu14.04-onbuild

MAINTAINER William Yeh <william.pjyeh@gmail.com>


#
# build phase
#


# fix policy-rc.d for Docker
# @see http://www.monblocnotes.com/node/2057
# @see http://askubuntu.com/a/365912
RUN sed -i -e 's/exit\s\s*101/exit 0/' /usr/sbin/policy-rc.d


# ==> Specify requirements filename;  default = ""requirements.yml""
#ENV REQUIREMENTS  requirements.yml

ENV PLAYBOOK setup.yml
RUN ansible-playbook-wrapper -vvv --extra-vars ""modify_hostname=false""

ENV PLAYBOOK init-wordpress.yml
#RUN ansible-playbook-wrapper -vvv --extra-vars `cat /tmp/WP_HOSTNAME`

EXPOSE 80


#
# test phase
#

RUN echo ""===> Installing curl for testing purpose...""  && \
    DEBIAN_FRONTEND=noninteractive  \
    apt-get install -y -f curl

VOLUME [ ""/data"" ]

CMD service mysql start       && \
    service php7.0-fpm start  && \
    service nginx start       && \
    IP=`head -n 1 /etc/hosts | sed 's/\t.*//'`                      && \
    ansible-playbook-wrapper -vvv --extra-vars `echo hostname=$IP`  && \
    #curl -v http://localhost/  > /data/result  && \
    tail -f /dev/null
",softarch-school/ansible-workshop,11-galaxy/test/Dockerfile
b4efd2646fa83f17bdf366458b3822ed3e2073b9,4058,"FROM ubuntu:14.04
MAINTAINER Oleksii Kliukin <oleksii.kliukin@zalando.de>

# Install curl, jq, vim, gdb, strace
RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && echo 'APT::Install-Recommends ""0"";' > /etc/apt/apt.conf.d/01norecommend \
    && echo 'APT::Install-Suggests ""0"";' >> /etc/apt/apt.conf.d/01norecommend \

    && apt-get upgrade -y \
    && apt-get install -y curl ca-certificates jq pv vim gdb strace supervisor stunnel \

    ## Make sure we have a en_US.UTF-8 locale available
    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \

    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Add PGDG repositories
RUN export DISTRIB_CODENAME=$(sed -n 's/DISTRIB_CODENAME=//p' /etc/lsb-release) \
    && echo ""deb http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main"" > /etc/apt/sources.list.d/pgdg.list \
    && echo ""deb-src http://apt.postgresql.org/pub/repos/apt/ ${DISTRIB_CODENAME}-pgdg main"" >> /etc/apt/sources.list.d/pgdg.list \
    && curl -s -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

# Install PostgreSQL
ENV PGVERSION=9.5 PGOLDVERSIONS=""9.4""
RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -y skytools3-ticker \
    && for version in ${PGOLDVERSIONS} ${PGVERSION}; do \
            # Install PostgreSQL binaries, contrib, pgq, plproxy, pgq and plpython
            apt-get install -y postgresql-${version} postgresql-${version}-dbg postgresql-client-${version} \
                        postgresql-contrib-${version} postgresql-${version}-plproxy postgresql-${version}-pgq3 \
                        postgresql-${version}-postgis postgresql-plpython3-${version} \
                        postgresql-plpython-${version} postgresql-${version}-plr \

            # Remove the default cluster, which Debian stupidly starts right after installation of the packages
            && pg_dropcluster --stop ${version} main; \
    done \

    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH=$PATH:/usr/lib/postgresql/${PGVERSION}/bin

# Install patroni, WAL-e and extensions
# We do this in one big step to reduce the Docker image size:
## 1 Install tools required to build
## 2 Build
## 3 Remove tools only required for build
ENV PATRONIVERSION=0.90
RUN export DEBIAN_FRONTEND=noninteractive \
    export BUILD_PACKAGES=""postgresql-server-dev-${PGVERSION} python-pip python-dev build-essential pgxnclient"" \
    export PGXN_EXTENSIONS=""quantile trimmed_aggregates"" \
    && apt-get update \
    && apt-get install -y \
            # Required for wal-e
            daemontools lzop \
            # Required for /usr/local/bin/patroni
            python python-pkg-resources \
            ${BUILD_PACKAGES} \
    && pip install pip --upgrade \
    && pip install --upgrade requests wal-e pystache patroni==$PATRONIVERSION \
    && for extension in ${PGXN_EXTENSIONS}; do pgxn install $extension; done \
    # Clean up
    && apt-get purge -y ${BUILD_PACKAGES} \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /root/.cache


# install etcdctl
ENV ETCDVERSION 2.3.3
RUN curl -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-amd64.tar.gz \
    | tar xz -C /bin --strip=1 --wildcards --no-anchored etcdctl

ENV PGHOME=/home/postgres
ENV PGDATA=$PGHOME/pgdata/data
ENV WALE_ENV_DIR=$PGHOME/etc/wal-e.d/env

# Set PGHOME as a login directory for the PostgreSQL user.
RUN usermod -d $PGHOME -m postgres

ADD scm-source.json configure_spilo.py launch.sh postgres_backup.sh patroni_wait.sh /
ADD supervisor.d /etc/supervisor/conf.d/
ADD stunnel.d /etc/stunnel
ADD pgq_ticker.ini $PGHOME
ADD motd /etc/
RUN echo ""source /etc/motd"" >> /root/.bashrc
RUN chmod 700 /postgres_*

ENV ETCD_DISCOVERY_DOMAIN=postgres.acid.example.com DEBUG=0 LC_ALL=en_US.utf-8

WORKDIR $PGHOME
EXPOSE 5432 8008
RUN chown -R postgres:postgres /postgres_* $PGHOME
CMD [""/bin/bash"", ""/launch.sh""]
",zalando/spilo,postgres-appliance/Dockerfile
b5a172035a934803d0a5e1f087e836bcfdf4626e,1213,"# Nginx Proxy that forwards requests into the appengine application.

FROM gcr.io/google_appengine/base

# Add the Cloud SDK distribution URI as a package source
# Import the Google Cloud public key
# Update and install the Cloud SDK

RUN apt-get -q update && \
    apt-get -y -q upgrade && \
    apt-get install -y -q curl && \
    echo ""deb http://packages.cloud.google.com/apt google-cloud-endpoints-jessie main"" \
        | tee /etc/apt/sources.list.d/google-cloud-endpoints.list && \
    curl --silent https://packages.cloud.google.com/apt/doc/apt-key.gpg \
        | apt-key add - && \
    apt-get update && \
    apt-get install -y endpoints-runtime && \
    apt-get clean && \
    rm /var/lib/apt/lists/*_*

RUN mkdir -p /var/lib/nginx/optional && \
    mkdir -p /var/lib/nginx/extra && \
    mkdir -p /var/lib/nginx/bin && \
    mkdir -p /var/lib/nginx/inc

ADD static.conf /var/lib/nginx/optional/static.conf
ADD start_nginx.sh /var/lib/nginx/bin/start_nginx.sh
ADD proxy_pass.inc /var/lib/nginx/inc/proxy_pass.inc
ADD nginx.logrotate /etc/logrotate.d/nginx

EXPOSE 8080
EXPOSE 8090

# to run: docker run --link gaeapp:gaeapp -p 8080:8080 --expose 8090

ENTRYPOINT [""/var/lib/nginx/bin/start_nginx.sh""]
",GoogleCloudPlatform/appengine-sidecars-docker,nginx_proxy/Dockerfile
f779d347b0a41b7e6d0ec685d57039a7fd0343b0,32,"FROM redis:2.8.21
EXPOSE ""6379""
",mozilla/ichnaea,docker/redis/Dockerfile
629c59aa9aaa096623e85e779761a038ec66df4e,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.5.20-1-x86_64.pkg.tar.xz /tmp/php-5.5.20-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.5.20-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.5.20/Dockerfile
0258f5159cc021cb89f662268ba823bb6d3da0bb,104,"FROM node:0.10

RUN mkdir app
ADD . /app/
WORKDIR /app/
RUN npm install
RUN npm install webpack@""1.4""


",erm0l0v/webpack-md5-hash,dockerfiles/n_0.10_w_1.4/Dockerfile
ff284a5b7de4d0e1c04ec408421adbfb6d644894,549,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_0.12/pool/main/n/nodejs/nodejs_0.12.9-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/node/0.12.9/Dockerfile
5f2d5492387fd63caaa624892f6e25ca580e37ac,959,"# docker file for testing APT installation from official download location

FROM ubuntu:16.04
MAINTAINER Jens Reimann <ctron@dentrassi.de>

# let debian install without prompts

ENV DEBIAN_FRONTEND noninteractive

# Refresh and install a few tools

RUN apt-get update ; apt-get -y install software-properties-common dpkg gdebi-core add-apt-key
RUN add-apt-repository ""deb http://archive.ubuntu.com/ubuntu/ xenial universe multiverse"" ; add-apt-repository ""deb http://archive.ubuntu.com/ubuntu/ xenial-updates universe multiverse""
RUN apt-get update ; apt-get -y install openjdk-8-jre-headless

# import key

RUN add-apt-key 320E6224

# add repository

RUN add-apt-repository ""deb http://download.eclipse.org/package-drone/milestone/0.13/ubuntu package-drone default""

# install

RUN apt-get update ; apt-get -y install org.eclipse.packagedrone.server

# Package drone is running on port 8080

EXPOSE 8080

CMD [""/usr/lib/package-drone-server/instance/server""]",eclipse/packagedrone,deploy/promote/test/ubuntu/Dockerfile
d3b16a97aac56195cf895106fca0de63eb3d12b1,88,"FROM elasticsearch:2.3

RUN /usr/share/elasticsearch/bin/plugin install delete-by-query
",StamusNetworks/Amsterdam,src/docker/elasticsearch/Dockerfile
291c241108645039d782199c20b7e3a35690c3ea,555,"FROM nodesource/precise-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.4.3-1nodesource1~precise1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/precise/node/4.4.3/Dockerfile
89b180268897df782adc3467a7bf63a840b977f1,1292,"FROM python:3.4

RUN apt-get update && apt-get install -y --no-install-recommends \
      postgresql-client \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /usr/src/app/
COPY requirements.txt /usr/src/app/
RUN pip install -r requirements.txt

ENV SQL_FUNCTIONS_FILE=/usr/src/app/functions.sql \
    SQL_GENERATED_FILE=/usr/src/app/gen.sql \
    SQL_TRIGGERS_FILE=/usr/src/app/triggers.sql \
    SQL_XYZ_EXTENT_FILE=/usr/src/app/xyz_extent.sql \
    SQL_INDIZES_FILE=/usr/src/app/indizes.sql \
    SQL_LAYERS_DIR=/usr/src/app/layers/ \
    SQL_SPLIT_POLYGON_FILE=/usr/src/app/landuse_split_polygon_table.sql
COPY . /usr/src/app

# Generate class functions
RUN ./generate_sql.py class classes/barrier_line.yml >> $SQL_GENERATED_FILE \
 && ./generate_sql.py class classes/landuse_overlay.yml >> $SQL_GENERATED_FILE \
 && ./generate_sql.py class classes/landuse.yml >> $SQL_GENERATED_FILE \
 && ./generate_sql.py class classes/road.yml >> $SQL_GENERATED_FILE \
 && ./generate_sql.py class classes/rail_station.yml >> $SQL_GENERATED_FILE \
 && ./generate_sql.py class classes/maki_label.yml >> $SQL_GENERATED_FILE

# Generate table functions
RUN ./generate_sql.py changed_tiles tables.yml >> $SQL_GENERATED_FILE \
 && ./generate_sql.py tables tables.yml >> $SQL_GENERATED_FILE

CMD [""./prepare.sh""]
",osm2vectortiles/osm2vectortiles,src/import-sql/Dockerfile
db0ca5401cdb997b78e8c678e3bb86cdd5c5c2cb,773,"FROM debian:jessie
MAINTAINER hi+burpui@ziirish.me

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y supervisor logrotate locales wget curl uthash-dev g++ make libssl-dev librsync-dev git cron autoconf automake libtool libz-dev libyajl-dev \
 && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 && locale-gen en_US.UTF-8 \
 && dpkg-reconfigure -f noninteractive locales \
 && echo ""Europe/Paris"" >/etc/timezone \
 && dpkg-reconfigure -f noninteractive tzdata \
 && rm -rf /var/lib/apt/lists/*

ADD assets/setup/ /app/setup/
ADD assets/config/ /app/setup/config/

ADD assets/init /app/init
RUN chmod 755 /app/init

RUN chmod 755 /app/setup/install
RUN /app/setup/install

VOLUME [""/srv/demo/files:/home""]

ENTRYPOINT [""/app/init""]
CMD [""app:start""]
",ziirish/burp-ui,docker/docker-cli2/Dockerfile
8fad66934768bb10d83b0fc2aac24c9eb7682ec4,624,"FROM alpine:3.4

RUN apk add --no-cache \
		ca-certificates \
		curl \
		openssl

ENV DOCKER_VERSION 1.12.0-rc2
ENV DOCKER_URL http://experimental.docker.com.s3.amazonaws.com/builds/Linux/x86_64/docker-1.12.0-rc2.tgz
ENV DOCKER_SHA256 fa4d7737b80fd5ac38940f5e582047e9032ab71148bcba2c059ed7b2e0d28545

RUN set -x \
	&& curl -fSL ""${DOCKER_URL}"" -o docker.tgz \
	&& echo ""${DOCKER_SHA256} *docker.tgz"" | sha256sum -c - \
	&& tar -xzvf docker.tgz \
	&& mv docker/* /usr/local/bin/ \
	&& rmdir docker \
	&& rm docker.tgz \
	&& docker -v

COPY docker-entrypoint.sh /usr/local/bin/

ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""sh""]
",tianon/dockerfiles,docker/experimental/Dockerfile
969a6f119fb3e4b29979b0db10a1fc12a8e85180,5144,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jre""                                    && \
    export JAVA_UPDATE=""74""                                      && \
    export JAVA_BUILD=""02""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u74/jre/slim/Dockerfile
6f17522443e34bc681816f76e0250e75a051323b,288,"FROM node:6
MAINTAINER ShiftForward <info@shiftforward.eu>

RUN mkdir -p /app
WORKDIR /app

ENV NODE_ENV production

ADD package.json /app/package.json
RUN npm install

ADD config /app/config
ADD src /app/src
ADD .babelrc /app/.babelrc

EXPOSE 8300 3000
ENTRYPOINT [""npm"", ""start"", ""--""]
",FoundersFounders/door-services,door-open-service/node-backend/Dockerfile
64dea8989014f6208c03a5af41bc28d52be43351,664,"FROM debian:squeeze

MAINTAINER  DBpedia Spotlight Team <dbp-spotlight-developers@lists.sourceforge.net>

RUN apt-get update && apt-get install -y \
    curl \
    openjdk-6-jre

ENV RELEASE_SERVER    spotlight.sztaki.hu
ENV RELEASE_FILENAME  dbpedia-spotlight-latest.jar
ENV LANGUAGE_MODEL    da.tar.gz	   


RUN mkdir -p /opt/spotlight && \
    cd /opt/spotlight && \
    curl -O ""http://$RELEASE_SERVER/downloads/$RELEASE_FILENAME"" && \
    curl -O ""http://$RELEASE_SERVER/downloads/latest_models/$LANGUAGE_MODEL"" && \
    tar xvf $LANGUAGE_MODEL  && \
    rm  $LANGUAGE_MODEL


ADD spotlight.sh /bin/spotlight.sh
RUN chmod +x /bin/spotlight.sh

EXPOSE 80

   
",sandroacoelho/spotlight-docker,v0.7/danish/Dockerfile
8b5f95df682e64510d618796c07bf756016aebf3,2201,"# Docker file inspired by 
## https://github.com/docker-library/buildpack-deps/blob/a0a59c61102e8b079d568db69368fb89421f75f2/sid/curl/Dockerfile
## https://github.com/jenkinsci/docker
## https://github.com/docker-library/java/blob/b4a3c296023e590e410f645ab83d3c11a30cf535/openjdk-8-jdk/Dockerfile
## https://github.com/zulu-openjdk/zulu-openjdk/blob/master/debian/8u45-8.7.0.5/Dockerfile
## https://github.com/zulu-openjdk/zulu-openjdk/blob/master/debian/8u66-8.11.0.1/Dockerfile

FROM debian:sid
MAINTAINER erik-dev@fjas.no

RUN echo ""export TERM=xtermc"" >> ~/.bashrc
# use norwegian debian mirror to speed up downloads
#RUN echo ""deb http://ftp.no.debian.org/debian/ sid main"" > /etc/apt/sources.list

RUN apt-get update && apt-get install -y --no-install-recommends \ 
	ca-certificates curl wget zip unzip bzip2 vim less procps \
	&& rm -rf /var/lib/apt/lists/*


RUN echo ""alias ll='ls -l --color=auto'"" >> /etc/bash.bashrc
RUN echo ""alias la='ls -la --color=auto'"" >> /etc/bash.bashrc

ENV LANG C.UTF-8

### Install JDK 
# see https://bugs.debian.org/775775
# and https://github.com/docker-library/java/issues/19#issuecomment-70546872
ENV CA_CERTIFICATES_JAVA_VERSION 20140324

# Pull Zulu OpenJDK binaries from official repository:
# Jenkins Docker image has a reference to /usr/lib/jvm/zulu-8-amd64/ in config.xml. Review if changing to different jdk.
# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0x219BD9C9
# RUN echo ""deb http://repos.azulsystems.com/debian stable main"" >> /etc/apt/sources.list.d/zulu.list
# RUN apt-get -qq update && apt-get -y install zulu-8=8.11.0.1 ca-certificates-java=""$CA_CERTIFICATES_JAVA_VERSION"" && rm -rf /var/lib/apt/lists/*
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0x219BD9C9
RUN echo 'deb http://repos.azulsystems.com/debian stable main' > /etc/apt/sources.list.d/zulu.list
RUN apt-get  update 
RUN apt-get -y install fontconfig-config
RUN apt-get -y install ucf
RUN apt-get -y install zulu-8
#=8.13.0.5 
#ca-certificates-java=""$CA_CERTIFICATES_JAVA_VERSION"" 
RUN rm -rf /var/lib/apt/lists/*

# see CA_CERTIFICATES_JAVA_VERSION notes above
#RUN /var/lib/dpkg/info/ca-certificates-java.postinst configure
",Cantara/maven-infrastructure,docker-baseimages/debian-sid-zulu-jdk8/Dockerfile
f8a1f018570a4878ca8a3258af022a85b4d7076e,1536,"#
# A wger installation under apache with WSGI
#
# Please consult the documentation for usage
# docker build --tag wger/apache .
# docker run -ti --name wger.apache --publish 8000:80 wger/apache
#
#

FROM wger/base

MAINTAINER Roland Geider <roland@geider.net>
EXPOSE 80

# Install dependencies
RUN apt-get install -y apache2 libapache2-mod-wsgi-py3

# Configure apache
RUN a2dissite 000-default.conf
ADD wger.conf /etc/apache2/sites-available/
RUN a2ensite wger

# Set up the application
USER wger
RUN git clone https://github.com/wger-project/wger.git /home/wger/src

WORKDIR /home/wger/src
RUN virtualenv --python python3 /home/wger/venv
RUN . /home/wger/venv/bin/activate \
    && pip install --upgrade pip \
    && pip install -r requirements.txt \
    && invoke create_settings \
        --settings-path /home/wger/src/settings.py \
        --database-path /home/wger/db/database.sqlite \
    && invoke bootstrap_wger \
        --settings-path /home/wger/src/settings.py \
        --no-start-server


# Change permissions of some files and folders so the apache process
# can access them.
RUN chmod o+w -R ~/db/ \
    && . /home/wger/venv/bin/activate \
    && mkdir ~/static \
    && mkdir ~/media \
    && chmod o+w ~/media \
    && sed -i ""/^MEDIA_ROOT/c\MEDIA_ROOT='\/home\/wger\/media'"" settings.py \
    && echo STATIC_ROOT=\'/home/wger/static\' >> settings.py \
    && mkdir /home/wger/src/components \
    && python manage.py collectstatic --noinput

USER root

ENTRYPOINT [""/usr/sbin/apache2ctl""]
CMD [""-D"", ""FOREGROUND""]",wger-project/wger,extras/docker/apache/Dockerfile
42dc3c9e671cc9ea97c2c204b937665ce8770332,194,"FROM iron/python:2

RUN apk update && apk upgrade

RUN apk add curl
RUN apk add python

RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python

# Clean APK cache
RUN rm -rf /var/cache/apk/*
",iron-io/dockers,python/python2/dev/Dockerfile
51e8934782f8e07229bac30505d4372d77b4d274,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.4.11-1-x86_64.pkg.tar.xz /tmp/php-5.4.11-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.4.11-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.4.11/Dockerfile
6609fdbae938f03fff307a2d77331d22753e07b6,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.4.13-1-x86_64.pkg.tar.xz /tmp/php-5.4.13-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.4.13-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.4.13/Dockerfile
724f2735cb5a9183f9f4f7701ef9d1f55f591f70,888,"FROM centos:centos7

MAINTAINER SoftwareCollections.org <sclorg@redhat.com>

RUN yum -y --setopt=tsflags=nodocs install https://www.softwarecollections.org/en/scls/rhscl/devtoolset-3/epel-7-x86_64/download/rhscl-devtoolset-3-epel-7-x86_64.noarch.rpm && \
    yum clean all

RUN yum install -y --setopt=tsflags=nodocs devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-gdb devtoolset-3-ide && yum clean all



ENV	BASH_ENV=/etc/profile.d/cont-env.sh


ADD ./enabledevtoolset-3.sh /usr/share/cont-layer/common/env/enabledevtoolset-3.sh
ADD ./usr /usr
ADD ./etc /etc
ADD ./root /root

ENV HOME /home/default
RUN     groupadd -r default -f -g 1001 && \
        useradd -u 1001 -r -g default -d ${HOME} -s /sbin/nologin \
                        -c ""Default Application User"" default

USER 1001

ENTRYPOINT [""/usr/bin/container-entrypoint""]

CMD [""container-usage""]

",sclorg/rhscl-dockerfiles,centos7.devtoolset-3-eclipse/Dockerfile
9c46f47a20ec9a6c5528253e076aad90e6fe7689,376,"FROM webratio/java:7

# Installs Ant
ENV ANT_VERSION 1.9.5
RUN cd && \
    wget -q http://www.us.apache.org/dist//ant/binaries/apache-ant-${ANT_VERSION}-bin.tar.gz && \
    tar -xzf apache-ant-${ANT_VERSION}-bin.tar.gz && \
    mv apache-ant-${ANT_VERSION} /opt/ant && \
    rm apache-ant-${ANT_VERSION}-bin.tar.gz
ENV ANT_HOME /opt/ant
ENV PATH ${PATH}:/opt/ant/bin",webratio/docker,ant/1.9.5/Dockerfile
4ab6db69971269826006fa6db41013265f57e698,507,"#
# BUILD		docker build -t svendowideit/apt-cacher .
# RUN		docker run -d -p 3142:3142 -name apt-cacher-run apt-cacher
#
# and then you can run containers with:
# 		docker run -t -i -rm -e http_proxy http://192.168.1.2:3142/ debian bash
#
FROM		ubuntu
MAINTAINER	SvenDowideit@home.org.au


VOLUME		[""/var/cache/apt-cacher-ng""]
RUN		apt-get update ; apt-get install -yq apt-cacher-ng

EXPOSE 		3142
CMD		chmod 777 /var/cache/apt-cacher-ng ; /etc/init.d/apt-cacher-ng start ; tail -f /var/log/apt-cacher-ng/*
",SvenDowideit/dockerfiles,apt-cacher-ng/Dockerfile
27236815413c448a1d66ceb38c4d0dadfbb59ec0,232,"FROM jenkins
COPY jenkins_plugins.txt /tmp/jenkins_plugins.txt
RUN /usr/local/bin/plugins.sh /tmp/jenkins_plugins.txt
USER root
RUN rm /tmp/jenkins_plugins.txt
RUN groupadd -g 126 docker
RUN addgroup -a jenkins docker
USER jenkins

",docker-in-practice/jenkins,server/Dockerfile
d7d83e4814a23a584ee238cf3cc9183d8eaf40cc,1448,"FROM ubuntu:14.04

# install what you need here
RUN apt-get update
RUN apt-get install -y --fix-missing python3-pip wget build-essential checkinstall dh-autoreconf libssl-dev libmagic-dev python-dev git


# install python3 dependencies
RUN pip3 install requests tornado


# build yara from source
RUN mkdir /yara
WORKDIR /yara
RUN wget https://github.com/plusvic/yara/archive/v3.4.0.tar.gz
RUN tar -zxf v3.4.0.tar.gz
WORKDIR /yara/yara-3.4.0
RUN ./bootstrap.sh
RUN ./configure --with-crypto --enable-magic
RUN make
RUN make install


# build yara-python from source
WORKDIR /yara/yara-3.4.0/yara-python
RUN python3 setup.py build
RUN python3 setup.py install


# yaras ubuntu fix
RUN echo ""/usr/local/lib"" >> /etc/ld.so.conf
RUN ldconfig

# get holmeslibrary
RUN mkdir -p /service
WORKDIR /service
RUN git clone https://github.com/HolmesProcessing/Holmes-Totem-Service-Library.git holmeslibrary
WORKDIR /service/holmeslibrary
RUN git fetch origin && git checkout 481280325e5e65ca6b83337f678537f22be834cc

# add the core files to the container
ADD service.conf /service
ADD LICENSE README.md /service/
ADD getrules.py /service
ADD peid_worker.py /service
ADD rulepack /service/rulepack


# gather the rules and add them
ADD rules.yar /service
WORKDIR /service
RUN python3 getrules.py


# create a new user with limited access
RUN useradd -s /bin/bash service
RUN chown -R service /service


USER service


CMD [""python3"", ""/service/peid_worker.py""]
",HolmesProcessing/Holmes-Totem,src/main/scala/org/novetta/zoo/services/peid/Dockerfile
2d1e0b52e14c32d9e5897a92c1a641e4baabdb41,2193,"FROM centos:centos7

# MariaDB image for OpenShift.
#
# Volumes:
#  * /var/lib/mysql/data - Datastore for MariaDB
# Environment:
#  * $MYSQL_USER - Database user name
#  * $MYSQL_PASSWORD - User's password
#  * $MYSQL_DATABASE - Name of the database to create
#  * $MYSQL_ROOT_PASSWORD (Optional) - Password for the 'root' MySQL account

MAINTAINER SoftwareCollections.org <sclorg@redhat.com>

ENV MYSQL_VERSION=10.1 \
    HOME=/var/lib/mysql

LABEL io.k8s.description=""MariaDB is a multi-user, multi-threaded SQL database server"" \
      io.k8s.display-name=""MariaDB 10.1"" \
      io.openshift.expose-services=""3306:mysql"" \
      io.openshift.tags=""database,mysql,mariadb,mariadb101,rh-mariadb101""

EXPOSE 3306

# This image must forever use UID 27 for mysql user so our volumes are
# safe in the future. This should *never* change, the last test is there
# to make sure of that.
RUN rpmkeys --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 && \
    yum -y install centos-release-scl && \
    yum-config-manager --enable centos-sclo-rh-testing && \
    yum -y --setopt=tsflags=nodocs install --nogpgcheck gettext rh-mariadb101 && \
    yum clean all && \
    mkdir -p /var/lib/mysql/data && chown -R mysql.0 /var/lib/mysql && \
    test ""$(id mysql)"" = ""uid=27(mysql) gid=27(mysql) groups=27(mysql)""

# Get prefix path and path to scripts rather than hard-code them in scripts
ENV CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/mysql \
    MYSQL_PREFIX=/opt/rh/rh-mariadb101/root/usr \
    ENABLED_COLLECTIONS=rh-mariadb101

# When bash is started non-interactively, to run a shell script, for example it
# looks for this variable and source the content of this file. This will enable
# the SCL for all scripts without need to do 'scl enable'.
ENV BASH_ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
    ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
    PROMPT_COMMAND="". ${CONTAINER_SCRIPTS_PATH}/scl_enable""

ADD root /

# this is needed due to issues with squash
# when this directory gets rm'd by the container-setup
# script.
RUN rm -rf /etc/my.cnf.d/*
RUN /usr/libexec/container-setup

VOLUME [""/var/lib/mysql/data""]

USER 27

ENTRYPOINT [""container-entrypoint""]
CMD [""run-mysqld""]
",sclorg/rhscl-dockerfiles,centos7.rh-mariadb101/Dockerfile
eb7d3caccd9469a2e64def307b9b94f5cf7e6cf9,361,"# shorewall in a container
#
# docker run --rm -it \
# 	--net host \
# 	--cap-add NET_ADMIN \
#	--privileged \
# 	jess/shorewall
#
FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apk update && apk add \
	shorewall \
	&& rm -rf /var/cache/apk/* \
	&& touch /var/log/messages

COPY ./etc /etc/shorewall

ENTRYPOINT [ ""/usr/sbin/shorewall"" ]
",coolhacks/docker-hacks,dockerfiles/shorewall/Dockerfile
944d60a89c4c307e4f4fc58e3ade45cc5a79bc5e,597,"FROM ubuntu:trusty-20160217

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update &&\
    apt-get dist-upgrade -y &&\
    apt-get install -y curl software-properties-common &&\
    add-apt-repository ppa:chris-lea/redis-server &&\
    apt-get update &&\
    apt-get install -y redis-server &&\
    apt-get clean &&\
    apt-get autoremove -y &&\
    mkdir /data

ADD bin/flynn-redis /bin/flynn-redis
ADD bin/flynn-redis-api /bin/flynn-redis-api

ADD start.sh /bin/start-flynn-redis
ADD dump.sh /bin/dump-flynn-redis
ADD restore.sh /bin/restore-flynn-redis

ENTRYPOINT [""/bin/start-flynn-redis""]
",flynn/flynn,appliance/redis/Dockerfile
33294b54aca2c2a9e04036d0da2feab5057b9559,982,"FROM java:openjdk-8-jre

RUN apt-get update --quiet --quiet \
    && apt-get install --quiet --quiet --no-install-recommends lsof \
    && rm -rf /var/lib/apt/lists/*

ENV NEO4J_VERSION 3.0.0-M04
ENV NEO4J_EDITION community
ENV NEO4J_DOWNLOAD_SHA256 4fed0551a321c7cb41ac3ebf232a4a4deea0425ae24d751b6b7307a056735f28
ENV NEO4J_DOWNLOAD_ROOT http://dist.neo4j.org
ENV NEO4J_TARBALL neo4j-$NEO4J_EDITION-$NEO4J_VERSION-unix.tar.gz
ENV NEO4J_URI $NEO4J_DOWNLOAD_ROOT/$NEO4J_TARBALL



RUN curl --fail --silent --show-error --location --output neo4j.tar.gz $NEO4J_URI \
    && echo ""$NEO4J_DOWNLOAD_SHA256 neo4j.tar.gz"" | sha256sum --check --quiet - \
    && tar --extract --file neo4j.tar.gz --directory /var/lib \
    && mv /var/lib/neo4j-* /var/lib/neo4j \
    && rm neo4j.tar.gz

WORKDIR /var/lib/neo4j

RUN mv data /data \
    && ln --symbolic /data

VOLUME /data

COPY docker-entrypoint.sh /docker-entrypoint.sh

EXPOSE 7474 7473

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""neo4j""]
",neo4j/docker-neo4j,3.0.0-M04/Dockerfile
d4d6cb5f7d98f36912f3bcfa7b87df3d3565e122,1966,"FROM ubuntu:16.04

MAINTAINER Brian Cunnie <brian.cunnie@gmail.com>
# thanks to Jacek Marchwicki and others

# Install java7
RUN apt-get install -y software-properties-common && add-apt-repository -y ppa:webupd8team/java && apt-get update
RUN echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
RUN apt-get install -y oracle-java7-installer

# Install Deps
RUN dpkg --add-architecture i386 && apt-get update && apt-get install -y --force-yes expect git wget libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1 python curl

# Install Android SDK
RUN cd /opt && wget --output-document=android-sdk.tgz --quiet http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz && tar xzf android-sdk.tgz && rm -f android-sdk.tgz && chown -R root.root android-sdk-linux

# Setup environment
ENV ANDROID_HOME /opt/android-sdk-linux
ENV PATH ${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools

# Install sdk elements
COPY tools /opt/tools
ENV PATH ${PATH}:/opt/tools
RUN [""/opt/tools/android-accept-licenses.sh"", ""android update sdk --all --force --no-ui --filter platform-tools,tools,build-tools-21,build-tools-21.0.1,build-tools-21.0.2,build-tools-21.1,build-tools-21.1.1,build-tools-21.1.2,build-tools-22,build-tools-22.0.1,build-tools-23.0.2,android-21,android-22,android-23,addon-google_apis_x86-google-21,extra-android-support,extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services,sys-img-armeabi-v7a-android-21""]

RUN which adb
RUN which android

# Create emulator
RUN echo ""no"" | android create avd \
                --force \
                --device ""Nexus 5"" \
                --name test \
                --target android-21 \
                --abi armeabi-v7a \
                --skin WVGA800 \
                --sdcard 512M

# Cleaning
RUN apt-get clean

# GO to workspace
RUN mkdir -p /opt/workspace
WORKDIR /opt/workspace
Source Repository
  appunite/docker
",blabbertabber/blabbertabber,ci/Dockerfile
98d822fc93031584c7b1899fa19613ee8181b459,276,"FROM     debian:wheezy

# Install
RUN apt-get -q update && \
    apt-get -q upgrade -y && \
    apt-get -q install -y git python && \
    git clone https://github.com/rembo10/headphones.git /root/headphones


# headphones
EXPOSE 8181
CMD python /root/headphones/Headphones.py
",hybris42/dockerfiles,headphones/Dockerfile
37ed8c8b9d88abe41db97f8ea57db0c65c8015c5,479,"FROM nodesource/fedora20-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_iojs_2.x/fc/20/x86_64/iojs-2.3.4-1nodesource.fc20.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/20/iojs/2.3.4/Dockerfile
5c6bfebeee7ae41a0642e9211799b81565367d90,418,"FROM ubuntu:trusty

RUN apt-get update
RUN apt-get -y install software-properties-common python-software-properties
RUN add-apt-repository ppa:git-core/ppa
RUN apt-get -y install git
RUN apt-get -y install sudo
RUN apt-get -y install wget

RUN git clone -b docker https://github.com/UWFlow/rmc.git ~/rmc

RUN apt-get install make
RUN apt-get -y install gcc
RUN apt-get -y install zlib1g-dev

RUN make -C ~/rmc install
",UWFlow/rmc,Docker/Dockerfile
7d74432bd19f0ae6015c2707e2af6d386b95d1c8,80,"FROM flightstats/hub:v1-beta

ENTRYPOINT [""/bin/bash"", ""/opt/hub/bin/start.sh""]
",flightstats/hub,docker/hub/hub/Dockerfile
081dbf3558db3cb7408c9f81e31331efba057ce4,551,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.39-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/0.10.39/Dockerfile
e018d16bfffdd6c1d932073a2eba8d3e05cbba28,831,"#-------------------------------------------------------------------------------
# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#    Licensed under the Apache License, Version 2.0 (the ""License"");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#            http://www.apache.org/licenses/LICENSE-2.0
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an ""AS IS"" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#-------------------------------------------------------------------------------
FROM python:3-onbuild
CMD [ ""python"" ]",gravitee-io/gravitee-docker,images/python/Dockerfile
d92c2ad62d10ffb0db59a40fdd6cbaf0b4fc5338,1001,"FROM buildpack-deps
MAINTAINER Peter Martini <PeterCMartini@GMail.com>

RUN apt-get update \
    && apt-get install -y curl procps \
    && rm -fr /var/lib/apt/lists/*

RUN mkdir /usr/src/perl
COPY *.patch /usr/src/perl/
WORKDIR /usr/src/perl

RUN curl -SL https://cpan.metacpan.org/authors/id/D/DA/DAPM/perl-5.10.1.tar.bz2 -o perl-5.10.1.tar.bz2 \
    && echo '98b762b5cd4fb76dd354dfa5ba0d21bc2acacaf2 *perl-5.10.1.tar.bz2' | sha1sum -c - \
    && tar --strip-components=1 -xjf perl-5.10.1.tar.bz2 -C /usr/src/perl \
    && rm perl-5.10.1.tar.bz2 \
    && cat *.patch | patch -p1 \
    && ./Configure -Dusethreads -Duse64bitall -Duseshrplib -A ccflags=-fwrapv -des \
    && make -j$(nproc) \
    && make test_harness \
    && make install \
    && cd /usr/src \
    && curl -LO https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm \
    && chmod +x cpanm \
    && ./cpanm App::cpanminus \
    && rm -fr ./cpanm /root/.cpanm /usr/src/perl /tmp/*

WORKDIR /root

CMD [""perl5.10.1"",""-de0""]
",Perl/docker-perl,"5.010.001-64bit,threaded/Dockerfile"
9a7d8c89dcdb7f89ecedd28e7cd89137e45476f0,2712,"## -*- docker-image-name: ""scaleway/ubuntu:wily"" -*-
FROM multiarch/ubuntu-debootstrap:amd64-wily
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM multiarch/ubuntu-debootstrap:armhf-wily	# arch=armv7l
#FROM multiarch/ubuntu-debootstrap:arm64-wily	# arch=arm64
#FROM multiarch/ubuntu-debootstrap:i386-wily	# arch=i386
#FROM multiarch/ubuntu-debootstrap:mips-wily	# arch=mips


MAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)


# Environment
ENV DEBIAN_FRONTEND=noninteractive \
    SCW_BASE_IMAGE=scaleway/ubuntu:wily


# Configure aptitude
# Note that, `${ARCH}` is set in the multiarch/ubuntu-debootstrap image
COPY ./overlay-${ARCH}/etc/apt/ /etc/apt/


# Adding and calling builder-enter
COPY ./overlay-image-tools/usr/local/sbin/scw-builder-enter /usr/local/sbin/
RUN /usr/local/sbin/scw-builder-enter


# Install packages
RUN apt-get -q update && \
    apt-get -y --force-yes -qq upgrade && \
    apt-get -y --force-yes -qq install \
	bash \
	bash-completion \
	bc \
	ca-certificates \
	cron \
	curl \
	dbus \
	dstat \
	ethstatus \
	file \
	fio \
	haveged \
	htop \
	ioping \
	iotop \
	iperf \
	iptables \
	iputils-ping \
	isc-dhcp-client \
	less \
	locate \
	lsb-release \
	lsof \
	make \
	man-db \
	mg \
	module-init-tools \
	mosh \
	nano \
	net-tools \
	netcat \
	ntp \
	ntpdate \
	python-apt \
	python-yaml \
	rsync \
	rsyslog \
	screen \
	shunit2 \
	socat \
	ssh \
	sudo \
	sysstat \
	systemd-sysv \
	tar \
	tcpdump \
	tmux \
	uuid-runtime \
	vim \
	wget \
	whiptail \
	unattended-upgrades \
	&& apt-get clean


# Patch rootfs
# - Tweaks rootfs so it matches Scaleway infrastructure
RUN rm -f /etc/update-motd.d/10-help-text /etc/update-motd.d/00-header
COPY ./overlay/ ./overlay-image-tools/ ./overlay-${ARCH}/ /

# remove root password, it will be created by the initrd
RUN passwd -d root

# Configure locales
RUN locale-gen en_US.UTF-8 && \
	locale-gen fr_FR.UTF-8 && \
	dpkg-reconfigure locales


# Default target
RUN systemctl set-default multi-user


# Configure Systemd
RUN systemctl enable \
        scw-fetch-ssh-keys \
	scw-sync-kernel-modules \
	scw-generate-ssh-keys \
	scw-gen-machine-id \
	scw-kernel-check \
 && systemctl disable \
	kmod-static-nodes.service \
	proc-sys-fs-binfmt_misc.automount \
	systemd-modules-load.service \
	systemd-update-utmp-runlevel


# make /sbin/init a relative symlink for initrd boot
RUN rm -f /sbin/init /bin/init \
 && ln -sf ../lib/systemd/systemd /sbin/init \
 && ln -sf ../lib/systemd/systemd /bin/init


# Fix permissions
RUN chown root:syslog /var/log \
 && chmod 755 /etc/default


# Clean rootfs from image-builder
RUN /usr/local/sbin/scw-builder-leave
",scaleway/image-ubuntu,15.10/Dockerfile
45e13ad6352cf5e25358c6e7b49c417b6e38e36c,137,"FROM ibuclaw/gdc:4.9-v2.066

ADD build-run /build-run
RUN chmod +x /build-run

RUN useradd docker
USER docker

ENTRYPOINT [""/build-run""]
",instructure/straitjacket,languages/d/Dockerfile
3ba135710804fd8ece7fefd0c2a897195d799a25,63,"FROM scratch
ADD rootfs.tar.xz /
CMD [""/bin/sh""]
ENV ARCH=i386
",multiarch/busybox,i386/slim/Dockerfile
9abacc18b51afdd4d88834ec97ecc0e117d5901e,751,"#
# Creates a docker container with a running Hystrix Web App
#

FROM centos:6

MAINTAINER Marcel Birkner <marcel.birkner@codecentric.de>

RUN yum -y install java-1.8.0-openjdk

ENV HYSTRIX_VERSION 1.4.12
ENV JETTY_VERSION 9.3.0.v20150612

ENV MAVEN_REPO_HYSTRIX https://repo1.maven.org/maven2/com/netflix/hystrix/hystrix-dashboard
ENV MAVEN_REPO_JETTY https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-runner

WORKDIR /app

RUN curl $MAVEN_REPO_HYSTRIX/$HYSTRIX_VERSION/hystrix-dashboard-$HYSTRIX_VERSION.war -o hystrix-dashboard.war

RUN curl $MAVEN_REPO_JETTY/$JETTY_VERSION/jetty-runner-$JETTY_VERSION.jar -o jetty-runner.jar

EXPOSE 8080

CMD [ ""java"", ""-cp"", ""jetty-runner.jar"", ""org.eclipse.jetty.runner.Runner"", ""hystrix-dashboard.war"" ]
",marcelbirkner/docker-hystrix-demo,hystrix-dashboard/Dockerfile
62aba6df092adcdc147d1d8c19221582b3b0dde6,425,"FROM registry.access.redhat.com/fis-karaf-openshift
USER 0
RUN sed -i -e 's!mvn !mvn -Dhttp.proxyHost=openshift.example.com -Dhttp.proxyPort=8080 -Dhttps.proxyHost=openshift.example.com -Dhttps.proxyPort=8080 -Djavax.net.ssl.trustStore=/tmp/trust.jks -Djavax.net.ssl.trustStorePassword=password !' /usr/local/s2i/assemble
RUN mv /usr/local/s2i/assemble /usr/local/s2i/_assemble
COPY assemble /usr/local/s2i/assemble
USER 185
",RedHatEMEA/demobuilder,layers/rhel-server-7:gui:ose-3.2:offline/@target/registry.access.redhat.com/jboss-fuse-6/fis-karaf-openshift/Dockerfile
5ad3bb3e0c25af4c50b64942cbc74be964c2c702,1853,"# Dockerfile for building Ansible 1.9 image for Debian 8 (jessie), with as few additional software as possible.
#
# @see https://launchpad.net/~ansible/+archive/ubuntu/ansible
#
# Version  1.0
#


# pull base image
FROM debian:jessie

MAINTAINER William Yeh <william.pjyeh@gmail.com>


RUN echo ""===> Installing python, sudo, and supporting tools...""  && \
    apt-get update -y  &&  apt-get install --fix-missing          && \
    DEBIAN_FRONTEND=noninteractive         \
    apt-get install -y                     \
        python python-yaml sudo            \
        curl gcc python-pip python-dev libffi-dev libssl-dev  && \
    apt-get -y --purge remove python-cffi          && \
    pip install --upgrade cffi                     && \
    \
    \
    echo ""===> Installing Ansible...""   && \
    pip install ansible==1.9.4          && \
    \
    \
    echo ""===> Removing unused APT resources...""                  && \
    apt-get -f -y --auto-remove remove \
                 gcc python-pip python-dev libffi-dev libssl-dev  && \
    apt-get clean                                                 && \
    rm -rf /var/lib/apt/lists/*  /tmp/*                           && \
    \
    \
    echo ""===> Adding hosts for convenience...""        && \
    mkdir -p /etc/ansible                              && \
    echo 'localhost' > /etc/ansible/hosts


COPY ansible-playbook-wrapper /usr/local/bin/

ONBUILD  RUN  DEBIAN_FRONTEND=noninteractive  apt-get update   && \
              echo ""===> Updating TLS certificates...""         && \
              apt-get install -y openssl ca-certificates

ONBUILD  WORKDIR  /tmp
ONBUILD  COPY  .  /tmp
ONBUILD  RUN  \
              echo ""===> Diagnosis: host information...""  && \
              ansible -c local -m setup all



# default command: display Ansible version
CMD [ ""ansible-playbook"", ""--version"" ]
",William-Yeh/docker-ansible,1.9-debian8-onbuild/Dockerfile
2fe8dfc5bd19401de57b42e38a321b307166074d,154,"FROM busybox
MAINTAINER Kelsey Hightower <kelsey.hightower@gmail.com>
COPY auth-server auth-server
COPY auth-admin auth-admin
ENTRYPOINT [""/auth-server""]
",kelseyhightower/grpc-hello-service,auth-server/Dockerfile
bda3ccd9e93fab9dec5d27b9a1ebcb82a2ce3b50,9728,"#
# See the top level Makefile in https://github.com/docker/docker for usage.
#
FROM docs/base:latest
MAINTAINER Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)

# This section ensures we pull the correct version of each
# sub project
ENV COMPOSE_BRANCH release
ENV SWARM_BRANCH v0.2.0
ENV MACHINE_BRANCH docs
ENV DISTRIB_BRANCH docs
ENV KITEMATIC_BRANCH master


# TODO: need the full repo source to get the git version info
COPY . /src

# Reset the /docs dir so we can replace the theme meta with the new repo's git info
# RUN git reset --hard

# Then copy the desired docs into the /docs/sources/ dir
COPY ./sources/ /docs/sources

COPY ./VERSION VERSION

# adding the image spec will require Docker 1.5 and `docker build -f docs/Dockerfile .`
#COPY ./image/spec/v1.md /docs/sources/reference/image-spec-v1.md

# TODO: don't do this - look at merging the yml file in build.sh
COPY ./mkdocs.yml ./s3_website.json ./release.sh ./

#######################
# Docker Distribution
########################

#ADD https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/mkdocs.yml /docs/mkdocs-distribution.yml

ADD https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/images/notifications.png \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/images/registry.png \
  /docs/sources/registry/images/

ADD https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/index.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/deploying.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/configuration.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/storagedrivers.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/notifications.md \
  /docs/sources/registry/

ADD https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/spec/api.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/spec/json.md \
  /docs/sources/registry/spec/
  
ADD https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/storage-drivers/s3.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/storage-drivers/azure.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/storage-drivers/filesystem.md \
    https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/storage-drivers/inmemory.md \
  /docs/sources/registry/storage-drivers/

ADD https://raw.githubusercontent.com/docker/distribution/${DISTRIB_BRANCH}/docs/spec/auth/token.md /docs/sources/registry/spec/auth/token.md

RUN sed -i.old '1s;^;no_version_dropdown: true;' \
  /docs/sources/registry/*.md \
  /docs/sources/registry/spec/*.md \
  /docs/sources/registry/spec/auth/*.md \
  /docs/sources/registry/storage-drivers/*.md 

RUN sed -i.old  -e '/^<!--GITHUB/g' -e '/^IGNORES-->/g'\
  /docs/sources/registry/*.md \
  /docs/sources/registry/spec/*.md \
  /docs/sources/registry/spec/auth/*.md \
  /docs/sources/registry/storage-drivers/*.md 

#######################
# Docker Swarm
#######################

#ADD https://raw.githubusercontent.com/docker/swarm/${SWARM_BRANCH}/docs/mkdocs.yml /docs/mkdocs-swarm.yml
ADD https://raw.githubusercontent.com/docker/swarm/${SWARM_BRANCH}/docs/index.md /docs/sources/swarm/index.md

ADD https://raw.githubusercontent.com/docker/swarm/${SWARM_BRANCH}/discovery/README.md /docs/sources/swarm/discovery.md

ADD https://raw.githubusercontent.com/docker/swarm/${SWARM_BRANCH}/api/README.md /docs/sources/swarm/API.md

ADD https://raw.githubusercontent.com/docker/swarm/${SWARM_BRANCH}/scheduler/filter/README.md /docs/sources/swarm/scheduler/filter.md

ADD https://raw.githubusercontent.com/docker/swarm/${SWARM_BRANCH}/scheduler/strategy/README.md /docs/sources/swarm/scheduler/strategy.md

RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/swarm/*.md /docs/sources/swarm/scheduler/*.md

#######################
# Docker Machine
#######################
#ADD https://raw.githubusercontent.com/docker/machine/${MACHINE_BRANCH}/docs/mkdocs.yml /docs/mkdocs-machine.yml

ADD https://raw.githubusercontent.com/docker/machine/${MACHINE_BRANCH}/docs/index.md /docs/sources/machine/index.md
RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/machine/index.md

#######################
# Docker Compose
#######################

#ADD https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/mkdocs.yml /docs/mkdocs-compose.yml

ADD https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/index.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/install.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/cli.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/yml.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/env.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/completion.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/django.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/rails.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/wordpress.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/extends.md \
  https://raw.githubusercontent.com/docker/compose/${COMPOSE_BRANCH}/docs/production.md \
  /docs/sources/compose/

RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/compose/*.md

#######################
# Kitematic
#######################
ADD https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/faq.md \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/index.md \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/known-issues.md \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/minecraft-server.md \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/nginx-web-server.md \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/rethinkdb-dev-database.md \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/userguide.md \
  /docs/sources/kitematic/
RUN sed -i.old '1s;^;no_version_dropdown: true;' /docs/sources/kitematic/*.md
ADD https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/browse-images.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/change-folder.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/cli-access-button.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/cli-redis-container.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/cli-terminal.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/containers.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/installing.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-add-server.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-create.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-data-volume.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-login.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-map.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-port.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-restart.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/minecraft-server-address.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-2048-files.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-2048.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-create.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-data-folder.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-data-volume.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-hello-world.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-preview.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/nginx-serving-2048.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/rethink-container.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/rethink-create.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/rethink-ports.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/rethinkdb-preview.png \
  https://raw.githubusercontent.com/kitematic/kitematic/${KITEMATIC_BRANCH}/docs/assets/volumes-dir.png \
  /docs/sources/kitematic/assets/

# Then build everything together, ready for mkdocs
RUN /docs/build.sh
",boucher/docker,docs/Dockerfile
2f368229f3ac1a0251bedcaceed514bfe7674bf7,1099,"FROM centos:7

# Install all supported JDK versions
RUN curl -L --header ""Cookie: oraclelicense=accept-securebackup-cookie"" \
		http://download.oracle.com/otn-pub/java/jdk/1.5.0_22/jdk-1_5_0_22-linux-amd64-rpm.bin \
		-o jdk-1_5_0_22-linux-amd64-rpm.bin \
	&& chmod u+x jdk-1_5_0_22-linux-amd64-rpm.bin \
	&& echo yes | ./jdk-1_5_0_22-linux-amd64-rpm.bin \
	&& rm -v jdk-1_5_0_22-linux-amd64* \
	&& yum -y install \
		java-1.6.0-openjdk-devel \
		java-1.7.0-openjdk-devel \
		java-1.8.0-openjdk-devel \
	&& yum clean all
ENV JAVA5_HOME=/usr/java/jdk1.5.0_22
ENV JAVA6_HOME=/usr/lib/jvm/java-1.6.0
ENV JAVA7_HOME=/usr/lib/jvm/java-1.7.0
ENV JAVA8_HOME=/usr/lib/jvm/java-1.8.0
ENV JAVA_HOME=$JAVA8_HOME

# Install Maven
RUN curl http://archive.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz \
		-o apache-maven-3.2.5-bin.tar.gz \
	&& tar -xzf apache-maven-3.2.5-bin.tar.gz -C /opt \
	&& rm -v apache-maven-3.2.5-bin.tar.gz \
	&& ln -s /opt/apache-maven-3.2.5/bin/mvn /usr/local/bin/ \
	&& mkdir /root/.m2
COPY toolchains.xml /root/.m2/

RUN mkdir /project
WORKDIR /project
",orfjackal/retrolambda,dev/Dockerfile
3e8ddf6ba3642250ec5febbdbbc254dcc3fcc402,164,"FROM rounds/10m-logstash-forwarder
MAINTAINER Ofir Petrushka ROUNDS <ofir@rounds.com>

# Config config files
COPY etc/logstash-forwarder/* /etc/logstash-forwarder/
",rounds/10M-Docker-Images,logstash-forwarder/config-example/Dockerfile
bbd0029ab2b78519b57994fc1e1a1d1e351675a7,2666,"# Dockerfile for building Ansible image from source for Ubuntu 16.04 (Xenial), with as few additional software as possible.
#
# @see http://docs.ansible.com/ansible/intro_installation.html#running-from-source
#
# Version  1.0
#


# pull base image
FROM ubuntu:16.04

MAINTAINER William Yeh <william.pjyeh@gmail.com>


RUN echo ""===> Adding Ansible's prerequisites...""   && \
    apt-get update -y            && \
    DEBIAN_FRONTEND=noninteractive  \
        apt-get install --no-install-recommends -y -q  \
                build-essential                        \
                python-pip python-dev python-yaml      \
                libffi-dev libssl-dev                  \
                libxml2-dev libxslt1-dev zlib1g-dev    \
                git                                 && \
    pip install --upgrade wheel setuptools          && \
    pip install --upgrade pyyaml jinja2 pycrypto    && \
    \
    \
    echo ""===> Downloading Ansible's source tree...""            && \
    git clone git://github.com/ansible/ansible.git --recursive  && \
    \
    \
    echo ""===> Compiling Ansible...""      && \
    cd ansible                            && \
    bash -c 'source ./hacking/env-setup'  && \
    \
    \
    echo ""===> Moving useful Ansible stuff to /opt/ansible ...""  && \
    mkdir -p /opt/ansible                && \
    mv /ansible/bin   /opt/ansible/bin   && \
    mv /ansible/lib   /opt/ansible/lib   && \
    mv /ansible/docs  /opt/ansible/docs  && \
    rm -rf /ansible                      && \
    \
    \
    echo ""===> Clean up...""                                         && \
    apt-get remove -y --auto-remove \
            build-essential python-pip python-dev git libffi-dev libssl-dev  && \
    apt-get clean                                                   && \
    rm -rf /var/lib/apt/lists/*                                     && \
    \
    \
    echo ""===> Adding hosts for convenience...""  && \
    mkdir -p /etc/ansible                        && \
    echo 'localhost' > /etc/ansible/hosts


ENV PATH        /opt/ansible/bin:$PATH
ENV PYTHONPATH  /opt/ansible/lib:$PYTHONPATH
ENV MANPATH     /opt/ansible/docs/man:$MANPATH


COPY ansible-playbook-wrapper /usr/local/bin/

ONBUILD  RUN  DEBIAN_FRONTEND=noninteractive  apt-get update   && \
              echo ""===> Updating TLS certificates...""         && \
              apt-get install -y openssl ca-certificates

ONBUILD  WORKDIR  /tmp
ONBUILD  COPY  .  /tmp
ONBUILD  RUN  \
              echo ""===> Diagnosis: host information...""  && \
              ansible -c local -m setup all



# default command: display Ansible version
CMD [ ""ansible-playbook"", ""--version"" ]
",William-Yeh/docker-ansible,master-ubuntu16.04-onbuild/Dockerfile
3c267b5aa4a5f719e34397c9848f67792cff2077,663,"FROM debian:squeeze

MAINTAINER  DBpedia Spotlight Team <dbp-spotlight-developers@lists.sourceforge.net>

RUN apt-get update && apt-get install -y \
    curl \
    openjdk-6-jre

ENV RELEASE_SERVER    spotlight.sztaki.hu
ENV RELEASE_FILENAME  dbpedia-spotlight-latest.jar
ENV LANGUAGE_MODEL    fr.tar.gz	   

RUN mkdir -p /opt/spotlight && \
    cd /opt/spotlight && \
    curl -O ""http://$RELEASE_SERVER/downloads/$RELEASE_FILENAME"" && \
    curl -O ""http://$RELEASE_SERVER/downloads/latest_models/$LANGUAGE_MODEL"" && \
    tar xvf $LANGUAGE_MODEL  && \
    rm  $LANGUAGE_MODEL


ADD spotlight.sh /bin/spotlight.sh
RUN chmod +x /bin/spotlight.sh

EXPOSE 80

   
",sandroacoelho/spotlight-docker,v0.7/french/Dockerfile
0fb7c5850f165191c7fde7cf507dfbdfa72848fb,630,"FROM rezzza/docker-node:6.1

MAINTAINER SÃ©bastien HOUZÃ <sebastien.houze@verylastroom.com>

EXPOSE 3000

RUN apk upgrade --update-cache \
    && apk add --virtual .build-app-deps \
        curl \
        bash \
        git \
        make \
        automake \
        autoconf \
        nasm \
        gcc \
        g++ \
        binutils-gold \
        libgcc \
        libstdc++ \
        python \
        libpng-dev \
        libpng \
        jpeg-dev \
    && npm config set spin=false \
    && npm config set loglevel=http \
    && rm -rf \
        /usr/share/man \
        /tmp/* \
        /var/cache/apk/*

CMD [ ""node"" ]
",rezzza/docker-node,vendor/poc.front.karibbu/Dockerfile
8ee4416f98e7dc7f6cb5570046187cf5ed0e215d,1551,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM centos:7
MAINTAINER jay@apache.org
RUN yum update -y
RUN yum install -y java-1.7.0-openjdk unzip wget
RUN yum install -y java-1.7.0-openjdk-devel

WORKDIR /opt/

# Get Bigtop
# This comes with a gradlew wrapper we can use.
RUN wget http://www.apache.org/dist/bigtop/bigtop-1.0.0/bigtop-1.0.0-project.tar.gz
RUN  tar -xvf bigtop-1.0.0-project.tar.gz

# Install bigpetstore transaction queue
WORKDIR /opt/bigtop-1.0.0/bigtop-bigpetstore/bigpetstore-transaction-queue
RUN /opt/bigtop-1.0.0/gradlew distZip
RUN unzip build/distributions/bigpetstore-transaction-queue-1.0.zip
RUN mv ./bigpetstore-transaction-queue-1.0 /opt/bigpetstore-transaction-queue-1.0/
CMD /opt/bigpetstore-transaction-queue-1.0/bigpetstore-transaction-queue-1.0/bin/bigpetstore-transaction-queue
",apache/bigtop,bigtop-bigpetstore/bigpetstore-transaction-queue/Dockerfile
3b173eab2a611b5a8e7226651aac81212b553afe,497,"FROM centos

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN yum update -y && \
    curl --insecure --junk-session-cookies --location --remote-name --silent --header ""Cookie: oraclelicense=accept-securebackup-cookie"" http://download.oracle.com/otn-pub/java/jdk/8u92-b14/jre-8u92-linux-x64.rpm && \
    yum localinstall -y jre-8u92-linux-x64.rpm && \
    rm jre-8u92-linux-x64.rpm && \
    yum clean all

ENV JAVA_HOME=/usr/java/jre1.8.0_92/ \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8
",lwieske/dockerfiles-java-8,8u92/jre/Dockerfile
f2060f1e8361b9152e0fc15ee04750e23535d153,1041,"# PHPUnit Docker Container.
FROM composer/composer:php7
MAINTAINER Julien Breux <julien.breux@gmail.com>

# Run some Debian packages installation.
ENV PACKAGES=""php-pear curl""
RUN apt-get update && \
    apt-get install -yq --no-install-recommends $PACKAGES && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Run xdebug installation.
RUN curl -L http://pecl.php.net/get/xdebug-2.4.0.tgz >> /usr/src/php/ext/xdebug.tgz && \
    tar -xf /usr/src/php/ext/xdebug.tgz -C /usr/src/php/ext/ && \
    rm /usr/src/php/ext/xdebug.tgz && \
    docker-php-ext-install xdebug-2.4.0 && \
    docker-php-ext-install pcntl && \
    php -m

# Goto temporary directory.
WORKDIR /tmp

# Run composer and phpunit installation.
RUN composer selfupdate && \
    composer require ""phpunit/phpunit:~5.4.1"" --prefer-source --no-interaction && \
    ln -s /tmp/vendor/bin/phpunit /usr/local/bin/phpunit

# Set up the application directory.
VOLUME [""/app""]
WORKDIR /app

# Set up the command arguments.
ENTRYPOINT [""/usr/local/bin/phpunit""]
CMD [""--help""]
",JulienBreux/phpunit-docker,5.4.1/Dockerfile
ee8d1345680f9a882d74a44260e638d7a17ce8b1,1001,"#
# Docker base container for ESN OpenPaas
#
# Build (from the repository root):
#
# docker build -f ./docker/dockerfiles/base/Dockerfile -t linagora/esn-base .
#

FROM node:0.10.36-slim
MAINTAINER Linagora Folks

RUN apt-get update
RUN apt-get install -y git \
            libjpeg-dev \
            graphicsmagick \
		    graphicsmagick-imagemagick-compat \
		    libpango1.0-dev \
		    libcairo2-dev

RUN apt-get clean
RUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /opt/openpaas
RUN git clone https://github.com/vishnubob/wait-for-it.git wait-for-it
RUN cp /opt/openpaas/wait-for-it/wait-for-it.sh /usr/bin/wait-for-it.sh

# Cache NPM install of package.json has not been changed
# cf http://www.clock.co.uk/blog/a-guide-on-how-to-cache-npm-install-with-docker
COPY package.json /var/www/package.json
RUN cd /var/www && npm install --production
RUN npm install -g bower

# Cache bower
COPY bower.json /var/www/bower.json
RUN cd /var/www && bower install --allow-root

WORKDIR /var/www
",linagora/openpaas-esn,docker/dockerfiles/base/Dockerfile
7c03c3bc1ab072df37ec85f4938520da33a52161,1634,"# This Dockerfile will build an image that is configured
# to run Fluentd with an Elasticsearch plug-in and the
# provided configuration file.
# TODO(satnam6502): Use a lighter base image, e.g. some form of busybox.
# The image acts as an executable for the binary /usr/sbin/td-agent.
# Note that fluentd is run with root permssion to allow access to
# log files with root only access under /var/lib/docker/containers/*
# Please see http://docs.fluentd.org/articles/install-by-deb for more
# information about installing fluentd using deb package.

FROM ubuntu:14.04
MAINTAINER Satnam Singh ""satnam@google.com""

# Ensure there are enough file descriptors for running Fluentd.
RUN ulimit -n 65536

# Disable prompts from apt.
ENV DEBIAN_FRONTEND noninteractive

# Install prerequisites.
RUN apt-get update && \
    apt-get install -y curl && \
    apt-get install -y -q libcurl4-openssl-dev make && \
    apt-get clean

# Install Fluentd.
RUN /usr/bin/curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-trusty-td-agent2.sh | sh

# Change the default user and group to root.
# Needed to allow access to /var/log/docker/... files.
RUN sed -i -e ""s/USER=td-agent/USER=root/"" -e ""s/GROUP=td-agent/GROUP=root/"" /etc/init.d/td-agent

# Install the Elasticsearch Fluentd plug-in.
RUN /usr/sbin/td-agent-gem install fluent-plugin-elasticsearch

# Install the record reformer plugin.
RUN /usr/sbin/td-agent-gem install fluent-plugin-record-reformer

# Copy the Fluentd configuration file.
COPY td-agent.conf /etc/td-agent/td-agent.conf

# Run the Fluentd service.
CMD /usr/sbin/td-agent ""$FLUENTD_ARGS"" > /var/log/td-agent/td-agent.log
",mesosphere/kubernetes,cluster/addons/fluentd-elasticsearch/fluentd-es-image/Dockerfile
4b22884feae165cd34e02fd2731cc1ed59163007,483,"FROM nodesource/centos7-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_iojs_2.x/el/7/x86_64/iojs-2.4.0-1nodesource.el7.centos.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/7/iojs/2.4.0/Dockerfile
9df5821e4057dff4a370a6158d88b049bd6337e6,1017,"FROM debian:wheezy

RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		curl \
		build-essential \
		pkg-config \
		git \
		python \
	&& rm -rf /var/lib/apt/lists/*

# verify gpg and sha256: http://nodejs.org/dist/v0.10.30/SHASUMS256.txt.asc
# gpg: aka ""Timothy J Fontaine (Work) <tj.fontaine@joyent.com>""
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D

ENV NODE_VERSION 0.11.14
ENV NPM_VERSION 2.1.18

RUN curl -SLO ""http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
	&& curl -SLO ""http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
	&& gpg --verify SHASUMS256.txt.asc \
	&& grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
	&& tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
	&& rm ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
	&& npm install -g npm@""$NPM_VERSION"" \
	&& npm cache clear

CMD [ ""node"" ]
",docker-library/node,0.11/slim/Dockerfile
0401e3aeecf6c53a1aa86098dd52297cf79650bc,14,"FROM rabbitmq
",openspending/openspending,docker-config/mq/Dockerfile
1c0a476156055a18a706d5ceb63bad6e5068fd05,274,"FROM fedora:23
MAINTAINER Everton Ribeiro <everton@azukiapp.com>

RUN yum -y update \
  && yum -y install tar xz git wget \
                    scons make cmake automake autoconf \
                    gcc clang valgrind \
                    bind-utils \
  && yum clean all
",azukiapp/libnss-resolver,Dockerfiles/fedora23/Dockerfile
ea577fb96e884fb1736909a16adf632c660d873d,1123,"FROM ubuntu:trusty
MAINTAINER FENG, HONGLIN <hfeng@tutum.co>

ADD ids.lst /tmp/ids.lst
ADD prepare-user.sh /tmp/prepare-user.sh
RUN /tmp/prepare-user.sh

RUN apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db && \
    echo 'deb http://mirrors.syringanetworks.net/mariadb/repo/10.1/ubuntu trusty main' >> /etc/apt/sources.list && \
    echo 'deb-src http://mirrors.syringanetworks.net/mariadb/repo/10.1/ubuntu trusty main' >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get install -y mariadb-server pwgen && \
    rm -rf /var/lib/mysql/* && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

#change bind address to 0.0.0.0
RUN sed -i -r 's/bind-address.*$/bind-address = 0.0.0.0/' /etc/mysql/my.cnf

ADD create_mariadb_admin_user.sh /create_mariadb_admin_user.sh
ADD run.sh /run.sh
RUN chmod 775 /*.sh

# Add VOLUMEs to allow backup of config and databases
VOLUME  [""/etc/mysql"", ""/var/lib/mysql""]

#Added to avoid in container connection to the database with mysql client error message ""TERM environment variable not set""
ENV TERM dumb

EXPOSE 3306
CMD [""/run.sh""]
",makkus/docker-seafile,db/Dockerfile
f0d13c81a7c07ea144f5c9d00e806d08e1235e87,200,"FROM debian:sid
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apt-get update && apt-get install -y \
	netcat \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

ENTRYPOINT [ ""netcat"" ]
",jfrazelle/dockerfiles,netcat/Dockerfile
f8c1da08b793a5c38df323c07033d2c6d789936d,172,"FROM fedora:23

ARG RELEASE
ARG VERSION
ARG COCKPIT_RPM_URL
ARG INSTALLER
ARG OFFLINE

ADD . /container
RUN /container/install.sh

CMD [""/usr/libexec/cockpit-kube-launch""]
",cockpit-project/cockpit,containers/kubernetes/Dockerfile
d9223e7b5c4bd5a9375230a82aa167db98f604fd,791,"# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM google/debian:wheezy
MAINTAINER Brendan Burns <bburns@google.com>
RUN apt-get update
RUN apt-get install -y -qq ca-certificates
ADD aggregator /aggregator
ENTRYPOINT [""/aggregator""]
CMD []
",kubernetes/contrib,scale-demo/aggregator/Dockerfile
0fdb88013e933954fc646928a3fa84a22e5b7fdf,1841,"## -*- docker-image-name: ""scaleway/ssh2docker:latest"" -*-
FROM scaleway/docker:1.9.0


# Prepare rootfs for image-builder
RUN /usr/local/sbin/builder-enter


# Install Golang (see https://github.com/scaleway-community/scaleway-golang/blob/master/Dockerfile)
RUN apt-get update -qq \
 && apt-get install -y -q --no-install-recommends \
       curl gcc ca-certificates libc6-dev git mercurial \
 && apt-get clean
ENV GOARCH=arm GOOS=linux GOLANG_VERSION=1.5.1 GOROOT=/usr/local/go GOPATH=/go
ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
RUN echo ""Installing Golang 1.4"" \
 && cd /tmp \
 && curl -O https://storage.googleapis.com/golang/go1.4.2.src.tar.gz \
 && echo '460caac03379f746c473814a65223397e9c9a2f6 go1.4.2.src.tar.gz' | sha1sum -c \
 && tar -C /usr/local -xzf go1.4.2.src.tar.gz \
 && rm -f go1.4.2.src.tar.gz \
 && mv /usr/local/go /usr/local/go1.4.2 \
 && cd /usr/local/go1.4.2/src \
 && ./make.bash \
 && echo ""Installing Golang 1.5.1 Using go1.4.2"" \
 && cd /tmp \
 && curl -O https://storage.googleapis.com/golang/go1.5.1.src.tar.gz \
 && echo '0df564746d105f4180c2b576a1553ebca9d9a124 go1.5.1.src.tar.gz' | sha1sum -c \
 && tar -C /usr/local -xzf go1.5.1.src.tar.gz \
 && rm -f /tmp/go1.5.1.src.tar.gz \
 && cd /usr/local/go/src \
 && GOROOT_BOOTSTRAP=/usr/local/go1.4.2 ./make.bash --no-clean \
 && rm -rf /usr/local/go1.4.2
RUN echo ""Configure environment"" \
 && mkdir -p /go/src /go/bin \
 && chmod -R 777 /go \
 && echo export GOROOT=${GOROOT} > /etc/profile.d/golang.sh \
 && echo export GOPATH=${GOPATH} >> /etc/profile.d/golang.sh \
 && echo export PATH=\${PATH}:\${GOROOT}/bin:\${GOPATH}/bin >> /etc/profile.d/golang.sh


# Install ssh2docker
RUN go get github.com/moul/ssh2docker/...


# Change default ssh port to something else
RUN echo ""FIXME""


# Clean rootfs from image-builder
RUN /usr/local/sbin/builder-leave
",moul/ssh2docker,contrib/scaleway/Dockerfile
fa72d5e7de7339bd0dbc1843795ed51002a15742,643,"# Dockerfile to create a container with the IM service
FROM grycapjenkins/im-base:latest
MAINTAINER Miguel Caballer <micafer1@upv.es>
LABEL version=""1.4.5""
LABEL description=""Container image to run the IM service. (http://www.grycap.upv.es/im)""

EXPOSE 8899 8800

# Add unresolved LibCloud dependency
RUN pip install backports.ssl_match_hostname

# Install im - 'devel' branch
RUN cd tmp \
 && git clone -b devel https://github.com/grycap/im.git \
 && cd im \
 && pip install /tmp/im

# Turn on the REST services
RUN sed -i ""/ACTIVATE_REST =.*/c\ACTIVATE_REST=True"" /etc/im/im.cfg

COPY ansible.cfg /etc/ansible/ansible.cfg

CMD im_service.py
",grycap/im,docker-devel/Dockerfile
a1b23e3112a0aaede962e04aa03ad49ec7fb1aab,980,"#
# Docker image for wger development
#
# Please consult the documentation for usage
# docker build -t wger/devel .
# docker run -ti --name wger.devel --publish 8000:8000 wger/devel
# (in docker) source ~/venv/bin/activate
# (in docker) python manage.py runserver 0.0.0.0:8000
#
#


FROM wger/base

MAINTAINER Roland Geider <roland@geider.net>
EXPOSE 8000

# Install dependencies
RUN apt-get install -y vim tmux

# Set up the application
USER wger
RUN git clone https://github.com/rolandgeider/wger.git /home/wger/src

WORKDIR /home/wger/src
RUN virtualenv --python python3 /home/wger/venv
RUN . /home/wger/venv/bin/activate \
    && pip install --upgrade pip \
    && pip install -r requirements_devel.txt \
    && invoke create_settings \
        --settings-path /home/wger/src/settings.py \
        --database-path /home/wger/db/database.sqlite \
    && invoke bootstrap_wger \
        --settings-path /home/wger/src/settings.py \
        --no-start-server


CMD [""/bin/bash""]
",rolandgeider/wger,extras/docker/development/Dockerfile
198848fb1997422e256e4e2303afa95457348f4a,149,"FROM michalwski/docker-riak:1.0.6
ADD advanced.config /etc/riak/advanced.config
RUN sed -i.bak ""s/^search = \(.*\)/search = on/"" /etc/riak/riak.conf
",esl/MongooseIM,tools/docker/riak/Dockerfile
aac0a36ce1a7e84905aade01e587b84c12c0d2d0,147,"FROM debian:unstable

RUN awk '$1 ~ ""^deb"" { $3 = ""experimental""; print; exit }' /etc/apt/sources.list > /etc/apt/sources.list.d/experimental.list
",tianon/dockerfiles,debian/experimental/Dockerfile
9b82cb023a0a78ce0c02978f6cf08964c48157e1,1003,"# Riak
#
# VERSION       0.1.1

# Use the Ubuntu base image provided by dotCloud
FROM ubuntu:trusty
MAINTAINER Hector Castro hector@basho.com

# Install Riak repository before we do apt-get update, so that update happens
# in a single step
RUN apt-get install -q -y curl && \
    curl -fsSL https://packagecloud.io/install/repositories/basho/riak/script.deb | sudo bash

# Install and setup project dependencies
RUN apt-get update && \
    apt-get install -y supervisor riak=2.0.5-1

RUN mkdir -p /var/log/supervisor

RUN locale-gen en_US en_US.UTF-8

COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Configure Riak to accept connections from any host
RUN sed -i ""s|listener.http.internal = 127.0.0.1:8098|listener.http.internal = 0.0.0.0:8098|"" /etc/riak/riak.conf
RUN sed -i ""s|listener.protobuf.internal = 127.0.0.1:8087|listener.protobuf.internal = 0.0.0.0:8087|"" /etc/riak/riak.conf

# Expose Riak Protocol Buffers and HTTP interfaces
EXPOSE 8087 8098

CMD [""/usr/bin/supervisord""]
",projectatomic/docker,docs/examples/running_riak_service.Dockerfile
5b201bba1eb0a0645dd1a8e152471c6a3c18fe30,168,"FROM microsoft/aspnet:latest

COPY WebAPIApplication /app
WORKDIR /app

ENV MONO_THREADS_PER_CPU=2000
RUN [""dnu"", ""restore""]

EXPOSE 5000
ENTRYPOINT [""dnx"", ""kestrel""]
",peterblazejewicz/asp5-mvc6-examples,WebAPIDockerImage/Dockerfile
d9e86cac57e2a9b1ccd9a6bb2021797f97f205a8,5377,"FROM ubuntu:14.04.3
RUN echo ""deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse"" > /etc/apt/sources.list.d/trusty-backports-universe.list
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        build-essential m4 apt-utils \
        libffi-dev libssl-dev \
        libbz2-dev \
        libgmp3-dev \
        libev-dev \
        libsnappy-dev \
        libxen-dev \
        help2man \
        pkg-config \
        time \
        aspcud \
        wget \
        rsync \
        darcs \
        git \
        unzip \
        protobuf-compiler \
        libgcrypt20-dev \
        libjerasure-dev \
        yasm \
        automake \
        python-dev \
        python-pip \
        debhelper \
        psmisc \
        strace \
        curl \
        g++ \
        libgflags-dev \
        sudo \
        libtool \
        libboost-all-dev \
        fuse \
        sysstat \
        ncurses-dev

RUN useradd jenkins -u 1001 -g root

RUN mkdir /home/alba
RUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh
env ocaml_version=4.02.3
RUN sh ./opam_installer.sh /usr/local/bin ${ocaml_version}
env opam_root=/home/alba/OPAM
ENV opam_env=""opam config env --root=${opam_root}""
RUN opam init --root=/home/alba/OPAM --comp ${ocaml_version}
RUN eval `${opam_env}` && \
    opam update && \
    opam install -y \
        ocamlfind \
        ssl.0.5.2 \
        camlbz2 \
        snappy \
        sexplib \
        bisect \
        lwt.2.5.1 \
        camltc \
        cstruct \
        ctypes \
        ctypes-foreign \
        uuidm \
        zarith \
        mirage-no-xen.1 \
        quickcheck.1.0.2 \
        cmdliner \
        conf-libev \
        depext \
        kinetic-client \
        tiny_json \
        ppx_deriving.3.1 \
        ppx_deriving_yojson \
        core.113.00.00 \
        redis \
        uri.1.9.1 \
        result

RUN wget https://01.org/sites/default/files/downloads/intelr-storage-acceleration-library-open-source-version/isa-l-2.14.0.tar.gz
RUN tar xfzv isa-l-2.14.0.tar.gz
RUN cd isa-l-2.14.0 && ./autogen.sh && ./configure
RUN cd isa-l-2.14.0 && make
RUN cd isa-l-2.14.0 && make install

# c++
RUN apt-get update && apt-get -y install libgtest-dev cmake
RUN cd /usr/src/gtest \
        && cmake . \
        && make \
        && mv libg* /usr/lib/


# install specific arakoon.
RUN git clone https://github.com/openvstorage/arakoon.git
RUN cd arakoon && git pull && git checkout tags/1.9.6
RUN cd arakoon && eval `${opam_env}` && make
RUN cd arakoon && eval `${opam_env}` \
    && export PREFIX=${opam_root}/${ocaml_version} \
    && export OCAML_LIBDIR=`ocamlfind printconf destdir` \
    && make install

# install specific orocksdb
RUN git clone https://github.com/domsj/orocksdb.git \
    && eval `${opam_env}` \
    && cd orocksdb \
    && git checkout 8bc61d8a451a2724399247abf76643aa7b2a07e9 \
    && ./install_rocksdb.sh \
    && make build install

#for now, install ordma manually
RUN apt-get update && apt-get -y install librdmacm-dev
RUN git clone https://github.com/toolslive/ordma.git \
    && cd ordma \
    && git checkout tags/0.0.2 \
    && eval `${opam_env}` \
    && make install
RUN echo ""jenkins ALL=NOPASSWD: ALL"" >/etc/sudoers.d/jenkins

RUN echo ""deb http://apt.openvstorage.org chicago-community main"" > /etc/apt/sources.list.d/ovsaptrepo.list
# Install alba 0.6, and arakoon.1.8.9 which we might need for compatibility tests
RUN apt-get update && apt-get install -y --force-yes alba arakoon
RUN ln -s /usr/bin/alba /usr/bin/alba.0.6

RUN echo ""deb http://apt.openvstorage.org unstable main"" > /etc/apt/sources.list.d/ovsaptrepo.list
RUN apt-get update && apt-get -y --force-yes install \
      clang-3.5 \
      libboost1.57-all liblttng-ust0 librdmacm1 libtokyocabinet9 \
      libstdc++6:amd64 libzmq3 librabbitmq1 libomnithread3c2 libomniorb4-1 \
      libhiredis0.10 liblz4-1 libxio0 \
      omniorb-nameserver

## This only works from inside the OVS lan...
# http://10.100.129.100:8080/job/volumedriver-dev-release-ubuntu-14.04/307/artifact/volumedriver-core/build/debian/volumedriver-base-dbgsym_5.7.2-dev.201606011734.d6c3c04_amd64.ddeb
ENV voldrv_jenkins=http://10.100.129.100:8080/job/volumedriver-dev-release-ubuntu-14.04/307/artifact/volumedriver-core/build/debian
ENV voldrv_version=5.7.2-dev.201606011734.d6c3c04_amd64
RUN wget ${voldrv_jenkins}/volumedriver-base_${voldrv_version}.deb \
    && dpkg -i volumedriver-base_${voldrv_version}.deb

RUN wget ${voldrv_jenkins}/volumedriver-pitreplication_${voldrv_version}.deb \
    && dpkg -i volumedriver-pitreplication_${voldrv_version}.deb

RUN wget ${voldrv_jenkins}/volumedriver-server_${voldrv_version}.deb \
    && dpkg -i volumedriver-server_${voldrv_version}.deb

RUN wget ${voldrv_jenkins}/volumedriver-test_${voldrv_version}.deb \
    && dpkg -i volumedriver-test_${voldrv_version}.deb

ENV UID 1001
ENV ARAKOON_BIN=arakoon
ENV VOLDRV_TEST=volumedriver_test
ENV VOLDRV_BACKEND_TEST=backend_test

# Install etcd:
RUN curl -L  https://github.com/coreos/etcd/releases/download/v2.2.4/etcd-v2.2.4-linux-amd64.tar.gz -o etcd-v2.2.4-linux-amd64.tar.gz
RUN tar xzvf etcd-v2.2.4-linux-amd64.tar.gz
RUN cp ./etcd-v2.2.4-linux-amd64/etcd /usr/bin \
    && cp ./etcd-v2.2.4-linux-amd64/etcdctl /usr/bin


CMD eval `${opam_env}` \
    && echo ${SUITE} \
    && ./jenkins/run.sh ${SUITE}
",openvstorage/alba,docker/alba_debian_jenkins/Dockerfile
98197bf983f9b1638093ac54b55f0fe2b847420a,275,"FROM voxxit/base:alpine

MAINTAINER Joshua Delsman <j at srv.im>

RUN  apk add --update nginx \
  && mkdir /tmp/nginx \
  && rm -rf /var/cache/apk/*

ADD nginx.conf /etc/nginx/nginx.conf

VOLUME [ ""/etc/nginx"" ]

EXPOSE 80 443

CMD [ ""nginx"", ""-c"", ""/etc/nginx/nginx.conf"" ]
",voxxit/dockerfiles,nginx/Dockerfile
70dc39a7385eebe818f6860aa9ed0208edf70554,1085,"FROM ubuntu:trusty
MAINTAINER 2GIS

ENV DEBIAN_FRONTEND=noninteractive \
    CONFD_OPTS='-interval 10 -node 172.17.42.1:4001' \
    CONFD_VERSION=0.10.0 \
    TERM=xterm \
    SVDIR=/etc/service \
    DGIS_OPENSTACK_SCRIPTS_PATH='/opt/2gis/openstack'

RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository cloud-archive:kilo && \
    apt-get update && \
    apt-get install -y \
        curl \
        git \
        runit \
        ca-certificates \
        python-keystoneclient \
        python-openstackclient \
        mariadb-client \
        python-mysqldb \
        python-psycopg2 && \
    apt-get clean

RUN curl -sSL https://github.com/kelseyhightower/confd/releases/download/v${CONFD_VERSION}/confd-${CONFD_VERSION}-linux-amd64 \
        -o /usr/local/bin/confd && \
    chmod +x /usr/local/bin/confd

RUN curl -sSL https://raw.githubusercontent.com/phusion/baseimage-docker/master/image/bin/my_init \
        -o /sbin/my_init && \
    chmod +x /sbin/my_init

ADD root/ /

ENTRYPOINT [""/sbin/my_init""]
",2gis/whalestack,docker/openstack/base/ubuntu/Dockerfile
1192e28f4809f59788a6d25b860a2070e6aefab0,100,"FROM redis:alpine

MAINTAINER Bo-Yi Wu <appleboy.tw@gmail.com>

CMD [ ""redis-server"" ]

EXPOSE 6379
",appleboy/gorush,docker/redis/Dockerfile
5167b06349d065306de90dc7c48162b9b00a57c0,169,"FROM grahamdumpleton/mod-wsgi-docker:python-3.5

WORKDIR /app

ONBUILD COPY . /app

ONBUILD RUN mod_wsgi-docker-build

EXPOSE 80

ENTRYPOINT [ ""mod_wsgi-docker-start"" ]
",GrahamDumpleton/mod_wsgi-docker,3.5/onbuild/Dockerfile
c81ec56c18360d15d3be36659f31734eaf4efa69,1764,"# docker build -t kalabox/solr:mytag .

FROM debian:jessie

RUN \
  apt-get -y update && apt-get -y install \
  unzip curl incron tomcat7 libtcnative-1 tomcat7-admin && \
  cd /tmp && curl -Lk ""https://archive.apache.org/dist/lucene/solr/3.6.2/apache-solr-3.6.2.tgz"" | tar -zvx && \
  mv /tmp/apache-solr-3.6.2/example/solr /usr/share/solr && \
  unzip /tmp/apache-solr-3.6.2/example/webapps/solr.war -d /usr/share/solr/web && \
  mkdir -p /usr/share/solr/lib && \
  mkdir -p /usr/share/solr/data && \
  mkdir -p /var/lib/tomcat7/temp && \
  apt-get -y clean && \
  apt-get -y autoclean && \
  apt-get -y autoremove && \
  rm -rf /var/lib/apt/* && rm -rf && rm -rf /var/lib/cache/* && rm -rf /var/lib/log/* && rm -rf /tmp/*

COPY ./start.sh /start.sh
COPY ./index /usr/share/solr/web/index

# Allow us to edit some config on the outsite
RUN \
  chmod 755 /start.sh && \
  rm /etc/tomcat7/server.xml && \
  ln -s /src/config/tomcat/server.xml /etc/tomcat7/server.xml && \
  rm /etc/tomcat7/web.xml && \
  ln -s /src/config/tomcat/web.xml /etc/tomcat7/web.xml && \
  rm /usr/share/solr/solr.xml && \
  ln -s /src/config/solr/solr.xml /usr/share/solr/solr.xml && \
  rm /usr/share/solr/conf/schema.xml && \
  ln -s /usr/share/solr/web/index /usr/share/solr/conf/schema.xml && \
  rm /usr/share/solr/conf/solrconfig.xml && \
  ln -s /src/config/solr/solrconfig.xml /usr/share/solr/conf/solrconfig.xml && \
  ln -s /src/config/tomcat/index.xml /etc/tomcat7/Catalina/localhost/sites#self#environments#kalabox.xml && \
  echo ""root"" >> /etc/incron.allow && \
  echo ""/usr/share/solr/web/index IN_MODIFY curl -k https://localhost:449/sites/self/environments/kalabox/admin/cores?action=RELOAD&core=index"" > /var/spool/incron/root

EXPOSE 449
CMD [""/bin/bash"", ""/start.sh""]
",kalabox/kalabox-app-pantheon,app/dockerfiles/pantheon-solr/Dockerfile
927ed615c969f1a104adc09e5fe0eb45a85f7bb7,2557,"## -*- docker-image-name: ""scaleway/debian:jessie"" -*-
FROM multiarch/debian-debootstrap:amd64-jessie
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM multiarch/debian-debootstrap:armhf-jessie    # arch=armv7l
#FROM multiarch/debian-debootstrap:arm64-jessie    # arch=arm64
#FROM multiarch/debian-debootstrap:i386-jessie     # arch=i386
#FROM multiarch/debian-debootstrap:powerpc-jessie  # arch=powerpc
#FROM multiarch/debian-debootstrap:armel-jessie    # arch=armel
#FROM multiarch/debian-debootstrap:mips-jessie     # arch=mips


MAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)


# Environment
ENV DEBIAN_FRONTEND=noninteractive SCW_BASE_IMAGE=scaleway/debian:jessie


# Configure aptitude
# Note that, `${ARCH}` is set in the multiarch/debian-debootstrap image
COPY ./overlay-${ARCH}/etc/apt/ /etc/apt/


# Adding and calling builder-enter
COPY ./overlay-image-tools/usr/local/sbin/scw-builder-enter /usr/local/sbin/
RUN /bin/sh -xe /usr/local/sbin/scw-builder-enter


# Install packages
RUN apt-get -q update && \
    apt-get -y -qq upgrade && \
    apt-get install -y -qq \
	bash-completion \
	bc \
	bootlogd \
	ca-certificates \
	cron \
	curl \
	dbus \
	dstat \
	ethstatus \
	file \
	fio \
	haveged \
	htop \
	ioping \
	iotop \
	iperf \
	iptables \
	iputils-ping \
	isc-dhcp-client \
	less \
	libnss-myhostname \
	locales \
	locate \
	lsb-release \
	lsof \
	make \
	man-db \
	mg \
	module-init-tools \
	mosh \
	nano \
	net-tools \
	netcat \
	ntp \
	ntpdate \
	python-apt \
	python-yaml \
	rsync \
	rsyslog \
	screen \
	shunit2 \
	socat \
	ssh \
	sudo \
	sysstat \
	systemd-sysv \
	tcpdump \
	tmux \
	uuid-runtime \
	vim \
	wget \
	whiptail \
    unattended-upgrades \
    && apt-get clean



# Default target
RUN systemctl set-default multi-user


# Enable update-motd.d support
RUN rm -f /etc/motd && ln -s /var/run/motd /etc/motd


# Patch rootfs
COPY ./overlay/ ./overlay-image-tools/ ./overlay-${ARCH}/ /


# Configure locales
RUN locale-gen


# Configure Systemd
RUN systemctl enable \
        scw-fetch-ssh-keys \
	scw-sync-kernel-modules \
	scw-generate-ssh-keys \
	scw-gen-machine-id \
	scw-kernel-check \
 && systemctl disable \
	systemd-modules-load.service \
	systemd-update-utmp-runlevel \
	proc-sys-fs-binfmt_misc.automount \
	kmod-static-nodes.service


RUN rm -f /sbin/init \
 && ln -sf ../lib/systemd/systemd /sbin/init


# Fix permissions
RUN chmod 755 /etc/default


# Clean rootfs from image-builder
RUN /usr/local/sbin/scw-builder-leave
",scaleway/image-debian,jessie/Dockerfile
075b5655cdcfd928010a40380aca210272bc4998,754,"FROM buildpack-deps:wheezy-scm

# gcc for cgo
RUN apt-get update && apt-get install -y --no-install-recommends \
		g++ \
		gcc \
		libc6-dev \
		make \
	&& rm -rf /var/lib/apt/lists/*

ENV GOLANG_VERSION 1.6.2
ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 e40c36ae71756198478624ed1bb4ce17597b3c19d243f3f0899bb5740d56212a

RUN curl -fsSL ""$GOLANG_DOWNLOAD_URL"" -o golang.tar.gz \
	&& echo ""$GOLANG_DOWNLOAD_SHA256  golang.tar.gz"" | sha256sum -c - \
	&& tar -C /usr/local -xzf golang.tar.gz \
	&& rm golang.tar.gz

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p ""$GOPATH/src"" ""$GOPATH/bin"" && chmod -R 777 ""$GOPATH""
WORKDIR $GOPATH

COPY go-wrapper /usr/local/bin/
",docker-library/golang,1.6/wheezy/Dockerfile
90d11b6142107b060eedbba65074795efb5602c9,1127,"FROM ubuntu:trusty

RUN apt-get update && \
	apt-get install -yq iptables apt-transport-https ca-certificates

ENV DIND_COMMIT=b8bed8832b77a478360ae946a69dab5e922b194e
ADD https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind /usr/local/bin/dind
RUN chmod +x /usr/local/bin/dind
VOLUME /var/lib/docker

ENV DOCKER_VERSION=1.8.2 GPG_KEY_ID=A87A2270 TUTUM_REPO=https://repo.tutum.co/ubuntu/ CERT_COMMON_NAME=*.node.tutum.io DOCKER_HOST=unix:///var/run/docker.sock DOCKER_HOST_LISTEN=tcp://0.0.0.0:2375 TUTUM_HOST=https://dashboard.tutum.co/

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys $GPG_KEY_ID
RUN gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys $GPG_KEY_ID
RUN echo deb [arch=amd64] $TUTUM_REPO tutum main > /etc/apt/sources.list.d/tutum.list
RUN apt-get update -q && DEBIAN_FRONTEND=noninteractive apt-get install -y tutum-agent
ADD https://get.docker.com/builds/Linux/x86_64/docker-$DOCKER_VERSION /usr/lib/tutum/docker
RUN chmod +x /usr/lib/tutum/docker && ln -s /usr/lib/tutum/docker /usr/bin/docker
ADD run.sh /

EXPOSE 2375
ENTRYPOINT [""/usr/local/bin/dind"", ""/run.sh""]",tutumcloud/node,1.8.2/Dockerfile
ddec35833044dea656471a65b7e22ee8a1aa0756,529,"FROM luxas/alpine

RUN apk-install haproxy pcre bash curl socat lua5.3 && \
	mkdir -p /etc/haproxy/errors /var/state/haproxy && \
	for ERROR_CODE in 400 403 404 408 500 502 503 504;do curl -sSL -o /etc/haproxy/errors/$ERROR_CODE.http \
	https://raw.githubusercontent.com/haproxy/haproxy-1.5/master/examples/errorfiles/$ERROR_CODE.http;done

COPY haproxy.cfg /etc/haproxy/
COPY service_loadbalancer 		\
	template.cfg				\
	loadbalancer.json			\
	haproxy_reload				\

	# Add to root dir: /
	/

ENTRYPOINT [""/service_loadbalancer""]
",luxas/kubernetes-on-arm,images/kubernetesonarm/loadbalancer/Dockerfile
b9d2cbafdaec27ce05c461a2a3019085076bc367,291,"FROM ubuntu:14.04
MAINTAINER ""Han van Venrooij"" <clerris@gmail.com>

# Install required tools
RUN set -x \
    && apt-get update \
    && apt-get install -y software-properties-common \
    && apt-get install -y git mingw-w64 make

# Run configuration
WORKDIR /sass
CMD [""/Compile/make.sh""]
",irundaia/sbt-sassify,bin/docker/buildWin32/Dockerfile
23aad761ac8e65f22cb990ff9b1be6092fafe3a7,635,"# Copyright 2014 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM saturnism/spring-boot:1.2.3-jdk-8-groovy-2.4.3-onbuild
",saturnism/spring-boot-docker,examples/helloworld-ui/Dockerfile
2f47a0565ed6fd36fe6c726d7abc573e853b791a,487,"# ""ported"" by Adam Miller <maxamillion@fedoraproject.org> from
#   https://github.com/fedora-cloud/Fedora-Dockerfiles
#
# Originally written for Fedora-Dockerfiles by
#   ""Jason Clark"" <jclark@redhat.com>

FROM centos:centos6
MAINTAINER The CentOS Project <cloud-ops@centos.org>

RUN yum -y update; yum clean all
RUN yum -y install epel-release; yum clean all
RUN yum -y install nodejs npm; yum clean all

ADD . /src

RUN cd /src; npm install

EXPOSE 8080

CMD [""node"", ""/src/index.js""]
",CentOS/CentOS-Dockerfiles,nodejs/centos6/Dockerfile
91cc721149ef8a7f9dcb342c7cdb8c7deadf95d0,1282,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file creates a standard build environment for building Kubernetes
FROM gcr.io/google_containers/kube-cross:KUBE_BUILD_IMAGE_CROSS_TAG

ENV http_proxy=KUBE_BUILD_HTTP_PROXY \
  https_proxy=KUBE_BUILD_HTTPS_PROXY \
  no_proxy=KUBE_BUILD_NO_PROXY

# Mark this as a kube-build container
RUN touch /kube-build-image

WORKDIR /go/src/k8s.io/kubernetes

# Propagate the git tree version into the build image
ADD kube-version-defs /kube-version-defs
ENV KUBE_GIT_VERSION_FILE /kube-version-defs

# Make output from the dockerized build go someplace else
ENV KUBE_OUTPUT_SUBPATH _output/dockerized

# Upload Kubernetes source
ADD kube-source.tar.gz /go/src/k8s.io/kubernetes/
",hyperhq/hypernetes,build/build-image/Dockerfile
f58326fa90a424b673db9999022fc36b40d8293a,125,"FROM alpine:3.4

RUN apk --no-cache add \
    ca-certificates

ADD bin/linux/gostatsd /bin/gostatsd

ENTRYPOINT [""gostatsd""]
",atlassian/gostatsd,build/Dockerfile
33969e296c5a1138bf7fc07a69289cab984ff545,202,"FROM java:8
VOLUME /tmp
ADD eureka-server-1.0.0-SNAPSHOT.jar /app.jar
RUN bash -c 'touch /app.jar'
EXPOSE 8761
ENTRYPOINT [""java"",""-Xmx256M"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]
",thomasletsch/moserp,backend/infrastructure/registry-service/src/main/docker/Dockerfile
405194345a7dd699ac35e8035354d7f3fcc10e9b,805,"FROM lambci/lambda-base

ENV PATH=/usr/local/bin:/usr/bin/:/bin \
    LD_LIBRARY_PATH=/lib64:/usr/lib64:/var/runtime:/var/task:/var/task/lib \
    PYTHONPATH=/var/runtime \
    LAMBDA_TASK_ROOT=/var/task \
    LAMBDA_RUNTIME_DIR=/var/runtime \
    LAMBDA_CONSOLE_SOCKET=16 \
    LAMBDA_SHARED_MEM_FD=11 \
    LAMBDA_LOG_FD=9 \
    LAMBDA_CONTROL_SOCKET=14 \
    LAMBDA_RUNTIME_LOAD_TIME=1530232235231

RUN rm -rf /var/runtime

ADD python2.7.tgz /

RUN rm /var/runtime/awslambda/runtime.so
ADD runtime-mock.py /var/runtime/awslambda/runtime.py

# Not sure why permissions don't work just by modifying the owner
RUN rm -rf /tmp && mkdir /tmp && chown -R sbx_user1051:495 /tmp && chmod 700 /tmp

WORKDIR /var/task

USER sbx_user1051

ENTRYPOINT [""/usr/bin/python2.7"", ""/var/runtime/awslambda/bootstrap.py""]

",lambci/docker-lambda,python2.7/run/Dockerfile
93fb0148966d9731e6014d144f3ceeae0408356d,1032,"# Copyright 2015 The Cluster-Insight Authors. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This uses the official Python Docker image, which includes
# an onbuild trigger that automatically does the following:
#   - installs a Python 2.7.* environment
#   - pip installs all packages inside ./requirements.txt
#   - copies the files in . to /usr/src/app on the image
#   - makes /usr/src/app the working directory
#   - runs CMD within that directory

FROM python:2-onbuild

CMD [""python"", ""./collector.py""]
",google/cluster-insight,collector/Dockerfile
19d5817246201c35b6aae0908bbce67f2ebf6743,463,"FROM alpine:3.2

RUN apk add --update bash curl jq ca-certificates && rm -rf /var/cache/apk/*
ADD ./run.sh /opt/rancher/run.sh
ADD https://github.com/coreos/etcd/releases/download/v2.2.1/etcd-v2.2.1-linux-amd64.tar.gz /etcd-v2.2.1-linux-amd64.tar.gz
RUN tar -xzvf /etcd-*.tar.gz -C /tmp && \
    mv /tmp/etcd-*/etcd /etcd && \
    mv /tmp/etcd-*/etcdctl /etcdctl && \
    rm -rf /tmp/etcd-* && rm -f /etcd-*.tar.gz

VOLUME ""/opt/rancher""

CMD [""/bin/sleep"", ""5""]
",rancher/compose-templates,etcd/containers/0.2.0/etcd/Dockerfile
57175524f0bd8e080c92e065a786b259945d0da5,521,"FROM ubuntu:14.04

RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        curl \
        git \
        gconf2 \
        gconf-service \
        libgtk2.0-0 \
        libnotify4 \
        libxtst6 \
        libnss3 \
        python \
        gvfs-bin \
        xdg-utils \
  && curl -L https://github.com/atom/atom/releases/download/v1.4.3/atom-amd64.deb -o atom.deb \
  && dpkg -i atom.deb \
  && apt-get purge -y --auto-remove \
        curl \
  && apt-get clean \
",ensime/ensime-atom,spec/issue144/Dockerfile
d1892c4c9e6e009d9c1e6058f703c50b2a328770,941,"# ""ported"" by Adam Miller <maxamillion@fedoraproject.org> from
#   https://github.com/fedora-cloud/Fedora-Dockerfiles
#
# Originally written for Fedora-Dockerfiles by
#   scollier <emailscottcollier@gmail.com>

FROM centos:centos7
MAINTAINER The CentOS Project <cloud-ops@centos.org>

# Install the appropriate software
RUN yum -y update; yum clean all
RUN yum -y install epel-release; yum clean all
RUN yum -y install x11vnc firefox xorg-x11-server-Xvfb xorg-x11-twm tigervnc-server xterm xorg-x11-font dejavu-sans-fonts dejavu-serif-fonts xdotool; yum clean all

# Add the xstartup file into the image
ADD ./xstartup /

RUN mkdir /.vnc
RUN x11vnc -storepasswd 123456 /.vnc/passwd
RUN  \cp -f ./xstartup /.vnc/.
RUN chmod -v +x /.vnc/xstartup
RUN sed -i '/\/etc\/X11\/xinit\/xinitrc-common/a [ -x /usr/bin/firefox ] && /usr/bin/firefox &' /etc/X11/xinit/xinitrc

EXPOSE 5901

CMD    [""vncserver"", ""-fg"" ]
# ENTRYPOINT [""vncserver"", ""-fg"" ]
",CentOS/CentOS-Dockerfiles,firefox/centos7/Dockerfile
10dbab041e8052125a16b03266e2c2366d127a50,92,"FROM ruby:2.2

ADD . /opt/crawler

WORKDIR /opt/crawler
RUN bundle install
ENV LANG C.UTF-8
",algolia/algoliasearch-zendesk,crawler/Dockerfile
5a84ca9a890acdcfdba843b405305d2e241dbe9b,91,"FROM scratch
MAINTAINER estesp@gmail.com

ENTRYPOINT [ ""/tinygo"" ]
EXPOSE 80
COPY tinygo /
",estesp/Dockerfiles,tinygo/Dockerfile
1c7d008de0778b1fb4ca8e018ac6ef9227e4740d,556,"FROM nodesource/wheezy-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_0.12/pool/main/n/nodejs/nodejs_0.12.13-1nodesource1~wheezy1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/wheezy/node/0.12.13/Dockerfile
abc2a737ba7a2a0ef4149421542d7e6f078b5f43,1262,"FROM dkarchmervue/moviepy

# https://github.com/ampervue/docker-ffmpeg-moviepy
# https://hub.docker.com/r/dkarchmervue/moviepy/
# Example credits to: 

MAINTAINER David Karchmer <dkarchmer@gmail.com>

# ============================================================================
# As an example, create a clip with a 'Hello World' title
#
# ~~~~
# # Pull image
# docker pull dkarchmervue/moviepy
#
# # Get example files and build new image
# git clone https://github.com/ampervue/docker-ffmpeg-moviepy
# cd example
# docker build -t example .
#
# # Mount current directory on container so that file can be written back to host
# # Assuming videos are on current directory
# docker run --rm -ti -v ${PWD}:/code example
# ls hello_world.mp4
# ~~~~
# ============================================================================

# Step 1: Install any Python packages
# ----------------------------------------

ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt

# Step 2: Copy Python script
# ----------------------------------------

ADD app /code/app

# Step 3: Configure entrypoint
# ----------------------------------------

CMD           [""-h""]
ENTRYPOINT    [""python"", ""app/script.py""]





",ampervue/docker-ffmpeg-moviepy,example/Dockerfile
a8a70f28d7f65e934563589e5b1a96084b766ece,1268,"FROM nvidia/cuda:7.0-cudnn4-devel
MAINTAINER Alex Kern <alex@pavlovml.com>

ENV CAFFE_GIT_REMOTE https://github.com/BVLC/caffe.git
ENV CAFFE_GIT_COMMIT master
ENV PATH /usr/local/caffe/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/caffe/lib:$LD_LIBRARY_PATH
ENV PYTHONPATH /usr/local/caffe/python:$PYTHONPATH

RUN apt-get update && \
    apt-get install -y \
      git make g++ libhdf5-serial-dev protobuf-compiler libgflags-dev \
      libgoogle-glog-dev libprotobuf-dev libleveldb-dev libsnappy-dev \
      libopencv-dev liblmdb-dev libatlas-base-dev gfortran && \
    apt-get install -y --no-install-recommends libboost-all-dev && \
    apt-get install -y python-dev python-pip python-numpy python-scipy \
      python-skimage python-opencv cython libboost-python-dev && \
    git clone $CAFFE_GIT_REMOTE caffe && \
    cd caffe && \
    git checkout $CAFFE_GIT_COMMIT

COPY Makefile.config caffe/Makefile.config

RUN cd caffe && \
    make all -j$(nproc) && \
    pip install --upgrade -r python/requirements.txt && \
    make pycaffe distribute && \
    mv distribute /usr/local/caffe && \
    cd /usr/local/caffe && \
    mv bin/caffe.bin bin/caffe && \
    for f in bin/*.bin; do mv $f bin/caffe_$(basename $f .bin); done && \
    rm -rf /caffe /var/lib/apt/lists/*
",pavlovml/gibraltar,bvlc/Dockerfile
2ca8e6bfa6294d9cd3f50db6ec2ec8b2df6ea74c,87,"FROM klaemo/couchdb:1.6.1

# Require valid user
COPY local.ini /usr/local/etc/couchdb/
",bigcompany/hook.io,docker/couchdb/Dockerfile
d5b90684c0bd6b0d4954ab02b6de9bf5aa309535,479,"FROM nodesource/fedora20-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_iojs_2.x/fc/20/x86_64/iojs-2.5.0-1nodesource.fc20.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/20/iojs/2.5.0/Dockerfile
e05a3c2a412a8350d3ab36507a58ce04006d3eab,325,"FROM ubuntu:precise 
MAINTAINER edxops 
ENV ANSIBLE_REPO=""https://github.com/edx/ansible""
ENV CONFIGURATION_REPO=""https://github.com/edx/configuration.git""
ENV CONFIGURATION_VERSION=""master""

ADD util/install/ansible-bootstrap.sh /tmp/ansible-bootstrap.sh
RUN chmod +x /tmp/ansible-bootstrap.sh
RUN /tmp/ansible-bootstrap.sh
",edx/configuration,docker/build/precise-common/Dockerfile
09ccf942d740e75ecdb73f30c9b0622441a252b3,1041,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php-apache-dev:alpine-3-php7
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/php-dev:alpine-3-php7

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm
ENV WEB_PHP_SOCKET  127.0.0.1:9000
ENV WEB_NO_CACHE_PATTERN  ""\.(css|js|gif|png|jpg|svg|json|xml)$""

COPY conf/ /opt/docker/

# Install apache
RUN /usr/local/bin/apk-install \
        apache2 \
        apache2-utils \
        apache2-proxy \
        apache2-ssl \
	&& sed -ri ' \
		s!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g; \
		s!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g; \
		' /etc/apache2/httpd.conf \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-apache --role webdevops-php-apache --role webdevops-apache-dev --role webdevops-php-dev \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/php-apache-dev/alpine-3-php7/Dockerfile
56ffa35f9a457ff547ac1352c3a7875a6a31644c,1852,"# ------------------------------------------------------------------------
#
# Copyright 2005-2015 WSO2, Inc. (http://wso2.com)
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
#
# ------------------------------------------------------------------------

FROM wso2/base-image:4.1.3
MAINTAINER dev@wso2.org

ENV DEBIAN_FRONTEND noninteractive
ENV WSO2_SERVER_TYPE brs
ENV WSO2_SERVER_VERSION 2.1.0
ENV TEMPLATE_MODULE_NAME wso2${WSO2_SERVER_TYPE}-${WSO2_SERVER_VERSION}-template-module-${PROJECT_VERSION}

# --------------------------------
# Copy scripts, packages & plugins
# --------------------------------
COPY scripts/init.sh /usr/local/bin/init.sh
COPY packages/${TEMPLATE_MODULE_NAME}.zip /opt/
COPY packages/wso2${WSO2_SERVER_TYPE}-${WSO2_SERVER_VERSION}.zip /opt/
COPY plugins ${PCA_HOME}/plugins

# -------------------------------
# Unzip and move template modules
# -------------------------------
WORKDIR /opt

RUN unzip /opt/${TEMPLATE_MODULE_NAME}.zip -d ${CONFIGURATOR_HOME}/template-modules && \
    rm -rf /opt/${TEMPLATE_MODULE_NAME}.zip

# ----------------------
# Expose container ports
# ----------------------

# mgt-http/mgt-https ports
EXPOSE 9763 9443

# -------------------------------
# Define entry point & start sshd
# -------------------------------

ENTRYPOINT /usr/local/bin/init.sh >> /tmp/init.sh.log 2>&1 | /usr/sbin/sshd -D
",wso2/private-paas-cartridges,wso2brs/2.1.0/docker/Dockerfile
305aecc5b3c250d7723e91750bed7526f7be8796,384,"FROM geometalab/keras_cuda
MAINTAINER Marcel Huber <marcel.huber@hsr.ch>
# Based on https://github.com/fchollet/hualos

# Install dependencies
RUN pip install Flask gevent

# Install hualos visualization for keras
RUN git clone https://github.com/fchollet/hualos.git && cd hualos

# Make port public for hualos
EXPOSE 9000:9000

# Set ~/keras as working directory
WORKDIR /root/keras
",geometalab/OSM-Crosswalk-Detection,docker/hualos_keras_cuda/Dockerfile
41d8d231b6fd7ea3e0c6c1eca9f8a86c856781c9,1102,"FROM ubuntu:14.04

MAINTAINER boxkite

RUN locale-gen en_US.UTF-8 && \
echo 'LANG=""en_US.UTF-8""' > /etc/default/locale

USER root

#Install the packages we need
RUN apt-get -q -y update
RUN DEBIAN_FRONTEND=noninteractive apt-get -q -y install \
        python-minimal \
        python-dev \
        python-virtualenv \
        libpq-dev \
        libxml2-dev \
        libxslt1-dev \
        wget \
        postfix \
        build-essential \
        git-core \
        apache2 \
        libapache2-mod-wsgi \
        libgeos-dev \
        libmysqlclient-dev \
        libcurl4-openssl-dev \
        libldap2-dev \
        libsasl2-dev \
        libssl-dev \
        gdal-bin \
        postgresql-client

#Configure webserver
ADD apache.wsgi /etc/ckan/apache.wsgi
ADD ckan_default.conf /etc/apache2/sites-available/ckan_default.conf
ADD ports.conf /etc/apache2/ports.conf
RUN a2ensite ckan_default
RUN a2dissite 000-default

RUN mkdir -p /var/www/storage
RUN chown -R www-data:www-data /var/www/
RUN usermod -u 1000 -d /var/www/storage www-data

CMD [""/usr/sbin/apachectl"", ""-DFOREGROUND""]
EXPOSE 5000
",datacats/datacats,docker/web/Dockerfile
1701219c7b0195c6c0935cf10ca8744e63c0a8af,942,"FROM ubuntu:vivid
MAINTAINER Joel Martin <github@martintribe.org>

##########################################################
# General requirements for testing or common across many
# implementations
##########################################################

RUN apt-get -y update

# Required for running tests
RUN apt-get -y install make python

# Some typical implementation and test requirements
RUN apt-get -y install curl libreadline-dev libedit-dev

RUN mkdir -p /mal
WORKDIR /mal

##########################################################
# Specific implementation requirements
##########################################################

# Java and maven
RUN apt-get -y install openjdk-7-jdk
#maven2
#ENV MAVEN_OPTS -Duser.home=/mal

ADD https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein \
    /usr/local/bin/lein
RUN chmod 0755 /usr/local/bin/lein
ENV LEIN_HOME /mal/.lein
ENV LEIN_JVM_OPTS -Duser.home=/mal

",kanaka/mal,clojure/Dockerfile
e0d9c3af4e1729fc4ed74a5edead6048c3f65a5e,538,"FROM phusion/baseimage

MAINTAINER anton@belodedenko.me

RUN apt-get update && \
    apt-get -y install vim dnsutils curl git sipcalc iptables autotools-dev \
    cdbs debhelper dh-autoreconf dpkg-dev gettext libev-dev libpcre3-dev \
    libudns-dev pkg-config fakeroot

RUN git clone https://github.com/dlundquist/sniproxy.git ${HOME}/sniproxy && \
    cd ${HOME}/sniproxy && \
    ./autogen.sh && dpkg-buildpackage && \
    dpkg -i ../sniproxy_*.deb

ADD functions /opt/functions

ADD sniproxy.sh /opt/sniproxy.sh

CMD /opt/sniproxy.sh
",ab77/netflix-proxy,docker-sniproxy/Dockerfile
77cfe37fb4d875e55d2ae31f94dc796e5e45bc5b,263,"FROM rubybench/ruby_releases_base:0.4
MAINTAINER Guo Xiang ""tgx_world@hotmail.com""

RUN git clone --verbose --branch master --single-branch https://github.com/ruby-bench/ruby-bench-suite.git

ADD runner runner
RUN chmod 755 runner

CMD /bin/bash -l -c ""./runner""
",ruby-bench/ruby-bench-docker,ruby/ruby_releases/ruby_benchmarks/Dockerfile
b3326260fd02448f1e1683b0f072730f48ebd5b9,598,"# Copyright 2015-2016 Yelp Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:trusty
",Yelp/paasta,general_itests/fake_simple_service/Dockerfile
8ebbe176d972eaf6ccb5b61b4c75ca413dfa94c5,328,"FROM webratio/gvm

# Defines environment variables
ENV GROOVY_VERSION 2.4.1

# Installs Groovy 
RUN /bin/bash -c ""source /root/.gvm/bin/gvm-init.sh && gvm install groovy ${GROOVY_VERSION}""
ENV GROOVY_HOME /root/.gvm/groovy/current
ENV PATH $GROOVY_HOME/bin:$PATH

WORKDIR /source
ENTRYPOINT [""groovy"", ""-Dgrape.root=/graperoot""]",webratio/docker,groovy/2.4.1/Dockerfile
97f9cc0857182ddd9e392f96311d1228fabc2b5f,93,"FROM wlanslovenija/nodewatcher-base

MAINTAINER Jernej Kos <jernej@kos.mx>

COPY ./etc /etc

",wlanslovenija/nodewatcher,docker/generator/Dockerfile
6bc4fca581787fb80bbb1a658a16d82162c5484a,176,"FROM dockerfile/python

MAINTAINER Bruno Bronosky <richard@bronosky.com>

RUN pip install -U git+https://github.com/RichardBronosky/aws-ecs-service-discovery.git

CMD [""bash""]
",RichardBronosky/aws-ecs-service-discovery,aws-ecs-service-discovery/Dockerfile
a9eedf22d915eae698cbfb1919288f13b94e6e07,266,"FROM classificationbot/base:latest

RUN mkdir -p /opt/bot
COPY data /opt/bot/data
COPY pre_trained_weights /opt/bot/pre_trained_weights

ENV PYTHONPATH $PYTHONPATH:/opt/bot
COPY gceutil.py data.py deploy.py model.py /opt/bot/
COPY deepanimebot /opt/bot/deepanimebot
",AntreasAntoniou/DeepClassificationBot,dockerfiles/deploy-base/Dockerfile
6a5b2ba39756c02712d7ec73573c49e1d611e307,728,"FROM debian:jessie
MAINTAINER hi+burpui@ziirish.me

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y supervisor logrotate locales wget curl python2.7-dev git python-virtualenv gunicorn python-pip cron libffi-dev \
 && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 && locale-gen en_US.UTF-8 \
 && dpkg-reconfigure -f noninteractive locales \
 && echo ""Europe/Paris"" >/etc/timezone \
 && dpkg-reconfigure -f noninteractive tzdata \
 && rm -rf /var/lib/apt/lists/*

ADD assets/setup/ /app/setup/
ADD assets/config/ /app/setup/config/

ADD assets/init /app/init
RUN chmod 755 /app/init

RUN chmod 755 /app/setup/install
RUN /app/setup/install

EXPOSE 5000/tcp

ENTRYPOINT [""/app/init""]
CMD [""app:start""]
",ziirish/burp-ui,docker/docker-burpui/Dockerfile
a223d432e4144eb1571d8244bc3b4582dd5ec6b6,959,"FROM php:5.6.6-apache

# PHP extensions come first, as they are less likely to change between Yii releases
RUN apt-get update \
    && apt-get -y install \
            git \
            g++ \
            libicu-dev \
            libmcrypt-dev \
            zlib1g-dev \
        --no-install-recommends \

    # Enable mod_rewrite
    && a2enmod rewrite \

    # Install PHP extensions
    && docker-php-ext-install intl \
    && docker-php-ext-install pdo_mysql \
    && docker-php-ext-install mbstring \
    && docker-php-ext-install mcrypt \
    && docker-php-ext-install zip \
    && pecl install apcu-beta && echo extension=apcu.so > /usr/local/etc/php/conf.d/apcu.ini \

    && apt-get purge -y g++ \
    && apt-get autoremove -y \
    && rm -r /var/lib/apt/lists/* \

    # Fix write permissions with shared folders
    && usermod -u 1000 www-data

# Apache config and composer wrapper
COPY apache2.conf /etc/apache2/apache2.conf

WORKDIR /var/www/html
",pastuhov/yii2-app-advanced-docker,docker/phpsdfsdfsdf/Dockerfile
fd41859516f6d335191dad8526eadfb522fcb064,566,"
##################################################
#                                                #
# DO NOT EDIT THIS FILE MANUALLY                 #
# AUTOMATICALLY CREATED WITH docker-builder.sh   #
#                                                #
##################################################
  

FROM whatwedo/base:latest
RUN apt-get update -y && \
curl -fsSL https://get.docker.com/ | sh && \
docker -v && \
apt-get autoremove -y && \
apt-get clean -y && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
LABEL ch.whatwedo.image.base=""whatwedo/docker""
",whatwedo/docker-base-images,dist/docker/Dockerfile
6ac52d96b89d22c100bd5dd869ff775e1699c3f5,1243,"FROM $USER/titan
NAME cassandra-client

# Download the various packages needed
RUN apt-get --yes install git maven

# Create necessary directories
RUN mkdir -p /service/runscripts/start /service/runscripts/stop /service/runscripts/restart /service/runscripts/test

# Add the control script to the image. 
ADD ./startnode /service/sbin/
ADD ./testusers.db /service/scripts/
ADD ./gods.json /service/scripts/
ADD ./naturalgraph.groovy /service/scripts/
ADD ./loadgods.groovy /service/scripts/
ADD ./rexexample.sh /service/scripts/

# Add our runscripts
ADD ./start01.sh /service/runscripts/start/
ADD ./restart01.sh /service/runscripts/restart/
ADD ./stop10.sh /service/runscripts/stop/
ADD ./test01.sh /service/runscripts/test/
RUN chmod a+x /service/sbin/startnode;chmod a+x /service/runscripts/start/*;chmod a+x /service/runscripts/stop/*;chmod a+x /service/runscripts/test/*;chmod a+x /service/runscripts/restart/*;chmod a+x /service/scripts/rexexample.sh

# Download the latest package
RUN wget $DOWNLOAD_URL/rexster-console-2.3.0.zip -P /service/packages
RUN cd /service/packages/;unzip rexster-console-2.3.0.zip

# Get rid of the tarballs.
RUN rm /service/packages/*zip
RUN rm -rf /var/cache/apt/archives/*
RUN rm -rf /var/lib/apt/lists/*",jhorey/ferry,ferry/data/dockerfiles/cassandra-client/Dockerfile
1466012b336bcdb010e232af8acff587f648bca5,1045,"FROM ubuntu:14.04

RUN apt-get update -y && \
    apt-get upgrade -y && \
    apt-get install -y ca-certificates wget apt-transport-https vim nano && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo ""deb https://packages.gitlab.com/runner/gitlab-ci-multi-runner/ubuntu/ `lsb_release -cs` main"" > /etc/apt/sources.list.d/runner_gitlab-ci-multi-runner.list && \
    wget -q -O - https://packages.gitlab.com/gpg.key | apt-key add - && \
    apt-get update -y && \
    apt-get install -y gitlab-ci-multi-runner && \
    wget -q https://github.com/docker/machine/releases/download/v0.7.0/docker-machine-Linux-x86_64 -O /usr/bin/docker-machine && \
    chmod +x /usr/bin/docker-machine && \
    apt-get clean && \
    mkdir -p /etc/gitlab-runner/certs && \
    chmod -R 700 /etc/gitlab-runner && \
    rm -rf /var/lib/apt/lists/*

ADD entrypoint /
RUN chmod +x /entrypoint

VOLUME [""/etc/gitlab-runner"", ""/home/gitlab-runner""]
ENTRYPOINT [""/entrypoint""]
CMD [""run"", ""--user=gitlab-runner"", ""--working-directory=/home/gitlab-runner""]
",ayufan/gitlab-ci-multi-runner,dockerfiles/ubuntu/Dockerfile
54b963af016bfd9a4e95908af75911d9ba6900b0,765,"FROM java:7

ENV ACTIVEMQ_VERSION 5.13.3
ENV ACTIVEMQ apache-activemq-$ACTIVEMQ_VERSION
ENV ACTIVEMQ_TCP=61616 ACTIVEMQ_AMQP=5672 ACTIVEMQ_STOMP=61613 ACTIVEMQ_MQTT=1883 ACTIVEMQ_WS=61614 ACTIVEMQ_UI=8161

ENV ACTIVEMQ_HOME /opt/activemq

RUN \
    curl -O http://archive.apache.org/dist/activemq/$ACTIVEMQ_VERSION/$ACTIVEMQ-bin.tar.gz && \
    mkdir -p /opt && \
    tar xf $ACTIVEMQ-bin.tar.gz -C /opt/ && \
    rm $ACTIVEMQ-bin.tar.gz && \
    ln -s /opt/$ACTIVEMQ $ACTIVEMQ_HOME && \
    useradd -r -M -d $ACTIVEMQ_HOME activemq && \
    chown activemq:activemq /opt/$ACTIVEMQ -R

USER activemq

WORKDIR $ACTIVEMQ_HOME
EXPOSE $ACTIVEMQ_TCP $ACTIVEMQ_AMQP $ACTIVEMQ_STOMP $ACTIVEMQ_MQTT $ACTIVEMQ_WS $ACTIVEMQ_UI

CMD [""/bin/bash"", ""-c"", ""bin/activemq console""]
",rmohr/docker-activemq,5.13.3/Dockerfile
d7d827c581822c93546759bcf6a93364f3317c2f,2986,"FROM centos:centos6
RUN yum -y install tar wget numactl libaio mutt python python-paramiko java-1.6.0-openjdk vi which
RUN wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
RUN wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
RUN rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm
RUN yum -y install bash-completion
ADD . /opt/emc/scaleio/siinstall/

RUN printf ""#!/bin/sh \n\
umount /dev/shm \n\
mount -t tmpfs -o rw,nosuid,nodev,noexec,relatime,size=524288k shm /dev/shm \n\
rpm -qa | egrep -i 'ecs|scaleio' \n\
test=\$? \n\
if ((\$test != 0 )); then \n\
  rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-mdm-*.x86_64.rpm \n\
  rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sds-*.x86_64.rpm \n\
  rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-gateway-*.rpm \n\
  sed -i 's/mdm.ip.addresses=/mdm.ip.addresses='\$IP_DOCKER_HOST','\$IP_SECONDARY_MDM'/' /opt/emc/scaleio/gateway/webapps/ROOT/WEB-INF/classes/gatewayUser.properties \n\
  sed -i 's/gateway-admin.password=/gateway-admin.password=password1?/' /opt/emc/scaleio/gateway/webapps/ROOT/WEB-INF/classes/gatewayUser.properties \n\
  service scaleio-gateway restart \n\
fi \n\
/opt/emc/scaleio/mdm/bin/run_bin.sh & \n\
/opt/emc/scaleio/sds/bin/run_bin.sh & \n\
if ((\$test != 0 )); then \n\
  sleep 10 \n\
  scli --mdm --add_primary_mdm --primary_mdm_ip \$IP_DOCKER_HOST --accept_license \n\
  sleep 5 \n\
  scli --login --username admin --password admin \n\
  scli --set_password --old_password admin --new_password password1? \n\
  scli --login --username admin --password password1? \n\
  scli --add_secondary_mdm --mdm_ip \$IP_DOCKER_HOST --secondary_mdm_ip \$IP_SECONDARY_MDM \n\
  scli --add_tb --mdm_ip \$IP_DOCKER_HOST --tb_ip \$IP_TB \n\
  scli --switch_to_cluster_mode --mdm_ip \$IP_DOCKER_HOST \n\
  #scli --mdm --set_license --license= \n\
  scli --add_protection_domain --mdm_ip \$IP_DOCKER_HOST --protection_domain_name domain1 \n\
  sleep 10 \n\
  until scli --sds --add_sds --mdm_ip \$IP_DOCKER_HOST --sds_ip \$IP_TB --sds_ip_role all --protection_domain_name domain1 --device_path \$DEVICE_LIST --sds_name sds1 --no_test --force_clean --i_am_sure; do \n\
    echo Retrying in 5 seconds \n\
    sleep 5 \n\
  done \n\
  until scli --sds --add_sds --mdm_ip \$IP_DOCKER_HOST --sds_ip \$IP_DOCKER_HOST --sds_ip_role all --protection_domain_name domain1 --device_path \$DEVICE_LIST --sds_name sds2 --no_test --force_clean --i_am_sure; do \n\
    echo Retrying in 5 seconds \n\
    sleep 5 \n\
  done \n\
  until scli --sds --add_sds --mdm_ip \$IP_DOCKER_HOST --sds_ip \$IP_SECONDARY_MDM --sds_ip_role all --protection_domain_name domain1 --device_path \$DEVICE_LIST --sds_name sds3 --no_test --force_clean --i_am_sure; do \n\
    echo Retrying in 5 seconds \n\
    sleep 5 \n\
  done \n\
fi \n\
while true;do \n\
  ps -ef \n\
  netstat -an \n\
  sleep 10 \n\
done"" > /start.sh

RUN chmod +x /start.sh
EXPOSE 443
EXPOSE 6611
EXPOSE 9011
EXPOSE 7072
ENTRYPOINT [""/start.sh""]
",djannot/scaleio-docker,scaleio-primary-mdm/Dockerfile
8a443ad95e126b863ab25acf5ce98d0f1adc0f1c,95,"FROM java
ADD /target/showcase-swarm.jar //
ENTRYPOINT [""java"", ""-jar"", ""/showcase-swarm.jar""]
",ButterFaces/ButterFaces,showcase/Dockerfile
1367ac0adc1c7a9a96df20c6c75cdf766f097951,624,"FROM ubuntu:14.04

RUN apt-get update && apt-get -y upgrade && apt-get -y install wget netcat
RUN mkdir -p /mattermost/data

RUN touch /etc/init/mattermost.conf
RUN echo $'start on runlevel [2345]\n\
stop on runlevel [016]\n\
respawn\n\
chdir /mattermost\n\
exec bin/platform\n'\
>> /etc/init/mattermost.conf

RUN wget https://releases.mattermost.com/2.1.0/mattermost-team-2.1.0-linux-amd64.tar.gz \
	&& tar -xvzf mattermost-team-2.1.0-linux-amd64.tar.gz && rm mattermost-team-2.1.0-linux-amd64.tar.gz

COPY config.template.json /
COPY docker-entry.sh /

RUN chmod +x /docker-entry.sh
ENTRYPOINT /docker-entry.sh

EXPOSE 80
",npcode/mattermost-docker,app/Dockerfile
ca58d814b90b621cae8c2ba39488346642a68645,458,"FROM haskell:7.10

WORKDIR /opt/server

RUN cabal update

# Add just the .cabal file to capture dependencies
COPY ./snap-example.cabal /opt/server/snap-example.cabal

# Docker will cache this command as a layer, freeing us up to
# modify source code without re-installing dependencies
# (unless the .cabal file changes!)
RUN cabal install --only-dependencies -j4

# Add and Install Application Code
COPY . /opt/server
RUN cabal install

CMD [""snap-example""]
",freebroccolo/docker-haskell,examples/7.10/snap/Dockerfile
3442a2b2cf124e960529c54a19b94f797544e49b,476,"FROM nodesource/fedora22-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_5.x/fc/22/x86_64/nodejs-5.4.0-1nodesource.fc22.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/22/node/5.4.0/Dockerfile
f8bb84574c12ed8aa4e41c189eb523b0fc49d6ea,543,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_1.x/pool/main/i/iojs/iojs_1.8.3-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/iojs/1.8.3/Dockerfile
48c4e861ea16eba05ef4cfce3e8e7dd5c3f017bf,2655,"FROM apache.inst:latest

MAINTAINER VonC <vonc@laposte.net>
USER root
ENV HOME_GIT /home/git
WORKDIR $HOME_GIT
RUN git clone https://github.com/Semantic-Org/Semantic-UI -b 0.9.1 --depth=1 Semantic-UI
RUN mkdir -p apache/log && mkdir -p git/logs && chown -R git:git git && \
    mkdir -p shippingbay_git/outgoing && mkdir -p shippingbay_git/incoming && \
    chown -R git:git shippingbay_git
WORKDIR $HOME_GIT/apache
COPY gen_ssl_key_and_crt.sh ./
RUN chmod +x gen_ssl_key_and_crt.sh
COPY update_cnf.sh  ./
COPY update_curl-ca-bundle  ./
COPY ctld ./
COPY check_gitolite ./
RUN mkdir logins
RUN ln -s  ${HOME_GIT}/apache/ctld  ${HOME_GIT}/bin/ctld && \
 ln -s  ${HOME_GIT}/apache/check_gitolite  ${HOME_GIT}/bin/check_gitolite && \
 ln -s  ${HOME_GIT}/apache/update_curl-ca-bundle  ${HOME_GIT}/bin/update_curl-ca-bundle
RUN chmod +x update_cnf.sh && \
    chmod +x update_curl-ca-bundle && \
    chmod +x  ctld && \
    chmod +x  check_gitolite
RUN ln -s /usr/local/apache2/conf/httpd.conf cnf1 && \
    ln -s ${HOME_GIT}/apache/env.conf cnf && \
    ln -s /usr/local/apache2/bin/envvars envvars
RUN chown -R git:git /home/git/apache

RUN ln -s a_global_ca.crt ${HOME_GIT}/apache/global_ca.crt && \
    ln -s ../.ssh/curl-ca-bundle.crt ${HOME_GIT}/apache/a_global_ca.crt && \
    ln -s /usr/local/apache2/bin/rotatelogs ${HOME_GIT}/bin/rotatelogs
RUN mkdir /usr/local/apache2/logs
RUN ln -s /usr/local/apache2/logs ${HOME_GIT}/apache/logs
RUN ./update_cnf.sh
RUN ./update_curl-ca-bundle
RUN mkdir ${HOME_GIT}/cgit

COPY o.cnf ./
RUN chown -R git:git /home/git/apache && \
    chown -R git:git /usr/local/apache2/logs

ENV HTTPD_PREFIX /usr/local/apache2
ENV PATH $PATH:$HTTPD_PREFIX/bin

USER git
RUN ./gen_ssl_key_and_crt.sh
USER root

RUN mkdir ${HOME_GIT}/gitweb
WORKDIR ${HOME_GIT}/gitweb
COPY gitweb/* ./
RUN ln -s /usr/share/gitweb gitweb && \
    ln -s ../Semantic-UI Semantic-UI && \
    ln -s gitweb/static static && \
    ln -s gitweb/gitweb.cgi gitweb.cgi
RUN cp gitweb/gitweb.cgi gitweb.cgi.ori
RUN ln -s gitweb-favicon.png favicon.ico && \
    ln -s gitweb.conf.pl cnf
RUN sed -i ""s#print \""</body>#print \""<script src=\\\\\""jquery.min.js\\\\\""></script>\\\\n<script src=\\\\\""document_ready.js\\\\\""></script>\\\\n<script>if (top != self) top.location=location</script>\\\\n</body>#"" ""/home/git/gitweb/gitweb/gitweb.cgi""

WORKDIR $HTTPD_PREFIX

COPY httpd-foreground /usr/local/bin/
RUN chmod +x /usr/local/bin/httpd-foreground

# EXPOSE 8091
EXPOSE 8543
EXPOSE 8553
WORKDIR $HOME_GIT/apache
COPY env.conf ./
RUN chown -R git:git /home/git/apache
USER git
# Define default command.
ENTRYPOINT [""/bin/sh"", ""-c""]
CMD [""apachectl -DFOREGROUND""]
",VonC/b2d,apache/Dockerfile
84a93aa903e984fe7dba3e215c2e7086868b28fb,95,"FROM golang
COPY ./scripts/bootstrap /scripts/bootstrap
RUN /scripts/bootstrap
WORKDIR /source
",rancher/rancher-compose,vendor/github.com/rancher/go-machine-service/Dockerfile
f79f26f28a93f35a6cd930ba60c46f720cc6f701,475,"FROM nodesource/centos6-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_0.12/el/6/x86_64/nodejs-0.12.8-1nodesource.el6.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/6/node/0.12.8/Dockerfile
5fe0f082daaaa3ea5057a4cd003c12859d22efd9,1038,"# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file creates a standard build environment for building cross
# platform go binary for the architecture kubernetes cares about.

FROM  golang:1.3
MAINTAINER  Joe Beda <jbeda@google.com>

ENV KUBE_CROSSPLATFORMS \
  linux/386 linux/arm \
  darwin/amd64 darwin/386 \
  windows/amd64 windows/386

RUN cd /usr/src/go/src && for platform in ${KUBE_CROSSPLATFORMS}; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean; done
",hortonworks/kubernetes-yarn,build/build-image/cross/Dockerfile
84af29591aae9e5adb79b8a53b5c1951f9d38a4f,473,"# Base
FROM ubuntu:vivid

# Meta-information
MAINTAINER Damien Coraboeuf <damien.coraboeuf@gmail.com>

# JDK installation
RUN apt-get update && apt-get install -y openjdk-8-jdk

# Exposing the ports
EXPOSE 8080

# Gets the Debian file in this image
COPY ontrack.deb /opt/ontrack/

# Installs it
RUN dpkg -i /opt/ontrack/ontrack.deb

# Gets the application.yml for local configuration
COPY application.yml /usr/lib/ontrack/

# This image must be run with --tty and /bin/cat
",nemerosa/ontrack,gradle/os-package/docker/debian/Dockerfile
db71b088f64549c28a4ac3e1cf408f034877c482,919,"FROM debian
MAINTAINER Ando Roots <ando@sqroot.eu>

# Install Sensu
RUN apt-get update && \
	apt-get install -y curl && \
	curl -O https://core.sensuapp.com/apt/pool/sensu/main/s/sensu/sensu_0.22.0-1_amd64.deb && \
	echo '00ad50b3b5ccaef23289bec35b89bea40525eea6 sensu_0.22.0-1_amd64.deb' >> sha1sums.txt && \
	sha1sum -c sha1sums.txt && \
	dpkg -i sensu_0.22.0-1_amd64.deb && \
	apt-get clean -y && \
	rm -rf /var/lib/apt/lists/* /etc/sensu/config.json.example sensu_0.22.0-1_amd64.deb sha1sums.txt

# Update PATH to include the embedded Ruby shipped with Sensu
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/sensu/embedded/bin

# Do not install Gem documentation when installing gems
RUN echo ""install: --no-rdoc --no-ri"" >> /etc/gemrc

# Dockerize is used to generate config files
# by replacing placeholders with values from the environment
COPY dockerize-0.2.0 /usr/local/bin/dockerize
",anroots/sensu-stack,sensu/Dockerfile
85fa30999ef4f18e169f43805beeac4854cec74a,1693,"FROM centos:7
MAINTAINER Juan Marin Otero <juan.marin.otero@gmail.com>

# Update base image
RUN yum -y update; yum clean all
RUN yum -y install wget
RUN yum -y install unzip
RUN wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
RUN rpm -ivh epel-release-7-5.noarch.rpm

RUN yum -y install python-setuptools; yum clean all
RUN easy_install pip
RUN pip install supervisor
RUN mkdir -p /var/log/supervisor
RUN mkdir -p /etc/supervisor/conf.d

# Add supervisor base configuration
ADD supervisor.conf /etc/supervisor/supervisor.conf

ADD OpenGeo.repo /etc/yum.repos.d/OpenGeo.repo

RUN yum -y install postgis21-postgresql93; yum clean all

# Install GDAL
RUN yum -y install gdal

RUN service postgresql-9.3 initdb
RUN service postgresql-9.3 start && /bin/su postgres -c ""createuser -d -s -r -l docker"" && /bin/su postgres -c ""psql postgres -c \""ALTER USER docker WITH ENCRYPTED PASSWORD 'docker'\"""" && service postgresql-9.3 stop
RUN service postgresql-9.3 start && /bin/su postgres -c ""createdb --owner docker docker"" && service postgresql-9.3 stop

RUN echo ""host all  all    0.0.0.0/0  md5"" >> /var/lib/pgsql/9.3/data/pg_hba.conf
RUN echo ""listen_addresses = '*'"" >> /var/lib/pgsql/9.3/data/postgresql.conf
RUN echo ""port = 5432"" >> /var/lib/pgsql/9.3/data/postgresql.conf

ENV PGDATA /var/lib/pgsql/9.3/data

EXPOSE 5432

ADD postgis.sv.conf /etc/supervisor/conf.d/

RUN wget -r ftp://ftp.census.gov/geo/tiger/TIGER2014/TRACT/

WORKDIR /ftp.census.gov/geo/tiger/TIGER2014/TRACT

COPY load_tract.sh /var/lib/pgsql/load_tract.sh

RUN /var/lib/pgsql/load_tract.sh 

WORKDIR /

RUN rm -rf ftp.census.gov

CMD [""supervisord"", ""-c"", ""/etc/supervisor/supervisor.conf""]

",cfpb/hmda-geo,docker/postgis-tracts/Dockerfile
8d3cfcedd2a3b7d1c9ee43c6660dca58e3e09d1b,957,"FROM debian:wheezy
MAINTAINER Ahmet Demir <ahmet2mir+github@gmail.com>

ENV RELEASE wheezy
ENV DEBIAN_FRONTEND noninteractive
ENV SHELL /bin/bash

RUN echo ""deb http://ftp.fr.debian.org/debian $RELEASE main contrib non-free"" > /etc/apt/sources.list;\
	echo ""deb http://ftp.debian.org/debian/ $RELEASE-updates main contrib non-free"" >> /etc/apt/sources.list;\
	echo ""deb http://security.debian.org/ $RELEASE/updates main contrib non-free"" >> /etc/apt/sources.list

RUN apt-get update

RUN	apt-get install -y --no-install-recommends apache2 php5 php5-sqlite unzip git ca-certificates curl

RUN curl -R -L -O http://lehollandaisvolant.net/blogotext/blogotext.zip \
    && unzip blogotext.zip -d /tmp \
	&& rm -rf /var/www \
	&& mv /tmp/blogotext /var/www \
	&& chmod 777 -R /var/www \
	&& /bin/sed 's,AllowOverride None,AllowOverride All,g' -i /etc/apache2/sites-available/default

COPY scripts/run.sh /run.sh
RUN chmod +x /run.sh

EXPOSE 80

CMD [""/run.sh""]

",ahmet2mir/dockerfiles,blogotext/Dockerfile
e47f84b4a7881e815ee16c79f4276cd96e74deeb,1056,"FROM ubuntu:trusty
MAINTAINER William Blankenship <wblankenship@nodesource.com>


RUN apt-get update \
 && apt-get install -y --force-yes --no-install-recommends \
      apt-transport-https \
      build-essential \
      curl \
      ca-certificates \
      git \
      lsb-release \
      python-all \
      rlwrap \
      wget \
 && rm -rf /var/lib/apt/lists/*;

RUN wget https://nsolid-download.nodesource.com/download/nsolid-node/release/v1.3.0/nsolid-v1.3.0-linux-x64.tar.xz \
 && wget https://nsolid-download.nodesource.com/download/nsolid-node/release/v1.3.0/SHASUMS256.txt.asc \
 && tar -xJC / --strip-components 1 -f *.tar.xz


RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;

RUN echo ""#!/usr/bin/env bash\nuntil grep \""eth0\"" 2>&1 > /dev/null <<< \""\$(NSOLID_SOCKET='' NSOLID_HUB='' nsolid -p 'console.log(require(\""os\"").networkInterfaces())')\"" ; do sleep .05; done; exec \""\$@\"""" >> /bin/wrap_nsolid && chmod +x /bin/wrap_nsolid

ENTRYPOINT [""wrap_nsolid""]

ENV NODE_ENV production

CMD [""nsolid""]
",nodesource/docker-nsolid,nsolid/v1.3.0/Dockerfile
9f800fd76e232c716a90e5c5223abb86f96f357e,287,"FROM ubuntu:14.04

MAINTAINER Traun Leyden <tleyden@couchbase.com>

ENV GOPATH /opt/go
ENV PATH $GOPATH/bin:$PATH

ADD refresh-cbfs /usr/local/bin/

# Get dependencies
RUN apt-get update && apt-get install -y \
  git \
  golang \
  mercurial

# Install cbfs + client 
RUN refresh-cbfs


",couchbaselabs/cbfs,dist/Dockerfile
080e98f155b4ae2fe5971cad3dd98cb2ad4c3ae7,1227,"FROM fedora:23

MAINTAINER Mike Kinney <mike.kinney@gmail.com>

# TODO: change from yum to dnf
RUN yum upgrade -y 
RUN yum install -y wget 
RUN wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-6.noarch.rpm
RUN rpm -ivh epel-release-7-6.noarch.rpm
RUN yum install -y autoconf automake gcc-c++ libdb4-cxx libdb4-cxx-devel boost-devel openssl-devel git bzip2 make file sudo tar

RUN cd /tmp && \
    wget http://protobuf.googlecode.com/files/protobuf-2.5.0.tar.bz2 && \
    tar xf protobuf-2.5.0.tar.bz2 && \
    cd /tmp/protobuf-2.5.0 && \
    ./configure && \
    make -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare && \
    make install

RUN echo ""/usr/local/lib"" >> /etc/ld.so.conf && \
    echo ""/usr/lib"" >> /etc/ld.so.conf && \
    ldconfig

ENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:$PKG_CONFIG_PATH

RUN yum install -y qt5-qtbase-devel qt5-qttools-devel qt5-qtwebkit-devel qt5-qtwebsockets qrencode-devel

RUN git clone https://github.com/vergecurrency/verge /coin/git

WORKDIR /coin/git

RUN ./autogen.sh && ./configure --with-gui=qt5 && make && mv src/VERGEd /coin/VERGEd

WORKDIR /coin
VOLUME [""/coin/home""]

ENV HOME /coin/home

CMD [""/coin/VERGEd""]

# P2P, RPC
EXPOSE 21102 20102
",vergecurrency/VERGE,contrib/docker/fedora23/Dockerfile
9b7662e07c64a9a9b6bc54aed7d02a8bd554c278,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.2.11-1-x86_64.pkg.tar.xz /tmp/php-5.2.11-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.2.11-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.2.11/Dockerfile
bb51d5e422429d7d3cc7d0b3bbfc59380c85adef,2235,"# Licensed under the Apache License, Version 2.0 (the ""License""); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

FROM debian:jessie

MAINTAINER Clemens Stolle klaemo@apache.org

ENV COUCHDB_VERSION master

RUN groupadd -r couchdb && useradd -d /usr/src/couchdb -g couchdb couchdb

# download dependencies
RUN apt-get update -y -qq && apt-get install -y --no-install-recommends \
    apt-transport-https \
    build-essential \
    ca-certificates \
    curl \
    erlang-dev \
    erlang-nox \
    git \
    haproxy \
    libcurl4-openssl-dev \
    libicu-dev \
    libmozjs185-dev \
    openssl \
    python \
 && curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \
 && echo 'deb https://deb.nodesource.com/node_4.x jessie main' > /etc/apt/sources.list.d/nodesource.list \
 && echo 'deb-src https://deb.nodesource.com/node_4.x jessie main' >> /etc/apt/sources.list.d/nodesource.list \
 && apt-get update -y -qq && apt-get install -y nodejs \
 && npm install -g grunt-cli \
 && cd /usr/src && git clone --depth 1 https://git-wip-us.apache.org/repos/asf/couchdb.git \
 && cd couchdb && git checkout $COUCHDB_VERSION \
 && cd /usr/src/couchdb && ./configure --disable-docs && make \
 && apt-get purge -y \
    binutils \
    build-essential \
    cpp \
    erlang-dev \
    git \
    libicu-dev \
    make \
    nodejs \
    perl \
 && apt-get autoremove -y && apt-get clean \
 && apt-get install -y libicu52 --no-install-recommends \
 && rm -rf /var/lib/apt/lists/* /usr/lib/node_modules src/fauxton/node_modules src/**/.git .git

# permissions
RUN chmod +x /usr/src/couchdb/dev/run && chown -R couchdb:couchdb /usr/src/couchdb

USER couchdb
EXPOSE 5984 15984 25984 35984 15986 25986 35986
WORKDIR /usr/src/couchdb

ENTRYPOINT [""/usr/src/couchdb/dev/run""]
CMD [""--with-haproxy""]
",klaemo/docker-couchdb,2.0-dev/Dockerfile
db31e1e7985a52335145ef4fa0a9edc12b4847f5,93,"FROM stackbrew/debian:wheezy

# Throw error
RUN arg

# Define default command.
CMD /bin/bash
",marmelab/gaudi,examples/error/redis/Dockerfile
9ba708f382fb23824e1c830466aa703e69879469,370,"FROM python:2.7

EXPOSE 8888

RUN apt-get update && apt-get install -y mysql-client

# based on python:2.7-onbuild, but if we use that image directly
# the above apt-get line runs too late.
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY requirements.txt /usr/src/app/
RUN pip install -r requirements.txt

COPY . /usr/src/app

CMD python blog.py --mysql_host=mysql
",tornadoweb/tornado,demos/blog/Dockerfile
1663a93fe6c8aec6379c64c3faf3005684d21ba8,236,"FROM alpine
RUN apk --update add expect bash openssh curl \
  && ssh-keygen -t rsa -N """" -f /root/.ssh/id_rsa \
  && curl -Ls https://github.com/progrium/basht/releases/download/v0.1.0/basht_0.1.0_Linux_x86_64.tgz \
    | tar -zxC /bin
",gliderlabs/sshfront,tests/Dockerfile
2ee75e5103afa22b3903bf90d270848d774d09ef,54,"FROM straitjacket/lang-elixir

ENTRYPOINT [""escript""]
",instructure/straitjacket,languages/erlang/Dockerfile
1fbe5ba5a486e941ad22941bd2a2b2c4de34687a,695,"FROM gliderlabs/alpine
MAINTAINER kost - https://github.com/kost

RUN apk --update add php-apache2 curl php-cli php-json php-phar php-openssl && rm -f /var/cache/apk/* && \
curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \
mkdir /app && chown -R apache:apache /app && \
sed -i 's#^DocumentRoot "".*#DocumentRoot ""/app""#g' /etc/apache2/httpd.conf && \
sed -i 's#AllowOverride none#AllowOverride All#' /etc/apache2/httpd.conf && \
echo ""Success""

ADD scripts/run.sh /scripts/run.sh
RUN mkdir /scripts/pre-exec.d && \
mkdir /scripts/pre-init.d && \
chmod -R 755 /scripts

EXPOSE 80

# VOLUME /app
WORKDIR /app

ENTRYPOINT [""/scripts/run.sh""]

",kost/docker-alpine,alpine-apache-php/Dockerfile
ee3b560ab0fe44aa2950c4a4e07d5750c871008d,2512,"FROM centos:centos7

# PostgreSQL image for OpenShift.
# Volumes:
#  * /var/lib/psql/data   - Database cluster for PostgreSQL
# Environment:
#  * $POSTGRESQL_USER     - Database user name
#  * $POSTGRESQL_PASSWORD - User's password
#  * $POSTGRESQL_DATABASE - Name of the database to create
#  * $POSTGRESQL_ADMIN_PASSWORD (Optional) - Password for the 'postgres'
#                           PostgreSQL administrative account

MAINTAINER SoftwareCollections.org <sclorg@redhat.com>

ENV POSTGRESQL_VERSION=9.5 \
    HOME=/var/lib/pgsql \
    PGUSER=postgres

LABEL io.k8s.description=""PostgreSQL is an advanced Object-Relational database management system"" \
      io.k8s.display-name=""PostgreSQL 9.5"" \
      io.openshift.expose-services=""5432:postgresql"" \
      io.openshift.tags=""database,postgresql,postgresql95,rh-postgresql95""

EXPOSE 5432

# This image must forever use UID 26 for postgres user so our volumes are
# safe in the future. This should *never* change, the last test is there
# to make sure of that.
RUN rpmkeys --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 && \
    yum install -y centos-release-scl-rh epel-release && \
    yum-config-manager --enable centos-sclo-rh-testing && \
    yum -y install rh-postgresql95 rh-postgresql95-postgresql-contrib --nogpgcheck && \
    INSTALL_PKGS=""rsync tar gettext bind-utils nss_wrapper"" && \
    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum clean all && \
    localedef -f UTF-8 -i en_US en_US.UTF-8 && \
    mkdir -p /var/lib/pgsql/data && \
    test ""$(id postgres)"" = ""uid=26(postgres) gid=26(postgres) groups=26(postgres)""

# Loosen permission bits to avoid problems running container with arbitrary UID
ADD root /
RUN /usr/libexec/fix-permissions /var/lib/pgsql && \
    /usr/libexec/fix-permissions /var/run/postgresql

# Get prefix path and path to scripts rather than hard-code them in scripts
ENV CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/postgresql \
    ENABLED_COLLECTIONS=rh-postgresql95

# When bash is started non-interactively, to run a shell script, for example it
# looks for this variable and source the content of this file. This will enable
# the SCL for all scripts without need to do 'scl enable'.
ENV BASH_ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
    ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
    PROMPT_COMMAND="". ${CONTAINER_SCRIPTS_PATH}/scl_enable""

VOLUME [""/var/lib/pgsql/data""]

USER 26

ENTRYPOINT [""container-entrypoint""]
CMD [""run-postgresql""]
",sclorg/rhscl-dockerfiles,centos7.rh-postgresql95/Dockerfile
b38206568f9dca61b5acda369d9209453be7e0dc,1354,"FROM socketplane/busybox:latest
MAINTAINER The SocketPlane Team <support@socketplane.io>
ENV OVS_VERSION 2.1.0
ENV SUPERVISOR_STDOUT_VERSION 0.1.1
# Configure supervisord
RUN mkdir -p /var/log/supervisor/
ADD supervisord.conf /etc/
# Install supervisor_stdout
WORKDIR /opt
RUN mkdir -p /var/log/supervisor/
RUN mkdir -p /etc/openvswitch
RUN wget https://pypi.python.org/packages/source/s/supervisor-stdout/supervisor-stdout-$SUPERVISOR_STDOUT_VERSION.tar.gz --no-check-certificate && \
	tar -xzvf supervisor-stdout-0.1.1.tar.gz && \
	mv supervisor-stdout-$SUPERVISOR_STDOUT_VERSION supervisor-stdout && \
	rm supervisor-stdout-0.1.1.tar.gz && \
	cd supervisor-stdout && \
	python setup.py install -q
# Get Open vSwitch
WORKDIR /
RUN wget https://s3-us-west-2.amazonaws.com/docker-ovs/openvswitch-$OVS_VERSION.tar.gz --no-check-certificate && \
	tar -xzvf openvswitch-$OVS_VERSION.tar.gz &&\
	mv openvswitch-$OVS_VERSION openvswitch &&\
	cp -r openvswitch/* / &&\
	rm -r openvswitch &&\
	rm openvswitch-$OVS_VERSION.tar.gz 
ADD configure-ovs.sh /usr/local/share/openvswitch/
# Create the database
RUN ovsdb-tool create /etc/openvswitch/conf.db /usr/local/share/openvswitch/vswitch.ovsschema
# Put the OVS Python modules on the Python Path
RUN cp -r /usr/local/share/openvswitch/python/ovs /usr/lib/python2.7/site-packages/ovs
CMD [""/usr/bin/supervisord""]
",socketplane/docker-ovs,2.1.0/Dockerfile
a17a8bc5ef4e3d229228c2f33362f1d38b24206e,3619,"FROM alpine:3.4
MAINTAINER James Phillips <james@hashicorp.com> (@slackpad)

# This is the release of Consul to pull in.
ENV CONSUL_VERSION=0.6.4

# This is the release of https://github.com/hashicorp/docker-base to pull in order
# to provide HashiCorp-built versions of basic utilities like dumb-init and gosu.
ENV DOCKER_BASE_VERSION=0.0.4

# Create a consul user and group first so the IDs get set the same way, even as
# the rest of this may change over time.
RUN addgroup consul && \
    adduser -S -G consul consul

# Set up certificates, our base tools, and Consul.
RUN apk add --no-cache ca-certificates gnupg openssl && \
    gpg --recv-keys 91A6E7F85D05C65630BEF18951852D87348FFC4C && \
    mkdir -p /tmp/build && \
    cd /tmp/build && \
    wget https://releases.hashicorp.com/docker-base/${DOCKER_BASE_VERSION}/docker-base_${DOCKER_BASE_VERSION}_linux_amd64.zip && \
    wget https://releases.hashicorp.com/docker-base/${DOCKER_BASE_VERSION}/docker-base_${DOCKER_BASE_VERSION}_SHA256SUMS && \
    wget https://releases.hashicorp.com/docker-base/${DOCKER_BASE_VERSION}/docker-base_${DOCKER_BASE_VERSION}_SHA256SUMS.sig && \
    gpg --batch --verify docker-base_${DOCKER_BASE_VERSION}_SHA256SUMS.sig docker-base_${DOCKER_BASE_VERSION}_SHA256SUMS && \
    grep ${DOCKER_BASE_VERSION}_linux_amd64.zip docker-base_${DOCKER_BASE_VERSION}_SHA256SUMS | sha256sum -c && \
    unzip docker-base_${DOCKER_BASE_VERSION}_linux_amd64.zip && \
    cp bin/gosu bin/dumb-init /bin && \
    wget https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip && \
    wget https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS && \
    wget https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig && \
    gpg --batch --verify consul_${CONSUL_VERSION}_SHA256SUMS.sig consul_${CONSUL_VERSION}_SHA256SUMS && \
    grep consul_${CONSUL_VERSION}_linux_amd64.zip consul_${CONSUL_VERSION}_SHA256SUMS | sha256sum -c && \
    unzip -d /bin consul_${CONSUL_VERSION}_linux_amd64.zip && \
    cd /tmp && \
    rm -rf /tmp/build && \
    apk del gnupg openssl && \
    rm -rf /root/.gnupg

# The /consul/data dir is used by Consul to store state. The agent will be started
# with /consul/config as the configuration directory so you can add additional
# config files in that location.
RUN mkdir -p /consul/data && \
    mkdir -p /consul/config && \
    chown -R consul:consul /consul

# Expose the consul data directory as a volume since there's mutable state in there.
VOLUME /consul/data

# Server RPC is used for communication between Consul clients and servers for internal
# request forwarding.
EXPOSE 8300

# Serf LAN and WAN (WAN is used only by Consul servers) are used for gossip between
# Consul agents. LAN is within the datacenter and WAN is between just the Consul
# servers in all datacenters.
EXPOSE 8301 8301/udp 8302 8302/udp

# CLI, HTTP, and DNS (both TCP and UDP) are the primary interfaces that applications
# use to interact with Consul.
EXPOSE 8400 8500 8600 8600/udp

# Consul doesn't need root privileges so we run it as the consul user from the
# entry point script. The entry point script also uses dumb-init as the top-level
# process to reap any zombie processes created by Consul sub-processes.
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
ENTRYPOINT [""docker-entrypoint.sh""]

# By default you'll get a single-node development server that stores everything
# in RAM, exposes a web UI, and bootstraps itself. Don't use this configuration
# for production.
CMD [""agent"", ""-dev""]
",hashicorp/docker-consul,0.6/Dockerfile
41c7c61bfb19b39b3d4fececb4e266ec14c56744,754,"FROM buildpack-deps:jessie-scm

# gcc for cgo
RUN apt-get update && apt-get install -y --no-install-recommends \
		g++ \
		gcc \
		libc6-dev \
		make \
	&& rm -rf /var/lib/apt/lists/*

ENV GOLANG_VERSION 1.6.2
ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 e40c36ae71756198478624ed1bb4ce17597b3c19d243f3f0899bb5740d56212a

RUN curl -fsSL ""$GOLANG_DOWNLOAD_URL"" -o golang.tar.gz \
	&& echo ""$GOLANG_DOWNLOAD_SHA256  golang.tar.gz"" | sha256sum -c - \
	&& tar -C /usr/local -xzf golang.tar.gz \
	&& rm golang.tar.gz

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p ""$GOPATH/src"" ""$GOPATH/bin"" && chmod -R 777 ""$GOPATH""
WORKDIR $GOPATH

COPY go-wrapper /usr/local/bin/
",docker-library/golang,1.6/Dockerfile
048ad17678629c8c892a460a956f942d257b1b2b,524,"FROM windowsservercore

ENV NPM_CONFIG_LOGLEVEL info
ENV NODE_VERSION 4.4.6
ENV NODE_SHA256 cff69594b5cf2ad1bf9d9c706ab43a8afd7531e187fa44cec626618b49164cce

RUN powershell -Command \
    wget -Uri https://nodejs.org/dist/v%NODE_VERSION%/node-v%NODE_VERSION%-x64.msi -OutFile node.msi -UseBasicParsing ; \
    if ((Get-FileHash node.msi -Algorithm sha256).Hash -ne $env:NODE_SHA256) {exit 1} ; \
    Start-Process -FilePath msiexec -ArgumentList /q, /i, node.msi -Wait ; \
    Remove-Item -Path node.msi

CMD [ ""node.exe"" ]
",StefanScherer/dockerfiles-windows,node/4.4/Dockerfile
86e1a86016a5e17035b7157bb10dade31d982bd9,656,"FROM colindensem/elixir

# Curl required to install nodejs
# Nodejs required to run brunch tasks
# inotify-tools for livereload

RUN apt-get update \
    && apt-get install -y curl inotify-tools postgresql-client \
    && curl -sL https://deb.nodesource.com/setup_0.12 | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN mix local.hex --force \
    && mix hex.info \
    && mix local.rebar --force \
    && mix archive.install https://github.com/phoenixframework/phoenix/releases/download/v1.0.2/phoenix_new-1.0.2.ez

RUN mkdir /app
ADD . /app
WORKDIR /app


CMD [""/app/start.sh""]
",colindensem/peep-stack,applications/api/Dockerfile
65416f211d6525252811c161bfe4c7e4cfc0408e,308,"FROM google/golang:latest

ADD . /gopath/src/github.com/GoogleCloudPlatform/kubernetes/examples/guestbook-go/_src

WORKDIR /gopath/src/github.com/GoogleCloudPlatform/kubernetes/examples/guestbook-go/
RUN cd _src/ && go get && go build -o ../bin/guestbook
RUN cp _src/guestbook/Dockerfile .

CMD tar cvzf - .
",mesosphere/kubernetes,examples/guestbook-go/_src/Dockerfile
46a533d6031b2138b1689bbdc16efb72e7fba1e8,293,"FROM ubuntu:latest
MAINTAINER Petter Rasmussen ""petter.rasmussen@gmail.com""

# Add user
RUN groupadd glot
RUN useradd -m -d /home/glot -g glot -s /bin/bash glot

# Copy files
COPY files/runner /home/glot/

USER glot
WORKDIR /home/glot/
CMD [""/home/glot/runner""]
ENTRYPOINT ""/home/glot/runner""
",prasmussen/glot-containers,bash/latest/Dockerfile
463b35a4e4d1ad956012c9b4ec3c0d8e400c2efd,1545,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:14.04

RUN \
  if [ -f ""/tmp/apt-proxy"" ]; then \
    APT_PROXY=$(cat ""/tmp/apt-proxy""); \
    echo ""Using apt-proxy: $APT_PROXY""; \
    echo ""Acquire::http::Proxy \""$APT_PROXY\"";"" > /etc/apt/apt.conf.d/90-apt-proxy.conf ; \
  fi

# Add mesos repo
RUN \
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF && \
  echo deb http://repos.mesosphere.io/ubuntu trusty main > /etc/apt/sources.list.d/mesosphere.list

# Install deps
RUN \
  apt-get update && \
  apt-get install -qy \
    git vim zip mc curl \
    openjdk-7-jdk mesos libc6

# Add kafka-mesos & kafka
COPY .docker/kafka* /opt/kafka-mesos/

WORKDIR /opt/kafka-mesos
EXPOSE 7000

ENTRYPOINT [""/usr/bin/java"", ""-jar"", ""/opt/kafka-mesos/kafka-mesos-0.9.5.0.jar"", ""scheduler""]
",mesos/kafka,src/docker/Dockerfile
89876ad3a5f8df322aaba62fa470adaf53a4b58b,240,"FROM node:4.4.6-nano

RUN mkdir \app
WORKDIR /app

ONBUILD COPY package.json package.json
ONBUILD RUN npm install & rd /s /q %APPDATA%\npm-cache & for /d %G in (""%TEMP%\npm-*"") do rd /s /q ""%~G""
ONBUILD COPY . .

CMD [ ""npm.cmd"", ""start"" ]
",StefanScherer/dockerfiles-windows,node/4.4/nano/onbuild/Dockerfile
142f6ab36f22e573725aca81b9df73889c319330,167,"FROM appengine-ruby-base
COPY Gemfile Gemfile.lock /app/
RUN bundle install && rbenv rehash
COPY . /app/
ENTRYPOINT bundle exec rackup -p 8080 -E production config.ru
",GoogleCloudPlatform/ruby-docker,appengine/test/minimal_app/Dockerfile
ab38be3f5e087bed78e388b9a0d55d0b96d24a83,80,"FROM buildpack-deps:jessie

RUN useradd docker
USER docker

ENTRYPOINT [""perl""]
",instructure/straitjacket,languages/perl/Dockerfile
323e4a0f76898a727e0ede86e5281075d1547681,368,"FROM ubuntu:14.04
MAINTAINER izuolan <i@zuolan.me>

RUN apt-get update && apt-get install shellinabox

# a new user is needed to get access to the container
RUN useradd username
RUN echo ""username:userpassword"" | chpasswd

#this is needed to gain root access
RUN echo ""root:rootpassword"" | chpasswd

EXPOSE 4200

CMD [""shellinaboxd"", ""-s"", ""/:LOGIN"", ""--disable-ssl""]
",izuolan/dockerfiles,shellinabox/Dockerfile
1925b7e1e5f53add2b00c971e89a034a39252a8d,130,"FROM scratch
ADD https://github.com/multiarch/qemu-user-static/releases/download/v2.5.0/x86_64_qemu-mips64-static.tar.xz /usr/bin
",multiarch/qemu-user-static,archs/x86_64-mips64/Dockerfile
a1bdfca83278a8c2f08ca5e40d6d8421ca1e9e46,1256,"FROM ubuntu:14.04

# This part is taken from the official docker image --------------------

RUN apt-get update && apt-get install -y \
		build-essential ca-certificates curl \
		bzr git mercurial openssh-client\
		--no-install-recommends

ENV GOLANG_VERSION 1.3

RUN curl -sSL http://golang.org/dl/go$GOLANG_VERSION.src.tar.gz \
	| tar -v -C /usr/src -xz
WORKDIR /usr/src/go

RUN cd src && ./make.bash --no-clean 2>&1

ENV PATH /usr/src/go/bin:$PATH

RUN mkdir -p /go/src
ENV GOPATH /go
ENV PATH /go/bin:$PATH
WORKDIR /go

# ----------------------------------------------------------------------


RUN useradd -m git

ENV GOGS_PATH $GOPATH/src/github.com/go-gitea/gitea
ENV GOGS_CUSTOM_CONF_PATH $GOGS_PATH/custom/conf
ENV GOGS_CUSTOM_CONF $GOGS_CUSTOM_CONF_PATH/app.ini

RUN go get -u -d github.com/go-gitea/gitea
# WORKDIR $GOGS_PATH
WORKDIR /go/src/github.com/go-gitea/gitea
RUN go build github.com/go-gitea/gitea
RUN chown -R git $GOGS_PATH

ADD init_gogs.sh /tmp/
RUN chown git /tmp/init_gogs.sh
RUN chmod +x /tmp/init_gogs.sh

USER git
ENV HOME /home/git
ENV USER git
ENV PATH $GOGS_PATH:$PATH

RUN git config --global user.name ""GoGS"" && git config --global user.email ""gogitservice@gmail.com""

ENTRYPOINT [""/tmp/init_gogs.sh""]
CMD [""gogs"", ""web""]
",go-gitea/gitea,docker/blocks/docker_gogs/Dockerfile
3b60f49d2bffa2c04a99be228c9b0f9aabc2a6ca,988,"# Copyright 2015 The Kubernetes Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


FROM gcr.io/google_containers/ubuntu-slim:0.3

COPY build.sh /tmp

RUN /tmp/build.sh

# Create symlinks to redirect nginx logs to stdout and stderr docker log collector
# This only works if nginx is started with CMD or ENTRYPOINT
RUN ln -sf /dev/stdout /var/log/nginx/access.log
RUN ln -sf /dev/stderr /var/log/nginx/error.log

EXPOSE 80 443

CMD [""nginx"", ""-g"", ""daemon off;""]
",kubernetes/contrib,images/nginx-slim/Dockerfile
77852c607b40e0e83d857b3438e1e03df6b4f649,2323,"FROM andreptb/oracle-java:8-alpine
MAINTAINER Andre Albino Pereira <andreptb@gmail.com>

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p ""$CATALINA_HOME""
WORKDIR $CATALINA_HOME

ENV TOMCAT_MAJOR 6
ENV TOMCAT_VERSION 6.0.45
ENV MIRROR http://ftp.unicamp.br/pub

# see https://www.apache.org/dist/tomcat/tomcat-8/KEYS
RUN set -x \
  && apk --no-cache add --virtual build-dependencies wget ca-certificates tar alpine-sdk gnupg \
  && gpg --keyserver pool.sks-keyservers.net --recv-keys \
	05AB33110949707C93A279E3D3EFE6B686867BA6 \
	07E48665A34DCAFAE522E5E6266191C37C037D42 \
	47309207D818FFD8DCD3F83F1931D684307A10A5 \
	541FBE7D8F78B25E055DDEE13C370389288584E7 \
	61B832AC2F1C5A90F0F9B00A1C506407564C17A3 \
	79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED \
	9BA44C2621385CB966EBA586F72C284D731FABEE \
	A27677289986DB50844682F8ACB77FC2E86E29AC \
	A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 \
	DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 \
	F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE \
	F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23 \
  && update-ca-certificates \
	&& wget -q  ""${MIRROR}/apache/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"" \
  && wget -q  ""https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc"" \
  && gpg --verify apache-tomcat-$TOMCAT_VERSION.tar.gz.asc \
	&& tar -xf apache-tomcat-$TOMCAT_VERSION.tar.gz --strip-components=1 \
	&& rm bin/*.bat \
	&& rm apache-tomcat-$TOMCAT_VERSION.tar.gz \
  && cd /tmp \
  && wget -q ""${MIRROR}/apache/tomcat/tomcat-connectors/native/1.2.7/source/tomcat-native-1.2.7-src.tar.gz"" \
  && wget -q ""${MIRROR}/apache/apr/apr-1.5.2.tar.gz"" \
  && tar -xf apr-1.5.2.tar.gz && cd apr-1.5.2 && ./configure && make && make install \
  && cd /tmp && tar -xf tomcat-native-1.2.7-src.tar.gz && cd tomcat-native-1.2.7-src/native \
  && ./configure --with-apr=/usr/local/apr/bin --with-java-home=$JAVA_HOME --with-ssl=no --prefix=$CATALINA_HOME \
  && make && make install \
  && ln -sv $CATALINA_HOME/lib/libtcnative-1.so /usr/lib/ && ln -sv /lib/libz.so.1 /usr/lib/libz.so.1 \
  && rm -rf /tmp/* \
  && sed -i 's/SSLEngine=""on""/SSLEngine=""off""/g' $CATALINA_HOME/conf/server.xml \
  && apk del --purge build-dependencies

EXPOSE 8080
CMD [""catalina.sh"", ""run""]
",andreptb/Dockerfiles,tomcat/6/alpine/jdk-8/Dockerfile
db21bfe413a414725570cf637497f6a2981b94f5,528,"#
# Scudcloud Docker file.
# Credits: Heavily inspired by:https://github.com/jfrazelle/dockerfiles/blob/master/slack/Dockerfile
#

FROM ubuntu:14.04
MAINTAINER Mark Mandel <mark.mandel@gmail.com>

RUN apt-get update && \
    apt-get install -y software-properties-common

RUN apt-add-repository -y ppa:rael-gc/scudcloud && \
    apt-get update && \
    apt-get install -y scudcloud hunspell-en-us myspell-en-au myspell-en-gb \
    dbus-x11 python3-dbus libnotify-bin git

ENTRYPOINT [""/usr/bin/scudcloud""]
#ENTRYPOINT [""bash""]

",markmandel/dotfiles,sandboxes/scudcloud/Dockerfile
e12fffa3e4ac1a269883b38c097edcf62f012518,425,"FROM ubuntu
MAINTAINER Kimbro Staken

RUN apt-get install -y software-properties-common python
RUN add-apt-repository ppa:chris-lea/node.js
RUN echo ""deb http://us.archive.ubuntu.com/ubuntu/ precise universe"" >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y nodejs
#RUN apt-get install -y nodejs=0.6.12~dfsg1-1ubuntu1
RUN mkdir /var/www

ADD app.js /var/www/app.js

CMD [""/usr/bin/node"", ""/var/www/app.js""] ",Microsoft/vscode,extensions/docker/test/colorize-fixtures/Dockerfile
fa194ec6784d897e802c26787de55289c4b0c687,1491,"FROM suchja/x11client:ubuntu
MAINTAINER Jan Suchotzki <jan@suchotzki.de>

USER root

# Define which versions we need
ENV WINE_MONO_VERSION 4.5.6
ENV WINE_GECKO_VERSION 2.40

# Install packages for building the image
RUN apt-get update -y \
	&& apt-get install -y --no-install-recommends \
		curl \
		unzip \
		software-properties-common \
	&& add-apt-repository ppa:ubuntu-wine/ppa

# Install wine and related packages
RUN dpkg --add-architecture i386 \
	&& apt-get update -y \
	&& apt-get install -y --no-install-recommends \
		wine1.8 \
		wine-gecko$WINE_GECKO_VERSION:i386 \
		wine-gecko$WINE_GECKO_VERSION:amd64 \
		wine-mono$WINE_MONO_VERSION \
	&& rm -rf /var/lib/apt/lists/*

# Use latest version of winetricks from github
RUN curl -SL 'https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks' -o /usr/local/bin/winetricks \
	&& chmod +x /usr/local/bin/winetricks

# Wine really doesn't like to be run as root, so let's use a non-root user
USER xclient
ENV HOME /home/xclient
ENV WINEPREFIX /home/xclient/.wine

# Tell wine to behave like a 32-bit Windows.
# https://wiki.archlinux.org/index.php/Wine#WINEARCH
ENV WINEARCH win32

# We have a development build of wine, which means tons of debug output.
# Thus we should suppress it: https://www.winehq.org/docs/winedev-guide/dbg-control
ENV WINEDEBUG -all

# Use xclient's home dir as working dir
WORKDIR /home/xclient

RUN echo ""alias winegui='wine explorer /desktop=DockerDesktop,1024x768'"" > ~/.bash_aliases 
",suchja/wine,dev/Dockerfile
c2ac8d725c41014a5e2d298fd2afb5ac81a67002,239,"FROM zaqwsx_ipfs-test-img

RUN ipfs init -b=1024
ADD . /tmp/id
RUN mv -f /tmp/id/config /root/.ipfs/config
RUN ipfs id

EXPOSE 4031 4032/udp

ENV IPFS_PROF true
ENV IPFS_LOGGING_FMT nocolor

ENTRYPOINT [""/bin/bash""]
CMD [""/tmp/id/run.sh""]
",ipfs/go-ipfs,test/3nodetest/client/Dockerfile
0ea610dd1aff8490ebbeb7223e333e0293f97a07,473,"FROM nodesource/centos6-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_5.x/el/6/x86_64/nodejs-5.9.0-1nodesource.el6.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/6/node/5.9.0/Dockerfile
58018623064783943a536f46827f6d97497c7f53,478,"FROM docker-dev.yelpcorp.com/lucid_yelp
MAINTAINER Tomas Doran <bobtfish@bobtfish.net>

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -yq \
    go \
    git \
    build-essential \
    ruby1.8 rubygems \
    libopenssl-ruby \
    ruby-dev \
    --no-install-recommends

ENV GOPATH /go
ENV PATH /go/bin:/usr/bin:/bin:/usr/local/bin
RUN gem install fpm --version 1.3.3
RUN ln -s /var/lib/gems/1.8/bin/fpm /usr/local/bin/fpm
RUN go get github.com/mattn/gom

",bobtfish/AWSnycast,package/Dockerfile
12e779e4c9c1330b2d03bd2fea2be5c75e971e76,576,"FROM cirit/jmeter:base

MAINTAINER Cagdas Cirit <cagdascirit@gmail.com>

ENV WEB_DRIVER_SET_VERSION=1.3.0

RUN apt-get -y update && \
	apt-get -y install \
	wget \
	unzip 

RUN wget http://jmeter-plugins.org/downloads/file/JMeterPlugins-WebDriver-${WEB_DRIVER_SET_VERSION}.zip && \
	unzip -o JMeterPlugins-WebDriver-${WEB_DRIVER_SET_VERSION}.zip -d ${JMETER_HOME}

RUN rm -rf JMeterPlugins-WebDriver-${WEB_DRIVER_SET_VERSION}.zip && \
	apt-get -y remove wget unzip && \
	apt-get -y --purge autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
",cagdascirit/docker-jmeter,webdriverset/Dockerfile
e7df90f01a20f14391e04ab321683f2e70173c49,554,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.10.0-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/5.10.0/Dockerfile
72947d2a310579b011807fcd37ca42c8ea155a75,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.2.16-1-x86_64.pkg.tar.xz /tmp/php-5.2.16-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.2.16-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.2.16/Dockerfile
349699a1baf75f1160ac19a76c6e1043d20f88c1,2296,"## Emacs, make this -*- mode: sh; -*-
 
FROM debian:testing

## This handle reaches Carl and Dirk
MAINTAINER ""Carl Boettiger and Dirk Eddelbuettel"" rocker-maintainers@eddelbuettel.com

## Set a default user. Available via runtime flag `--user docker` 
## Add user to 'staff' group, granting them write privileges to /usr/local/lib/R/site.library
## User should also have & own a home directory (for rstudio or linked volumes to work properly). 
RUN useradd docker \
	&& mkdir /home/docker \
	&& chown docker:docker /home/docker \
	&& addgroup docker staff

RUN apt-get update \ 
	&& apt-get install -y --no-install-recommends \
		ed \
		less \
		locales \
		vim-tiny \
		wget \
		ca-certificates \
	&& rm -rf /var/lib/apt/lists/*

## Configure default locale, see https://github.com/rocker-org/rocker/issues/19
RUN echo ""en_US.UTF-8 UTF-8"" >> /etc/locale.gen \
	&& locale-gen en_US.utf8 \
	&& /usr/sbin/update-locale LANG=en_US.UTF-8

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8

## Use Debian unstable via pinning -- new style via APT::Default-Release
RUN echo ""deb http://http.debian.net/debian sid main"" > /etc/apt/sources.list.d/debian-unstable.list \
	&& echo 'APT::Default-Release ""testing"";' > /etc/apt/apt.conf.d/default

ENV R_BASE_VERSION 3.3.0

## Now install R and littler, and create a link for littler in /usr/local/bin
## Also set a default CRAN repo, and make sure littler knows about it too
RUN apt-get update \
	&& apt-get install -t unstable -y --no-install-recommends \
		littler \
                r-cran-littler \
		r-base=${R_BASE_VERSION}* \
		r-base-dev=${R_BASE_VERSION}* \
		r-recommended=${R_BASE_VERSION}* \
        && echo 'options(repos = c(CRAN = ""https://cran.rstudio.com/""), download.file.method = ""libcurl"")' >> /etc/R/Rprofile.site \
        && echo 'source(""/etc/R/Rprofile.site"")' >> /etc/littler.r \
	&& ln -s /usr/share/doc/littler/examples/install.r /usr/local/bin/install.r \
	&& ln -s /usr/share/doc/littler/examples/install2.r /usr/local/bin/install2.r \
	&& ln -s /usr/share/doc/littler/examples/installGithub.r /usr/local/bin/installGithub.r \
	&& ln -s /usr/share/doc/littler/examples/testInstalled.r /usr/local/bin/testInstalled.r \
	&& install.r docopt \
	&& rm -rf /tmp/downloaded_packages/ /tmp/*.rds \
	&& rm -rf /var/lib/apt/lists/*

CMD [""R""]
",rocker-org/rocker,r-base/Dockerfile
da7cecd0b91eb58ffb71257ea0d3862f136bdea0,356,"# fping in a container
# 
# Dockerfile will execute fping and any arguments passed.
# Example: docker run -it --rm gophernet/fping -help
#
FROM alpine:latest

MAINTAINER Brent Salisbury <brent.salisbury@gmail.com>

# build initial cache | install binary | remove cache
RUN apk update && apk add \
	fping \
	&& rm -rf /var/cache/apk/*

ENTRYPOINT [""fping""]
",gopher-net/dockerized-net-tools,fping/Dockerfile
0a8f4f004669ad2474a2dfc0b4614b096bc195ff,647,"FROM rounds/python-alpine
MAINTAINER Ory Band @ Rounds <ory@rounds.com>

# the latest sshuttle versions have weird unexpected bugs
# currently we're using an old (2012) version
# which doesn't even supports pip - so we have to use git clone
ENV SSHUTTLE_TAG sshuttle-0.54

RUN apk add -qU --no-cache iptables openssh
RUN apk add -qU --no-cache -t .build-deps git \
    && git clone -qb $SSHUTTLE_TAG https://github.com/sshuttle/sshuttle.git /opt/sshuttle \
    && apk del -q .build-deps

WORKDIR /opt/sshuttle

ENV LOCAL_IP """"
ENV SUBNET_MASK 0
ENV REMOTE_IP """"
ENV REMOTE_USER """"

CMD ./sshuttle -r $REMOTE_USER@$REMOTE_IP $LOCAL_IP/$SUBNET_MASK
",rounds/10M-Docker-Images,sshuttle/Dockerfile
cedc9bb6b02cac1f174d8daecfa7831ee3276826,1052,"#################################################################
# Dockerfile
#
# Version:          2
# Software:         picard
# Software Version: 1.139
# Description:      A set of Java command line tools for manipulating high-throughput sequencing (HTS) data and formats.
# Website:          https://github.com/picard/picard
# Tags:             Genomics
# Provides:         picard 1.139
# Base Image:       biodckr/biodocker
# Build Cmd:        docker build biodckrdev/picard 1.139/.
# Pull Cmd:         docker pull biodckrdev/picard
# Run Cmd:          docker run biodckrdev/picard <program>
#################################################################

# Source Image
FROM biodckr/biodocker

################## BEGIN INSTALLATION ###########################

# install
RUN conda install picard=1.139

# Change workdir to /data/
WORKDIR /data/

##################### INSTALLATION END ##########################

# File Author / Maintainer
MAINTAINER Saulo Alves Aflitos <sauloal@gmail.com>
# Modified by Felipe da Veiga Leprevost 07-17-2016
",BioDocker/containers,picard/1.139/Dockerfile
3f22c86f75bc94429f9062f1c2bbb5f06c9fc39e,189,"FROM viki_data/base-storm
MAINTAINER viki-data data@viki.com

RUN /usr/bin/config-supervisord.sh nimbus 
RUN /usr/bin/config-supervisord.sh drpc

ENTRYPOINT [""/usr/bin/run-supervisord.py""]
",viki-org/storm-docker,storm-nimbus/Dockerfile
cd61e5473b82692859a4e987a0b939ca8e22ada0,1220,"#
# Docker image for wger development on a fedora base image
#
# Please consult the documentation for usage
# docker build -t wger/devel-fedora .
# docker run -ti --name wger.devel-fedora --publish 8000:8000 wger/devel-fedora
# (in docker) source ~/venv/bin/activate
# (in docker) python manage.py runserver 0.0.0.0:8000
#
#
FROM fedora:23
MAINTAINER Roland Geider <roland@geider.net>

# Install dependencies
RUN dnf update;\
    dnf install -y python3-devel python-virtualenv \
    nodejs npm libjpeg-turbo-devel zlib-devel git \
    tmux sudo

# Add wger user
RUN adduser wger
RUN echo ""wger ALL=(ALL) NOPASSWD:ALL"" > /etc/sudoers.d/wger
EXPOSE 8000


# Set up the application
USER wger
RUN git clone https://github.com/rolandgeider/wger.git /home/wger/src

WORKDIR /home/wger/src
RUN virtualenv --python python3 /home/wger/venv
RUN . /home/wger/venv/bin/activate \
    && pip install --upgrade pip \
    && pip install -r requirements_devel.txt \
    && invoke create_settings \
        --settings-path /home/wger/src/settings.py \
        --database-path /home/wger/db/database.sqlite \
    && invoke bootstrap_wger \
        --settings-path /home/wger/src/settings.py \
        --no-start-server


CMD [""/bin/bash""]",rolandgeider/wger,extras/docker/development-fedora/Dockerfile
444ff78a688f9a46be1b104e41ebd6dfbef89673,227,"FROM alexellis2/node4.x-arm

RUN useradd bench -G adm -m -s /bin/bash
WORKDIR /home/bench/
USER bench
RUN mkdir -p /home/bench/sqlite_bench
RUN /bin/bash -c ""time (npm init -y && npm install --save sqlite3)""

CMD [""/bin/bash""]
",alexellis/docker-arm,images/sqlite_bench/Dockerfile
ce14e868d7f77308e4d28e1e8712193fb813cbc9,60,"FROM nginx
COPY default.conf /etc/nginx/conf.d/default.conf
",kubernetes/deployment-manager,examples/wordpress/images/nginx/Dockerfile
e3c1c491baa08da18cb70cf02bd00b46f3ff5de9,481,"FROM ubuntu:14.04
MAINTAINER Fabian Linzberger <e@lefant.net>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -y update && \
    apt-get install -y --no-install-recommends openjdk-7-jre-headless && \
    apt-get clean

ADD http://files.gokgs.com/javaBin/kgsGtp-3.5.20.tar.gz /root/kgsGtp-3.5.20.tar.gz
WORKDIR /root
RUN tar xvzf kgsGtp-3.5.20.tar.gz

ADD kgsGtp.conf /root/kgsGtp.conf
ADD kgsGtp.sh /root/kgsGtp.sh

EXPOSE 12345
CMD [""mode=custom""]
ENTRYPOINT [""/root/kgsGtp.sh""]
",lefant/dockerfiles-lefant,kgsgtp/Dockerfile
6c77c0e390e7367f663f082dc95b8ba01d255b6b,346,"FROM fedora:latest
# e2fsprogs -- docker @ F20 wants it
RUN yum -y install docker git python-docker-py python-setuptools e2fsprogs koji python-backports-lzma osbs gssproxy
ADD ./atomic-reactor.tar.gz /tmp/
RUN cd /tmp/atomic-reactor-*/ && python setup.py install
ADD ./docker.sh /tmp/docker.sh
RUN chmod a+x /tmp/docker.sh
CMD [""/tmp/docker.sh""]
",projectatomic/atomic-reactor,images/privileged-builder/Dockerfile
f86aa39cfaaa9a439236722dc8114ee8364b06d8,237,"FROM node:latest

RUN npm i -g npm
RUN npm i -g phantomjs-prebuilt

RUN apt-get update && apt-get install -y git

RUN git clone https://github.com/ember-cli/ember-cli.git ~/ember-cli
RUN cd ~/ember-cli && npm i

ENTRYPOINT [""/bin/bash""]
",ember-cli/ember-cli,dev/linux/Dockerfile
46cd1c89e310a1c64f28ffd991701ad03500ea0f,724,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM BASEIMAGE
MAINTAINER Tim Hockin <thockin@google.com>
ADD kube2sky /
ADD kube2sky.go /
ENTRYPOINT [""/kube2sky""]
",fabric8io/gofabric8,vendor/k8s.io/kubernetes/cluster/addons/dns/kube2sky/Dockerfile
90b5ece9f0816de5751e897d8d2c6026e3242e0f,234,"# ELK stack for Virtual-Vehicles Dockerfile

FROM willdurand/elk

MAINTAINER Gary A. Stafford <garystafford@rochester.rr.com>

ENV REFRESHED_AT 2015-07-08

COPY logstash-logspout-log4j2.conf /etc/logstash/logstash-logspout-log4j2.conf",garystafford/virtual-vehicles-docker,elk/Dockerfile
74eef4b1acbb6454d754c768d4cb12858806b7e4,157,"FROM jamesnetherton/ruby

RUN gem install puppet --no-rdoc --no-ri && \
    adduser -h /home/puppet -u 1000 -D puppet

USER puppet

ENTRYPOINT [ ""puppet"" ]

",jamesnetherton/dockerfiles,puppet/Dockerfile
5a88454d59b2198a99f356dc7980e8086a97ba75,119,"FROM scratch
MAINTAINER Julian Fernandez Serra julian.fernandez@extern.isban.com

ADD monkey-ops /
CMD [""/monkey-ops""]
",Produban/monkey-ops,image/Dockerfile
13e8cb613b69ce6abb7e4dda88e8ea4fec645b23,234,"FROM kameshsampath/fedora

MAINTAINER Kamesh Sampath, kamesh.sampath@hotmail.com

# clean repo
RUN yum -y clean all

#
RUN yum -y makecache fast

# Update
RUN yum -y update

# Install JDK 7
RUN yum -y install java-1.7.0-openjdk-devel
",kameshsampath/devops,docker/java-apps/openjdk7/jdk/Dockerfile
c09efbc71b9f2648ed596ace196b3c2461469d23,551,"FROM ubuntu:utopic
MAINTAINER Honglin Feng <hfeng@tutum.co> 

# Install packages
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install openssh-server pwgen
RUN mkdir -p /var/run/sshd && sed -i ""s/UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g"" /etc/ssh/sshd_config && sed -i ""s/UsePAM.*/UsePAM no/g"" /etc/ssh/sshd_config && sed -i ""s/PermitRootLogin.*/PermitRootLogin yes/g"" /etc/ssh/sshd_config

ADD set_root_pw.sh /set_root_pw.sh
ADD run.sh /run.sh
RUN chmod +x /*.sh

ENV AUTHORIZED_KEYS **None**

EXPOSE 22
CMD [""/run.sh""]
",tutumcloud/tutum-ubuntu,utopic/Dockerfile
d3e50b60caeb9e829f5e380bf1fe34c5b660cf4a,287,"#
# This is the egress router for OpenShift Origin
#
# The standard name for this image is openshift/origin-egress-router

FROM openshift/origin-base

RUN yum install -y iproute iputils && \
    yum clean all

ADD egress-router.sh /bin/egress-router.sh

ENTRYPOINT /bin/egress-router.sh
",openshift/origin,images/router/egress/Dockerfile
83b31809ea245042a9822106afd5a04b5914e8dd,234,"FROM centos:7.1.1503

MAINTAINER Mark Petrovic <mspetrovic@gmail.com>

RUN yum update -y && yum install -y git bind-utils

COPY static/ /static/
COPY decap-linux-amd64 /

ENTRYPOINT [""/decap-linux-amd64""]

COPY Dockerfile /opt/decap/
",ae6rt/decap,web/Dockerfile
65bb6ebd22bb1ec55972e5962275bf264e46180d,543,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_3.x/pool/main/i/iojs/iojs_3.2.0-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/iojs/3.2.0/Dockerfile
7406545f2a4274ef4db6e77a26ba73e668ef2ff5,224,"FROM ubuntu:trusty

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && \
    apt-get install --yes memcached && \
    rm --recursive --force /var/lib/apt/lists/*

EXPOSE 11211

USER memcache

ENTRYPOINT [""memcached""]
",greg0ire/dockerony,memcached/Dockerfile
58cb836deb5b317cc9a8bae91ac6ae61e6d3d08f,169,"FROM microsoft/dotnet:1.0.0-preview1
RUN mkdir -p /IdSvrHost
WORKDIR /IdSvrHost
COPY . /IdSvrHost
RUN [""dotnet"", ""restore""]
EXPOSE 22530/tcp
ENTRYPOINT [""dotnet"", ""run""]",paulvanbladel/aurelia-identityserver-aspnetcore,BasicSetup/src/IdSvrHost/Dockerfile
32de90d17400bcba792f4a9122497be4dcc93f5c,1669,"FROM debian:jessie
MAINTAINER Frank Celler <info@arangodb.com>

RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys CD8CB0F1E0AD5B52E93F41E7EA93F5E56E751E9B

ENV ARCHITECTURE amd64
ENV ARANGO_VERSION 2.8.5
ENV ARANGO_URL https://www.arangodb.com/repositories/arangodb2/Debian_8.0
ENV ARANGO_PACKAGE arangodb_${ARANGO_VERSION}_${ARCHITECTURE}.deb
ENV ARANGO_PACKAGE_URL ${ARANGO_URL}/${ARCHITECTURE}/${ARANGO_PACKAGE}
ENV ARANGO_SIGNATURE_URL ${ARANGO_PACKAGE_URL}.asc

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libgoogle-perftools4 \
        ca-certificates \
        pwgen \
        wget \
    && \
    rm -rf /var/lib/apt/lists/* && \
    wget ${ARANGO_SIGNATURE_URL} &&       \
    wget ${ARANGO_PACKAGE_URL} &&         \
    gpg --verify ${ARANGO_PACKAGE}.asc && \
    dpkg -i ${ARANGO_PACKAGE} && \
    sed -ri \
# https://docs.arangodb.com/ConfigureArango/Arangod.html
        -e 's!127\.0\.0\.1!0.0.0.0!g' \
# https://docs.arangodb.com/ConfigureArango/Logging.html
        -e 's!^(file\s*=).*!\1 -!' \
# run as arangodb:arangodb
        -e 's!^#\s*uid\s*=.*!uid = arangodb!' \
        -e 's!^#\s*gid\s*=.*!gid = arangodb!' \
        /etc/arangodb/arangod.conf \
    && \
    apt-get purge -y --auto-remove ca-certificates wget && \
    rm -f ${ARANGO_PACKAGE}*

RUN chown arangodb:arangodb /var/lib/arangodb && \
  chown arangodb:arangodb /var/lib/arangodb-apps
# retain the database directory and the Foxx Application directory
VOLUME [""/var/lib/arangodb"", ""/var/lib/arangodb-apps""]

COPY docker-entrypoint.sh /entrypoint.sh

ENTRYPOINT [""/entrypoint.sh""]

# standard port
EXPOSE 8529
USER arangodb
CMD [""arangod""]
",arangodb/arangodb-docker,jessie/2.8.5/Dockerfile
9fa54e149bae9dd1b7c9a17bcf7857fc603a99ef,817,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php-nginx-dev:ubuntu-12.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/php-dev:ubuntu-12.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm
ENV WEB_PHP_SOCKET  127.0.0.1:9000
ENV WEB_NO_CACHE_PATTERN  ""\.(css|js|gif|png|jpg|svg|json|xml)$""

COPY conf/ /opt/docker/

# Install nginx
RUN /usr/local/bin/apt-install \
        nginx \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-nginx --role webdevops-php-nginx --role webdevops-nginx-dev --role webdevops-php-dev \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/php-nginx-dev/ubuntu-12.04/Dockerfile
b2c165a71ebd24ee4a83310379ce55662d61dace,136,"FROM mhart/alpine-node:latest
RUN mkdir /code
WORKDIR /code
ADD package.json /code/
RUN npm install
ADD . /code/
CMD [""node"", ""main.js""]",harbur/docker-workshop,code/guestbook-node/Dockerfile
67561156e95cb78e9c626529806916625fe54e72,341,"FROM phusion/baseimage:latest

MAINTAINER @voxxit

ENV HOME /root

ADD start /start

RUN apt-get update && \
    apt-get install -y memcached sasl2-bin pwgen && \
    apt-get autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/lib/postgresql/* && \
    chmod +x /start

EXPOSE 11211

CMD [""/start""]
",voxxit/dockerfiles,memcached/Dockerfile
9285b1a1fc37f62825a8b6babea134ade94219dd,530,"# Copyright 2016, EMC, Inc.

FROM frolvlad/alpine-python2:latest

RUN apk add --update build-base gcc abuild binutils python-dev py-pip libffi-dev openssl-dev \
  && pip install --upgrade pip

COPY . /RackHD/test/
WORKDIR /RackHD/test

RUN cd /RackHD/test \
  && pip install -r requirements.txt

ENV RACKHD_TEST_LOGLVL ${RACKHD_TEST_LOGLVL:-DEBUG}
ENV RACKHD_HOST ${RACKHD_HOST:-127.0.0.1}
ENV RACKHD_PORT ${RACKHD_PORT:-9090}
ENV RACKHD_AMQP_URL ${RACKHD_AMQP_URL:-amqp://127.0.0.1:5672}

CMD [ ""python"", ""/RackHD/test/run.py"" ]
",RackHD/RackHD,test/Dockerfile
89eb3d19305573f2b3a1d861cb8c3ec429e43c42,135,"FROM nginx
# RUN rm /etc/nginx/sites-enabled/default
ADD sites-enabled/ /etc/nginx/sites-enabled
COPY nginx.conf /etc/nginx/nginx.conf
",Netflix-Skunkworks/zerotodocker,sleepy-puppy/nginx/Dockerfile
3d84706aced90373606ac653d6041f6b2b32f6c6,461,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/rpm/generate.sh""!
#

FROM fedora:21

RUN yum install -y @development-tools fedora-packager
RUN yum install -y btrfs-progs-devel device-mapper-devel glibc-static libselinux-devel sqlite-devel tar

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS selinux
",kvasdopil/docker,contrib/builder/rpm/fedora-21/Dockerfile
4422d670defbf7f6ce30abb0dd21842b4fbea4ea,1581,"
FROM ubuntu:15.04
MAINTAINER Conor Heine <conor.heine@gmail.com>

ENV DEBIAN_FRONTEND noninteractive
ENV export LANGUAGE=en_US.UTF-8
ENV export LC_ALL=en_US.UTF-8
ENV export LANG=en_US.UTF-8
ENV export LC_TYPE=en_US.UTF-8

RUN apt-get update && \
    apt-get --yes install \
    	automake \
	autoconf \
	build-essential \
	ffmpeg \
	git \
	libav-tools \
	libavcodec-dev \
	libavformat-dev \
	libavutil-dev \
	libcurl4-openssl-dev \
	libjpeg-dev \
	libssl-dev \
	libswscale-dev \
	pkgconf \
        python-dev \
        python-pip \
	python-setuptools \
	subversion \
	v4l-utils && \
    apt-get clean

# Pip
RUN pip install tornado jinja2 pillow pycurl

RUN cd /tmp && \
    git clone https://github.com/Mr-Dave/motion.git motion-mrdave && \
    cd /tmp/motion-mrdave && \
    autoreconf -fiv && \
    ./configure --prefix=/usr --without-pgsql --without-sdl --without-sqlite3 --without-mysql && \
    make && \
    make install && \
    cp motion /usr/local/bin/motion && \
    rm -rf /tmp/motion-mrdave

RUN cd /tmp && \
    git clone https://github.com/ccrisan/motioneye.git && \
    cd /tmp/motioneye && \
    python setup.py install && \
    mkdir /etc/motioneye && \
    mkdir -p /usr/share/motioneye/extra && \
    cp /tmp/motioneye/extra/motioneye.conf.sample /usr/share/motioneye/extra/motioneye.conf.sample && \
    rm -rf /tmp/motioneye

# R/W needed for motioneye to update configurations
VOLUME /etc/motioneye

# PIDs
VOLUME /var/run/motion

# Video & images
VOLUME /var/lib/motion

CMD /usr/local/bin/meyectl startserver -c /etc/motioneye/motioneye.conf
EXPOSE 8765

",ccrisan/motioneye,extra/Dockerfile
ae858e8f6f3e5edbacd8d74f7bf1a1716a077f44,1031,"#################################################################
# Dockerfile
#
# Version:          2
# Software:         bowtie2
# Software Version: 2.2.8
# Description:      An ultrafast memory-efficient short read aligner
# Website:          http://bowtie-bio.sourceforge.net/bowtie2/index.shtml
# Tags:             Genomics
# Provides:         bowtie2 2.2.8
# Base Image:       biodckr/biodocker
# Build Cmd:        docker build --rm -t biodckrdev/bowtie2 2.2.8/.
# Pull Cmd:         docker pull biodckr/bowtie2
# Run Cmd:          docker run --rm -it biodckr/bowtie2
#################################################################

# Source Image
FROM biodckr/biodocker

################## BEGIN INSTALLATION ###########################

# install
RUN conda install bowtie2=2.2.8

# Change workdir to /data/
WORKDIR /data/

# Define default command
CMD [""bowtie2""]

##################### INSTALLATION END ##########################

# File Author / Maintainer
MAINTAINER Felipe da Veiga Leprevost <felipe@leprevost.com.br>
",BioDocker/containers,bowtie2/2.2.8/Dockerfile
90908372a77cf8c4de51b01cdb5d3cd0419255f4,1966,"# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file creates a standard build environment for building Kubernetes

FROM kube-build:cross
MAINTAINER  Joe Beda <jbeda@google.com>

# (set an explicit GOARM of 5 for maximum compatibility)
ENV GOARM 5
ENV GOOS    linux
ENV GOARCH  amd64

# Get the code coverage tool and godep
RUN go get code.google.com/p/go.tools/cmd/cover github.com/tools/godep

# We use rsync to copy some binaries around.  It is faster (0.3s vs. 1.1s) on my
# machine vs. `install`
RUN rm -rf /var/lib/apt/lists/
RUN apt-get update && apt-get install -y rsync

# Download and symlink etcd.  We need this for our integration tests.
RUN mkdir -p /usr/local/src/etcd &&\
    cd /usr/local/src/etcd &&\
    curl -L -O -s https://github.com/coreos/etcd/releases/download/v0.4.6/etcd-v0.4.6-linux-amd64.tar.gz &&\
    tar xzf etcd-v0.4.6-linux-amd64.tar.gz &&\
    ln -s ../src/etcd/etcd-v0.4.6-linux-amd64/etcd /usr/local/bin/

# Mark this as a kube-build container
RUN touch /kube-build-image

WORKDIR /go/src/github.com/GoogleCloudPlatform/kubernetes

# Propagate the git tree version into the build image
ADD kube-version-defs /kube-version-defs
ENV KUBE_GIT_VERSION_FILE /kube-version-defs

# Make output from the dockerized build go someplace else
ENV KUBE_OUTPUT_SUBPATH _output/dockerized

# Upload Kubernetes source
ADD kube-source.tar.gz /go/src/github.com/GoogleCloudPlatform/kubernetes
",hortonworks/kubernetes-yarn,build/build-image/Dockerfile
ee04f7ff2699b6ddaaef26b7789192a8a183ff98,1323,"FROM centos:centos7
MAINTAINER hzandbelt@pingidentity.com

# CentOS Linux release 7.0.1406 (Core)

ENV VERSION 1.8.10
ENV PATCHLEVEL 1
ENV PKG mod_auth_openidc-${VERSION}-${PATCHLEVEL}.el7.centos.x86_64.rpm

RUN rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
RUN rpm -ihv http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-7.noarch.rpm

RUN yum -y swap -- remove fakesystemd -- install systemd systemd-libs
RUN yum -y update; yum clean all; \
(cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
rm -f /lib/systemd/system/multi-user.target.wants/*;\
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;
VOLUME [ ""/sys/fs/cgroup"" ]
CMD [""/usr/sbin/init""]

RUN yum install -y httpd

RUN curl -s -L -o ~/${PKG} https://mod-auth-openidc.org/download/${PKG}
RUN yum localinstall -y ~/${PKG}

ADD 000-default.conf /etc/httpd/conf.d/
RUN /usr/sbin/httpd && curl -v http://localhost/protected/index.php 2>&1 | grep ""Location:"" | grep ""accounts.google.com/o/oauth2/auth""
",zandbelt/mod-auth-openidc-dist,centos/7/run/Dockerfile
7ba644d8c6b1e0ebaf6508e0b8301c54bf02b7ad,1325,"##
##    Poppy
##
##

FROM ubuntu:14.04
MAINTAINER Amit Gandhi <amit.gandhi@rackspace.com>

RUN apt-get -qq update
RUN apt-get -qq upgrade

# Install Pip, Python, etc
RUN apt-get -qqy install git-core wget curl libpython-dev libev4 libev-dev libffi6 libffi-dev libssl-dev python-dev

# setuptools
RUN wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
RUN python ez_setup.py

# pip
RUN wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
RUN python get-pip.py

# uwsgi 
RUN pip install uwsgi 

# Pull project
RUN git clone https://github.com/openstack/poppy.git /home/poppy

# Install Requirements
RUN sudo pip install -r /home/poppy/requirements/requirements.txt

RUN sudo pip install -e /home/poppy/.

# Set up the configuration files
ADD poppy.conf /etc/poppy.conf
ADD logging.conf /etc/logging.conf
ADD uwsgi.ini /root/uwsgi.ini

# Deploy the startup script
ADD startup.sh /usr/local/bin/poppy_startup
RUN chmod 755 /usr/local/bin/poppy_startup

# create uwsgi log directory
RUN mkdir -p /var/log/poppy
RUN chmod -R +w /var/log/poppy

# create uwsgi pid directory
RUN mkdir -p /var/run/poppy
RUN chmod -R +w /var/run/poppy

# Run the startup script
RUN chmod 755 /usr/local/bin/poppy_startup

EXPOSE 8080

# wait for the cassandra container to initialize before starting up
CMD poppy_startup
",openstack/poppy,docker/api/Dockerfile
b9ab0b1581aabf5a5da80609cc240348959b52d1,201,"FROM alpine

RUN apk add --update bash postfix postfix-sqlite rsyslog && rm -rf /var/cache/apk/*

COPY conf /etc/postfix
COPY rsyslog.conf /etc/rsyslog.conf

COPY start.sh /start.sh

CMD [""/start.sh""]
",kaiyou/freeposte.io,postfix/Dockerfile
05c4e25d73b5451b2169639d9e39a6fd1e629ca3,179,"FROM sczizzo/trusty-tool:latest
MAINTAINER Sean Clemmer <sczizzo@gmail.com>
ENV DEBIAN_FRONTEND=noninteractive

COPY . /build

RUN cd /build && /build/tasks/test/_test.sh /reports",sczizzo/theon,tasks/test/Dockerfile
cfffbad4b5c8bbc865bfbf80ed47a6b86a14fecc,437,"############################################################
# Dockerfile to build Go Language Container Image
# Based Upon Debian ""Wheezy""
############################################################

FROM ericdfournier/corridor:latest
MAINTAINER Eric D Fournier: me@ericdfournier.com

WORKDIR /go/src/github.com/ericdfournier/corridor/problems/SanBernadino
RUN go get -u github.com/ericdfournier.com/corridor
RUN go run sanBernadino.go",ericdfournier/corridor,problems/SanBernadino/Dockerfile
221c4465d6e80add9fd89e46b8448332e175021b,258,"FROM fedora

MAINTAINER Brian Cunnie <brian.cunnie@gmail.com>

# Install openjdk because that's where Android N is going to be
RUN dnf update -y; \
  dnf install -y which git unzip vim vim-minimal \
      java-1.?.0-openjdk \
      java-1.?.0-openjdk-devel

",blabbertabber/blabbertabber,ci/java/Dockerfile
8c13a901cc0849789df1dbacb4be25a228754ada,652,"FROM       fedora
MAINTAINER http://fedoraproject.org/wiki/Cloud

# Perform updates
RUN dnf -y update && dnf clean all

# Install owncloud owncloud-httpd owncloud-sqlite rpms
RUN dnf install -y owncloud{,-httpd,-sqlite} && dnf clean all

# Install SSL module and force SSL to be used by owncloud
RUN dnf install -y mod_ssl && dnf clean all
ADD ./forcessl.config.php /etc/owncloud/forcessl.config.php

# Allow connections from everywhere
RUN ln -s /etc/httpd/conf.d/owncloud-access.conf.avail /etc/httpd/conf.d/z-owncloud-access.conf

# Expose port 443 and set httpd as our entrypoint
EXPOSE 443
ENTRYPOINT [""/usr/sbin/httpd""]
CMD [""-D"", ""FOREGROUND""]

",fedora-cloud/Fedora-Dockerfiles,owncloud/Dockerfile
ef4fc13f12f31d181651d309fb8dd3039fc79668,734,"FROM ubuntu:latest


MAINTAINER sergey.batanov@dmpas.ru

# ÑÑÐ¾Ð±Ñ Ð·Ð°Ð¿ÑÑÑÐ¸ÑÑ ÑÐµÑÑÑ
RUN locale-gen --lang ru_RU.UTF-8
ENV LANG ru_RU.UTF-8

# Add mono repository
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
		echo ""deb http://download.mono-project.com/repo/debian wheezy main"" > /etc/apt/sources.list.d/mono-xamarin.list

RUN apt-get update && apt-get install -y \
# runtime dependencies
		mono-runtime \
		libmono-system-core4.0-cil \
		libmono-system4.0-cil \
		libmono-corlib4.0-cil \
		libmono-i18n4.0-all \
# deb-package tools
		dpkg\
		debconf\
		debhelper\
		lintian\
		md5deep\
		fakeroot

ADD ./build.sh /root/
ENTRYPOINT /root/build.sh

",EvilBeaver/OneScript,install/builders/deb/Dockerfile
9a1dace9c31d4f184ba62c09173841b2d420a08d,1154,"# This file is read by docker to deploy the SUPERSMART environment
# on a virtual ubuntu host. Provisioning is done by puppet, using the
# 'default.pp' manifest.

# create from image containing phylota database
FROM ubuntu:14.04

# add scripts
ADD default.pp /
ADD intro.sh /

# install necessary packages
RUN apt-get -y update && apt-get install -y puppet nano gzip

# set environment variables required by SUPERSMART
ENV PERL5LIB ""$PERL5LIB:/supersmart/lib/""
ENV PATH ""$PATH:/supersmart/script/""
ENV PATH ""$PATH:/supersmart/tools/bin/""
ENV SUPERSMART_HOME ""/supersmart/""
ENV EDITOR ""nano""

# this is needed by treePL on the virtual machine
ENV LD_LIBRARY_PATH ""$LD_LIBRARY_PATH:/usr/lib64""

# other environment variables
ENV SHELL ""/bin/bash""

# set shared volume to share files with the virtual host
VOLUME [ ""/shared"" ]

# set directory on startup to shared dir
WORKDIR /shared

# automatically run intro script giving information on startup
RUN echo 'source /intro.sh' >> /root/.bashrc

# provision virtual machine with SUPERSMART environment
RUN puppet apply /default.pp 

# run unit tests 
RUN cd $SUPERSMART_HOME && perl Makefile.PL && make test
",naturalis/supersmart,conf/docker/Dockerfile
b48fc2483f800b5244961ce7842af32c4d6a226b,1007,"FROM ubuntu:15.10

ENV DEBIAN_FRONTEND noninteractive
RUN locale-gen en_GB en_GB.UTF-8 && dpkg-reconfigure locales

# Prerequisites
RUN apt-get update && apt-get install -y \
    rsyslog \
    ssl-cert \
    postfix \
    dovecot-imapd \
    jq && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    echo ""#!/bin/sh\nexit 0"" > /usr/sbin/policy-rc.d

# Postfix configuration
ADD ./config/postfix /etc/postfix/
RUN cat /etc/postfix/master-additional.cf >> /etc/postfix/master.cf

# Dovecot configuration
COPY ./config/dovecot /etc/dovecot/conf.d/
COPY ./config/rsyslog.conf /etc/rsyslog.conf

# Copy boot scripts
COPY boot /
COPY boot.d /boot.d
RUN chmod 755 /boot /boot.d/*

# Nice place for your settings
VOLUME [""/mail_settings""]

# Volume to store email
VOLUME [""/vmail""]

# Add user vmail that ownes mail
RUN groupadd -g 5000 vmail
RUN useradd -g vmail -u 5000 vmail -d /vmail -m

EXPOSE 25 143 587 993
CMD /boot; service postfix start; service dovecot start; rsyslogd -n
",adaline/dockermail,core/Dockerfile
90e2cdbde1c09349feea5857146ae4c617349d64,640,"FROM ubuntu

RUN apt-get update
RUN apt-get install -y git curl build-essential make gcc wget

# python
RUN apt-get install -y python-setuptools
RUN easy_install pip

#supervisor
RUN pip install supervisor

ENV VERSION 2.4.6
RUN wget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-$VERSION.tgz
RUN tar xzvf mongodb-linux-x86_64-$VERSION.tgz
RUN ln -sfn mongodb-linux-x86_64-$VERSION mongodb

RUN mkdir /data
RUN mkdir /logs

ADD rs-initiate.sh /rs-initiate.sh
ADD supervisord.conf /supervisord.conf

VOLUME [ ""/logs"" ]
VOLUME [ ""/data"" ]

EXPOSE 27017
EXPOSE 28017

CMD [""/usr/local/bin/supervisord"", ""-c"", ""/supervisord.conf"", ""-n""]
",relateiq/docker_public,images/mongo/Dockerfile
db40bb9c71d9a83e2ce61971e213397eb33e8d7e,93,"FROM mhart/alpine-node:4
COPY . /usr/src/app
WORKDIR /usr/src/app
CMD [ ""node"", ""hello.js"" ]
",mcollina/dockerode-build,fixture/Dockerfile
501fe3646de785f6dd0152423871edfb03a6a00c,346,"FROM labstack/java
MAINTAINER Vishal Rana <vr@labstack.com>

# Install cassandra
RUN curl -L http://debian.datastax.com/debian/repo_key | sudo apt-key add -
RUN add-apt-repository 'deb http://debian.datastax.com/community stable main'
RUN apt-get update
RUN apt-get install -y dsc20

EXPOSE 7000 7001 7199 9160

ENTRYPOINT /usr/sbin/cassandra -f
",labstack/docker,cassandra/Dockerfile
f25439dc38988f82dd928cd0e522f33e671f4861,1116,"FROM buildpack-deps:jessie

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NODE_VERSION 0.10.46

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xJf ""node-v$NODE_VERSION-linux-x64.tar.xz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.xz"" SHASUMS256.txt.asc SHASUMS256.txt

CMD [ ""node"" ]
",nodejs/docker-node,0.10/Dockerfile
900988460478b43c6efbfd31025d86307dab8bbb,109,"# dockerize `wrk`
#
# CAUTION: doesn't work!
#

FROM scratch

COPY wrk_linux-amd64  /wrk

ENTRYPOINT [""/wrk""]",William-Yeh/docker-mini,lab-12/Dockerfile
74f35c0e7d59e0b82d8429324492bd122fa2b489,490,"FROM debian:jessie

RUN apt-get update && apt-get install -y wget unzip iptables iproute net-tools sudo
RUN mkdir -p /opt/muxy/bin

WORKDIR /opt/muxy

RUN wget https://github.com/mefellows/muxy/releases/download/v0.0.1/linux_amd64.zip?20150922 -O muxy.zip
RUN unzip muxy.zip
RUN mv muxy /opt/muxy/bin/
RUN rm *.zip

ENV PATH /opt/muxy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

VOLUME [""/opt/muxy/conf""]

CMD [""muxy"", ""proxy"", ""--config"", ""/opt/muxy/conf/config.yml""]",mefellows/muxy,examples/hystrix/Dockerfile
1e1e74a06c7c0db7142699131a05b54884d5325a,451,"FROM acmeair/ibmjava

RUN cd /tmp &&\
  wget -q http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/8.5.5.2/wlp-developers-runtime-8.5.5.2.jar &&\
  /opt/ibm/java/jre/bin/java -jar wlp-developers-runtime-8.5.5.2.jar --acceptLicense /opt/ibm &&\
  rm -rf *

ADD server.xml /opt/ibm/wlp/usr/servers/defaultServer/
ADD liberty.conf /etc/supervisor/conf.d/liberty.conf

EXPOSE 9080 9443

CMD [""/usr/bin/supervisord"", ""-n""]

",aspyker/acmeair-netflixoss-dockerlocal,liberty/Dockerfile
57f5c4e42ebd15157cbc7aa0ecd4c67e3b588881,89,"FROM rails:onbuild
RUN apt-get update -qq && apt-get install -y build-essential libpq-dev",weaveworks/guides,rails-ubuntu-simple/Dockerfile
fedb2c820a7639bcbd23e9ecf9c116183848e6f1,1741,"# CEPH BASE IMAGE
# CEPH VERSION: Jewel
# CEPH VERSION DETAIL: 10.2.x

FROM ubuntu:16.04
MAINTAINER SÃ©bastien Han ""seb@redhat.com""

ENV ETCDCTL_VERSION v2.2.4
ENV ETCDCTL_ARCH linux-amd64
ENV CEPH_VERSION jewel
ENV KVIATOR_VERSION 0.0.7
ENV CONFD_VERSION 0.10.0

# Download kviator
ADD https://github.com/AcalephStorage/kviator/releases/download/v${KVIATOR_VERSION}/kviator-${KVIATOR_VERSION}-linux-amd64.zip /kviator.zip

# Download confd
ADD https://github.com/kelseyhightower/confd/releases/download/v${CONFD_VERSION}/confd-${CONFD_VERSION}-linux-amd64 /usr/local/bin/confd

# install prerequisites
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y wget unzip uuid-runtime python-setuptools udev runit sharutils python3 && \
\
# install ceph
    wget -q -O- 'https://download.ceph.com/keys/release.asc' | apt-key add - && \
    echo ""deb http://download.ceph.com/debian-$CEPH_VERSION/ xenial main"" | tee /etc/apt/sources.list.d/ceph-$CEPH_VERSION.list && \
    apt-get update && apt-get install -y --force-yes ceph radosgw && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
\
# Install etcdctl
    wget -q -O- ""https://github.com/coreos/etcd/releases/download/${ETCDCTL_VERSION}/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}.tar.gz"" |tar xfz - -C/tmp/ etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl && \
    mv /tmp/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl /usr/local/bin/etcdctl && \
\
# Install kviator
    cd /usr/local/bin && unzip /kviator.zip && chmod +x /usr/local/bin/kviator && rm /kviator.zip && \
\
# Install confd
    chmod +x /usr/local/bin/confd && mkdir -p /etc/confd/conf.d && mkdir -p /etc/confd/templates

ADD entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
",ceph/ceph-docker,ceph-releases/jewel/ubuntu/16.04/base/Dockerfile
3eaab2d7bbba882463b56e7aace927585ea1de48,499,"FROM iron/java:1.8

# To disable warning
ENV LEIN_ROOT 1
ENV LEIN_VERSION 2.6.1

RUN apk add --update wget ca-certificates bash curl git

# Required by Figwheel
RUN apk add rlwrap --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted

RUN wget -q ""https://raw.githubusercontent.com/technomancy/leiningen/$LEIN_VERSION/bin/lein"" -O /usr/local/bin/lein

RUN chmod 0755 /usr/local/bin/lein && lein

# Clean up
RUN apk del wget && rm -rf /tmp/* /var/cache/apk/*
",iron-io/dockers,leiningen/dev/Dockerfile
3744ebed7606a5e5376b3811a5e7173b2fd0dfa1,431,"FROM debian:jessie

RUN apt-get update && apt-get install -yq curl

# install dependencies...
RUN apt-get update && apt-get install -yq \
	libglib2.0-0 \
	libgl1-mesa-swx11 \
	libqt5gui5

RUN mkdir /usr/share/applications && \
	curl -L http://app.robomongo.org/files/linux/robomongo-0.8.5-x86_64.deb -o /robomongo.deb && \
	{ dpkg -i /robomongo.deb || apt-get install -yq -f ;} && \
	rm /robomongo.deb || true

CMD [ ""robomongo"" ]
",tianon/dockerfiles,robomongo/Dockerfile
9f1bf1d1f4c0a26e795ce06accb730772d3da300,201,"#----------------------------------------------------
FROM crs4_pydoop/apache_2.6.0_base:latest

#
EXPOSE 8042

COPY scripts/start_nodemanager.sh /tmp/

CMD [""/bin/bash"", ""/tmp/start_nodemanager.sh""]

",crs4/pydoop,dev_tools/docker/clusters/apache_2.6.0/images/nodemanager/Dockerfile
056bd45ecc36b496696b70177300bcf02fb10cec,1593,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM centos:7

RUN yum install -y ruby

RUN gem install bundler
",grpc/grpc,tools/dockerfile/distribtest/ruby_centos7_x64/Dockerfile
5c9af3152956fed60b5ef80786a9e1d6ecb6a19d,549,"FROM registry.access.redhat.com/fis-karaf-openshift
ENV http_proxy http://openshift.example.com:8080/
ENV https_proxy http://openshift.example.com:8080/
ENV no_proxy localhost
USER 0
RUN sed -i -e 's!mvn !mvn -Dhttp.proxyHost=openshift.example.com -Dhttp.proxyPort=8080 -Dhttps.proxyHost=openshift.example.com -Dhttps.proxyPort=8080 -Djavax.net.ssl.trustStore=/tmp/trust.jks -Djavax.net.ssl.trustStorePassword=password !' /usr/local/s2i/assemble
RUN mv /usr/local/s2i/assemble /usr/local/s2i/_assemble
COPY assemble /usr/local/s2i/assemble
USER 185
",RedHatEMEA/demobuilder,layers/rhel-server-7:gui:ose-3.1:offline/@target/registry.access.redhat.com/jboss-fuse-6/fis-karaf-openshift/Dockerfile
7b4e71db1ca3ef318e6ac7ff48c60d678c430463,749,"FROM lambci/lambda-base

ENV PATH=/usr/local/bin:/usr/bin/:/bin \
    LD_LIBRARY_PATH=/lib64:/usr/lib64:/var/runtime:/var/task:/var/task/lib \
    NODE_PATH=/var/runtime:/var/task:/var/runtime/node_modules \
    LAMBDA_TASK_ROOT=/var/task \
    LAMBDA_RUNTIME_DIR=/var/runtime

RUN rm -rf /var/runtime

ADD nodejs.tgz /

ADD awslambda-mock.js /var/runtime/node_modules/awslambda/build/Release/awslambda.js

# Not sure why permissions don't work just by modifying the owner
RUN rm -rf /tmp && mkdir /tmp && chown -R sbx_user1051:495 /tmp && chmod 700 /tmp

WORKDIR /var/task

USER sbx_user1051

ENTRYPOINT [""node"", ""--max-old-space-size=1229"", ""--max-new-space-size=153"", ""--max-executable-size=153"", \
  ""/var/runtime/node_modules/.bin/awslambda""]

",lambci/docker-lambda,nodejs/run/Dockerfile
0b9461f0abb4e2eb5811a62291767bd36fe8126f,1072,"FROM nfnty/arch-devel:latest
MAINTAINER nfnty <docker@nfnty.se>

ENV UGID='99999' UGNAME='builder' GNUPGHOME='/var/lib/builder/gnupg'
RUN groupadd --gid ""${UGID}"" ""${UGNAME}"" && \
    useradd --uid ""${UGID}"" --gid ""${UGID}"" --shell /usr/bin/false --home-dir /tmp/home ""${UGNAME}"" && \

    install --directory --owner=""${UGNAME}"" --group=""${UGNAME}"" --mode=700 \
        /tmp/{build,home,pkgbuild} /var/lib/builder/{,gnupg,pkg,src} /var/log/builder

COPY [""etc/"", ""/etc/""]
COPY [""gnupg/"", ""${GNUPGHOME}/""]
COPY [""scripts/"", ""/opt/builder/""]
RUN chmod 'u=rw,g=r,o=r' /etc/makepkg.conf && \
    chmod 'u=r,g=r,o=' /etc/sudoers && \
    chown --recursive ""${UGNAME}:${UGNAME}"" ""${GNUPGHOME}"" && \
    chmod --recursive 'u=rwX,g=,o=' ""${GNUPGHOME}"" && \
    chmod --recursive 'u=rwX,g=rX,o=rX' /opt/builder && \

    pacman --sync --noconfirm --refresh --sysupgrade && \
    pacman --sync --noconfirm python-requests && \
    find /var/cache/pacman/pkg -mindepth 1 -delete

USER ${UGNAME}
VOLUME [""/var/lib/builder"", ""/var/log/builder""]
ENTRYPOINT [""/opt/builder/builder.py""]
",nfnty/dockerfiles,images/arch-builder/latest/Dockerfile
948c6dfd91b1e2eb4597bbf6644f0e77a218f037,553,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.4.0-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/4.4.0/Dockerfile
aac21f5ef6e52e0399f242120aec0e4b31d4382d,361,"# Start with busybox, but with libc.so.6
FROM busybox:ubuntu-14.04

MAINTAINER Michael Stapelberg <michael@robustirc.net>

# So that we can run as unprivileged user inside the container.
RUN echo 'nobody:x:99:99:nobody:/:/bin/sh' >> /etc/passwd

USER nobody

ADD robustirc-refuse /usr/bin/robustirc-refuse

EXPOSE 6667

ENTRYPOINT [""/usr/bin/robustirc-refuse""]
",robustirc/robustirc,cmd/robustirc-refuse/Dockerfile
09c7664a401ee94cd6ae1b13669d58c6d42f3239,157,"FROM debian:wheezy

RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		curl \
		wget \
	&& rm -rf /var/lib/apt/lists/*
",docker-library/buildpack-deps,wheezy/curl/Dockerfile
b472c99f15c5008d291438890d5dbfab89f5cd6e,1454,"from ubuntu:14.04
maintainer Thomas Guyard <t.guyard@gigatribe.com>

ENV LC_ALL C.UTF-8
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && \
    apt-get install -y g++ git make libboost1.54-all-dev libssl-dev cmake # uncache02

RUN cd /root                                             && \
    git clone https://github.com/gigagg/GiGaSdk.git      && \
    cd GiGaSdk                                           && \
    git submodule update --init

WORKDIR ""/root/GiGaSdk""

# compiling casablanca
RUN cd vendors/casablanca/Release/      && \
    mkdir build.release                 && \
    cd build.release/                   && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make                                && \
    make install

# compiling crypto++              && \
RUN cd vendors/cryptopp/crypto++/ && \
    make                          && \
    sudo make install
    
# compiling/installing libcurl
RUN cd vendors/curl           && \
    mkdir build               && \
    cd build                  && \
    cmake ..                  && \
    make                      && \
    sudo make install

# compiling curlcpp
RUN cd vendors/curlcpp/build && \
    cmake ..                 && \
    make                     && \
    sudo make install

# compiling/installing GiGaSdk
RUN cd build          && \
    cmake ..          && \
    make              && \
    sudo make install
    
RUN ldconfig

ENTRYPOINT [""/usr/local/bin/GiGaSdk""]
",gigagg/GiGaSdk,build/Dockerfile
e0d1a93a5e53f902019efb802faa6d005ab6bca5,90,"FROM nginx:1.9

RUN rm /etc/nginx/conf.d/default.conf

ADD default.conf /etc/nginx/conf.d/",rackerlabs/guestbook,web/Dockerfile
5d2fc53bfa962fd60743278d119a433abdfdbf82,767,"FROM centos

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN yum update -y && \
    curl --insecure --junk-session-cookies --location --remote-name --silent --header ""Cookie: oraclelicense=accept-securebackup-cookie"" http://download.oracle.com/otn-pub/java/jdk/8u60-b27/server-jre-8u60-linux-x64.tar.gz  && \
    mkdir -p /usr/java && \
    gunzip server-jre-8u60-linux-x64.tar.gz && \
    tar xf server-jre-8u60-linux-x64.tar -C /usr/java && \
    alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_60/bin/java 1 && \
    alternatives --install /usr/bin/jar  jar  /usr/java/jdk1.8.0_60/bin/jar  1 && \
    rm server-jre-8u60-linux-x64.tar && \
    yum clean all

ENV JAVA_HOME=/usr/java/jdk1.8.0_60/ \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8
",lwieske/dockerfiles-java-8,8u60/server-jre/Dockerfile
73c697434de736c93f19d4b8fae166121147b096,62,"FROM scratch
ADD rootfs.tar.xz /
CMD [""/bin/sh""]
ENV ARCH=x32
",multiarch/busybox,x32/slim/Dockerfile
08485fecd9c151155c3b8f50d17ae181bdcdc5e0,209,"FROM debian:jessie

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q

RUN apt-get install -qy --no-install-recommends redis-tools

ADD fill.sh /fill.sh
RUN chmod u+x /fill.sh

ENTRYPOINT [""/fill.sh""]
",marians/rebrow,test/fillredis/Dockerfile
fc746ddbe715f3bb4845370b89c48aacc6639fc5,843,"# Dockerfile that builds, installs, and tests bayeslite. It is for development
# only; users should use the python package.

FROM        ubuntu:15.10
RUN         apt-get update -qq --fix-missing

# For installation: python, pip, apt, pkg
# For CrossCat: libboost-dev
# Faster than if pip did it: numpy, scipy, pandas
RUN apt-get install -y -qq python2.7-dev python-pip apt-utils pkg-config \
    libboost-dev python-numpy python-scipy python-pandas

RUN pip -q install setuptools cython
RUN pip -q install pytest pexpect
RUN BOOST_ROOT=/usr/include pip -q install crosscat

RUN mkdir /bayeslite
WORKDIR /bayeslite

COPY    dist/bayeslite-*.tar.gz ./
RUN     tar --strip-components=1 -xzvf `ls bayeslite-*.tar.gz | tail -1`

RUN     pip install .
RUN     python setup.py test  # Install any tests_require
RUN     ./check.sh tests/ shell/tests/
",probcomp/bayeslite,tests/Dockerfile
e8f26241e14fffd1ddd8e08ca336aa1a37f78c48,458,"FROM ubuntu:14.04

MAINTAINER eder.roger.souza@gmail.com

ENV REFRESHED_AT 2015-12-21

RUN apt-get -y update

RUN apt-get install -y git

RUN apt-get install -y nginx

RUN mkdir -p /var/www/html/website

ADD ./global.conf /etc/nginx/conf.d/
ADD ./nginx.conf /etc/nginx/nginx.conf

WORKDIR /var/www/html/website

RUN git clone https://github.com/jweissig/episode-47

VOLUME [ ""/var/log/nginx"" ]

ENTRYPOINT [""/usr/sbin/nginx"", ""-g"", ""daemon off;""]

EXPOSE 80
",EderRoger/docker_loadbalancing,docker/nodes/Dockerfile
b0c674fbcae97acd670aaa7610ef1ace881ac8f6,2506,"FROM rhel:7.2-released

LABEL io.k8s.description=""Platform for building and running Ruby on Rails 4.2 applications"" \
      io.k8s.display-name=""Ruby on Rails 4.2""

# Labels consumed by Red Hat build service
LABEL BZComponent=""rh-ror42-docker"" \
      Name=""rhscl_beta/ror-42-rhel7"" \
      Version=""4.2"" \
      Release=""2"" \
      Architecture=""x86_64""

# The following is taken from STI base image so this Dockerfile follows the same convetions.
# https://github.com/openshift/sti-base/blob/master/Dockerfile

ENV HOME=/opt/app-root/src \
    PATH=/opt/app-root/src/bin:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

COPY contrib/etc/scl_enable /opt/app-root/etc/scl_enable
ENV BASH_ENV=/opt/app-root/etc/scl_enable \
    ENV=/opt/app-root/etc/scl_enable \
    PROMPT_COMMAND="". /opt/app-root/etc/scl_enable""

# Let's install the same as STI images
RUN yum install -y --setopt=tsflags=nodocs \
  autoconf \
  automake \
  findutils \
  gcc-c++ \
  gdb \
  gettext \
  git \
  libcurl-devel \
  libxml2-devel \
  libxslt-devel \
  lsof \
  make \
  mariadb-devel \
  mariadb-libs \
  openssl-devel \
  patch \
  postgresql-devel \
  procps-ng \
  scl-utils \
  sqlite-devel \
  tar \
  unzip \
  wget \
  which \
  yum-utils \
  zlib-devel && \
  yum clean all -y && \
  mkdir -p ${HOME} && \
  groupadd -r default -f -g 1001 && \
  useradd -u 1001 -r -g default -d ${HOME} -s /sbin/nologin \
      -c ""Default Application User"" default && \
  chown -R 1001:1001 /opt/app-root


# This image provides a Ruby on Rails 4.2 environment you can use to run your Rails
# applications.

EXPOSE 8080

ENV RAILS_VERSION 4.2

RUN yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    INSTALL_PKGS=""rh-ror42 rh-ruby23-ruby-devel"" && \
    yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && rpm -V $INSTALL_PKGS && \
    yum clean all -y

# Add .gemrc
COPY contrib/.gemrc /opt/app-root/.gemrc

RUN chown -R 1001:1001 /opt/app-root

USER 1001

WORKDIR ${HOME}

# Install the usage script with base image usage informations
COPY contrib/bin/usage /usr/local/bin/usage

# Use entrypoint so path is correctly adjusted already at the time the command
# is searching, so something like docker run IMG python runs binary from SCL
COPY contrib/bin/container-entrypoint /usr/bin/container-entrypoint

# Set the default CMD to print the usage of the language image
ENTRYPOINT [""container-entrypoint""]
CMD [""usage""]
",sclorg/rhscl-dockerfiles,rhel7.rh-ror42/Dockerfile
f91283ade4c732b25e974d4ed3082e8db1d376e2,1494,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM bigtop/puppet:ubuntu-15.04-ppc64le
MAINTAINER Amir Sanjar

COPY bigtop_toolchain /etc/puppet/modules/bigtop_toolchain

# enable ssh
RUN apt-get update && \
    apt-get install -y openssh-server vim && \
    mkdir -p /var/run/sshd && \
    # requiretty off
    sed -i.bak 's/requiretty/!requiretty/' /etc/sudoers && \
    # setup vagrant account
    mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh && \
    wget http://github.com/mitchellh/vagrant/raw/master/keys/vagrant.pub --no-check-certificate -O /root/.ssh/authorized_keys && \
    chmod 0600 /root/.ssh/authorized_keys && \
    # Install required Puppet modules
    puppet apply -e ""include bigtop_toolchain::puppet-modules""

CMD /usr/sbin/sshd -D
",odpi/bigtop,docker/bigtop-deploy/ubuntu-15.04-ppc64le/Dockerfile
d37c16d7cada3b9df715ae2cb72ea669ce64a049,1940,"FROM cloud9/workspace
MAINTAINER Sebastien Saunier <seb@lewagon.org>

RUN echo ""Version 0.1.0""

RUN add-apt-repository ppa:git-core/ppa
RUN apt-get update
RUN apt-get install -y git tklib zlib1g-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev
RUN apt-get clean

# Postgresql 9.3 already installed
USER postgres
RUN service postgresql start && psql --command ""CREATE ROLE ubuntu login createdb; UPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';""
RUN service postgresql start && psql --command ""DROP DATABASE template1;""
RUN service postgresql start && psql --command ""CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';""
RUN service postgresql start && psql --command ""UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';""

# As ubuntu user
WORKDIR /home/ubuntu
USER ubuntu

# Rbenv & Ruby
RUN sudo /usr/local/rvm/bin/rvm implode --force
RUN curl https://raw.githubusercontent.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash
ENV PATH /home/ubuntu/.rbenv/bin:/home/ubuntu/.rbenv/shims:$PATH
RUN rbenv install 2.3.0 && rbenv global 2.3.0
RUN gem install bundler rails
RUN echo ""nvm use default > /dev/null 2>&1 && nvm alias default stable > /dev/null 2>&1\n\
\n\
export RBENV_ROOT=\""\${HOME}/.rbenv\""\n\
\n\
if [ -d \""\${RBENV_ROOT}\"" ]; then\n\
  export PATH=\""\${RBENV_ROOT}/bin:\${PATH}\""\n\
  eval \""\$(rbenv init -)\""\n\
fi\n\
\n\
export PATH=\""./bin:\${PATH}\""\n"" >> /home/ubuntu/.profile

# Default workspace
USER root
RUN locale-gen en_US.UTF-8
ADD ./files/workspace /home/ubuntu/workspace

# User rights
RUN chmod -R g+w /home/ubuntu && chown -R ubuntu:ubuntu /home/ubuntu
RUN chmod -R g-w /home/ubuntu/lib && chown -R root:root /home/ubuntu/lib

# Pre-download rails dependencies
USER ubuntu
RUN rails new -T --database=postgresql to-be-removed
RUN rm -rf to-be-removed

USER root

ADD ./files/check-environment /.check-environment/lewagon
",c9/templates,ws-lewagon/Dockerfile
94c351a7ce05a98ec678742c32407d77ad68ddfb,1047,"FROM phusion/baseimage

RUN echo ""deb http://packages.elasticsearch.org/elasticsearch/1.0/debian stable main"" > /etc/apt/sources.list.d/elasticsearch.list \
 && echo ""deb https://packagecloud.io/grafana/stable/debian/ wheezy main"" > /etc/apt/sources.list.d/grafana.list \
 && curl -s http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add - \
 && curl -s https://packagecloud.io/gpg.key | apt-key add -

## TODO headless installation of graphite results in warnings, address later
RUN apt-get update \
 && apt-get upgrade -qqy \
 && apt-get install -qqy graphite-carbon graphite-web elasticsearch openjdk-7-jre-headless apache2 libapache2-mod-wsgi grafana

RUN rm -f /etc/apache2/sites-enabled/000-default.conf \
 && rm -f /etc/init.d/apache* \
 && echo ""CARBON_CACHE_ENABLED=true"" > /etc/default/graphite-carbon \
 && chown _graphite /var/lib/graphite \
 && sudo -u _graphite graphite-manage syncdb --noinput

COPY content/ /

EXPOSE 80
EXPOSE 3002
EXPOSE 2003

VOLUME /var/lib/graphite
VOLUME /var/lib/grafana

CMD [""grafana.sh""]
",ventu-io/probe,docker/grafana/Dockerfile
74d0bc5701834f600d6743b4e617308dcb549c6e,4188,"FROM debian:7.8
MAINTAINER Rob Sherwood <rob.sherwood@bigswitch.com>

# First round of dependences
RUN apt-get update && apt-get install -y \
        apt \
        apt-cacher-ng \
        apt-file \
        apt-utils \
        autoconf \
        automake1.9 \
        autotools-dev \
        bc \
        binfmt-support \
        binfmt-support \
        bison \
        bsdmainutils \
        build-essential \
        ccache \
        cdbs \
        cpio \
        debhelper \
        debhelper \
        debhelper \
        devscripts \
        devscripts \
        dialog \
        dosfstools \
        dpkg-sig \
        file \
        flex \
        gcc \
        genisoimage \
        ifupdown \
        iproute \
        iputils-ping \
        kmod \
        less \
        libc6-dev \
        libedit-dev \
        libi2c-dev \
        libtool \
        locales \
        lsof \
        make \
        mingetty \
        mtd-utils \
        mtools \
        multistrap \
        nano \
        ncurses-dev \
        netbase \
        net-tools \
        nfs-common \
        openssh-server \
        pkg-config \
        pkg-config \
        procps \
        psmisc \
        python \
        python \
        python-yaml \
        qemu \
        qemu-user-static \
        realpath \
        realpath \
        rsyslog \
        squashfs-tools \
        sudo \
        syslinux \
        texinfo=4.13a.dfsg.1-10 \
        traceroute \
        uboot-mkimage \
        vim-tiny \
        wget \
        xapt \
        zile \
        zip 
#RUN apt-get insstall binutils-powerpc-linux-gnu libgomp1-powerpc-cross

# Now the unstable deps and cross compilers
# NOTE 1: texinfo 5.x and above breaks the buildroot build, thus the specific 4.x version
# NOTE 2: this cp is needed to fix an i2c compile problem
# NOTE 3: the /etc/apt/apt.conf.d/docker-* options break multistrap so
#       that it can't find.  Essential packages or resolve apt.opennetlinux.org
# NOTE 4: the default qemu-user-static (1.2) dies with a segfault in
#       `make onl-powerpc`; use 1.4 instead

RUN echo 'APT::Get::AllowUnauthenticated ""true"";\nAPT::Get::Assume-Yes ""true"";' | tee /etc/apt/apt.conf.d/99opennetworklinux && \
    echo ""deb http://apt.opennetlinux.org/debian/ unstable main"" | tee /etc/apt/sources.list.d/opennetlinux.list && \
    dpkg --add-architecture powerpc && \
    apt-get update && \
    apt-get install -y  \
        binutils-powerpc-linux-gnu=2.22-7.1 \
        gcc-4.7-powerpc-linux-gnu \ 
        libc6-dev-powerpc-cross \
        libgomp1-powerpc-cross=4.7.2-4  && \
    xapt -a powerpc libedit-dev ncurses-dev libsensors4-dev libwrap0-dev libssl-dev libsnmp-dev && \
    update-alternatives --install /usr/bin/powerpc-linux-gnu-gcc powerpc-linux-gnu-gcc /usr/bin/powerpc-linux-gnu-gcc-4.7 10 && \
    cp  /usr/include/linux/i2c-dev.h /usr/powerpc-linux-gnu/include/linux/i2c-dev.h && \
    cp /usr/include/linux/i2c-dev.h /usr/include/linux/i2c-devices.h && \
    cp /usr/include/linux/i2c-dev.h /usr/powerpc-linux-gnu/include/linux/i2c-devices.h && \
    rm /etc/apt/apt.conf.d/docker-* && \
    wget ""https://launchpad.net/ubuntu/+source/qemu/1.4.0+dfsg-1expubuntu3/+build/4336762/+files/qemu-user-static_1.4.0%2Bdfsg-1expubuntu3_amd64.deb"" && \
    dpkg -i qemu-user-static_1.4.0+dfsg-1expubuntu3_amd64.deb

#RUN echo 'deb http://http.debian.net/debian unstable main' >> /etc/apt/sources.list && \
#    dpkg --add-architecture powerpc && \
#    apt-get update && \
#    apt-get install -y  \
#        binutils-powerpc-linux-gnu \ 
#        cpp-powerpc-linux-gnu \
#        gcc-4.7-multilib \
#        gcc-powerpc-linux-gnu \
#        multistrap && \
#    xapt -a powerpc libedit-dev ncurses-dev libsensors4-dev libwrap0-dev libssl-dev libsnmp-dev && \
#    cp  /usr/include/linux/i2c-dev.h /usr/powerpc-linux-gnu/include/linux/i2c-dev.h && \
#    echo 'APT::Get::AllowUnauthenticated ""true"";\nAPT::Get::Assume-Yes ""true"";' | tee /etc/apt/apt.conf.d/99opennetworklinux && \
#    echo ""deb http://apt.opennetlinux.org/debian/ unstable main"" | tee /etc/apt/sources.list.d/opennetlinux.list


# Run this by default if no other command is specified
#CMD make onl-powerpc onl-x86
",opennetworklinux/ONL,tools/docker/Dockerfile
2d28324f56ac6b7758b4c44bb8cc25b35bee2e6b,274,"FROM gurvin/spark-base:latest

MAINTAINER Gurvinder Singh <gurvinder.singh@uninett.no>

COPY start-master.sh /usr/local/bin/

# Create Recovery directory
ENV SPARK_RECOVERY_DIR /spark-master
RUN mkdir -p $SPARK_RECOVERY_DIR

EXPOSE 8080/tcp 7077/tcp

CMD [""start-master.sh""]",UNINETT/kubernetes-apps,spark/dockerfiles/master/Dockerfile
8e701a292b5e8b36f8b697824b280741a5dae6a2,1959,"# Base image
FROM compbio/ngseasy-base:1.0

# Maintainer 
MAINTAINER Stephen Newhouse stephen.j.newhouse@gmail.com

# Set correct environment variables.
ENV HOME /root
ENV DEBIAN_FRONTEND noninteractive

# Remain current
RUN apt-get update && \
  apt-get upgrade -y

#---------------------------------------------annotation-------------------------------------------------

# + ANNOVAR (see licence, and registration)
# Available on reg:  http://www.openbioinformatics.org/annovar/download/0wgxR2rIVP/annovar.latest.tar.gz
# 11.2014 : http://www.openbioinformatics.org/annovar/download/0wgxR2rIVP/annovar.latest.tar.gz

RUN wget -O /tmp/annovar.latest.tar.gz http://www.openbioinformatics.org/annovar/download/0wgxR2rIVP/annovar.latest.tar.gz \
  && tar xzvf /tmp/annovar.latest.tar.gz -C /usr/local/pipeline/ \
  && sed -i '$aPATH=${PATH}:/usr/local/pipeline/annovar' /home/pipeman/.bashrc \
  && echo ""alias ngsAnnovar='/usr/local/pipeline/annovar'"" >> /home/pipeman/.bashrc

#----------------------------------Basic Databases-----------------------------
# COPY Files
COPY get_annovar_databases.sh /usr/local/pipeline/annovar/
COPY get_annovar_gene_databases.sh /usr/local/pipeline/annovar/

# RUN Them
# RUN /bin/bash /usr/local/pipeline/annovar/get_annovar_gene_databases.sh && /bin/bash /usr/local/pipeline/annovar/get_annovar_databases.sh
  
#-------------------------------PERMISSIONS--------------------------
RUN chmod -R 776 /usr/local/pipeline/
RUN chown -R pipeman:ngsgroup /usr/local/pipeline
RUN adduser pipeman sudo
RUN usermod -a -G sudo pipeman

#---------------------------------------------------------------------------------
# Cleanup the temp dir
RUN rm -rf /tmp/*

# open ports private only
EXPOSE 8080

# Use baseimage-docker's bash.
CMD [""/bin/bash""]

# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN apt-get autoclean && apt-get autoremove -y && rm -rf /var/lib/{apt,dpkg,cache,log}/
",KHP-Informatics/ngseasy,containerized/ngseasy_dockerfiles/ngs_variant_annotators/ngseasy_annovar/Dockerfile
91884ec696b2ad9727f793abf5d53d8d920ba9b9,712,"# Copyright Google Inc. 2015
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM debian:jessie

MAINTAINER Sandeep Parikh <parikhs@google.com>

COPY home-service /usr/local/bin/

ENTRYPOINT /usr/local/bin/home-service
",GoogleCloudPlatform/processing-logs-using-dataflow,services/home/Dockerfile
4dde06d4acc97edda8c979213b08055bbcbc25e0,2014,"FROM debian:jessie

# persistent / runtime deps
RUN apt-get update && apt-get install -y ca-certificates curl libxml2 --no-install-recommends && rm -r /var/lib/apt/lists/*

# phpize deps
RUN apt-get update && apt-get install -y autoconf gcc libc-dev make pkg-config --no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
##</autogenerated>##

RUN gpg --keyserver pool.sks-keyservers.net --recv-keys F38252826ACD957EF380D39F2F7956BC5DA04B5D

ENV PHP_VERSION 5.4.38

# --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself)
RUN buildDeps="" \
		$PHP_EXTRA_BUILD_DEPS \
		bzip2 \
		file \
		libcurl4-openssl-dev \
		libreadline6-dev \
		libssl-dev \
		libxml2-dev \
	""; \
	set -x \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.bz2/from/this/mirror"" -o php.tar.bz2 \
	&& curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.bz2.asc/from/this/mirror"" -o php.tar.bz2.asc \
	&& gpg --verify php.tar.bz2.asc \
	&& mkdir -p /usr/src/php \
	&& tar -xf php.tar.bz2 -C /usr/src/php --strip-components=1 \
	&& rm php.tar.bz2* \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path=""$PHP_INI_DIR"" \
		--with-config-file-scan-dir=""$PHP_INI_DIR/conf.d"" \
		$PHP_EXTRA_CONFIGURE_ARGS \
		--disable-cgi \
		--enable-mysqlnd \
		--with-curl \
		--with-openssl \
		--with-readline \
		--with-zlib \
	&& make -j""$(nproc)"" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps \
	&& make clean

COPY docker-php-ext-* /usr/local/bin/

##<autogenerated>##
CMD [""php"", ""-a""]
##</autogenerated>##
",FriendsOfPHP/php,5.4/Dockerfile
b185e770c6f011429d6d91868c17cce3cde9b57d,1539,"# Run Chrome in a container
#
# docker run -it \
#	--net host \ # may as well YOLO
#	--cpuset-cpus 0 \ # control the cpu
#	--memory 512mb \ # max memory it can use
#	-v /tmp/.X11-unix:/tmp/.X11-unix \ # mount the X11 socket
#	-e DISPLAY=unix$DISPLAY \
#	-v $HOME/Downloads:/root/Downloads \
#	-v $HOME/.config/google-chrome/:/data \ # if you want to save state
#	--device /dev/snd \ # so we have sound
#	-v /dev/shm:/dev/shm \
#	--name chrome \
#	jess/chrome
#

# Base docker image
FROM debian:sid
MAINTAINER Jessica Frazelle <jess@docker.com>

ADD https://dl.google.com/linux/direct/google-talkplugin_current_amd64.deb /src/google-talkplugin_current_amd64.deb

# Install Chrome
RUN echo 'deb http://httpredir.debian.org/debian testing main' >> /etc/apt/sources.list && \
	apt-get update && apt-get install -y \
	ca-certificates \
	curl \
	hicolor-icon-theme \
	libgl1-mesa-dri \
	libgl1-mesa-glx \
	libv4l-0 \
	-t testing \
	fonts-symbola \
	--no-install-recommends \
	&& curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
	&& echo ""deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"" > /etc/apt/sources.list.d/google.list \
	&& apt-get update && apt-get install -y \
	google-chrome-stable \
	--no-install-recommends \
	&& dpkg -i '/src/google-talkplugin_current_amd64.deb' \
	&& apt-get purge --auto-remove -y curl \
	&& rm -rf /var/lib/apt/lists/* \
	&& rm -rf /src/*.deb

COPY local.conf /etc/fonts/local.conf

# Autorun chrome
ENTRYPOINT [ ""google-chrome"" ]
CMD [ ""--user-data-dir=/data"" ]
",jfrazelle/dockerfiles,chrome/stable/Dockerfile
2f1e092a01ba4d95258a820c8cdc2a1f70c56151,162,"FROM       xosproject/xos

# Supervisor
COPY conf/synchronizer.conf /etc/supervisor/conf.d/

CMD /usr/bin/supervisord -c /etc/supervisor/conf.d/synchronizer.conf
",open-cloud/xos,containers/synchronizer/Dockerfile
4fb1db817d105d4f8a6627dfb9f4974ee92ddf25,329,"FROM php:5.6
MAINTAINER adam.stipak@gmail.com

RUN apt-get update
RUN docker-php-ext-install mbstring
RUN apt-get install -y zlib1g-dev
RUN docker-php-ext-install zip
RUN curl -sS https://getcomposer.org/installer |php -- --install-dir=/usr/local/bin --filename=composer

ENTRYPOINT [""/data/.docker/entrypoint.sh""]
CMD [""tests""]
",newPOPE/Nette-RestRoute,.docker/Dockerfile
8605111bc9e4129fda14e502c0e0fdf3241182b5,68,"FROM nginx

COPY assets/default.conf /etc/nginx/conf.d/default.conf
",jonbrouse/docker-ice,nginx/Dockerfile
f2b88c55150e4cd7bb23fca2d6e7c108cae30f2e,873,"FROM fedora
MAINTAINER http://fedoraproject.org/wiki/Cloud

# Update the container
RUN dnf -y update && dnf clean all

# Install the hadoop packages
RUN dnf -y install hadoop-yarn hadoop-mapreduce hadoop-common-native pwgen ldapjdk supervisor bash-completion && dnf clean all

# Install network troubleshooting tools into the container, these can be removed if you don't want them.
RUN dnf -y install net-tools lsof nmap && dnf clean all

ADD ./core-site.xml /etc/hadoop/
ADD ./supervisord.conf /etc/supervisord.conf

# These only expose what was given in: http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.0.6.0/bk_using_Ambari_book/content/reference_chap2_2a_2x.html
EXPOSE 8025 8141 8050 8030 8032 8088 8090 8031 8033 

# Mapreduce History Server Ports
EXPOSE 10020 19888

# Launch the supervisord service to manage all the hadoop processes.
CMD [""supervisord"", ""-n""]
",fedora-cloud/Fedora-Dockerfiles,hadoop/multi_container/resourcemanager/Dockerfile
a3b0e4ca6d5a20578a8b70a4b302f870e928ff30,1312,"# adjusted from https://github.com/ethereum/cpp-ethereum/blob/develop/docker/Dockerfile
FROM ubuntu:14.04

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update
RUN apt-get upgrade -y

# Ethereum dependencies
RUN apt-get install -qy build-essential g++-4.8 git cmake libboost-all-dev libcurl4-openssl-dev wget
RUN apt-get install -qy automake unzip libgmp-dev libtool libleveldb-dev yasm libminiupnpc-dev libreadline-dev scons
RUN apt-get install -qy libjsoncpp-dev libargtable2-dev

# NCurses based GUI (not optional though for a succesful compilation, see https://github.com/ethereum/cpp-ethereum/issues/452 )
RUN apt-get install -qy libncurses5-dev

# Qt-based GUI
# RUN apt-get install -qy qtbase5-dev qt5-default qtdeclarative5-dev libqt5webkit5-dev

# Ethereum PPA
RUN apt-get install -qy software-properties-common
RUN add-apt-repository ppa:ethereum/ethereum
RUN apt-get update
RUN apt-get install -qy libcryptopp-dev libjson-rpc-cpp-dev

# Build Ethereum (HEADLESS)
RUN git clone --depth=1 --branch develop https://github.com/ethereum/cpp-ethereum
RUN mkdir -p cpp-ethereum/build
RUN cd cpp-ethereum/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DHEADLESS=1 && make -j $(cat /proc/cpuinfo | grep processor | wc -l) && make install
RUN ldconfig

ENTRYPOINT [""/cpp-ethereum/build/test/createRandomTest""]

",ethereum/go-ethereum,tests/files/ansible/test-files/docker-cpp/Dockerfile
0c5758daeb0c63c44d45d3894ce40ef490ed3523,583,"#
# This is the official OpenShift Origin pod infrastructure image. It will stay running
# until terminated by a signal and is the heart of each running pod. It holds on to
# the network and IPC namespaces as containers come and go during the lifetime of the
# pod.
#
# The standard name for this image is openshift/origin-pod
#
FROM scratch

COPY bin/pod /pod

USER 1001
LABEL io.k8s.display-name=""OpenShift Origin Pod Infrastructure"" \
      io.k8s.description=""This is a component of OpenShift Origin and holds on to the shared Linux namespaces within a Pod.""
ENTRYPOINT [""/pod""]
",openshift/origin,images/pod/Dockerfile
d55aeb74d3bac36f59611c60240b44824448522a,2157,"FROM ubuntu:15.04
MAINTAINER Ferran Rodenas <frodenas@gmail.com>

# Update base image
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
RUN locale-gen en_US.UTF-8; dpkg-reconfigure locales
RUN apt-get update; apt-get -y upgrade; apt-get clean

# Install dependencies
RUN apt-get -y install build-essential git-core curl wget jq sudo; apt-get clean
RUN apt-get install -y sqlite3 libsqlite3-dev; apt-get clean
RUN apt-get install -y mysql-client libmysqlclient-dev; apt-get clean
RUN apt-get install -y postgresql-9.3 postgresql-client-9.3 libpq-dev; apt-get clean
RUN apt-get install -y python python-pip libyaml-dev libpython-dev; apt-get clean

# Install Golang
ENV GOLANG_VERSION 1.6
RUN curl -sSL https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local -xz
ENV GOROOT /usr/local/go
ENV PATH $PATH:$GOROOT/bin

# Install Google Cloud SDK
ENV GCLOUD_SDK_VERSION 102.0.0
RUN curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar -v -C /usr/local -xz
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Instal chruby
RUN mkdir /tmp/chruby && \
    cd /tmp && \
    curl https://codeload.github.com/postmodern/chruby/tar.gz/v0.3.9 | tar -xz && \
    cd /tmp/chruby-0.3.9 && \
    sudo ./scripts/setup.sh && \
    rm -rf /tmp/chruby

# Install ruby-install
RUN mkdir /tmp/ruby-install && \
    cd /tmp && \
    curl https://codeload.github.com/postmodern/ruby-install/tar.gz/v0.5.0 | tar -xz && \
    cd /tmp/ruby-install-0.5.0 && \
    sudo make install && \
    rm -rf /tmp/ruby-install


# Set default ruby
RUN ruby-install ruby 2.1.2 && \
    cp /etc/profile.d/chruby.sh /etc/profile.d/chruby-with-ruby-2.1.2.sh && \
    echo ""chruby 2.1.2"" >> /etc/profile.d/chruby-with-ruby-2.1.2.sh

# Install Bundler and BOSH CLI
RUN /bin/bash -l -c ""gem install bundler bosh_cli --no-ri --no-rdoc""

# receipt generator
RUN cd /tmp && \
    curl -o certify-artifacts -L https://s3.amazonaws.com/bosh-certification-generator-releases/certify-artifacts-linux-amd64 && \
    chmod +x certify-artifacts && \
    mv certify-artifacts /bin/certify-artifacts
",frodenas/bosh-google-cpi-boshrelease,ci/docker/frodenas.bosh-google-cpi-boshrelease/Dockerfile
667cf0f735df509b24f03a9ede675ade3823fe6b,188,"FROM java:8
VOLUME /tmp
ADD ${project.build.finalName}.jar app.jar
RUN bash -c 'touch /app.jar'
EXPOSE 8080
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]
",herau/diy-project,src/main/docker/Dockerfile
b94a7c8585cba1af6cd01796787e1f0cfc607e95,543,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_1.x/pool/main/i/iojs/iojs_1.3.0-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/iojs/1.3.0/Dockerfile
4fd54703deb8f3aba32a7ff61d6abe4423e667c7,583,"# Based on the Fedora image
FROM fedora

# File Author / Maintainer
MAINTAINER http://fedoraproject.org/wiki/Cloud

# Install Squid
RUN dnf -y update && dnf clean all
RUN dnf -y install squid && dnf clean all
RUN dnf -y install httpd-tools && dnf clean all

# Change the first occurrence squid.conf to auth_squid.conf
# if you would like to use authentication
ADD squid.conf /etc/squid/squid.conf
 
RUN squid -z -F
RUN htpasswd -b -c /etc/squid/passwd user1 password

# Expose ports
EXPOSE 3128

# Set the default command to execute
# when creating a new container
CMD squid -N -d 1
",fedora-cloud/Fedora-Dockerfiles,squid/Dockerfile
e216dcc2cf7a50f2c859406c460a30fdd4e2d986,743,"# Start with CUDA base image
FROM nvidia/cuda:7.0-devel
MAINTAINER Kai Arulkumaran <design@kaixhin.com>

# Install dependencies
RUN apt-get update && apt-get install -y \
  git \
  libhdf5-dev \
  python-dev \
  python-numpy \
  python-pip

# Upgrade six
RUN pip install --upgrade six

# Clone Brainstorm repo and move into it
RUN cd /root && git clone https://github.com/IDSIA/brainstorm.git && cd brainstorm && \
# Install requirements
  pip install -r requirements.txt && \
# Install CUDA requirements
  pip install -r pycuda_requirements.txt && \
# Install
  python setup.py install

# Make and set data directory
RUN mkdir /data
ENV BRAINSTORM_DATA_DIR=/data
VOLUME /data

# Set ~/brainstorm as working directory
WORKDIR /root/brainstorm
",Kaixhin/dockerfiles,cuda-brainstorm/cuda_v7.0/Dockerfile
1219357fa17f4e39c3007e0eef17b69ba46a7951,229,"# Start with CUDA Theano base image
FROM kaixhin/cuda-theano:latest
MAINTAINER Kai Arulkumaran <design@kaixhin.com>

# Install bleeding-edge Lasagne
RUN pip install --upgrade https://github.com/Lasagne/Lasagne/archive/master.zip
",Kaixhin/dockerfiles,cuda-lasagne/cuda_v7.5/Dockerfile
107995efa49d4e09fac718dbf1d9b79a49750edf,71,"FROM tiangolo/uwsgi-nginx-flask:flask-index-upload

COPY ./app /app
",tiangolo/uwsgi-nginx-flask-docker,example-flask-index-upload/Dockerfile
e106f2426c5bb618843016b3e14b9a8b87514e0f,1934,"# Build using: docker build -f Dockerfile.gocd-agent -t gocd-agent .
FROM gocd/gocd-agent:16.5.0

LABEL version=""0.02"" \
      description=""This custom go-agent docker file installs additional requirements for the edx pipeline""

# Add Custom apt repositories
RUN \
  echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \
  add-apt-repository -y ppa:webupd8team/java && \
  add-apt-repository -y 'deb http://ppa.edx.org trusty main' && \
  apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 69464050 && \
  apt-get update

# Install Java 7
RUN \
  apt-get install -y oracle-java7-installer && \
  rm -rf /var/lib/apt/lists/* && \
  rm -rf /var/cache/oracle-jdk7-installer

# Install a modern git client
RUN add-apt-repository -y ppa:git-core/ppa && \
    apt-get update && \
    apt-get -y install git

# Define working directory.
WORKDIR /data

# Define commonly used JAVA_HOME variable
ENV JAVA_HOME /usr/lib/jvm/java-7-oracle

# Install Python and package mgmt tools.
RUN apt-get update && apt-get install -y -q \
    python \
    python-dev \
    python-distribute \
    python-pip \
    libmysqlclient-dev

# Install Docker - for Docker container building by a go-agent.
COPY docker/build/go-agent/files/docker_install.sh /tmp/docker/
RUN /bin/bash /tmp/docker/docker_install.sh

# Add the go user to the docker group to allow the go user to run docker commands.
# See: https://docs.docker.com/engine/installation/linux/ubuntulinux/
RUN usermod -aG docker go

# Assign the go user root privlidges
RUN printf ""\ngo      ALL=(ALL:ALL) NOPASSWD: /usr/bin/pip\n"" >> /etc/sudoers

# Install AWS command-line interface - for AWS operations in a go-agent task.
RUN pip install awscli

ADD docker/build/go-agent/files/go-agent-start.sh /etc/service/go-agent/run
ADD docker/build/go-agent/files/go-agent-env-vars /etc/default/go-agent
RUN update-java-alternatives -s java-7-oracle
",edx/configuration,docker/build/go-agent/Dockerfile
19addb29120ce4b703a67c76b27f2fd205ff65cf,1815,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM 32bit/debian:jessie

RUN apt-get update && apt-get install -y python python-pip

# docker is running on a 64-bit machine, so we need to
# override ""uname -m"" to report i686 instead of x86_64, otherwise
# python will choose a wrong binary package to install.
ENTRYPOINT [""linux32""]
",grpc/grpc,tools/dockerfile/distribtest/python_jessie_x86/Dockerfile
5b62375c271fd123ba8b019576c36b08dc6d90f6,805,"# phpSysInfo
# VERSION       2

FROM ubuntu:14.04

MAINTAINER phpSysInfo

# Update sources
RUN echo ""deb http://archive.ubuntu.com/ubuntu trusty main universe"" > /etc/apt/sources.list
RUN apt-get update

RUN apt-get install -y apache2 php5 git pciutils

RUN git clone https://github.com/phpsysinfo/phpsysinfo.git /var/www/html/phpsysinfo
#RUN cp /var/www/html/phpsysinfo/phpsysinfo.ini.new /var/www/html/phpsysinfo/phpsysinfo.ini
RUN cat /var/www/html/phpsysinfo/phpsysinfo.ini.new | sed 's/^LOAD_BAR=false/LOAD_BAR=true/' >/var/www/html/phpsysinfo/phpsysinfo.ini

ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_PID_FILE /var/run/apache2/apache2.pid

CMD [""/usr/sbin/apache2"", ""-D"", ""FOREGROUND""]

EXPOSE 80
",jeedom/core,sysinfodsqg89sd4fg231sd6f8gs6dfg21/Dockerfile
1989781231b6fc8df8e9b063dc7e959ab47cbf36,682,"FROM debian:latest
MAINTAINER Olivier Delhomme <olivier.delhomme@free.fr>
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
RUN apt-get -y update; \
    apt-get -y upgrade; \
    apt-get -y install apt-utils; \
    apt-get -y install bash git autoconf automake libtool make libsqlite3-dev  libglib2.0-dev libmicrohttpd-dev libcurl4-gnutls-dev intltool; \
    git clone git://github.com/akheron/jansson.git; cd jansson; autoreconf -f -i; ./configure --enable-silent-rules; make; make install; cd ..; rm -fr jansson;

# Compiling sauvegarde project.
RUN git clone https://github.com/dupgit/sauvegarde.git; cd sauvegarde; ./autogen.sh && ./configure && make && make check && make install;
",dupgit/sauvegarde,dockerfiles/debian/Dockerfile
e379f94e314ff71c243fdf383b2711ab3cf706a6,800,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/base:ubuntu-15.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/bootstrap:ubuntu-15.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV DOCKER_CONF_HOME /opt/docker/

COPY conf/ /opt/docker/

# Install services
RUN chmod +x /opt/docker/bin/* \
    && /usr/local/bin/apt-install \
        supervisor \
        syslog-ng \
        syslog-ng-core \
        logrotate \
        cron \
        wget \
        curl \
        net-tools \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-base \
    && /opt/docker/bin/bootstrap.sh


ENTRYPOINT [""/opt/docker/bin/entrypoint.sh""]
CMD [""supervisord""]
",webdevops/Dockerfile,docker/base/ubuntu-15.04/Dockerfile
f13273eb86f9cd2611a29cf5b07bf2de80b6ce75,2174,"FROM debian:jessie

# persistent / runtime deps
RUN apt-get update && apt-get install -y ca-certificates curl libxml2 --no-install-recommends && rm -r /var/lib/apt/lists/*

# phpize deps
RUN apt-get update && apt-get install -y autoconf gcc libc-dev make pkg-config --no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

RUN gpg --keyserver pool.sks-keyservers.net --recv-keys F38252826ACD957EF380D39F2F7956BC5DA04B5D

ENV PHP_VERSION 5.4.38

# --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself)
RUN buildDeps="" \
		$PHP_EXTRA_BUILD_DEPS \
		bzip2 \
		file \
		libcurl4-openssl-dev \
		libreadline6-dev \
		libssl-dev \
		libxml2-dev \
	""; \
	set -x \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.bz2/from/this/mirror"" -o php.tar.bz2 \
	&& curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.bz2.asc/from/this/mirror"" -o php.tar.bz2.asc \
	&& gpg --verify php.tar.bz2.asc \
	&& mkdir -p /usr/src/php \
	&& tar -xf php.tar.bz2 -C /usr/src/php --strip-components=1 \
	&& rm php.tar.bz2* \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path=""$PHP_INI_DIR"" \
		--with-config-file-scan-dir=""$PHP_INI_DIR/conf.d"" \
		$PHP_EXTRA_CONFIGURE_ARGS \
		--disable-cgi \
		--enable-mysqlnd \
		--with-curl \
		--with-openssl \
		--with-readline \
		--with-zlib \
	&& make -j""$(nproc)"" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps \
	&& make clean

COPY docker-php-ext-* /usr/local/bin/

##<autogenerated>##
WORKDIR /var/www/html
COPY php-fpm.conf /usr/local/etc/

EXPOSE 9000
CMD [""php-fpm""]
##</autogenerated>##
",FriendsOfPHP/php,5.4/fpm/Dockerfile
7146e9d98d5d950a3598ebcccf16e4cbd568f7be,4442,"FROM occitech/magento:php5.5-apache

# packages configuration
RUN echo 'mysql-server mysql-server/root_password password P4ssw0rd' | debconf-set-selections
RUN echo 'mysql-server mysql-server/root_password_again password P4ssw0rd' | debconf-set-selections

# packages/dependencies installation
RUN systemctl mask mysql && apt-get update && apt-get install -y \
  mysql-client-5.5 \
  mysql-server \
  php5-mysql \
  php5-xdebug \
  libxml2-dev \
  vim emacs-nox \
  git-core \
  wget \
  zsh && systemctl unmask mysql

RUN docker-php-ext-install soap
RUN docker-php-ext-install mysqli

RUN chsh -s /bin/zsh
RUN sh -x -c ""$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | grep -v 'set -e')""
COPY bin/.zshrc /root/.zshrc

COPY bin/php.ini /usr/local/etc/php/php.ini
RUN cd /tmp && curl -O https://phpmyadmin-downloads-532693.c.cdn77.org/phpMyAdmin/4.4.9/phpMyAdmin-4.4.9-english.tar.gz && tar xvf phpMyAdmin-4.4.9-english.tar.gz && mv phpMyAdmin-4.4.9-english /var/www/htdocs/phpmyadmin
COPY bin/config.inc.php /var/www/htdocs/phpmyadmin/

# magento 1.9.1
## download & install script
RUN cd /tmp && curl -O https://demos.algolia.com/downloads/magento-1.9.2.1.tar.gz && tar xvf magento-1.9.2.1.tar.gz && mv magento/* magento/.htaccess /var/www/htdocs
COPY ./bin/install-magento /usr/local/bin/install-magento
RUN chmod +x /usr/local/bin/install-magento
## sample dataset import
RUN cd /tmp && curl -O https://demos.algolia.com/downloads/magento-sample-data-1.9.0.0.tar.gz && tar xvf magento-sample-data-1.9.0.0.tar.gz
RUN cd /var/www/htdocs/media && cp -R /tmp/magento-sample-data-1.9.0.0/media/* . && chmod -R 777 /var/www/htdocs/media
RUN cd /var/www/htdocs/skin && cp -R /tmp/magento-sample-data-1.9.0.0/skin/* .
RUN chown -R www-data:www-data /var/www/htdocs
## database setup
RUN service mysql start && (echo ""CREATE DATABASE magento"" | mysql -u root --password=P4ssw0rd) && mysql -u root --password=P4ssw0rd magento < /tmp/magento-sample-data-1.9.0.0/magento_sample_data_for_1.9.0.0.sql && service mysql stop
RUN service mysql start && MYSQL_HOST=127.0.0.1 MYSQL_USER=root MYSQL_PASSWORD=P4ssw0rd MYSQL_DATABASE=magento MAGENTO_LOCALE=en_GB MAGENTO_TIMEZONE=Europe/Paris MAGENTO_DEFAULT_CURRENCY=USD MAGENTO_URL=http://mymagentostore.com MAGENTO_ADMIN_FIRSTNAME=Admin MAGENTO_ADMIN_LASTNAME=MyStore MAGENTO_ADMIN_EMAIL=amdin@mymagentostore.com MAGENTO_ADMIN_USERNAME=admin MAGENTO_ADMIN_PASSWORD=magentorocks1 /usr/local/bin/install-magento && service mysql stop
## disable cache
RUN service mysql start && n98-magerun --root-dir=/var/www/htdocs cache:flush && n98-magerun --root-dir=/var/www/htdocs cache:disable && service mysql stop
## allow symlinks
RUN service mysql start && n98-magerun --root-dir=/var/www/htdocs config:set dev/template/allow_symlink ""1"" >/dev/null 2>&1  && service mysql stop
## disable admin popup
RUN service mysql start && n98-magerun --root-dir=/var/www/htdocs admin:notifications >/dev/null 2>&1  && service mysql stop
## disable url key in admin
RUN service mysql start && n98-magerun --root-dir=/var/www/htdocs config:set admin/security/use_form_key ""0"" >/dev/null 2>&1  && service mysql stop

# algoliasearch-magento setup
RUN cd /tmp && curl -s -L -O https://raw.github.com/colinmollenhour/modman/master/modman-installer && chmod +x modman-installer && ./modman-installer
RUN cd /var/www/htdocs && /root/bin/modman init && /root/bin/modman clone https://github.com/algolia/algoliasearch-magento && rm -rf .modman/algoliasearch-magento

# start script
COPY ./bin/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

#path admin template to have credentials filled && auto login
RUN sed -i 's/name=""login\[username\]"" value=""""/name=""login[username]"" value=""admin""/g' /var/www/htdocs/app/design/adminhtml/default/default/template/login.phtml && \
	sed -i 's/name=""login\[password\]"" class=""required-entry input-text"" value=""""/name=""login[password]"" class=""required-entry input-text"" value=""magentorocks1""/g' /var/www/htdocs/app/design/adminhtml/default/default/template/login.phtml && \
	sed -i 's/<\/script>/Event.observe(window, ""load"", function() {$(""loginForm"").submit();});<\/script>/g' /var/www/htdocs/app/design/adminhtml/default/default/template/login.phtml && \
	sed -i ""s/#ini_set('display_errors', 1);/ini_set('display_errors', 1);error_reporting(E_ALL);Mage::setIsDeveloperMode(true);/g"" /var/www/htdocs/index.php

# GO
EXPOSE 80
CMD start.sh",algolia/algoliasearch-magento,dev/Dockerfile
4ac483cf5a7d918cdbcfaa6ecbd4fdeef357da59,2023,"FROM debian:jessie

MAINTAINER Yvonnick Esnault <yvonnick@esnau.lt>

ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

ENV VERSION_RIEMANN 0.2.6

ADD startup.sh /opt/startup.sh

RUN chmod +x /opt/startup.sh && \
    echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee /etc/apt/sources.list.d/webupd8team-java.list && \
    echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list.d/webupd8team-java.list && \
    echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 && \
    apt-get -y update && \
    apt-get install -y supervisor build-essential ruby2.1 ruby2.1-dev rubygems libghc-zlib-dev \
        net-tools inetutils-ping curl git telnet nmap socat dnsutils netcat tree vim \
        htop software-properties-common \
        oracle-java8-installer && \
    mkdir -p /opt/riemann && cd /opt/riemann && \
    echo ""get http://aphyr.com/riemann/riemann-${VERSION_RIEMANN}.tar.bz2"" && \
    curl --insecure https://aphyr.com/riemann/riemann-${VERSION_RIEMANN}.tar.bz2 | tar xj && \
    mv riemann-${VERSION_RIEMANN} riemann && \
    gem install riemann-client riemann-tools riemann-dash && \
    mv /opt/riemann/riemann/etc /opt/riemann/riemann/etc-origin && \
    sed -i -e ""s|127.0.0.1|0.0.0.0|"" /opt/riemann/riemann/etc-origin/riemann.config && \
    mkdir -p /opt/riemann/riemann/etc && \
    apt-get autoremove -y curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Use /opt/riemann/riemann/etc-origin to allow -v :/opt/riemann/riemann/etc

ADD supervisord.conf.d/* /etc/supervisor/conf.d/
ADD riemann.config /opt/riemann/riemann/etc-origin/riemann.config
ADD riemann-dash-config.rb /opt/riemann/riemann/etc-origin/riemann-dash-config.rb
ADD dash-config.json /opt/riemann/riemann/etc-origin/dash-config.json

#EXPOSE 4567 5555 5555/udp 5556

CMD [""/opt/startup.sh""]
",docktor/dockerfiles,docker-riemann/Dockerfile
7f8d32ca33b258c59896f408cf86c7e258b9e607,1153,"FROM cptobvious/cpp-ethereum-base

# Buildslave dependencies
RUN apt-get install --fix-missing -y apt-utils python-pip python-dev supervisor git inotify-tools cppcheck ccache

# Clone latest buildbot
RUN git clone https://github.com/buildbot/buildbot.git

# Install buildbot
RUN cd buildbot && git checkout eight && pip install -e slave
RUN pip install pip-tools requests
# RUN pip-review -a

# Create buildslave
RUN buildslave create-slave -r -l 3 -s 512000 slave build.ethdev.com:9989 dockerslave pass
# Add manually set buildslave config, use .sample file or previously created buildslave config
ADD buildbot.tac slave/buildbot.tac

# Set slave/info/admin and slave/info/host
RUN echo ""caktux <caktux@gmail.com>"" > slave/info/admin
RUN echo `lsb_release -ds` > slave/info/host

# Setup supervisord
RUN /bin/echo -e ""[supervisord]\n\
nodaemon=true\n\
\n\
[program:buildslave]\n\
directory=/slave\n\
user=root\n\
command=twistd --nodaemon --no_save -y buildbot.tac"" > /etc/supervisor/conf.d/buildbot.conf

# CMD [""start"", ""slave""]
# ENTRYPOINT [""buildslave""]
CMD [""-n"", ""-c"", ""/etc/supervisor/conf.d/buildbot.conf""]
ENTRYPOINT [""/usr/bin/supervisord""]
",ethereum/ethereum-dockers,cpp-ethereum-buildslave/Dockerfile
9f33c317c8c9095648ca8e21b52717a0ec0c35b7,683,"# Run wireshark in a container
#
# docker run -d \
#	-v /etc/localtime:/etc/localtime:ro \
#	-v /tmp/.X11-unix:/tmp/.X11-unix \
#	-e DISPLAY=unix$DISPLAY \
#	--name wireshark \
#	jess/wireshark
#
FROM ubuntu:14.04
MAINTAINER Jessie Frazelle <jess@linux.com>

RUN apt-get update && apt-get install -y \
	software-properties-common \
	--no-install-recommends && \
	add-apt-repository ppa:wireshark-dev/stable && \
	apt-get update && \
	apt-get install -y \
	wireshark \
	&& rm -rf /var/lib/apt/lists/*

ENV HOME /home/wireshark
RUN useradd --create-home --home-dir $HOME wireshark \
	&& chown -R wireshark:wireshark $HOME

USER wireshark

WORKDIR wireshark

ENTRYPOINT	[ ""wireshark"" ]
",jfrazelle/dockerfiles,wireshark/Dockerfile
bc8f10bbee03340c46ce2e62dc87faba44245c50,1318,"# Copyright 2015 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file creates a build environment for building and running kubernetes
# unit and integration tests

FROM golang:1.5.3
MAINTAINER  Jeff Lowdermilk <jeffml@google.com>

ENV WORKSPACE               /workspace
ENV TERM                    xterm

WORKDIR /workspace

RUN apt-get -o Acquire::Check-Valid-Until=false update && apt-get install -y rsync
# file is used when uploading test artifacts to GCS.
RUN apt-get install -y file
# libapparmor1 is needed for docker-in-docker.
RUN apt-get install -y libapparmor1
# netcat is used by integration test scripts.
RUN apt-get install -y netcat-openbsd
RUN mkdir -p /go/src/k8s.io/kubernetes
RUN ln -s /go/src/k8s.io/kubernetes /workspace/kubernetes

RUN /bin/bash
",hyperhq/hypernetes,hack/jenkins/test-image/Dockerfile
c829c71cd33faa925d039380230c1e4d7bb44854,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.0.1-1-x86_64.pkg.tar.xz /tmp/php-5.0.1-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.0.1-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.0.1/Dockerfile
609de9c47713337a314afa64b56ac462d63062eb,525,"FROM banno/carbon-base

ENV NODE_NAME cache
ENV LOCAL_DATA_DIR /opt/graphite/storage/whisper/
ENV MAX_CACHE_SIZE inf
ENV MAX_UPDATES_PER_SECOND 1000
ENV MAX_CREATES_PER_MINUTE inf
ENV LOG_UPDATES False
ENV LINE_RECEIVER_INTERFACE 0.0.0.0
ENV PICKLE_RECEIVER_INTERFACE 0.0.0.0
ENV CACHE_QUERY_INTERFACE 0.0.0.0
ENV LINE_RECEIVER_PORT 2003
ENV PICKLE_RECEIVER_PORT 2004
ENV CACHE_QUERY_PORT 7002

ADD ./config /opt/graphite/conf/
ADD run.sh /opt/graphite/

EXPOSE 2003 2004 7002

WORKDIR /opt/graphite

ENTRYPOINT [""./run.sh""]
",Banno/graphite-setup,carbon-cache/Dockerfile
a6ac9759e898a4a575f5a161bfb7ac5475e3e634,387,"FROM windowsservercore
LABEL Description=""MongoDB"" Vendor=""MongoDB, Inc."" Version=""3.0.4""
ADD sources /build
RUN msiexec /i C:\build\mongodb-win32-x86_64-2008plus-ssl-3.0.7-signed.msi /qn /l*v C:\build\mongodb-win32-x86_64-2008plus-ssl-3.0.7-signed.log & mkdir C:\data\db & mkdir C:\data\log & del C:\build\mongodb-win32-x86_64-2008plus-ssl-3.0.7-signed.msi
WORKDIR /data
CMD [""mongod""]
",Microsoft/Virtualization-Documentation,windows-container-samples/windowsservercore/mongodb/Dockerfile
cad926503fe8426fcef962d22d2984511074c11d,573,"FROM java:7

ENV ACTIVEMQ_VERSION 5.11.1
ENV ACTIVEMQ apache-activemq-$ACTIVEMQ_VERSION

ENV ACTIVEMQ_HOME /opt/activemq

RUN \
    curl -O http://archive.apache.org/dist/activemq/$ACTIVEMQ_VERSION/$ACTIVEMQ-bin.tar.gz && \
    mkdir -p /opt && \
    tar xf $ACTIVEMQ-bin.tar.gz -C /opt/ && \
    rm $ACTIVEMQ-bin.tar.gz && \
    ln -s /opt/$ACTIVEMQ $ACTIVEMQ_HOME && \
    useradd -r -M -d $ACTIVEMQ_HOME activemq && \
    chown activemq:activemq /opt/$ACTIVEMQ -R

USER activemq

WORKDIR $ACTIVEMQ_HOME
EXPOSE 61616 8161

CMD [""/bin/bash"", ""-c"", ""bin/activemq console""]
",rmohr/docker-activemq,5.11.1/Dockerfile
0362479dd4892ac04b3b1095814aa5e92e1120d7,653,"FROM docker.io/mysql:latest
RUN echo deb http://ftp.it.debian.org/debian jessie main > /etc/apt/sources.list

# Prepare for nsswitch.
RUN apt-get  update && apt-get -y install libnss-extrausers && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN sed -i 's/passwd:         compat/passwd:         compat extrausers/' /etc/nsswitch.conf
RUN grep -v mysql /etc/passwd  > /var/lib/extrausers/passwd
RUN touch  /var/lib/extrausers/passwd && chmod a+w /var/lib/extrausers/passwd

RUN mkdir -p /data/mysql
RUN chmod 777 -R  /data/mysql /var/lib/mysql /var/run


COPY docker-entrypoint.sh /usr/local/bin/

USER 27
ENTRYPOINT /usr/local/bin/docker-entrypoint.sh
",ioggstream/dockerfiles,openshift-mysql-57-ephemeral/Dockerfile
5dd72ea2222929fb23dd49825bae3063a45e4ced,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.1.5-1-x86_64.pkg.tar.xz /tmp/php-5.1.5-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.1.5-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.1.5/Dockerfile
867cd6bc50c2a5da49d0a08b4a651ff1be13326a,137,"FROM gliderlabs/alpine
MAINTAINER Weaveworks Inc <help@weave.works>
WORKDIR /
COPY proxy /
EXPOSE 8000
EXPOSE 8080
ENTRYPOINT [""/proxy""]
",weaveworks/scope,tools/socks/Dockerfile
fa42f44cfbe5da5aa8841284b556d74298583aef,1718,"# Use latest Fedora image as the base
FROM centos:latest
MAINTAINER http://www.centos.org

LABEL Vendor=""CentOS""
LABEL License=GPLv2
LABEL Version=8.2.0.Final


# Update base image
RUN yum -y update && yum clean all

# xmlstarlet is useful when modifying attributes/elements
# saxon can be used to execute configuration transformation using XSLT
# augeas is a great tool to edit any configuration files (XML too)
# bsdtar can be used to unpack zip files using pipes
RUN yum -y install tar java-1.7.0-openjdk-devel saxon \ 
    augeas bsdtar shadow-utils && yum clean all

# Set the WILDFLY_VERSION env variable
ENV WILDFLY_VERSION 8.2.0.Final

# Create the wildfly user and group
RUN groupadd -r wildfly -g 433 && useradd -u 431 -r -g wildfly -d /opt/wildfly -s /sbin/nologin -c ""WildFly user"" wildfly

# Create directory to extract tar file to
RUN mkdir /opt/wildfly-$WILDFLY_VERSION

# Add the WildFly distribution to /opt, and make wildfly the owner of the extracted tar content
RUN cd /opt && curl http://download.jboss.org/wildfly/$WILDFLY_VERSION/wildfly-$WILDFLY_VERSION.tar.gz | tar zx && chown -R wildfly:wildfly /opt/wildfly-$WILDFLY_VERSION

# Make sure the distribution is available from a well-known place
RUN ln -s /opt/wildfly-$WILDFLY_VERSION /opt/wildfly && chown -R wildfly:wildfly /opt/wildfly

# Set the JBOSS_HOME env variable
ENV JBOSS_HOME /opt/wildfly

# Expose the ports we're interested in
EXPOSE 8080 9990

# Run everything below as the wildfly user
USER wildfly

# Set the default command to run on boot
# This will boot WildFly in the standalone mode and bind to all interface
CMD [""/opt/wildfly/bin/standalone.sh"", ""-c"", ""standalone-full.xml"", ""-b"", ""0.0.0.0"", ""-bmanagement"", ""0.0.0.0""]
",CentOS/CentOS-Dockerfiles,wildfly/centos7/Dockerfile
b50bcaaa446025835f9bd85edde3c9652cb5dccc,743,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/piwik:ubuntu-14.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/php-nginx:ubuntu-14.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app/piwik/
ENV PIWIK_URL          http://example.com/

COPY conf/ /opt/docker/

# Deploy scripts/configurations
COPY conf/ /opt/docker/
RUN /opt/docker/bin/provision add --tag bootstrap --tag entrypoint --tag onbuild webdevops-piwik \
    && /opt/docker/bin/control.sh service.enable cron \
    && /opt/docker/bin/bootstrap.sh

ONBUILD RUN /opt/docker/bin/bootstrap.sh onbuild
ONBUILD VOLUME /app
",webdevops/Dockerfile,docker/piwik/ubuntu-14.04/Dockerfile
c207f0a4cd698511a3cd61af5df219bb4781939d,248,"FROM centos:6

MAINTAINER yubang

RUN yum groupinstall ""Development tools"" -y
RUN yum install wget -y
RUN yum install tar -y

ADD install.sh /tmp/install.sh
ADD nginx.conf /tmp/nginx.conf
ADD start.sh /tmp/start.sh
RUN /bin/bash /tmp/install.sh



",yubang/app,docker/redis/Dockerfile
9311a51e4447c5830770639c4fba1a39f3927420,2414,"#
# Docker file for base ROS+OpenCog+Blender install
# The CogServer is not started; no ROS nodes are started.
#
# XXX THIS IS IDENTICAL TO the ros-indigo-blender DOCKERFILE,
# XXX EXCEPT THAT A DIFFERENT BASE IS USED!
# XXX Please try to keep it that way!
#
# The primary difficulty here is that Blender wants Python3
# while ROS wants Python2, and so there are install conflicts.
#
# To build:
# docker build -t opencog/ros-incog-blender .
#
# To run:
# docker run --rm --privileged -i -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 \
#    -v /dev/dri:/dev/dri -v /dev/shm:/dev/shm -e DISPLAY=:0.0 \
#    -t opencog/ros-incog-blender
#
# The above should be sufficient to get blender running with full
# 3D hardware acceleration on the local host (dri==direct rendering interface)
# Note: /dev/dri=gpu, /dev/shm=gpu
#
FROM opencog/ros-indigo-opencog
MAINTAINER Linas VepÅ¡tas ""linasvepstas@gmail.com""

ENV LAST_OS_UPDATE 2015-11-25

# Get blender version 2.71; the default in trusty is 2.69, and lighting
# looks wrong in it.  The one in ppa:thomas-schiex is 2.75, and gestures
# don't work with that version.
# RUN add-apt-repository ppa:thomas-schiex/blender
RUN add-apt-repository ppa:irie/blender
RUN apt-get -y update
RUN apt-get -y upgrade

# Blender with dependencies
# Install x11-utils to get xdpyinfo, for X11 display debugging
# mesa-utils provides glxinfo, handy for understanding the 3D support.
# Blender needs python3
RUN apt-get -y install blender x11-utils mesa-utils python3-yaml python3-pip

# We perform some magic incantations to allow ROS (which normally
# expects python2) to happily co-exist with python3.  Yes, its odd
# to do this here, but here is where we first install python3.
RUN pip3 install rospkg catkin_pkg

WORKDIR /catkin_ws/src
RUN cp /opt/ros/indigo/setup.sh /etc/profile.d/ros_indigo.sh
ENV PYTHONPATH /opt/ros/indigo/lib/python2.7/dist-packages
RUN /usr/bin/python3 /opt/ros/indigo/bin/catkin_init_workspace

# Must run catkin at least once, even if there is nothing to build;
# it creates the needed directory structure and the needed setup.sh.
WORKDIR /catkin_ws
RUN bash -l -c ""/opt/ros/indigo/bin/catkin_make""

# Empty ROS Enviroment Setup
# The user is root; so ~/.bash_profile is /root/.bash_profile
RUN echo source /catkin_ws/devel/setup.bash >> ~/.bash_profile && \
    echo -e ""\e[1;34m[$SELF_NAME] catkin devel setup\.bash sourced\e[0m""

ENV DISPLAY :0.0
CMD /bin/bash
",opencog/docker,indigo/ros-incog-blender/Dockerfile
2418d1ab63c45d000d4e2fcabd7329ff09796ee5,2198,"FROM ubuntu:14.04.2

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    curl perl make build-essential procps \
    libreadline-dev libncurses5-dev libpcre3-dev libssl-dev \
 && rm -rf /var/lib/apt/lists/*

ENV OPENRESTY_VERSION 1.9.3.1
ENV OPENRESTY_PREFIX /opt/openresty
ENV NGINX_PREFIX /opt/openresty/nginx
ENV VAR_PREFIX /var/nginx

# NginX prefix is automatically set by OpenResty to $OPENRESTY_PREFIX/nginx
# look for $ngx_prefix in https://github.com/openresty/ngx_openresty/blob/master/util/configure

RUN cd /root \
 && echo ""==> Downloading OpenResty..."" \
 && curl -sSL http://openresty.org/download/ngx_openresty-${OPENRESTY_VERSION}.tar.gz | tar -xvz \
 && echo ""==> Configuring OpenResty..."" \
 && cd ngx_openresty-* \
 && readonly NPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \
 && echo ""using upto $NPROC threads"" \
 && ./configure \
    --prefix=$OPENRESTY_PREFIX \
    --http-client-body-temp-path=$VAR_PREFIX/client_body_temp \
    --http-proxy-temp-path=$VAR_PREFIX/proxy_temp \
    --http-log-path=$VAR_PREFIX/access.log \
    --error-log-path=$VAR_PREFIX/error.log \
    --pid-path=$VAR_PREFIX/nginx.pid \
    --lock-path=$VAR_PREFIX/nginx.lock \
    --with-luajit \
    --with-pcre-jit \
    --with-ipv6 \
    --with-http_ssl_module \
    --without-http_ssi_module \
    --without-http_userid_module \
    --without-http_fastcgi_module \
    --without-http_uwsgi_module \
    --without-http_scgi_module \
    --without-http_memcached_module \
    -j${NPROC} \
 && echo ""==> Building OpenResty..."" \
 && make -j${NPROC} \
 && echo ""==> Installing OpenResty..."" \
 && make install \
 && echo ""==> Finishing..."" \
 && ln -sf $NGINX_PREFIX/sbin/nginx /usr/local/bin/nginx \
 && ln -sf $NGINX_PREFIX/sbin/nginx /usr/local/bin/openresty \
 && ln -sf $OPENRESTY_PREFIX/bin/resty /usr/local/bin/resty \
 && ln -sf $OPENRESTY_PREFIX/luajit/bin/luajit-* $OPENRESTY_PREFIX/luajit/bin/lua \
 && ln -sf $OPENRESTY_PREFIX/luajit/bin/luajit-* /usr/local/bin/lua \
 && rm -rf /root/ngx_openresty*

WORKDIR $NGINX_PREFIX/

ONBUILD RUN rm -rf conf/* html/*
ONBUILD COPY nginx $NGINX_PREFIX/

CMD [""nginx"", ""-g"", ""daemon off; error_log /dev/stderr info;""]
",auth0/nginx-jwt,hosts/proxy/Dockerfile
581dd65453f8aae88e44cf7d7cb2e717be45b261,295,"FROM fedora:latest
MAINTAINER http://fedoraproject.org/wiki/Cloud

RUN dnf -y update && dnf clean all

RUN dnf -y install ansible && dnf clean all
RUN mkdir -p /etc/ansible/roles \
        && echo '[local]\nlocalhost\n' > /etc/ansible/hosts

ENV ANSIBLE_NOCOWS 1

CMD ansible localhost -m setup
",fedora-cloud/Fedora-Dockerfiles,ansible/Dockerfile
cce6f78dc99d3bbcd7af40ee803b9c7025e9c041,510,"FROM markleith/centos-6.4

MAINTAINER Mark Leith (mark@markleith.co.uk)

RUN rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
RUN yum -y install mysql-community-server

RUN git clone https://github.com/MarkLeith/mysql-sys.git /tmp/mysql-sys

ADD mysql-init /usr/bin/mysql-init
RUN chmod +x /usr/bin/mysql-init
RUN /usr/bin/mysql-init

ADD mysql-start /usr/bin/mysql-start
RUN chmod +x /usr/bin/mysql-start

ADD my.cnf /etc/my.cnf

EXPOSE 22 3306

ENTRYPOINT [""/usr/bin/mysql-start""]

",MarkLeith/mysql-docker,mysql-repo-server-5.6-centos-6.4/Dockerfile
109001947d57ae0c5399e5ba0f99eea5ac493e62,478,"FROM nodesource/centos7-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub/el/7/x86_64/nodejs-0.10.31-1nodesource.el7.centos.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/7/node/0.10.31/Dockerfile
2d11b36e5b30b4838a358fbc5e8a8ca3a0a63d3f,800,"FROM tutum/curl:trusty
MAINTAINER FranÃ§ois-Guillaume Ribreau <docker@fgribreau.com>

# Install InfluxDB
ENV INFLUXDB_VERSION 0.10.3-1
RUN curl -s -o /tmp/influxdb_latest_amd64.deb https://s3.amazonaws.com/influxdb/influxdb_${INFLUXDB_VERSION}_amd64.deb && \
  dpkg -i /tmp/influxdb_latest_amd64.deb && \
  rm /tmp/influxdb_latest_amd64.deb && \
  rm -rf /var/lib/apt/lists/*

ADD types.db /usr/share/collectd/types.db
ADD config.toml /config/config.toml
ADD run.sh /run.sh
RUN chmod +x /*.sh

ENV PRE_CREATE_DB **None**
ENV SSL_SUPPORT **False**
ENV SSL_CERT **None**

# Admin server WebUI
EXPOSE 8083

# HTTP API
EXPOSE 8086

# Raft port (for clustering, don't expose publicly!)
#EXPOSE 8090

# Protobuf port (for clustering, don't expose publicly!)
#EXPOSE 8099

VOLUME [""/data""]

CMD [""/run.sh""]
",tutumcloud/influxdb,0.10/Dockerfile
af3b273402911bae0154a683e74ba6e12cb99c85,1952,"# Copyright 2016 Alexander Lamaison

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.

FROM debian:jessie

RUN apt-get update \
 && apt-get install -y openssh-server \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*
RUN mkdir /var/run/sshd

# Chmodding because, when building on Windows, files are copied in with
# -rwxr-xr-x permissions.
#
# Copying to a temp location, then moving because chmodding the copied file has
# no effect (Docker AUFS-related bug maybe?)
COPY ssh_host_rsa_key /tmp/etc/ssh/ssh_host_rsa_key
RUN mv /tmp/etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_rsa_key
RUN chmod 600 /etc/ssh/ssh_host_rsa_key

RUN adduser --disabled-password --gecos 'Test user for Swish integration tests' swish
RUN echo 'swish:my test password' | chpasswd

RUN sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

USER swish

RUN mkdir -p /home/swish/.ssh
RUN mkdir -p /home/swish/sandbox

COPY authorized_keys /tmp/swish/.ssh/authorized_keys
RUN cp /tmp/swish/.ssh/authorized_keys /home/swish/.ssh/authorized_keys
RUN chmod 600 /home/swish/.ssh/authorized_keys

USER root

EXPOSE 22
# # -e gives logs via 'docker logs'
CMD [""/usr/sbin/sshd"", ""-D"", ""-e""]
",alamaison/swish,test/fixtures/ssh_server/Dockerfile
e48568836296a35dc7f2c52495b7c1193850a6d8,1920,"################################################################################
# Copyright (c) 2014 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################
FROM ubuntu:14.04

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install \
    bundler \
    curl \
    dnsutils \
    openssh-server \
    ruby1.9.3 \
    supervisor \
    wget &&\
  apt-get clean &&\
  rm -Rf /var/cache/*

# SSH
RUN mkdir -p /var/run/sshd
ADD sshd.conf /etc/supervisor/conf.d/sshd.conf

ADD id_rsa.pub /root/.ssh/id_rsa.pub
RUN cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys

RUN sed -i 's/session \+required \+pam_loginuid\.so/session    optional     pam_loginuid.so/' /etc/pam.d/sshd

# Java
RUN echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" >> /etc/apt/sources.list
RUN echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" >> /etc/apt/sources.list
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80/ --recv 7B2C3B0889BF5709A105D03AC2518248EEA14886

RUN echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install oracle-java7-installer oracle-java7-set-default &&\
  apt-get clean &&\
  rm -Rf /var/cache/*

EXPOSE 22

CMD [""/usr/bin/supervisord"", ""-n""]

",aspyker/acmeair-netflixoss-dockerlocal,base/Dockerfile
c5a3f33a0e1dba31044eb557ae40652344821d18,575,"# CentOS 5.11 from 22/03/2016
FROM centos@sha256:7f8a808416f712da6931ac65e4308fede7fe86bcf15364b6f63af88840fe6131
RUN yum install -y wget && \
    yum install -y system-config-services && \
    yum install -y curl && \
    wget --no-cookies \
        --no-check-certificate \
        --header  ""Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"" \
        --output-document jdk.rpm \
        http://download.oracle.com/otn-pub/java/jdk/8u66-b17/jdk-8u66-linux-x64.rpm && \
    yum --nogpg localinstall -y jdk.rpm && \
    rm -f jdk.rpm
",spring-projects/spring-boot,spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/resources/conf/CentOS/5.11-7f8a8084/Dockerfile
bebc31f83d1e886ad2c65f647bcfdbda1fe45275,119,"FROM google/debian:wheezy
RUN apt-get update
RUN apt-get install -y gdebi-core
ADD *.deb /tmp/
RUN gdebi -n /tmp/*.deb
",projectbuendia/buendia,packages/buendia-pkgserver/Dockerfile
165786beee6d92e1e0e2e36e851666499cef2299,1658,"FROM ubuntu:14.04
NAME ferry-base

# Get rid of Upstart and FUSE errors
# RUN dpkg-divert --local --rename --add /sbin/initctl && ln -s /bin/true /sbin/initctl
RUN dpkg-divert --local --add --rename --divert /bin/mknod.real /bin/mknod && ln -s /bin/true /bin/mknod

# Fake a fuse install
RUN apt-get update;apt-get install libfuse2
RUN cd /tmp ; apt-get download fuse
RUN cd /tmp ; dpkg-deb -x fuse_* .
RUN cd /tmp ; dpkg-deb -e fuse_*
RUN cd /tmp ; rm fuse_*.deb
RUN cd /tmp ; echo -en '#!/bin/bash\nexit 0\n' > DEBIAN/postinst
RUN cd /tmp ; dpkg-deb -b . /fuse.deb
RUN cd /tmp ; dpkg -i /fuse.deb

# Get the ""mknod"" command back. 
RUN rm /bin/mknod
RUN dpkg-divert --rename --remove /bin/mknod

# The previous set of commands messes up the /tmp permission for some
# reason. This just fixes it.
RUN chmod 1777 /tmp

# Make the various directories needed
RUN mkdir -p /service/keys /service/sbin /service/sconf /var/run/sshd

# Download some dependencies
RUN apt-get --yes install openssh-server

# Create ferry user
RUN addgroup supergroup;addgroup --gid $DOCKER docker;adduser --disabled-password --gecos """" ferry;usermod -a -G sudo ferry;usermod -a -G docker ferry;usermod -a -G supergroup ferry;chown -R ferry:docker /service;chown -R ferry:ferry /home/ferry

# Generate an ssh key for this image.
RUN ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' > /dev/null
RUN echo ""StrictHostKeyChecking no"" >> /etc/ssh/ssh_config;touch /etc/mtab

# Disable UsePAM in the sshd config. 
RUN sed -ri 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config

ADD ./setup /service/sbin/
ADD ./halt01.sh /service/sbin/
ADD ./init01.sh /service/sbin/
RUN chmod a+x /service/sbin/*
",jhorey/ferry,ferry/data/dockerfiles/ferry-base/Dockerfile
cfd331441d5725a2323e0ba9deb92a5ab771b5ae,97,"FROM andmos/mono-pcl

ADD bin bin

CMD mono /bin/Debug/TestHealthRecordServer.Console.exe $URL 

",andmos/HealthKitServer,TestHealthRecordServer.Console/Dockerfile
ad6730d69c9e2db372bf07efb90711f9a44463b5,80,"FROM python

ADD ./start.sh /start.sh
RUN chmod +x /start.sh

CMD [""/start.sh""]
",mnylen/pig,test/include-yml/another/Dockerfile
92f483ccc6b339e22d2e9fa176d21d01202ddc09,551,"FROM nodesource/vivid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.2.5-1nodesource1~vivid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/vivid/node/4.2.5/Dockerfile
0c403997585c1d41989c016beeab9b570f4a85ff,254,"FROM rancher/vm-base:0.0.3
COPY android-4.4-r2.gz.qcow2 /base_image/
CMD [""-m 256m""]
ENV KVM_NET_OPTS=""-netdev bridge,br=\$BRIDGE_IFACE,id=hostnet0 -device rtl8139,netdev=hostnet0,id=net0,mac=\$MAC,bus=pci.0,addr=0x3""
ENV KVM_BLK_OPTS=""-hda \$KVM_IMAGE""
",rancher/vm,image/android-x86/Dockerfile
7d6f67da0fce563e5218a456a5acda8d9d865935,2797,"FROM debian:sid

MAINTAINER Martin Rumanek <martin@rumanek.cz>

ENV REFRESHED_AT 2015-07-14

## install packages
RUN apt-get -y  update && apt-get -y install unzip curl libtiff-tools imagemagick sox ffmpeg libsox-fmt-mp3 

# run tomcat
RUN curl -sL --no-verbose https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.26/bin/apache-tomcat-8.0.26.tar.gz -o /tmp/tomcat.tar.gz && \
    curl -sL --no-verbose http://ftp-devel.mzk.cz/jre/jdk-7u75-linux-x64.tar.gz -o /tmp/java.tar.gz
RUN mkdir -p /usr/local/java
ENV JAVA_HOME /usr/local/java/jdk1.7.0_75
ENV CATALINA_HOME /usr/local/tomcat
RUN tar xzf /tmp/java.tar.gz --directory=/usr/local/java

RUN tar xzf /tmp/tomcat.tar.gz --directory=/usr/local/ && mv /usr/local/apache-tomcat-* /usr/local/tomcat
ENV PATH  $CATALINA_HOME/bin:$JAVA_HOME/bin:$PATH


RUN curl -sL --no-verbose https://github.com/moravianlibrary/MEditor/archive/master.zip -o /tmp/meditor.zip 
RUN curl -sL  http://ftp-devel.mzk.cz/meditor/master/meditor.war -o $CATALINA_HOME/webapps/meditor.war
RUN curl -sL https://jdbc.postgresql.org/download/postgresql-9.4-1201.jdbc41.jar -o $CATALINA_HOME/lib/postgresql-9.4-1201.jdbc41.jar
RUN unzip /tmp/meditor.zip -d /tmp/meditor/

#in archive is duplicated adore-djatoka-1.1 (so overwrite)
RUN unzip -o /tmp/meditor/MEditor-master/resources/djatoka/dist/djatoka.war -d $CATALINA_HOME/webapps/djatoka


RUN mkdir -p /root/.meditor

RUN mv /tmp/meditor/MEditor-master/resources/djatoka /root/.meditor/djatoka
RUN mv /tmp/meditor/MEditor-master/resources/xml /root/.meditor/xml
RUN mv /tmp/meditor/MEditor-master/resources/convertAudio /root/.meditor/convertAudio
ADD djatoka.properties $CATALINA_HOME/webapps/djatoka/WEB-INF/classes/djatoka.properties
ADD log4j.properties $CATALINA_HOME/webapps/djatoka/WEB-INF/classes/log4j.properties

ENV DJATOKA_HOME /root/.meditor/djatoka
ENV LIBPATH $DJATOKA_HOME/lib
ENV LD_LIBRARY_PATH $LIBPATH/Linux-x86-64
ENV KAKADU_HOME $DJATOKA_HOME/bin/Linux-x86-64
ENV KAKADU_LIBRARY_PATH -DLD_LIBRARY_PATH=$LIBPATH/Linux-x86-64
ENV JAVA_OPTS -Dfile.encoding=UTF8 -Djava.awt.headless=true -Dfile.encoding=UTF8 -XX:MaxPermSize=256m -Xms1024m -Xmx3072m -Dkakadu.home=$KAKADU_HOME -Djava.library.path=$LIBPATH/Linux-x86-64 $KAKADU_LIBRARY_PATH

#TLS
RUN keytool -genkey -alias tomcat  -dname ""CN=localhost, OU=mzk, S=cz, C=cz"" -keyalg RSA -storepass somekey -keypass somekey
ADD rewrite.config $CATALINA_HOME/conf/Catalina/localhost/
ADD server.xml $CATALINA_HOME/conf/
ADD tomcat-users.xml /tmp/tomcat-users.xml

# want empty properties configuration
RUN touch /root/.meditor/configuration.properties
ADD ldap.properties /root/.meditor/ldap.properties

EXPOSE 8080
EXPOSE 8843

ADD docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""catalina.sh"", ""run""]

# default conf
ENV hostanme=localhost

",moravianlibrary/MEditor,dockerfile/meditor/Dockerfile
90f05eab22ef2c62c2be3b2815f3ea9e34944baf,348,"# PostgreSQL 9.3

FROM fgrehm/ventriloquist-base

RUN apt-get update && \
    apt-get install -y postgresql-9.3 postgresql-contrib-9.3 && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/* && \
    apt-get autoremove && \
    apt-get clean

ADD config /
RUN /bin/prepare-postgres vagrant vagrant

EXPOSE  5432
CMD     [""/bin/start-postgres""]
",fgrehm/ventriloquist,services/postgresql/9.3/Dockerfile
5f61062ee346cdf50746d8f8391408adb8c23bb8,685,"FROM ubuntu:vivid
MAINTAINER Joel Martin <github@martintribe.org>

##########################################################
# General requirements for testing or common across many
# implementations
##########################################################

RUN apt-get -y update

# Required for running tests
RUN apt-get -y install make python

# Some typical implementation and test requirements
RUN apt-get -y install curl libreadline-dev libedit-dev

RUN mkdir -p /mal
WORKDIR /mal

##########################################################
# Specific implementation requirements
##########################################################

# Nothing additional needed for make
",kanaka/mal,make/Dockerfile
3e22b74efba626cb66ec7d1c1a0cd1471d4d7f03,837,"
FROM ubuntu:14.04

MAINTAINER mithro@mithis.com

# Update the Ubuntu image to prevent it occuring below
#RUN \
#  apt-get update && \
#  apt-get upgrade

COPY simple-add-ppa.sh /usr/local/bin/
COPY download-kicad-library.sh /usr/local/bin/

# Add the kicad PPA, update packages, install dependencies, then kicad
RUN \
  ls -l /usr/local/bin && \
  simple-add-ppa.sh ppa:js-reynaud/ppa-kicad 910F124E trusty && \
  apt-get update && \
  apt-get install -y curl git sed && \
  apt-get install -y kicad.*

# Add the kicad user
RUN adduser --disabled-password --gecos """" kicad
USER kicad
# Download the .pretty component libraries
RUN download-kicad-library.sh
ENV KISYSMOD /home/kicad/kicad_sources/library-repos

# Configuration and start up
VOLUME [""/home/kicad/projects"", ""/home/kicad/.kicad""]
WORKDIR /home/kicad/
ENTRYPOINT [""kicad""]
",mithro/docker-kicad,kicad-ppa/Dockerfile
33ee00991e868f4e362fd5fc7dace102501a5d22,409,"FROM golang:latest

RUN go get -u github.com/v2ray/v2ray-core \
  && rm -f $GOPATH/bin/build \
  && go install github.com/v2ray/v2ray-core/tools/build \
  && build \
  && mv bin/v2ray-custom-linux-64/v2ray bin \
  && rm -rf pkg src

EXPOSE 27183
COPY gen-server-cfg.sh /go/gen-server-cfg.sh
COPY docker-entrypoint.sh /entrypoint.sh

ENTRYPOINT [""/entrypoint.sh""]
CMD [""v2ray"", ""--config=/go/server-cfg.json""]
",v2ray/v2ray-core,tools/docker/Dockerfile
05d8cf1a452343ce0dc74662faf2e48b04578561,224,"FROM alpine
MAINTAINER izuolan <i@zuolan.me>

RUN apk update && apk upgrade
RUN apk add ca-certificates curl python3
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3

# Clean APK cache
RUN rm -rf /var/cache/apk/*
",izuolan/dockerfiles,base/python/python3/pip/Dockerfile
d658abcafa033194d6876d283de54c12bb9b1266,519,"FROM debian:jessie

COPY  . /marathon-lb

RUN apt-get update && apt-get install -y ruby apache2 vim curl ruby-dev build-essential \
    && echo ""deb http://debian.datastax.com/community stable main"" | tee -a /etc/apt/sources.list.d/cassandra.sources.list \
    && curl -L http://debian.datastax.com/debian/repo_key | apt-key add - \
    && apt-get update && apt-get install -y cassandra \
    && gem install --no-ri --no-rdoc cassandra-driver \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

WORKDIR /marathon-lb
",mesosphere/marathon-lb,tests/Dockerfile
63d7c456e091a22fcee3100729cc8018aeec65f4,344,"FROM microsoft/aspnet:1.0.0-rc1-update1

RUN printf ""deb http://ftp.us.debian.org/debian jessie main\n"" >> /etc/apt/sources.list
RUN apt-get -qq update && apt-get install -qqy sqlite3 libsqlite3-dev && rm -rf /var/lib/apt/lists/*

COPY . /app
WORKDIR /app
RUN [""dnu"", ""restore""]

EXPOSE 5000/tcp
ENTRYPOINT [""dnx"", ""-p"", ""project.json"", ""web""]
",keunlee/sample-fullstack-app,backend-dotnet/BackendDotNet/src/BackendDotNet.Web/Dockerfile
60e0cf1c1bf8f22dae65bbee274528eace5345f9,524,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/rpm/generate.sh""!
#

FROM oraclelinux:7

RUN yum groupinstall -y ""Development Tools""
RUN yum install -y --enablerepo=ol7_optional_latest btrfs-progs-devel device-mapper-devel glibc-static libselinux-devel selinux-policy selinux-policy-devel sqlite-devel tar

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS selinux
",coolhacks/docker-hacks,examples/docker-pull-dry-run/docker/contrib/builder/rpm/oraclelinux-7/Dockerfile
92d80225f6f94d9eb1fe9d491f10d1436a49cc37,191,"FROM jeanblanchard/java:8

EXPOSE 80

#ENV JAVA_TOOL_OPTIONS -Xmx=256m

ENTRYPOINT [""java"", ""-jar"", ""todo-server.jar""]
CMD [""server"", ""config.yml""]

ADD config/*.yml target/todo-server.jar /
",Lugribossk/dropwizard-experiment,todo/todo-server/Dockerfile
1cb5554af231247142151c0bae6ab4fad338e7e1,656,"FROM ubuntu:14.04

MAINTAINER Alex Fraser <alex@vpac-innovations.com.au>

# Install ca-certificates so we can install the proxy's certificate. curl and
# Java are  only needed for running the test, not for installing the
# certificate.
WORKDIR /root
RUN export DEBIAN_FRONTEND=noninteractive TERM=linux \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        default-jdk \
    && rm -rf /var/lib/apt/lists/*

# Install the proxy's CA certificate.
COPY detect-proxy.sh test-proxy.sh HttpTest.java /root/
RUN javac HttpTest.java \
    && ./detect-proxy.sh start

CMD /root/test-proxy.sh
",silarsis/docker-proxy,test/Dockerfile
6ec7fe28241b371936ea0b5d4e4f5017aed387cf,2077,"
FROM debian:jessie
MAINTAINER	Sven Dowideit <SvenDowideit@docker.com> (@SvenDowideit)

# build a tiny, trivially booting linux - see 
# http://web.archive.org/web/20120531230827/http://blog.nasirabed.com/2012/01/minimal-linux-kernel.html

ENV	KERNEL_VERSION	3.14.2

RUN	apt-get update
RUN	apt-get install -qy					\
				fakeroot kernel-package xz-utils		\
				bc xorriso syslinux				\
				git vim-tiny lib32ncurses5-dev

# https://github.com/dotcloud/docker/issues/3672
#ADD	https://www.kernel.org/pub/linux/kernel/v3.x/linux-$KERNEL_VERSION.tar.xz /
#RUN	tar Jxf /linux-$KERNEL_VERSION.tar.xz
#
ADD	linux-3.14.2.tar.xz /
ADD	kernel_config.patch /

# https://github.com/dotcloud/docker/issues/2637
#WORKDIR	/linux-$KERNEL_VERSION

WORKDIR	/linux-3.14.2


#RUN	make allnoconfig
#RUN	patch -p1 < /kernel_config.patch
RUN	make defconfig

RUN	make


# busybox  http://busybox.net/downloads/busybox-1.22.1.tar.bz2
ADD	busybox-1.22.1.tar.bz2 /
WORKDIR	/busybox-1.22.1
RUN	make defconfig ; echo ""STATIC=y >> .config"" >> .config; make ; make install

# make a filesystem
RUN	cp -r _install /rootfs ; ls -la /rootfs/bin/busybox
WORKDIR	/rootfs
RUN	mkdir dev proc sys tmp
# TODO: explain why and what linuxrc is
#RUN	rm linuxrc
RUN	mknod dev/console c 5 1

ADD	init /rootfs/sbin/init
ADD	isolinux.cfg /

RUN	cp  /busybox-1.22.1/_install/bin/busybox /rootfs/linuxrc

#RUN	find . | cpio -H newc -o | gzip > ../rootfs.cpio.gz

RUN	mkdir -p /tmp/iso/boot
#RUN	find | cpio -o -H newc | xz -9 --format=lzma > /tmp/iso/boot/initrd.img
RUN	find | cpio -o -H newc | gzip > /tmp/iso/boot/initrd.gz
RUN	cp -v /linux-3.14.2/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz64
RUN	cp /usr/lib/syslinux/isolinux.bin /tmp/iso/boot/
RUN	cp /isolinux.cfg /tmp/iso/boot/
RUN	cp  /busybox-1.22.1/_install/bin/busybox /tmp/iso/linuxrc
RUN	echo ""SVEN"" >> /tmp/iso/version

RUN	xorriso -as mkisofs \
		-l -J -R -V sven -no-emul-boot -boot-load-size 4 -boot-info-table \
		-b boot/isolinux.bin -c boot/boot.cat \
		-isohybrid-mbr /usr/lib/syslinux/isohdpfx.bin \
		-o /sven.iso /tmp/iso

CMD	[""cat"", ""/sven.iso""]
",SvenDowideit/dockerfiles,minimal-linux/Dockerfile
16408a0b88560c4e62615339cf8cfc830bb0d343,767,"# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM google/debian:jessie
MAINTAINER Brendan Burns <bburns@google.com>
RUN apt-get update
RUN apt-get install -y -qq ca-certificates
ADD perfdash /perfdash
ADD www /www

",kubernetes/contrib,perfdash/Dockerfile
aec15cdc71c9e749da75256e63eb7c66f203b40e,745,"FROM verdverm/pypge-base

RUN sudo apt-get update \
	&& \
	sudo apt-get install -y --no-install-recommends \
	f2c \
	&& \
	/scripts/clean-apt.sh

WORKDIR /gocode

ENV GOPATH /gocode

RUN /usr/local/go/bin/go get -u github.com/gorilla/websocket

RUN mkdir -p gocode/src/github.com/verdverm/pypge/
ADD evaluator /gocode/src/github.com/verdverm/pypge/evaluator 

RUN cd /gocode/src/github.com/verdverm/pypge/evaluator/regress/levmar-2.6 && \
	cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLINSOLVERS_RETAIN_MEMORY=0 . && \
	make

RUN ls /gocode/src/github.com/verdverm/pypge/evaluator/regress/levmar-2.6

RUN cd /gocode/src/github.com/verdverm/pypge/evaluator && \
	ls regress && \
	/usr/local/go/bin/go install 

ENTRYPOINT [""/gocode/bin/evaluator""]

",verdverm/pypge,dockers/eval/Dockerfile
11cab8ca595fc3cf9cc6ef4f214c48a7acda565e,163,"#jetty9-compat is Jetty 9.3.2 and support only Open JDK8:
FROM gcr.io/google_appengine/jetty9-compat
RUN apt-get update && apt-get install -y fortunes

ADD . /app
",GoogleCloudPlatform/appengine-java-vm-guestbook-extras,stage3/src/main/webapp/Dockerfile
f44de5479da4fa12095f8d0880e8176fff49d9c3,442,"# Invoke with docker run -p 8000:80 <dockerimageid>
# Then use by browsing http://localhost:8000
FROM ubuntu:15.10
MAINTAINER bruno.cornec@hpe.com
ENV DEBIAN_FRONTEND noninterative
# Install deps for Redfish mockup
RUN apt-get update
RUN apt-get -y install apache2 unzip sed
EXPOSE 80
COPY redfish-setup.sh /tmp/redfish-setup.sh
COPY DSP2043_0.99.0a.zip /tmp/DSP2043_0.99.0a.zip
RUN chmod 755 /tmp/redfish-setup.sh 
CMD /tmp/redfish-setup.sh
",bcornec/python-redfish,dmtf/Dockerfile
7038624497c47e6ae98a7b9ea5eb517ae1463f22,1283,"#################################################################
# Dockerfile
#
# Version:          2
# Software:         emboss
# Software Version: 6.6.0-1
# Description:      software analysis package specially developed for the needs of the molecular biology (e.g. EMBnet) user community
# Website:          http://emboss.sourceforge.net/what/
# Tags:             Proteomics|Genomics|General
# Provides:         emboss 6.6.0-1
# Base Image:       biodckr/biodocker:latest
# Build Cmd:        docker build --rm -t biodckr/emboss 6.6.0-1/.
# Pull Cmd:         docker pull biodckr/emboss
# Run Cmd:          docker run --rm biodckr/emboss
#################################################################

# Set the base image to biodckr/biodocker
FROM biodckr/biodocker:latest

################## BEGIN INSTALLATION ###########################

USER root

# Install EMBOSS package
RUN apt-get update && \
  apt-get install -y \
  emboss=6.6.0-1 && \
  apt-get clean && \
  apt-get purge && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

USER biodocker

WORKDIR /data/

##################### INSTALLATION END ##########################

# File Author / Maintainer
MAINTAINER Felipe da Veiga Leprevost <felipe@leprevost.com.br>
# Modified by Felipe da Veiga Leprevost 01-26-2016
",BioDocker/containers,emboss/6.6.0-1/Dockerfile
4e1feff6c19d4bc0ca1eb69b1396f6118aa2e33e,204,"FROM node:latest
RUN mkdir parse

COPY . /parse
WORKDIR /parse
RUN npm install

ENV APP_ID setYourAppId
ENV MASTER_KEY setYourMasterKey
ENV DATABASE_URI setMongoDBURI

EXPOSE 1337

CMD [ ""npm"", ""start"" ]
",ksachdeva/idea-manager,backend/parse/Dockerfile
10c83ba048d7ba997c0b848defd87a9e6a538664,1662,"# Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# to build: sudo docker build -f ./test/Dockerfile -t beaker/tests .
# to run:   sudo docker run beaker/tests

FROM beakernotebook/beaker-base:latest

MAINTAINER Beaker Feedback <beaker-feedback@twosigma.com>

###################
#      Build      #
###################

RUN wget https://launchpad.net/~ubuntu-security-proposed/+archive/ubuntu/ppa/+build/7767831/+files/firefox_39.0.3+build2-0ubuntu0.14.04.1_amd64.deb && sudo dpkg -i --force-depends firefox_39.0.3+build2-0ubuntu0.14.04.1_amd64.deb && apt-get install -fy
RUN apt-get install -y xvfb
RUN cd /home/beaker
RUN curl -Lo chrome.zip https://download-chromium.appspot.com/dl/Linux_x64 && unzip chrome.zip
RUN curl -Lo chromedriver.zip http://chromedriver.storage.googleapis.com/2.16/chromedriver_linux64.zip && unzip chromedriver.zip

ADD . /home/beaker/src

ENV HOME /home/beaker

RUN chown -R beaker:beaker /home/beaker

RUN su -m beaker -c ""cd /home/beaker/src""

###################
#       Run       #
###################

EXPOSE 8800
WORKDIR /home/beaker/src
CMD su -m beaker -c ""./test/run_in_docker""
",twosigma/beaker-notebook,test/Dockerfile
b986781ea3daefffbf4c89201681ba002d775046,1868,"# -*- mode: conf -*-
# cpppo/mongrel2 Dockerfile.
#
# DESCRIPTION
#     Support for EtherNet/IP (via cpppo) and Modbus/TCP (via pymodbus) PLC simulation, using
# Mongrel2's ZeroMQ WebSockets protocol as the underlying transport.
#
FROM		cpppo/cpppo
MAINTAINER	Perry Kundert ""perry@hardconsulting.com""

RUN		apt-get -y install git libtool libtool-bin autoconf	\
			automake python-dev pypy uuid-dev ragel		\
			sqlite3 libsqlite3-dev build-essential		\
		  && apt-get clean
RUN		git clone --branch master				\
			https://github.com/zeromq/zeromq4-x.git		\
			src/zeromq4-x					\
		  && cd src/zeromq4-x					\
		  && ./autogen.sh					\
		  && ./configure					\
		  && make V=1						\
		  && make install					\
		  && ldconfig						\
		  && cd / && rm -rf src/zeromq4-x
RUN		git clone --branch 0.18					\
			https://github.com/cython/cython.git		\
			src/cython					\
		  && cd src/cython					\
		  && python setup.py install				\
		  && cd / && rm -rf src/cython
RUN		git clone --branch v14.1.1				\
			https://github.com/zeromq/pyzmq.git		\
			src/pyzmq					\
		  && cd src/pyzmq					\
		  && python setup.py configure --zmq=/usr/local		\
		  && python setup.py install				\
		  && cd / && rm -rf src/pyzmq
RUN		git clone --branch feature-max-sockets			\
			https://github.com/pjkundert/mongrel2.git	\
			src/mongrel2					\
		  && cd src/mongrel2					\
		  && sed -i -e 's/url = git:/url = http:/' .gitmodules	\
		  && make all install					\
		  && cd examples/python					\
		  && python setup.py install				\
		  && pypy setup.py install				\
		  && cd / && rm -rf src/mongrel2

# Ensure that alternative Pythons (eg. pypy) have access to all packages (not specifically installed for pypy)
ENV		PYTHONPATH /usr/local/lib/python2.7/dist-packages

# Typically supports applications providing remote access via HTTP, Modbus/TCP and EtherNet/IP, eg:
#EXPOSE		80 502 44818
",pjkundert/cpppo,docker/cpppo/mongrel2/Dockerfile
89a6b14e831e4a306e67d589a4255adeef1b8cf6,1008,"FROM buildpack-deps:jessie-curl

# gpg keys listed at https://github.com/nodejs/io.js
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key"" \
  ; done

ENV NPM_CONFIG_LOGLEVEL info
ENV IOJS_VERSION 2.5.0

RUN curl -SLO ""https://iojs.org/dist/v$IOJS_VERSION/iojs-v$IOJS_VERSION-linux-x64.tar.gz"" \
  && curl -SLO ""https://iojs.org/dist/v$IOJS_VERSION/SHASUMS256.txt.asc"" \
  && gpg --verify SHASUMS256.txt.asc \
  && grep "" iojs-v$IOJS_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
  && tar -xzf ""iojs-v$IOJS_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
  && rm ""iojs-v$IOJS_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc

CMD [ ""iojs"" ]
",nodejs/docker-iojs,2.5/slim/Dockerfile
2b1bbc07c58aee2d109ea7d664d14a95570aa1ef,50,"FROM busybox

VOLUME /var/lib/mysql

CMD [""true""]
",AuburnACM/auacm,auacm/docker-data/Dockerfile
d336344087b97ce639ff30565068c0d241381cbc,1154,"FROM debian:jessie
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apt-get update && apt-get install -y \
	ca-certificates \
	curl \
	debhelper \
	devscripts \
	equivs \
	file \
	gcc \
	git \
	gnupg \
	libwww-perl \
	make \
	patch \
	patchutils \
	quilt \
	silversearcher-ag \
	tree \
	vim \
	xutils-dev \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

RUN printf '\nalias dquilt=""quilt --quiltrc=${HOME}/.quiltrc-dpkg""\ncomplete -F _quilt_completion $_quilt_complete_opt dquilt\n' >> /root/.bashrc

RUN printf '\nd=. ; while [ ! -d $d/debian -a `readlink -e $d` != / ]; do d=$d/..; done\nif [ -d $d/debian ] && [ -z $QUILT_PATCHES ]; then\n\t# if in Debian packaging tree with unset $QUILT_PATCHES\n\tQUILT_PATCHES=""debian/patches""\n\tQUILT_PATCH_OPTS=""--reject-format=unified""\n\tQUILT_DIFF_ARGS=""-p ab --no-timestamps --no-index --color=auto""\n\tQUILT_REFRESH_ARGS=""-p ab --no-timestamps --no-index""\n\tQUILT_COLORS=""diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:diff_hunk=1;33:diff_ctx=35:diff_cctx=33""\n\tif ! [ -d $d/debian/patches ]; then mkdir $d/debian/patches; fi\nfi\n' >> /root/.quiltrc-dpkg

WORKDIR /root

ENTRYPOINT [ ""bash"" ]
",coolhacks/docker-hacks,dockerfiles/deb-dev/Dockerfile
8570f1346d77292d9112f3cc6abba9c38894942e,555,"# mxabierto Go
# Base Go installation
# Build:
#   docker build -t mxabierto/go .
# Usage:
#   docker run --rm -it mxabierto/go

# Base image
FROM mxabierto/base

MAINTAINER bcessa <ben@pixative.com>

# Add binary package
ADD https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz /root/go.tgz

# Extra packages
RUN \
  tar -C /usr/local -xzf go.tgz && \
  rm go.tgz

# Add settings file
ADD settings /root/.dotfiles/go

# Define mountable workspace directory
VOLUME [""/root/go_workspace""]

# Default command
ENTRYPOINT [""/usr/local/go/bin/go""]
",mxabierto/dockerfile,go/Dockerfile
0b8b022607bb486f6e5678a51cf72d2ca9d8c93a,476,"FROM nodesource/fedora22-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_4.x/fc/22/x86_64/nodejs-4.2.6-1nodesource.fc22.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/22/node/4.2.6/Dockerfile
dfa6c2955f48730a56020dedb31d9ed7bc558406,306,"FROM pollendina/client-debian:jessie

# Copy Certificate Authority certificate to /certs
COPY cacert.pem /certs/cacert.pem

# Certificate parameters
ENV COMMON_NAME=dario COUNTRY=US STATE=California CITY=SF ORGANIZATION=Marriot COMMON_NAME=Room_Controller

RUN apt-get update && apt-get install -y \
	curl
",allingeek/pollendina,example/nginx/client/Dockerfile
e4c804ab571f4e7cbb904a2df85c2cfe0a37417f,420,"# DOCKER-VERSION 1.0.0
#
# Ceph Demo AIO
#
# VERSION 0.0.1

FROM ceph/base:tag-build-master-hammer-ubuntu-16.04
MAINTAINER SÃ©bastien Han ""seb@redhat.com""

# Add bootstrap script
ADD entrypoint.sh /entrypoint.sh

# Add volumes for Ceph config and data
VOLUME [""/etc/ceph"",""/var/lib/ceph""]

# Expose the Ceph ports
EXPOSE 6789 6800 6801 6802 6803 6804 6805 80 5000

# Execute the entrypoint
ENTRYPOINT [""/entrypoint.sh""]
",ceph/ceph-docker,ceph-releases/hammer/ubuntu/16.04/demo/Dockerfile
ca996c37a78cf5151c3e43fa3c72087114ee07af,1763,"# LAMP Docker

FROM dockie/dockie
MAINTAINER Rob Loach <robloach@gmail.com>


# Apache

ADD configs/apache2/apache2-service.sh /apache2-service.sh
RUN apt-get install -y apache2 && \
  chmod +x /*.sh && \
  a2enmod rewrite
ADD configs/apache2/apache_default /etc/apache2/sites-available/000-default.conf
ADD configs/apache2/supervisor.conf /etc/supervisor/conf.d/apache2.conf


# PHP

RUN apt-get install -y libapache2-mod-php5 php5 php5-json php5-cli php5-curl curl php5-mcrypt php5-xdebug mcrypt libmcrypt-dev
ADD configs/php/php.ini /etc/php5/apache2/conf.d/30-docker.ini


# MySQL

ADD configs/mysql/mysql-setup.sh /mysql-setup.sh
ADD configs/mysql/my.cnf /etc/mysql/conf.d/my.cnf
ADD configs/mysql/supervisor.conf /etc/supervisor/conf.d/mysql.conf
RUN apt-get install -y mysql-server mysql-client php5-mysql && \
  chmod +x /*.sh && \
  /mysql-setup.sh


# PHPMyAdmin

RUN (echo 'phpmyadmin phpmyadmin/dbconfig-install boolean true' | debconf-set-selections)
RUN (echo 'phpmyadmin phpmyadmin/app-password password root' | debconf-set-selections)
RUN (echo 'phpmyadmin phpmyadmin/app-password-confirm password root' | debconf-set-selections)
RUN (echo 'phpmyadmin phpmyadmin/mysql/admin-pass password root' | debconf-set-selections)
RUN (echo 'phpmyadmin phpmyadmin/mysql/app-pass password root' | debconf-set-selections)
RUN (echo 'phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2' | debconf-set-selections)
RUN apt-get install phpmyadmin -y
ADD configs/phpmyadmin/config.inc.php /etc/phpmyadmin/conf.d/config.inc.php
RUN chmod 755 /etc/phpmyadmin/conf.d/config.inc.php
ADD configs/phpmyadmin/phpmyadmin-setup.sh /phpmyadmin-setup.sh
RUN chmod +x /phpmyadmin-setup.sh
RUN /phpmyadmin-setup.sh


# Start

VOLUME /var/www/html
EXPOSE 22 80 3306
",RobLoach/Dockie,lamp/Dockerfile
20643fa993ccb0f27378a495bcf7bcf5a8b4ca40,1388,"[#ftl]
#
#  Copyright 2014-2015 by Cloudsoft Corporation Limited
#
#  Licensed under the Apache License, Version 2.0 (the ""License"");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

FROM ubuntu:14.04
MAINTAINER Cloudsoft ""brooklyn@cloudsoftcorp.com""

# CLOCKER_VERSION_BELOW
LABEL version=""1.2.0-SNAPSHOT""

# make sure the package repository is up to date
RUN ( echo ""deb http://archive.ubuntu.com/ubuntu trusty main universe"" ; echo ""deb http://archive.ubuntu.com/ubuntu trusty-updates main universe"" ) > /etc/apt/sources.list
RUN apt-get update ; \
    apt-get clean

# install openjdk 1.7.1
RUN apt-get -y --force-yes install tzdata=2015a-0ubuntu0.14.04 ; \
    apt-get -y --force-yes install python2.7-minimal=2.7.3-0ubuntu3 ; \
    apt-get -y --force-yes install python-minimal=2.7.3-0ubuntu2 ; \
    apt-get -y install openjdk-7-jdk ; \
    apt-get clean ; \
    update-alternatives --display java

ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64
",brooklyncentral/clocker,docker/src/main/resources/clocker/docker/entity/container/ubuntu/UsesJavaDockerfile
f00468ff38d3650ffff82929a2d07a7cac1c168a,294,"FROM opensuse:13.2
MAINTAINER Jan Sedlak <jsedlak@redhat.com>, Josef Skladanka <jskladan@redhat.com>

RUN zypper --non-interactive in ca-certificates-mozilla git wget

ADD data.template /data
ADD scripts /scripts
RUN chmod -R 777 /data /scripts
VOLUME [""/data""]

CMD /usr/bin/tail -f /dev/null
",os-autoinst/openQA,docker/openqa_data/Dockerfile
6d74ff28f1b95af6a467d2284d31783c3fd1f6bc,2294,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This Dockerfile will build an image that is configured
# to use Fluentd to collect all Docker container log files
# and then cause them to be ingested using the Google Cloud
# Logging API. This configuration assumes that the host performning
# the collection is a VM that has been created with a logging.write
# scope and that the Logging API has been enabled for the project
# in the Google Developer Console.

FROM ubuntu:16.04
MAINTAINER Alex Robinson ""arob@google.com""

# Disable prompts from apt.
ENV DEBIAN_FRONTEND noninteractive
# Keeps unneeded configs from being installed along with fluentd.
ENV DO_NOT_INSTALL_CATCH_ALL_CONFIG true

RUN apt-get -q update && \
    apt-get install -y curl && \
    apt-get install -y gcc && \
    apt-get install -y make && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    curl -s https://dl.google.com/cloudagents/install-logging-agent.sh | bash

# Install the record reformer and systemd plugins.
RUN /usr/sbin/google-fluentd-gem install fluent-plugin-record-reformer -v 0.8.1
RUN /usr/sbin/google-fluentd-gem install fluent-plugin-systemd -v 0.0.3

# Remove the misleading log file that gets generated when the agent is installed
RUN rm -rf /var/log/google-fluentd

# Copy the Fluentd configuration files for logging Docker container logs.
# Either configuration file can be used by specifying `-c <file>` as a command
# line argument.
COPY google-fluentd.conf /etc/google-fluentd/google-fluentd.conf
COPY google-fluentd-journal.conf /etc/google-fluentd/google-fluentd-journal.conf

# Start Fluentd to pick up our config that watches Docker container logs.
CMD /usr/sbin/google-fluentd ""$FLUENTD_ARGS""
",kubernetes/kubernetes,cluster/addons/fluentd-gcp/fluentd-gcp-image/Dockerfile
c498f662fce5e1e5f89832aa98ec66c1126b3797,194,"FROM anapsix/alpine-java:8
VOLUME /tmp
ADD payment-service-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]",kbastani/spring-cloud-event-sourcing-example,payment-service/src/main/docker/Dockerfile
1d8addab55a41a12b1375944246d8f028f10d6de,344,"FROM gcr.io/google_containers/hyperkube:v1.0.6

RUN DEBIAN_FRONTEND=noninteractive apt-get update -y \
    && DEBIAN_FRONTEND=noninteractive apt-get -yy -q \
    install \
    git \
    && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \
    && DEBIAN_FRONTEND=noninteractive apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*",akranga/jenkins-docker,hyperkube/Dockerfile
78702dcc5c2fc452ee37a865b02d727586f6c487,754,"FROM rhel7

RUN yum install -y --setopt=tsflags=nodocs yum-utils && \
    yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    yum clean all

RUN yum install -y --setopt=tsflags=nodocs devtoolset-3-valgrind && yum clean all



ENV	BASH_ENV=/etc/profile.d/cont-env.sh


ADD ./enabledevtoolset-3.sh /usr/share/cont-layer/common/env/enabledevtoolset-3.sh
ADD ./usr /usr
ADD ./etc /etc
ADD ./root /root

ENV HOME /home/default
RUN     groupadd -r default -f -g 1001 && \
        useradd -u 1001 -r -g default -d ${HOME} -s /sbin/nologin \
                        -c ""Default Application User"" default

USER 1001

ENTRYPOINT [""/usr/bin/container-entrypoint""]

CMD [""container-usage""]

",sclorg/rhscl-dockerfiles,rhel7.devtoolset-3-valgrind/Dockerfile
d3e436698e39b041869e7bf7ec2b7ebbbaba9288,88,"FROM debian:sid

RUN apt-get update && apt-get install -yq mesa-utils

CMD [""glxgears""]
",tianon/dockerfiles,glxgears/Dockerfile
749db80e6943a1304fd76695f271988212bc2d2f,324,"# Dockerfile for simple node CRUD front end for Postgres DB

FROM ubuntu:14.04

RUN apt-get update \
    && apt-get -y install nodejs nodejs-legacy npm postgresql-client
    
COPY package.json /src/package.json
RUN cd /src; npm install 

COPY server.js /src
COPY run_server.sh /src

EXPOSE 8080

CMD [ ""/src/run_server.sh"" ]",jmspring/mesos-stateful-example,app/Dockerfile
9355efcc6277a369f6c64fa52e60b02a1e0c50aa,70,"FROM git:latest

MAINTAINER VonC <vonc@laposte.net>

ENV HGIT_WEB 80

",VonC/b2d,hgit/Dockerfile
c99b69655766ab351862141e466edbe197f3e53c,2097,"FROM debian:jessie

RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
		ca-certificates curl wget \
		\
		git openssh-client \
	&& rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
	&& wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
	&& wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
	&& gosu nobody true

# grab tini for signal processing and zombie killing
ENV TINI_VERSION v0.9.0
RUN set -x \
	&& wget -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini"" \
	&& wget -O /usr/local/bin/tini.asc ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini.asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 \
	&& gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/tini.asc \
	&& chmod +x /usr/local/bin/tini \
	&& tini -h

RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 150FDE3F7787E7D11EF4E12A9B7D32F2D50582E6
RUN echo 'deb http://pkg.jenkins-ci.org/debian binary/' > /etc/apt/sources.list.d/jenkins.list

ENV JENKINS_VERSION 2.11

RUN apt-get update && apt-get install -y --no-install-recommends \
		jenkins=${JENKINS_VERSION} \
	&& rm -rf /var/lib/apt/lists/*

ENV JENKINS_HOME /var/lib/jenkins
RUN mkdir -p ""$JENKINS_HOME"" && chown -R jenkins:jenkins ""$JENKINS_HOME""
VOLUME $JENKINS_HOME

EXPOSE 8080
COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT [""docker-entrypoint.sh""]
CMD [""java"", ""-jar"", ""/usr/share/jenkins/jenkins.war""]
",tianon/dockerfiles,jenkins/Dockerfile
b031f4e266226287b0f3403e5fc7d4ef3cdd0f5f,474,"#run this from the lens-endpoint folder

FROM java:8-jre 

ADD target/lens-endpoint-2.0.0-dist.tar.gz /opt/lens/
WORKDIR /opt/lens
EXPOSE 7080
CMD java -cp config/lens-api.properties:lib/lens-endpoint-2.0.0.jar com.boozallen.cognition.endpoint.applications.DataService server config/config.yml


#docker run -it -v [local path to config.yml]:/opt/lens/config/config.yml -v [local path to lens-api.properties]:/opt/lens/config/lens-api.properties -p 8080:7080 cognition/lens
",boozallen/cognition,cognition/spark/lens-endpoint/Dockerfile
5dcc8ed19e8ddb539a280a7f3191dd791ee41737,547,"FROM quintenk/supervisor

MAINTAINER Quinten Krijger ""https://github.com/Krijger""

RUN apt-get -y install python-software-properties
RUN add-apt-repository ppa:webupd8team/java
RUN apt-get update && apt-get -y upgrade

# automatically accept oracle license
RUN echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
# and install java 7 oracle jdk
RUN apt-get -y install oracle-java7-installer && apt-get clean
RUN update-alternatives --display java 
ENV JAVA_HOME /usr/lib/jvm/java-7-oracle
",Krijger/docker-cookbooks,jdk7-oracle/Dockerfile
73c321ac1775de755b50f561f722458cb51573ed,250,"FROM cptobvious/buildslave-cpp

RUN apt-get install --fix-missing -y cowbuilder ubuntu-dev-tools dh-autoreconf pkg-kde-tools

# Overwrite buildslave config, use .sample file or previously created buildslave config
ADD buildbot.tac slave/buildbot.tac
",ethereum/ethereum-dockers,cpp-ethereum-buildslave-deb/Dockerfile
9366cf7384350e84f32c338a5577d66836aefc7d,1190,"FROM rangle/clusternator-linux-base:14.04

# Get Node.
# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

# Default logging is super verbose.
ENV NPM_CONFIG_LOGLEVEL warn
ENV NODE_VERSION 6.2.0

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xJf ""node-v$NODE_VERSION-linux-x64.tar.xz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.xz"" SHASUMS256.txt.asc SHASUMS256.txt
",rangle/the-clusternator,dockerfiles/clusternator-node/6/Dockerfile
f240aa11d2a6a8c1c25700d7ca569c492b57cea7,5144,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jre""                                    && \
    export JAVA_UPDATE=""66""                                      && \
    export JAVA_BUILD=""17""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u66/jre/slim/Dockerfile
f72e0deca7f15fc195edd1d0658067f64168dc1b,476,"FROM nodesource/fedora22-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_5.x/fc/22/x86_64/nodejs-5.7.0-1nodesource.fc22.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/22/node/5.7.0/Dockerfile
e542a2def91f3cf9ba9b6059f0e67ab15bed2952,1248,"FROM centos:centos6
MAINTAINER NFLabs <contacts@nflabs.com>
# requites built Zeppelin distribution (-Pbuild-distr) in the current directory
  
# Update the image with the latest packages
RUN yum update -y; yum clean all

# Get wget
RUN yum install wget -y; yum clean all

# Remove old jdk
RUN yum remove java; yum remove jdk

# Install oracle jdk7
RUN wget --continue --no-check-certificate --header ""Cookie: oraclelicense=accept-securebackup-cookie"" -O jdk-linux-x64.rpm ""http://download.oracle.com/otn-pub/java/jdk/7u51-b13/jdk-7u51-linux-x64.rpm""
RUN rpm -Uvh jdk-linux-x64.rpm
RUN rm jdk-linux-x64.rpm

ENV JAVA_HOME /usr/java/default
ENV PATH $PATH:$JAVA_HOME/bin

# Set zeppelin env
ENV ZEPPELIN_NOTEBOOK_DIR /zeppelin/notebook

RUN mkdir /usr/lib/zeppelin
ADD zeppelin-0.6.0-incubating-SNAPSHOT.tar.gz /tmp/
RUN cp -rf /tmp/zeppelin-0.6.0-incubating-SNAPSHOT/* /usr/lib/zeppelin

# Get mysql client to access remote Hive Metastore
RUN wget -O /usr/lib/zeppelin/interpreter/spark/mysql-connector-java.jar http://search.maven.org/remotecontent?filepath=mysql/mysql-connector-java/5.1.26/mysql-connector-java-5.1.26.jar 


# Change timezone to Seoul
RUN ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

# Open docker port 8080
EXPOSE 8080
",NFLabs/z-manager,multitenancy/Dockerfile
4970d1a97a902cf2e8dbc7129f398abf36174a11,227,"FROM wnameless/oracle-xe-11g

ENV ORACLE_HOME /u01/app/oracle/product/11.2.0/xe
ENV PATH $ORACLE_HOME/bin:$PATH
ENV ORACLE_SID XE

COPY execute_db_scripts.sh /
COPY db_scripts /db_scripts

ENTRYPOINT [""/execute_db_scripts.sh""]
",BMC-RLM/ef_java_calculation_engine,docker/ef_oracle_database-migrate/Dockerfile
6e0b747b0e1fc7f518497755706c92aabccb8738,583,"FROM nginx:1.9.4

# upgrade
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends python-pip curl && \
    rm -rf /var/lib/apt/lists/* && \
    pip install envtpl

# nginx
ADD nginx.conf.tpl /etc/nginx/nginx.conf.tpl

# run script
ADD ./run.sh ./run.sh

# kopf
ENV KOPF_VERSION 2.0.0
RUN curl -s -L ""https://github.com/lmenezes/elasticsearch-kopf/archive/v${KOPF_VERSION}.tar.gz"" | \
    tar xz -C /tmp && mv ""/tmp/elasticsearch-kopf-${KOPF_VERSION}"" /kopf

# logs
VOLUME [""/var/log/nginx""]

# ports
EXPOSE 80 443

ENTRYPOINT [""/run.sh""]
",hangxin1940/elasticsearch-cn-out-of-box,plugins/kopf/docker/Dockerfile
2adb948b91f043e36102b8b166ce125d95fa8a65,549,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_2.x/pool/main/i/iojs/iojs_2.2.1-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/iojs/2.2.1/Dockerfile
02c8cc6f1c5b8178cabfd3c65308aa89605de619,1446,"## Feeder server
## To run this correctly, use commands such as this:
## docker build -t feeder .
## Followed by:
## docker run --name feeder_rss -p 5000:5000 -v /path/to/dirwith/configfile:/feederserver -i -t feeder
## It will mount the directory specifed inside the container. Make sure to define
## the database directory as ""./"" in the config file (or not at all). That way, the
## database is created in that same directory.

FROM ubuntu:14.04
MAINTAINER Jonas Kalderstam, jonas@kalderstam.se

# First install the basic requirements, like Python3
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    git \
    python3.4 \
    python3.4-dev \
    libyaml-dev \
    && apt-get autoremove \
    && apt-get clean

# Distro politics prevents pip from being installed correctly
ADD https://github.com/pypa/pip/raw/645180e2714b4ffcf40363a608239e089c9dafab/contrib/get-pip.py /root/get-pip.py

RUN python3.4 /root/get-pip.py

# Updating pip is always a good idea
RUN pip3.4 install --upgrade ""pip""

# Clone the repo
RUN git clone https://github.com/spacecowboy/Feeder.git /feeder

# Install requirements
RUN pip3.4 install -r /feeder/server/flaskapp/requirements.txt

COPY run.sh /run.sh
COPY sync.sh /sync.sh

# Make sure data directory exists, though it should be mounted as a volume
RUN mkdir -p /data

# Run server
CMD /run.sh

# To sync, do this command when the server is running:
# docker exec [-it] feeder /sync.sh
",spacecowboy/Feeder,server/flaskapp/docker/Dockerfile
25f567b61bc4aab376efed4986db9b29786fbc79,599,"# Dockerfile for building the ffmpeg Debian package. Build the image like this:
#
# docker build -t bbb-ffmpeg-build .
#
# Run the container like 
# this:
#
# docker run --rm -v `pwd`:/tmp/build/ bbb-ffmpeg-build 
#
# The volume is the path where you want the package written into by the 
# container after the build process finishes.

FROM ubuntu:14.04
MAINTAINER Juan Luis Baptiste juan.baptiste@gmail.com

RUN apt-get -y update
RUN apt-get install -y build-essential checkinstall git libvorbis-dev libvpx-dev vim wget yasm

ADD install-ffmpeg.sh /usr/bin/

CMD /usr/bin/install-ffmpeg.sh -f 2.3.3",juanluisbaptiste/docker-bigbluebutton,scripts/ffmpeg/Dockerfile
1c6128e1f73fdb1f949751888bb596f3a5af35ce,379,"FROM iron/base

RUN echo '@edge http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories
RUN echo '@community http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories
RUN apk update && apk upgrade

RUN apk add openjdk8@community
# puts javac in the PATH
ENV PATH=/usr/lib/jvm/java-1.8-openjdk/bin:$PATH

# Clean APK cache
RUN rm -rf /var/cache/apk/*
",coolhacks/docker-hacks,micro/java/java-dev-1.8/Dockerfile
111939460a186d5fdc3a653f552029a2b311efe1,755,"FROM centos:7

USER root

RUN mkdir /app
ENV JAVA_APP_DIR /app

RUN yum install -y \
       java-1.7.0-openjdk \
       java-1.7.0-openjdk-devel

ENV JAVA_HOME /etc/alternatives/jre

# Agent bond including Jolokia and jmx_exporter
ADD agent-bond-opts /opt/run-java-options
RUN mkdir -p /opt/agent-bond \
 && curl http://central.maven.org/maven2/io/fabric8/agent-bond-agent/0.1.3/agent-bond-agent-0.1.3.jar \
          -o /opt/agent-bond/agent-bond.jar \
 && chmod 444 /opt/agent-bond/agent-bond.jar \
 && chmod 755 /opt/run-java-options
ADD jmx_exporter_config.yml /opt/agent-bond/
EXPOSE 8778 9779

# Add run script as /app/run-java.sh and make it executable
COPY run-java.sh /app/run-java.sh
RUN chmod 755 /app/run-java.sh



CMD [ ""/app/run-java.sh"" ]
",fabric8io/base-images,java/images/centos/openjdk7/jdk/Dockerfile
d7997dd86272df3874da34ea55ae0cfa459e7d79,3290,"FROM damsl/k3-deployment:latest

# Locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Dependencies
RUN apt-get update && apt-get install -y git vim wget python postgresql-client-9.3 python-psycopg2 python-matplotlib xvfb libaio-dev unzip

# Java
RUN sed 's/main$/main universe/' -i /etc/apt/sources.list
RUN apt-get update && apt-get install -y software-properties-common python-software-properties
RUN add-apt-repository ppa:webupd8team/java -y

RUN echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections

RUN apt-get update && apt-get install -y oracle-java7-installer
ENV JAVA_HOME /usr/lib/jvm/java-7-oracle/

# Install Scala
WORKDIR /software
RUN wget http://www.scala-lang.org/files/archive/scala-2.10.4.tgz
RUN tar -xvzf scala-2.10.4.tgz
ENV SCALA_HOME /software/scala-2.10.4/bin/

# Install Spark
RUN wget http://d3kbcqa49mib13.cloudfront.net/spark-1.2.0.tgz && tar -xvzf spark-1.2.0.tgz
WORKDIR /software/spark-1.2.0
RUN sbt/sbt -Dhadoop.version=2.2.0 -Pyarn -Phive assembly/assembly

WORKDIR /software

ADD sbt /usr/bin/
RUN wget https://dl.bintray.com/sbt/native-packages/sbt/0.13.7/sbt-0.13.7.tgz && \
    tar -xvzf sbt-0.13.7.tgz && \
    mv sbt/bin/sbt-launch.jar /usr/bin/
RUN chmod +x /usr/bin/sbt
RUN sbt

ENV SPARK_HOME /software/spark-1.1.0-bin-hadoop2.4/

# Impala
WORKDIR /
RUN wget http://archive.cloudera.com/cdh5/one-click-install/trusty/amd64/cdh5-repository_1.0_all.deb && \
    dpkg -i cdh5-repository_1.0_all.deb && \ 
    apt-get update && \ 
    apt-get install -y impala-shell

# Vertica
ADD vertica-client-7.1.1-0.linux.x86_64.tar.gz /software/
RUN ln -s /software/opt/vertica/bin/vsql /usr/bin/vsql

# Oracle
ADD instantclient-basic-linux.x64-12.1.0.2.0.zip  /oracle/
ADD instantclient-sqlplus-linux.x64-12.1.0.2.0.zip /oracle/
WORKDIR /oracle
RUN unzip instantclient-basic-linux.x64-12.1.0.2.0.zip && \
    unzip instantclient-sqlplus-linux.x64-12.1.0.2.0.zip && \
    ln -s /oracle/instantclient_12_1/sqlplus /usr/bin/sqlplus
ENV LD_LIBRARY_PATH /oracle/instantclient_12_1/

# Mesos
WORKDIR /software
RUN apt-get install -y build-essential python-dev python-boto libcurl4-nss-dev libsasl2-dev maven libapr1-dev libsvn-dev autoconf libtool && \
    wget http://archive.apache.org/dist/mesos/0.21.0/mesos-0.21.0.tar.gz && \
    tar -zxf mesos-0.21.0.tar.gz && \
    apt-get install -y gcc-4.6 && \
    update-alternatives --remove-all gcc && \
    apt-get install -y gcc-4.6 g++-4.6 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 10 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 10 && \
    
    cd mesos-0.21.0 && mkdir build && cd build && ../configure && make && make install && \
    update-alternatives --remove-all gcc && update-alternatives --remove-all g++ && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 10 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 10 && \
    apt-get install -y libprotobuf-dev libgoogle-glog-dev

WORKDIR /
RUN git clone https://github.com/damsl/k3-benchstack
ADD entrypoint.sh /
RUN chmod +x /entrypoint.sh

RUN apt-get install -y cmake python-pip
RUN pip install pyyaml docker-py

ENTRYPOINT [""/entrypoint.sh""]
",DaMSL/K3,tools/scripts/docker/benchstack/Dockerfile
8a2f570682c02dd61003d6181e7451a13595a716,108,"FROM gliderlabs/alpine:3.1

RUN apk-install git nodejs python

WORKDIR /app

ENTRYPOINT [""/app/webpack.sh""]
",asm-products/firesize,scripts/webpack-docker/Dockerfile
9dc0f9af478dfbbacb9a3565dcf872297d48f614,362,"FROM fedora:22
MAINTAINER Pavel Odvody <podvody@redhat.com>

LABEL io.hica.bind_pwd=1

ENV PKGS='autoconf automake gcc git libtool make'

RUN dnf install -y ${PKGS} \
 && (git clone https://github.com/stedolan/jq.git\
  && cd jq && autoreconf -fi && ./configure && make && make install)\
 && dnf remove -y ${PKGS} && rm -rf /jq /var/cache/dnf

ENTRYPOINT [""jq""]
",coolhacks/docker-hacks,examples/hica/examples/jq/Dockerfile
4cc0bb2224894c1edd903289d614ab0f49cbab68,1266,"FROM php:5.5

MAINTAINER Bartosz Grzybowski <melkorm@gmail.com>

RUN apt-get update \
    && apt-get -y install git --no-install-recommends  \
    && apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng12-dev \
        zlib1g-dev \
        libxml2-dev \
        libicu-dev \
        php5-imap \
        libssh2-php \
        libssh2-1 \
        libssh2-1-dev \
        php5-ssh2 \
        php5-pecl-http \
        libmagickwand-dev \
        openssl \
        libc-client-dev \
        libkrb5-dev \
        ssh \
    && pecl install imagick xdebug \
    && pecl install ssh2 channel://pecl.php.net/ssh2-0.11.3 \
    && docker-php-ext-enable imagick xdebug ssh2 \
    && docker-php-ext-install -j$(nproc) iconv mcrypt zip intl xmlrpc bcmath soap mbstring \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \
    && docker-php-ext-install -j$(nproc) gd \
    && docker-php-ext-install imap \
    && rm -r /var/lib/apt/lists/* \
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && service ssh start

CMD [""php"", ""-a""]
",melkorm/php-docker,5.5/Dockerfile
a6e28a3fd7ce74dcb73e8f1d769dccf284504717,1406,"FROM cloudunit/base-14.04

# Set the WILDFLY_VERSION env variable
ENV WILDFLY_VERSION 8.2.1.Final
ENV WILDFLY_SHA1 77161d682005f26acb9d2df5548c8623ba3a4905
ENV JBOSS_HOME /cloudunit/appconf/wildfly
ENV JAVA_HOME /cloudunit/java/jdk1.8.0_25

# Add the WildFly distribution to /cloudunit/appconf, and make wildfly the owner of the extracted tar content
# Make sure the distribution is available from a well-known place
RUN cd $HOME \
    && curl -O https://download.jboss.org/wildfly/$WILDFLY_VERSION/wildfly-$WILDFLY_VERSION.tar.gz \
    && sha1sum wildfly-$WILDFLY_VERSION.tar.gz | grep $WILDFLY_SHA1 \
    && tar xf wildfly-$WILDFLY_VERSION.tar.gz \
    && mv $HOME/wildfly-$WILDFLY_VERSION $JBOSS_HOME \
    && rm wildfly-$WILDFLY_VERSION.tar.gz

RUN cd /cloudunit/tmp && wget http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.39/mysql-connector-java-5.1.39.jar

# Ensure signals are forwarded to the JVM process correctly for graceful shutdown
ENV LAUNCH_JBOSS_IN_BACKGROUND true

# Expose the ports we're interested in
EXPOSE 8080
EXPOSE 22

# add custom scripts
ADD scripts /cloudunit/scripts
RUN chmod +x /cloudunit/scripts/*

RUN mkdir -p /cloudunit/appconf/logs/
RUN ln -s /cloudunit/appconf/wildfly/standalone/log/server.log /cloudunit/appconf/logs

VOLUME /cloudunit/appconf/logs
VOLUME /cloudunit/appconf/wildfly/standalone/log

ENTRYPOINT [""/cloudunit/scripts/start-service.sh""]


",Treeptik/cloudunit,cu-services/images/servers/appconf/wildfly-8/Dockerfile
6ef862a0ff3bc387de767fb49492897726c01ff0,2900,"FROM cloudunit/base-jessie

ENV DEBIAN_FRONTEND noninteractive

ENV PG_MAJOR 9.5
ENV PG_VERSION 9.5.3-1.pgdg80+1
ENV PATH /usr/lib/postgresql/$PG_MAJOR/bin:$PATH
ENV PGDATA /var/lib/postgresql/data
ENV LANG en_US.utf8

RUN groupadd -r postgres --gid=999 && useradd -r -g postgres --uid=999 postgres

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
	&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
	&& wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
	&& wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
	&& gosu nobody true \
	&& apt-get purge -y --auto-remove ca-certificates wget

# make the ""en_US.UTF-8"" locale so postgres will be utf-8 enabled by default
RUN apt-get update && apt-get install -y locales && rm -rf /var/lib/apt/lists/* \
	&& localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

RUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list
RUN apt-get update

RUN apt-get -y -q install python-software-properties software-properties-common
RUN apt-get -y -q install postgresql-common \
                          postgresql-$PG_MAJOR=$PG_VERSION \
                          postgresql-contrib-$PG_MAJOR=$PG_VERSION \
                          phppgadmin \
                  && rm -rf /var/lib/apt/lists/*

## On Ã©coute sur toutes les IP. La sÃ©curitÃ© est faite avant.
RUN echo ""listen_addresses='*'"" >> /etc/postgresql/9.5/main/postgresql.conf

## Suppression du fichier de configuration d'accÃ¨s
RUN rm /etc/postgresql/9.5/main/pg_hba.conf

## Autorisation en mode 'md5' (password demandÃ©) pour les IP autre que localhost
RUN echo ""local	all all trust""              >> /etc/postgresql/9.5/main/pg_hba.conf
RUN echo ""host	all all 127.0.0.1/32 trust"" >> /etc/postgresql/9.5/main/pg_hba.conf
RUN echo ""host  all all ::1/128      md5"" >> /etc/postgresql/9.5/main/pg_hba.conf
RUN echo ""host	all all 0.0.0.0/0    md5""   >> /etc/postgresql/9.5/main/pg_hba.conf

# add custom scripts
ADD scripts /cloudunit/scripts
RUN chmod +x /cloudunit/scripts/*

RUN mkdir -p /var/run/postgresql && chown -R postgres /var/run/postgresql

VOLUME /var/lib/postgresql/data

EXPOSE 22

ENTRYPOINT [""/bin/bash"", ""/cloudunit/scripts/start-service.sh""]
",Treeptik/cloudunit,cu-services/images/modules/postgresql-9-5/Dockerfile
06b62c7403db0e62fc4bce438dfb34f4dc8c67c9,421,"FROM markadams/chromium-xvfb

RUN apt-get update && apt-get install -y \
    python python-pip curl unzip libgconf-2-4

RUN pip install pytest selenium

ENV CHROMEDRIVER_VERSION 2.19

RUN curl -SLO ""https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"" \
  && unzip ""chromedriver_linux64.zip"" -d /usr/local/bin \
  && rm ""chromedriver_linux64.zip""

WORKDIR /usr/src/app

CMD py.test
",mark-adams/docker-chromium-xvfb,images/python2/Dockerfile
35943be3109fa679f9dc482431f9a4dc3c477e5c,432,"FROM redmine:3.0

ENV PASSENGER_VERSION 5.0.29
RUN buildDeps=' \
		make \
	' \
	&& set -x \
	&& apt-get update && apt-get install -y --no-install-recommends $buildDeps && rm -rf /var/lib/apt/lists/* \
	&& gem install passenger --version ""$PASSENGER_VERSION"" \
	&& apt-get purge -y --auto-remove $buildDeps
RUN set -x \
	&& passenger-config install-agent \
	&& passenger-config install-standalone-runtime

CMD [""passenger"", ""start""]
",docker-library/redmine,3.0/passenger/Dockerfile
9b70d9607b85464ea124fe98f3b4d0fdcdef858f,483,"FROM phusion/baseimage:0.9.16
MAINTAINER Open Knowledge

# set UTF-8 locale
RUN locale-gen en_US.UTF-8 && \
    echo 'LANG=""en_US.UTF-8""' > /etc/default/locale

RUN apt-get -qq update

# Install required packages
RUN DEBIAN_FRONTEND=noninteractive apt-get -qq -y install \
	python-pip
	

RUN pip install -U docker-compose
ENV DOCKER_HOST unix:///tmp/docker.sock

WORKDIR /src
CMD [""/bin/bash""]

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
",ckan/ckan-docker,docker/compose/Dockerfile
133ed350cab744645c099e2ed3ae2114783bb0b8,634,"# cpppo/cpppo Dockerfile.
#
# DESCRIPTION
#     Base image for cpppo Dockerfiles.  Use this Docker image in a 'FROM cpppo/cpppo' line
# when building other Dockerfiles based on cpppo.
#
# EXAMPLE
#
#     Come on in and look around:
#
#   $ docker -i -t run /bin/bash
#
#     Manually run any cpppo-based service; a simple simulated Logix controller for example:
#
#   $ docker run -p 44818:44818 -d cpppo/cpppo python -m cpppo.server.enip SCADA=dint[1000]
#
FROM		cpppo/base
MAINTAINER	Perry Kundert ""perry@hardconsulting.com""
RUN		apt-get -y install python python-pip			\
		    && apt-get clean			# 2015-01-26
RUN		pip install cpppo
",pjkundert/cpppo,docker/cpppo/cpppo/Dockerfile
57feca34448417fc4cbefdb48bb5442cd3756b72,193,"FROM 2gis/openstack-kilo-base
MAINTAINER 2GIS

RUN apt-get update && \
    apt-get install -y \
        neutron-metadata-agent && \
    apt-get clean

ADD root/ /

ENTRYPOINT [""/sbin/my_init""]
",2gis/whalestack,docker/openstack/neutron/neutron-metadata-agent/Dockerfile
298fe75897c12e635574413ea19366a0efb3ce40,105,"FROM ufaldsg/cloud-asr-worker
MAINTAINER Ondrej Klejch

WORKDIR /opt/app
ADD . /opt/app

ENV model dummy
",UFAL-DSG/cloud-asr,examples/worker_dummy/Dockerfile
1cc4888ad0f2c97d1a1572c8a166ecefc07195dd,547,"FROM nodesource/vivid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_3.x/pool/main/i/iojs/iojs_3.1.0-1nodesource1~vivid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/vivid/iojs/3.1.0/Dockerfile
f91dc5293f8991cfe01c93259b5b40f68079349e,264,"
FROM node:latest

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install app dependencies
COPY package.json /usr/src/app/
RUN npm install

# copy the app source
COPY . /usr/src/app

RUN npm run build

EXPOSE 8080

CMD [ ""npm"", ""start"" ]
",codeimpossible/docker-test-project,frontend/Dockerfile
54fa0913fe52a44347b803d1614a9386c3fb8e68,217,"FROM jboss/base
MAINTAINER Miroslav Jaros <mjaros@redhat.com>

USER root

RUN yum update -y \
    && yum install -y epel-release \
    && yum install -y tinyproxy

EXPOSE 8888
ENTRYPOINT [""/usr/sbin/tinyproxy"", ""-d""]
",apiman/apiman-test,tools/docker/proxy/Dockerfile
63286dc4d42573eb44468c1b7df41f2ae833f42c,474,"FROM nodesource/fedora20-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub/fc/20/x86_64/nodejs-0.10.38-1nodesource.fc20.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/20/node/0.10.38/Dockerfile
a71597d8fa0deceb50c6208e34b1ab9e3a892592,817,"FROM debian:wheezy

ENV BITCOIND_VERSION 0.12.1

RUN apt-get update && apt-get install -y curl \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN curl -LsS https://bitcoin.org/bin/bitcoin-core-${BITCOIND_VERSION}/bitcoin-${BITCOIND_VERSION}-linux64.tar.gz | tar -xzf - -C /tmp \
  && chown -R root:root /tmp/bitcoin-* \
  && mv /tmp/bitcoin-*/bin/bitcoin-cli /usr/local/bin \
  && mv /tmp/bitcoin-*/bin/bitcoind /usr/local/bin \
  && mv /tmp/bitcoin-*/bin/test_bitcoin /usr/local/bin \
  && rm -rf /tmp/bitcoin-*

RUN groupadd -r bitcoind \
  && useradd -c ""Bitcoind"" -d /var/lib/bitcoind -g bitcoind -m -r -s /sbin/nologin bitcoind \
  && rm /var/lib/bitcoind/.bash*

ENV HOME /var/lib/bitcoind

USER bitcoind

EXPOSE 8332 8333 18332 18333

VOLUME [""/var/lib/bitcoind""]

ENTRYPOINT [""/usr/local/bin/bitcoind""]
",zealic/dockerfiles,bitcoind/Dockerfile
758a9bc42667762c2caa6b8ba2a6b7ef8f93a7ec,1237,"FROM debian:jessie

MAINTAINER Benjamin Beurdouche <benjamin.beurdouche@inria.fr>


# Define versions of dependencies
ENV opamv 4.02.3
ENV z3v z3-4.4.1

# Define working directory
RUN mkdir -p /worker
WORKDIR /worker

# Install required packages and set versions
RUN apt-get -qq update
RUN apt-get install --yes libssl-dev libsqlite3-dev m4 make opam pkg-config python zip
# RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 200
# RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 200

# Prepare build (OCaml packages)
ENV OPAMYES true
RUN opam init
RUN eval $(opam config env)
RUN opam switch ${opamv}
RUN eval $(opam config env)
RUN opam install ocamlfind batteries sqlite3 fileutils stdint
RUN eval $(opam config env)

# Prepare Z3
ENV z3v ${z3v}-x64-debian-8.2
RUN wget https://github.com/Z3Prover/z3/releases/download/z3-4.4.1/${z3v}.zip
RUN unzip ${z3v}.zip
ENV PATH ""/worker/${z3v}/bin:$PATH""

# Prepare and build F*
RUN git clone https://github.com/FStarLang/FStar.git
ENV PATH ""/worker/FStar/bin:$PATH""
WORKDIR FStar
RUN opam config exec -- make -C src/ocaml-output

# F* Testing
RUN opam config exec -- make -C examples/unit-tests
RUN opam config exec -- make -C src regressions OTHERFLAGS=--lax",FStarLang/FStar,.docker/debian_jessie/Dockerfile
107a72c41ef3efbfde438b2013889889a54cbcdf,108,"FROM pypy:latest

RUN mkdir /app

WORKDIR /app

COPY . /app

RUN pypy3 setup.py install

CMD [""indielangs""]
",unbalancedparentheses/indielangs,worker/Dockerfile
ab84dceeb26c00565deb6d7de471008ab3c39bfb,1137,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/base-app:ubuntu-16.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/base:ubuntu-16.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV APPLICATION_USER  application
ENV APPLICATION_GROUP application
ENV APPLICATION_PATH  /app
ENV APPLICATION_UID   1000
ENV APPLICATION_GID   1000

COPY conf/ /opt/docker/

# Install services
RUN /usr/local/bin/apt-install \
        # Install services
        openssh-server \
        mysql-client \
        sqlite \
        dnsmasq \
        postfix \
        # Install common tools
        sudo \
        zip \
        unzip \
        bzip2 \
        wget \
        curl \
        net-tools \
        moreutils \
        dnsutils \
        openssh-client \
        rsync \
        git \
        nano \
        vim \
    && mkdir -p /var/lib/syslog-ng/ \
    && /usr/local/bin/generate-locales \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-base-app \
    && /opt/docker/bin/bootstrap.sh

",webdevops/Dockerfile,docker/base-app/ubuntu-16.04/Dockerfile
20a988102248a38ca6e37c789f40688e2c24ed07,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-4.4.6-1-x86_64.pkg.tar.xz /tmp/php-4.4.6-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-4.4.6-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-4.4.6/Dockerfile
55f4b97f8e3ebe25899855dbf7acbb11e98ca21e,1116,"FROM debian:jessie

EXPOSE 8000
CMD [""./bin/run-prod.sh""]

RUN adduser --uid 1000 --disabled-password --gecos '' --no-create-home webdev

RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential python3 python3-dev python3-pip \
                                               libpq-dev postgresql-client gettext && \
    rm -rf /var/lib/apt/lists/*
RUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 10
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10


# Using PIL or Pillow? You probably want to uncomment next line
# RUN apt-get update && apt-get install -y --no-install-recommends libjpeg8-dev

WORKDIR /app

# Get pip8
COPY bin/pipstrap.py bin/pipstrap.py
RUN ./bin/pipstrap.py

# First copy requirements.txt and peep so we can take advantage of
# docker caching.
COPY requirements.txt /app/requirements.txt
RUN pip install --require-hashes --no-cache-dir -r requirements.txt

COPY . /app
RUN DEBUG=False SECRET_KEY=foo ALLOWED_HOSTS=localhost, DATABASE_URL= ./manage.py collectstatic --noinput -c
RUN chown webdev.webdev -R .
USER webdev
",mozilla/sugardough,{{ cookiecutter.project_name }}/Dockerfile
2a073d3d9cb540de474507fba005bdb57c80c6af,627,"FROM sdhibit/rpi-raspbian
MAINTAINER pixelistik <code@pixelistik.de>

# https://gist.github.com/jpetazzo/6127116
RUN echo ""force-unsafe-io"" > /etc/dpkg/dpkg.cfg.d/02apt-speedup && \
    echo ""Acquire::http {No-Cache=True;};"" > /etc/apt/apt.conf.d/no-cache

RUN apt-get update && \
    apt-get install -y -q wget ca-certificates && \
    wget http://archive.raspberrypi.org/debian/raspberrypi.gpg.key -O - | apt-key add - && \
    echo ""deb http://archive.raspberrypi.org/debian/ wheezy main"" > /etc/apt/sources.list.d/raspberrypi.org.list
RUN apt-get update && \
    apt-get upgrade -y

RUN apt-get install -y oracle-java8-jdk
",pixelistik/rpi-teamcity,oraclejdk-8/Dockerfile
2d048acfa48cecae7b9d448d7941fbbd94f3ac90,708,"# Run ykpersonalize in a container
#
# docker run --rm -it \
# 	--device /dev/bus/usb \
# 	--device /dev/usb
#	--name ykpersonalize \
#	jess/ykpersonalize
#
FROM debian:sid
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apt-get update && apt-get install -y \
	software-properties-common \
	--no-install-recommends && \
	add-apt-repository ppa:yubico/stable && \
	apt-get update && apt-get install -y \
	ca-certificates \
	curl \
	libjson0 \
	libusb-1.0-0 \
	libyubikey0 \
	pcscd \
	usbutils \
	yubikey-personalization \
	yubico-piv-tool \
	&& rm -rf /var/lib/apt/lists/*

WORKDIR /root/

COPY entrypoint.sh /usr/local/bin/

ENTRYPOINT [ ""/usr/local/bin/entrypoint.sh"" ]
CMD [ ""ykpersonalize"", ""--help"" ]
",coolhacks/docker-hacks,dockerfiles/ykpersonalize/Dockerfile
7b8405811433a2a670a5ea6746ed275f52292921,942,"#
# This is the default deployment strategy image for OpenShift Origin. It expects a set of
# environment variables to parameterize the deploy:
#
#   ""OPENSHIFT_DEPLOYMENT_NAME"" - the name of a replication controller that is being deployed
#   ""OPENSHIFT_DEPLOYMENT_NAMESPACE"" - the namespace of the replication controller that is being deployed
#
# It also expects to receive the standard Kubernetes service account secret to connect back to
# the OpenShift API to drive the deployment.
#
# The standard name for this image is openshift/origin-deployer
#
FROM openshift/origin

LABEL io.k8s.display-name=""OpenShift Origin Deployer"" \
      io.k8s.description=""This is a component of OpenShift Origin and executes the user deployment process to roll out new containers. It may be used as a base image for building your own custom deployer image.""
# The deployer doesn't require a root user.
USER 1001
ENTRYPOINT [""/usr/bin/openshift-deploy""]
",fabric8io/gofabric8,vendor/github.com/openshift/origin/images/deployer/Dockerfile
8a8c3cea8fb4bced6cefbfd1080661624d84ea8c,3088,"# AlpineLinux with a glibc-2.23 and Oracle Java 7
FROM alpine:3.4

MAINTAINER Anastas Dancha <anapsix@random.io>
# thanks to Vladimir Krivosheev <develar@gmail.com> aka @develar for smaller image
# and Victor Palma <palma.victor@gmail.com> aka @devx for pointing it out

# Java Version and other ENV
ENV JAVA_VERSION_MAJOR=7 \
    JAVA_VERSION_MINOR=80 \
    JAVA_VERSION_BUILD=15 \
    JAVA_PACKAGE=jdk \
    JAVA_HOME=/opt/jdk \
    PATH=${PATH}:/opt/jdk/bin \
    GLIBC_VERSION=2.23-r3 \
    LANG=C.UTF-8

# do all in one step
RUN apk upgrade --update && \
    apk add --update curl ca-certificates bash && \
    for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk; done && \
    apk add --allow-untrusted /tmp/*.apk && \
    rm -v /tmp/*.apk && \
    ( /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) && \
    echo ""export LANG=C.UTF-8"" > /etc/profile.d/locale.sh && \
    /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib && \
    mkdir /opt && curl -jksSLH ""Cookie: oraclelicense=accept-securebackup-cookie"" -o /tmp/java.tar.gz \
    http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz && \
    gunzip /tmp/java.tar.gz && \
    tar -C /opt -xf /tmp/java.tar && \
    apk del curl glibc-i18n && \
    ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk && \
    rm -rf /opt/jdk/*src.zip \
           /opt/jdk/lib/missioncontrol \
           /opt/jdk/lib/visualvm \
           /opt/jdk/lib/*javafx* \
           /opt/jdk/jre/plugin \
           /opt/jdk/jre/bin/javaws \
           /opt/jdk/jre/bin/jjs \
           /opt/jdk/jre/bin/keytool \
           /opt/jdk/jre/bin/orbd \
           /opt/jdk/jre/bin/pack200 \
           /opt/jdk/jre/bin/policytool \
           /opt/jdk/jre/bin/rmid \
           /opt/jdk/jre/bin/rmiregistry \
           /opt/jdk/jre/bin/servertool \
           /opt/jdk/jre/bin/tnameserv \
           /opt/jdk/jre/bin/unpack200 \
           /opt/jdk/jre/lib/javaws.jar \
           /opt/jdk/jre/lib/deploy* \
           /opt/jdk/jre/lib/desktop \
           /opt/jdk/jre/lib/*javafx* \
           /opt/jdk/jre/lib/*jfx* \
           /opt/jdk/jre/lib/amd64/libdecora_sse.so \
           /opt/jdk/jre/lib/amd64/libprism_*.so \
           /opt/jdk/jre/lib/amd64/libfxplugins.so \
           /opt/jdk/jre/lib/amd64/libglass.so \
           /opt/jdk/jre/lib/amd64/libgstreamer-lite.so \
           /opt/jdk/jre/lib/amd64/libjavafx*.so \
           /opt/jdk/jre/lib/amd64/libjfx*.so \
           /opt/jdk/jre/lib/ext/jfxrt.jar \
           /opt/jdk/jre/lib/ext/nashorn.jar \
           /opt/jdk/jre/lib/oblique-fonts \
           /opt/jdk/jre/lib/plugin.jar \
           /tmp/* /var/cache/apk/* && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf

# EOF
",anapsix/docker-alpine-java,7/jdk/Dockerfile
2df7d103323b0425a72abc20629f21b12167b183,112,"FROM alpine:edge
MAINTAINER Tobias Gesellchen <tobias@gesellix.de>

ADD ./subdirectory/payload.txt /payload.txt
",gesellix/docker-client,src/test/resources/docker/Dockerfile
c63e7c9fe67e667af2a0ae12b9d6c35b482899f4,920,"FROM rancher/os-base
COPY console.sh docker-init update-ssh-keys rancheros-install /usr/sbin/
COPY build/lsb-release /etc/
RUN sed -i 's/rancher:!/rancher:*/g' /etc/shadow && \
    sed -i 's/docker:!/docker:*/g' /etc/shadow && \
    sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 180/g' /etc/ssh/sshd_config && \
    echo '## allow password less for rancher user' >> /etc/sudoers && \
    echo 'rancher ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \
    echo '## allow password less for docker user' >> /etc/sudoers && \
    echo 'docker ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \
    ln -sf /usr/bin/docker.dist /usr/bin/docker && \
    ln -sf /usr/bin/docker-containerd.dist /usr/bin/docker-containerd && \
    ln -sf /usr/bin/docker-containerd-shim.dist /usr/bin/docker-containerd-shim && \
    ln -sf /usr/bin/docker-runc.dist /usr/bin/docker-runc
COPY prompt.sh /etc/profile.d/
CMD [""/usr/sbin/console.sh""]
",rancher/os,images/02-console/Dockerfile
bb3b0062b2bb937f4b2158940aa822b0507a491d,2757,"FROM rhel:7.2-released

# PostgreSQL image for OpenShift.
# Volumes:
#  * /var/lib/psql/data   - Database cluster for PostgreSQL
# Environment:
#  * $POSTGRESQL_USER     - Database user name
#  * $POSTGRESQL_PASSWORD - User's password
#  * $POSTGRESQL_DATABASE - Name of the database to create
#  * $POSTGRESQL_ADMIN_PASSWORD (Optional) - Password for the 'postgres'
#                           PostgreSQL administrative account

ENV POSTGRESQL_VERSION=9.4 \
    HOME=/var/lib/pgsql \
    PGUSER=postgres

LABEL io.k8s.description=""PostgreSQL is an advanced Object-Relational database management system"" \
      io.k8s.display-name=""PostgreSQL 9.4"" \
      io.openshift.expose-services=""5432:postgresql"" \
      io.openshift.tags=""database,postgresql,postgresql94,rh-postgresql94""

# Labels consumed by Red Hat build service
LABEL Name=""rhscl/postgresql-94-rhel7"" \
      BZComponent=""rh-postgresql94-docker"" \
      Version=""9.4"" \
      Release=""6.3"" \
      Architecture=""x86_64""

EXPOSE 5432

# This image must forever use UID 26 for postgres user so our volumes are
# safe in the future. This should *never* change, the last test is there
# to make sure of that.
# rhel-7-server-ose-3.0-rpms is enabled for nss_wrapper until this pkg is
# in base RHEL
RUN yum install -y yum-utils gettext && \
    yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    yum-config-manager --enable rhel-7-server-ose-3.0-rpms && \
    INSTALL_PKGS=""rsync tar gettext bind-utils rh-postgresql94 rh-postgresql94-postgresql-contrib  nss_wrapper"" && \
    yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum clean all && \
    localedef -f UTF-8 -i en_US en_US.UTF-8 && \
    mkdir -p /var/lib/pgsql/data && \
    test ""$(id postgres)"" = ""uid=26(postgres) gid=26(postgres) groups=26(postgres)""

# Loosen permission bits to avoid problems running container with arbitrary UID
ADD root /
RUN /usr/libexec/fix-permissions /var/lib/pgsql && \
    /usr/libexec/fix-permissions /var/run/postgresql

# Get prefix path and path to scripts rather than hard-code them in scripts
ENV CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/postgresql \
    ENABLED_COLLECTIONS=rh-postgresql94

# When bash is started non-interactively, to run a shell script, for example it
# looks for this variable and source the content of this file. This will enable
# the SCL for all scripts without need to do 'scl enable'.
ENV BASH_ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
    ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
    PROMPT_COMMAND="". ${CONTAINER_SCRIPTS_PATH}/scl_enable""

VOLUME [""/var/lib/pgsql/data""]

USER 26

ENTRYPOINT [""container-entrypoint""]
CMD [""run-postgresql""]
",sclorg/rhscl-dockerfiles,rhel7.rh-postgresql94/Dockerfile
b301bf25dea25ffdb1f1d756bef41bb4eb037d15,1256,"FROM romeoz/docker-phpfpm:5.6
MAINTAINER romeOz <serggalka@gmail.com>

ENV OS_LOCALE=""en_US.UTF-8""
RUN locale-gen ${OS_LOCALE}
ENV LANG=${OS_LOCALE} \
	LANGUAGE=en_US:en \
	LC_ALL=${OS_LOCALE}

COPY ./supervisord.conf /etc/supervisor/conf.d/
COPY ./app /var/www/app/

RUN	\
	buildDeps='software-properties-common python-software-properties' \
	&& apt-get update \
	&& apt-get install --no-install-recommends -y $buildDeps \
	&& add-apt-repository -y ppa:nginx/stable \
	&& apt-get update \
	&& apt-get install -y nginx \
	&& rm -rf  /etc/nginx/sites-enabled/* /etc/nginx/sites-available/* \
	# Install supervisor
	&& apt-get install -y supervisor && mkdir -p /var/log/supervisor \
	&& chown www-data:www-data /var/www/app/ -Rf \
	# Cleaning
	&& apt-get purge -y --auto-remove $buildDeps \
	&& apt-get autoremove -y && apt-get clean \
	&& rm -rf /var/lib/apt/lists/* \
	# Forward request and error logs to docker log collector
	&& ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log

COPY ./configs/nginx.conf /etc/nginx/nginx.conf
COPY ./configs/app.conf /etc/nginx/sites-enabled/app.conf
COPY ./configs/www.conf /etc/php/5.6/fpm/pool.d/www.conf

WORKDIR /var/www/app/

EXPOSE 80 443

CMD [""/usr/bin/supervisord""]",romeOz/docker-nginx-php,5.6/Dockerfile
2470610551756d87233e431a3f3bc8aa54696768,582,"FROM haproxy:1.5.14
MAINTAINER bdelacretaz@apache.org

# TODO nano and procps are for debugging only
RUN apt-get update && \
    apt-get install -y curl && \
    apt-get install -y nano && \
    apt-get install -y procps && \
    rm -rf /var/lib/apt/lists/*

ENV CONFD_MD5=1bc02600fa2dc33f9cdaf7b1fd189cfd
RUN \
  curl -L https://github.com/kelseyhightower/confd/releases/download/v0.7.1/confd-0.7.1-linux-amd64 -o /usr/local/bin/confd && \
  echo ""${CONFD_MD5}  /usr/local/bin/confd"" | md5sum -c && \
  chmod +x /usr/local/bin/confd
    
COPY fsroot /
CMD [""/bin/bash"",""/start.sh""]",bdelacretaz/docker-sling-hosting,docker/haproxy/Dockerfile
49658e8c37221f01723b7f5b224dd73dc0753d73,528,"FROM {{= fp.config.base.from + (fp.config.base.tagFromMajorVersion ? "":"" + fp.config.version.major : """") }}

USER root

RUN mkdir /app
ENV JAVA_APP_DIR /app

{{= fp.block(""java-pkg-"" + fp.param.base) || ''}}
{{= fp.block(fp.config.base.agent, ""install"", { dest: ""/opt/run-java-options"" }) }}
{{= fp.block(""run-java-sh"",""copy"",{dest: ""/app""}) }}

{{? fp.config.base.user }}
# Run under user ""{{= fp.config.base.user}}""
RUN chown -R {{= fp.config.base.user}} /app
USER {{= fp.config.base.user }}
{{?}}

CMD [ ""/app/run-java.sh"" ]
",fabric8io/base-images,java/templates/Dockerfile
8c0b100e21a87ebc681868873371ab30ba8a7efc,652,"# Language pack with Chef testing tools - FoodCritic, ChefSpec, Test Kitchen, rubocop
# The entire list is available in the accompanied Gemfile

FROM ubuntu:precise

MAINTAINER Devdatta Kulkarni <devdatta.kulkarni@rackspace.com>

RUN apt-get -yqq update

RUN apt-get -yqq install build-essential libxml2-dev libxslt-dev git autoconf ruby1.9.3 libgecode-dev curl

ENV USE_SYSTEM_GECODE 1

ENV CI solum

RUN gem install bundler

ADD Gemfile /tmp/Gemfile

RUN cd /tmp && bundle install

# How to test various chef tools are installed correct?
# The languagepack author provides a test file.

ADD testgem.sh /tmp/testgem.sh

RUN cd /tmp && bash testgem.sh
",openstack/solum,examples/language-packs/chef/Dockerfile
2395ff78e4bba94899bed1afda5af7395e4ffde6,1372,"FROM frogops-dockerv2.jfrog.io/os/centos-artifactory:6.6

MAINTAINER matank@jfrog.com

LABEL Install Nginx and create certificate valid for the domain *.art.local
RUN yum install -y nginx && mkdir -p /etc/nginx/ssl && \
openssl req -nodes -x509 -newkey rsa:4096 -keyout /etc/nginx/ssl/demo.key -out /etc/nginx/ssl/demo.pem -days 356 \
-subj ""/C=US/ST=California/L=SantaClara/O=IT/CN=*.art.local""
ADD nginx/artifactoryDocker.conf /etc/nginx/conf.d/default.conf

EXPOSE 8081 80 443 5000 5001 5002 5003 8001

ADD runArtifactoryWithNginx.sh /tmp/run.sh

RUN chmod +x /tmp/run.sh && yum install -y --disablerepo=""*"" --enablerepo=""Artifactory-pro"" jfrog-artifactory-pro

LABEL Create Folders that aren't exists, and make sure they are owned by Artifactory, \
Without this action, Artifactory will not be able to write to external mounts
RUN mkdir -p /etc/opt/jfrog/artifactory /var/opt/jfrog/artifactory/{data,logs,backup} && \
chown -R artifactory: /etc/opt/jfrog/artifactory /var/opt/jfrog/artifactory/{data,logs,backup} && \
mkdir -p /var/opt/jfrog/artifactory/defaults/etc && \
cp -rp /etc/opt/jfrog/artifactory/* /var/opt/jfrog/artifactory/defaults/etc/

ENV ARTIFACTORY_HOME /var/opt/jfrog/artifactory

LABEL Add default configuration containing docker repositories
ADD artifactory/artifactory.config.xml /etc/opt/jfrog/artifactory/artifactory.config.xml

CMD /tmp/run.sh
",JFrogDev/artifactory-docker-builder,examples/artifactory-registry/Dockerfile
d6003c274547f63cdb024fe370e2d7c736fa23b4,686,"FROM alpine

RUN apk add --update \
		bash \
		ca-certificates \
		git \
		openssl \
		wget

RUN wget -O /usr/bin/gitlab-ci-multi-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64 && \
	chmod +x /usr/bin/gitlab-ci-multi-runner && \
	ln -s /usr/bin/gitlab-ci-multi-runner /usr/bin/gitlab-runner && \
	wget -q https://github.com/docker/machine/releases/download/v0.7.0/docker-machine-Linux-x86_64 -O /usr/bin/docker-machine && \
	chmod +x /usr/bin/docker-machine && \
	mkdir -p /etc/gitlab-runner/certs && \
	chmod -R 700 /etc/gitlab-runner

VOLUME [""/etc/gitlab-runner""]
ENTRYPOINT [""gitlab-ci-multi-runner""]
CMD [""run""]
",ayufan/gitlab-ci-multi-runner,dockerfiles/alpine/Dockerfile
58e89298af49209f8122a2117fd1cde6c425944d,549,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_1.x/pool/main/i/iojs/iojs_1.4.1-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/iojs/1.4.1/Dockerfile
a2a1677738b0e3dc0245e896049256956d8d729b,543,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_2.x/pool/main/i/iojs/iojs_2.0.0-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/iojs/2.0.0/Dockerfile
e565a2314495cf3df56b135799428e12ee7fb9d2,190,"FROM wlanslovenija/nodewatcher-base

MAINTAINER Jernej Kos <jernej@kos.mx>

EXPOSE 80/tcp

RUN apt-get update -q -q && \
 apt-get install -y uwsgi-plugin-python nginx-full

COPY ./etc /etc

",wlanslovenija/nodewatcher,docker/frontend/Dockerfile
0a30629c947d8ebc8e12f4d6c4902c78199df52a,922,"FROM nfnty/arch-mini

RUN echo -e ""[archlinuxfr]\nSigLevel = Never\nServer = http://repo.archlinux.fr/\$arch"" >> /etc/pacman.conf
RUN sed -i '/#\[multilib\]/,/#Include = \/etc\/pacman.d\/mirrorlist/ s/#//' /etc/pacman.conf
RUN pacman -Syyu --noconfirm
RUN pacman -S --noconfirm git curl jshon expac yajl wget unzip cmake && pacman -Sc
RUN yes | pacman -S gcc-multilib gcc-libs-multilib && pacman -Sc
RUN pacman -S --noconfirm --needed make pkg-config patch yaourt grep file sudo gawk fakeroot gzip m4 which util-linux && pacman -Sc

RUN useradd -mg root travis
RUN usermod -aG wheel travis
RUN sed -i 's/# %wheel ALL=(ALL) NOPASSWD: ALL/%wheel ALL=(ALL) NOPASSWD: ALL/g' /etc/sudoers

RUN pacman -S --noconfirm lib32-curl lib32-sdl2 lib32-speex lib32-fontconfig lib32-openssl lib32-libpng && pacman -Sc
USER travis
RUN yaourt -S --noconfirm lib32-jansson lib32-sdl2_ttf && rm -rf /tmp/yaourt-tmp-travis && sudo pacman -Sc
",IntelOrca/OpenRCT2,dockerfiles/32bit/Dockerfile
7503c291e635748db9b18871a9e5a312a302a9ba,180,"FROM java:8
VOLUME /tmp
ADD api-gateway-microservice-0.1.0.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]
",kbastani/spring-cloud-microservice-example,api-gateway-microservice/src/main/docker/Dockerfile
7850c7a2136ee3501430f4530d7f405ccc6bed90,463,"FROM ubuntu:trusty
MAINTAINER Radek Novacek <rnovacek@redhat.com>
RUN apt-get update && \
    apt-get upgrade -y python-requests && \
    apt-get install -y python python-pip python-pytest python-dev git libvirt0 swig libvirt-dev libssl-dev && \
    pip install -U iniparse python-dateutil M2Crypto libvirt-python unittest2 pytest-timeout mock
COPY . /virt-who
RUN pip install -r /virt-who/requirements.txt
WORKDIR /virt-who
CMD PYTHONPATH=. py.test --timeout=30
",virt-who/virt-who,docker/ci/Dockerfile
4b90789253f5a6457ec3790fa5c97df2244314d5,506,"FROM cuda:7.5-devel

ENV CUDNN_VERSION 4
LABEL com.nvidia.cudnn.version=""4""

ENV CUDNN_DOWNLOAD_SUM 4e64ef7716f20c87854b4421863328e17cce633330c319b5e13809b61a36f97d

RUN curl -fsSL http://developer.download.nvidia.com/compute/redist/cudnn/v4/cudnn-7.0-linux-x64-v4.0-prod.tgz -O && \
    echo ""$CUDNN_DOWNLOAD_SUM  cudnn-7.0-linux-x64-v4.0-prod.tgz"" | sha256sum -c --strict - && \
    tar -xzf cudnn-7.0-linux-x64-v4.0-prod.tgz -C /usr/local && \
    rm cudnn-7.0-linux-x64-v4.0-prod.tgz && \
    ldconfig
",NVIDIA/nvidia-docker,centos-7/cuda/7.5/devel/cudnn4/Dockerfile
0e411f949b33ffccf32b400b300387fb27f430d0,69,"FROM quay.io/coreos/clair
COPY ./config/config.yml /config/config.yml",wemanity-belgium/hyperclair,contrib/clair/Dockerfile
8318a96957e82bab9b68caebe2a103bd825647d1,774,"#VERSION=1.0
FROM ubuntu:trusty

ENV HOME /root
ENV DEBIAN_FRONTEND noninteractive

RUN (   apt-get update && \
        apt-get install curl -y && \
        curl http://packages.treasuredata.com/GPG-KEY-td-agent | apt-key add - && \
        echo ""deb http://packages.treasuredata.com/2/ubuntu/trusty/ trusty contrib"" | tee /etc/apt/sources.list.d/treasure-data.list && \
        apt-get update && \
        apt-get install -y --force-yes td-agent && \
        apt-get install -y make gcc patch && \
        td-agent-gem install fluent-plugin-kafka --no-document && \
        apt-get remove -y --auto-remove curl make gcc patch ruby-dev && \
        apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*)

# Expose the default port
EXPOSE 8888

CMD [""td-agent""]

",SeldonIO/seldon-server,docker/td-agent/Dockerfile
d6d59b2829c94ab17a6af2dc0051415bb003f9e5,69,"FROM redis
Maintainer Zhongtian Wang

COPY run /
ENTRYPOINT [""/run""]
",NetSys/quilt,specs/redis/Dockerfile
abf7993c8624db13ae7fbaa8805c841990d2832c,1023,"FROM analyticsbase
MAINTAINER Charmander

RUN apt-get install -y build-essential make gcc

ENV REDISVERSION 2.8.11

RUN wget \
    --no-cookies \
    --progress=bar:force \
    https://github.com/antirez/redis/archive/$REDISVERSION.tar.gz \
    && tar xzf $REDISVERSION.tar.gz \
    && cd redis-$REDISVERSION \
    && make \
    && cd .. \
    && ln -sfn redis-$REDISVERSION redis

#VOLUME [ ""/data"" ]
RUN mkdir /data

ADD files/redis.conf redis.conf

EXPOSE 6379

ENV NODEVERSION v0.10.30
ENV CMDVERSION 0.2.1
RUN wget \
    --no-cookies \
    --progress=bar:force \
    http://nodejs.org/dist/$NODEVERSION/node-$NODEVERSION-linux-x64.tar.gz \
    && tar -xvf node-$NODEVERSION-linux-x64.tar.gz \
    && mv node-$NODEVERSION-linux-x64 /opt/node \
    && cd /usr/local/bin && ln -s /opt/node/bin/* . \
    && npm install -g redis-commander@$CMDVERSION

EXPOSE 8081

# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENTRYPOINT redis/src/redis-server redis.conf & redis-commander
",att-innovate/charmander,analytics/redis/Dockerfile
3b45e6b9a7a6ae0ab795663c45ce8a9c32444a67,681,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/deb/amd64/generate.sh""!
#

FROM ubuntu:wily

RUN apt-get update && apt-get install -y apparmor bash-completion btrfs-tools build-essential curl ca-certificates debhelper dh-apparmor dh-systemd git libapparmor-dev libdevmapper-dev libltdl-dev libseccomp-dev libsqlite3-dev pkg-config libsystemd-dev --no-install-recommends && rm -rf /var/lib/apt/lists/*

ENV GO_VERSION 1.5.4
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1

ENV DOCKER_BUILDTAGS apparmor seccomp selinux
ENV RUNC_BUILDTAGS apparmor seccomp selinux
",Microsoft/docker,contrib/builder/deb/amd64/ubuntu-wily/Dockerfile
90499746c24c2d8047b6adb0f5134f511c5861d5,1941,"FROM alpine:edge
MAINTAINER Wonderfall <wonderfall@schrodinger.io>

ARG LYCHEE_VERSION=3.1.2
ARG IMAGICK_EXT_VERSION=3.4.2

ENV UID=991 GID=991

RUN echo ""@commuedge http://nl.alpinelinux.org/alpine/edge/community"" >> /etc/apk/repositories \
 && echo ""@testing http://nl.alpinelinux.org/alpine/edge/testing"" >> /etc/apk/repositories \
 && BUILD_DEPS="" \
    imagemagick-dev \
    tar \
    openssl \
    ca-certificates \
    build-base \
    autoconf \
    libtool"" \
 && apk -U add \
    ${BUILD_DEPS} \
    nginx \
    libwebp \
    php7-mbstring@testing \
    php7-fpm@testing \
    php7-exif@testing \
    php7-gd@testing \
    php7-json@testing \
    php7-mysqli@testing \
    php7-zip@testing \
    php7-session@testing \
    php7-pear@testing \
    php7-dev@testing \
    supervisor \
    imagemagick \
    tini@commuedge \
 && sed -i -e ""s/max_execution_time = 30/max_execution_time = 200/g"" \
    -e ""s/post_max_size = 8M/post_max_size = 100M/g"" \
    -e ""s/upload_max_filesize = 2M/upload_max_filesize = 20M/g"" \
    -e ""s/memory_limit = 256M/memory_limit = 512M/g"" \
    /etc/php7/php.ini \
 && mkdir /lychee && cd /lychee \
 && wget -qO- https://github.com/electerious/Lychee/archive/v${LYCHEE_VERSION}.tar.gz | tar xz --strip 1 \
 && cd /tmp && wget -q https://pecl.php.net/get/imagick-${IMAGICK_EXT_VERSION}.tgz \
 && tar xzf imagick-${IMAGICK_EXT_VERSION}.tgz && cd imagick-${IMAGICK_EXT_VERSION} \
 && phpize7 && ./configure --with-php-config=/usr/bin/php-config7 && make && make install \
 && echo ""extension=imagick.so"" > /etc/php7/conf.d/00_imagick.ini \
 && apk del ${BUILD_DEPS} php7-pear php7-dev \
 && rm -rf /var/cache/apk/* /tmp/*

COPY nginx.conf /etc/nginx/nginx.conf
COPY php-fpm.conf /etc/php7/php-fpm.conf
COPY supervisord.conf /usr/local/etc/supervisord.conf
COPY run.sh /usr/local/bin/run.sh

RUN chmod +x /usr/local/bin/run.sh

VOLUME /lychee/uploads /lychee/data
EXPOSE 80
CMD [""/sbin/tini"",""--"",""run.sh""]
",Wonderfall/dockerfiles,lychee/Dockerfile
b0e5ea07611d20c4cf8c6150eec2f4fbb422978d,476,"FROM ubuntu:wily
MAINTAINER caktux

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && \
    apt-get upgrade -q -y && \
    apt-get dist-upgrade -q -y && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 923F6CA9 && \
    echo ""deb http://ppa.launchpad.net/ethereum/ethereum/ubuntu wily main"" | tee -a /etc/apt/sources.list.d/ethereum.list && \
    apt-get update && \
    apt-get install -q -y gexp

EXPOSE 8545
EXPOSE 30303

ENTRYPOINT [""/usr/bin/gexp""]
",expanse-project/go-expanse,containers/docker/master-ubuntu/Dockerfile
4f42b8a670e6925176443b55e4037b2126133bf7,1147,"#1 from base alpine
FROM alpine

#2 Add Edge and bleeding repos
RUN echo -e '@edge http://nl.alpinelinux.org/alpine/edge/main\n@testing http://nl.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories

#3
RUN apk update && apk upgrade && apk add --update \
  python3 \
  python3-dev \
  make \
  cmake \
  gcc \
  g++ \
  git \
  pkgconf \
  unzip \
  wget \
  py-pip \
  build-base \
  gsl \
  libavc1394-dev  \
  libtbb@testing  \
  libtbb-dev@testing   \
  libjpeg  \
  libjpeg-turbo-dev \
  libpng-dev \
  libjasper \
  libdc1394-dev \
  clang \
  tiff-dev \
  libwebp-dev \
  py-numpy-dev@testing \
  py-scipy-dev@testing \
  linux-headers

#4 defining compilers
ENV CC /usr/bin/clang
ENV CXX /usr/bin/clang++

#5 opencv3
RUN mkdir /opt && cd /opt && \
  wget https://github.com/Itseez/opencv/archive/3.1.0.zip && \
  unzip 3.1.0.zip && \
  cd /opt/opencv-3.1.0 && \
  mkdir build && \
  cd build && \
  cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_FFMPEG=NO \
  -D WITH_IPP=NO -D WITH_OPENEXR=NO .. && \
  make VERBOSE=1 && \
  make && \
  make install


#6 Clean APK cache
RUN rm -rf /var/cache/apk/*
",julianbei/alpine-opencv-microimage,python3/Dockerfile
92f8148d7c80a8d8cf5315839f1c90a83ced6f3e,1438,"# vim:set ft=dockerfile:
FROM oraclelinux:7

# FIXME: Hack around docker/docker#10180
RUN ( yum install -y yum-plugin-ovl || yum install -y yum-plugin-ovl ) \
    && yum clean all

# install build tools and PostgreSQL development files
RUN yum groupinstall -y 'Development Tools' \
    && yum install -y \
        curl \
        flex \
        hunspell-en \
        libxml2-devel \
        libxslt-devel \
        openssl-devel \
        pam-devel \
        readline-devel \
        rpm-build \
        rpmlint \
        spectool \
        tar \
    && yum install -y https://download.postgresql.org/pub/repos/yum/9.4/redhat/rhel-7-x86_64/pgdg-oraclelinux94-9.4-2.noarch.rpm \
    && yum install -y postgresql94-devel \
    && yum clean all

# install jq to process JSON API responses
RUN curl -sL https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \
         -o /usr/bin/jq \
    && chmod +x /usr/bin/jq

# install latest Citus release to get header files
RUN curl -s https://packagecloud.io/install/repositories/citusdata/community/script.rpm.sh | bash \
    && yum install -y citus_94 \
    && yum clean all

RUN touch /rpmlintrc \
    && echo '%_build_pkgcheck %{_bindir}/rpmlint -f /rpmlintrc' >> /etc/rpm/macros

# set PostgreSQL version, place scripts on path, and declare output volume
ENV PGVERSION=9.4 \
    PATH=/scripts:$PATH
COPY scripts /scripts
VOLUME /packages

ENTRYPOINT [""/scripts/fetch_and_build_rpm""]
",citusdata/packaging,dockerfiles/oraclelinux-7-pg94/Dockerfile
1f0acdfc9730b06e600e981afe27c514c10b85f5,1378,"# Copyright (c) 2015 Mattermost, Inc. All Rights Reserved.
# See License.txt for license information.
FROM ubuntu:14.04

#
# Install SQL
#

ENV MYSQL_ROOT_PASSWORD=mostest
ENV MYSQL_USER=mmuser
ENV MYSQL_PASSWORD=mostest
ENV MYSQL_DATABASE=mattermost_test

RUN groupadd -r mysql && useradd -r -g mysql mysql

RUN apt-key adv --keyserver pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5

ENV MYSQL_MAJOR 5.6
ENV MYSQL_VERSION 5.6.25

RUN echo ""deb http://repo.mysql.com/apt/debian/ wheezy mysql-${MYSQL_MAJOR}"" > /etc/apt/sources.list.d/mysql.list

RUN apt-get update \
	&& export DEBIAN_FRONTEND=noninteractive \
	&& apt-get -y install perl wget mysql-server \
	&& rm -rf /var/lib/apt/lists/* \
	&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql

RUN sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf

VOLUME /var/lib/mysql
# ---------------------------------------------------------------------------------------------------------------------

WORKDIR /mattermost

# Copy over files
ADD https://github.com/mattermost/platform/releases/download/v1.4.0-rc2/mattermost.tar.gz /
RUN tar -zxvf /mattermost.tar.gz --strip-components=1 && rm /mattermost.tar.gz
ADD config_docker.json /
ADD docker-entry.sh /

RUN chmod +x /docker-entry.sh
ENTRYPOINT /docker-entry.sh

# Create default storage directory
RUN mkdir /mattermost-data/

# Ports
EXPOSE 80
",mozilla/mattermoz,docker/1.4/Dockerfile
6c2606cc2319a624576faa7e88d9f328f4e204ed,165,"FROM postgres:9.4

RUN mkdir -p /docker-entrypoint-initdb.d
ADD ./create_db.sh /docker-entrypoint-initdb.d/create_db.sh
RUN chmod +x /docker-entrypoint-initdb.d/*.sh",pudo/nomenklatura,contrib/postgres-nk-hstore/Dockerfile
0478b1004c1824d73a948e78310387b38f820fd6,663,"FROM centos

RUN yum install -y tar gcc g++ openssl-devel openssl openssl-libs openssl-static

RUN gpg --keyserver pgp.mit.edu --recv-keys 7B3B09DC &>/dev/null && bash -c ""gpg --import-ownertrust <(echo 108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE:6:)"" &>/dev/null
RUN curl -s https://static.rust-lang.org/rustup.sh | sh -s -- --channel=nightly --date=2015-04-24 --disable-sudo --yes

ENV LD_LIBRARY_PATH /usr/local/lib

RUN mkdir /source

# Dependencies
COPY Cargo.toml /source/
COPY Cargo.lock /source/
RUN mkdir /source/src && echo ""fn main() {}"" > /source/src/main.rs
WORKDIR /source
RUN cargo build
RUN rm /source/src/main.rs

# actual source
VOLUME /source/src
",futurice/space-tyckiting,clients/rust/Dockerfile
1721f433f1dccbb983f663f1aad618d9062b6c25,273,"FROM pintostack/pintostack-base-mesos

RUN mkdir -p /etc/mesos-master
RUN echo in_memory | dd of=/etc/mesos-master/registry
RUN echo docker > /etc/mesos-slave/containerizers
RUN echo 600secs > /etc/mesos-slave/executor_registration_timeout

ENTRYPOINT [""mesos-master""]




",pintostack/core,docker-images/pintostack-mesos/Dockerfile
1805f2d6e7d674b87c6509cc667c734ab3efaeaf,152,"FROM mysql:5.6

ENV MYSQL_ROOT_PASSWORD Passw0rd!
ENV MYSQL_USER ngspring
ENV MYSQL_PASSWORD password
ENV MYSQL_DATABASE NGSPRING

EXPOSE ${mysql.port}
",holisticon/continous-delivery-demo,angular-spring-boot-webapp/src/main/docker/mysql/Dockerfile
528895b5a814bc42faaf2c180f365472594954d0,58,"FROM gliderlabs/logspout:master
ENV SYSLOG_FORMAT rfc3164
",russmckendrick/monitoring-docker,chapter07/elk/logspout/Dockerfile
a6e1a309b201673788fb7dcbe44d358d34f69dc7,1793,"# Dockerfile for building Ansible image for Debian 7 (wheezy), with as few additional software as possible.
#
# @see https://launchpad.net/~ansible/+archive/ubuntu/ansible
#
# Version  1.0
#


# pull base image
FROM debian:wheezy

MAINTAINER William Yeh <william.pjyeh@gmail.com>


RUN echo ""===> Installing python, sudo, and supporting tools...""  && \
    apt-get update -y  &&  apt-get install --fix-missing          && \
    DEBIAN_FRONTEND=noninteractive         \
    apt-get install -y                     \
        python python-yaml sudo            \
        curl gcc python-pip python-dev libffi-dev libssl-dev  && \
    pip install --upgrade cffi                     && \
    \
    \
    echo ""===> Installing Ansible...""   && \
    pip install ansible                 && \
    \
    \
    echo ""===> Removing unused APT resources...""                  && \
    apt-get -f -y --auto-remove remove \
                 gcc python-pip python-dev libffi-dev libssl-dev  && \
    apt-get clean                                                 && \
    rm -rf /var/lib/apt/lists/*  /tmp/*                           && \
    \
    \
    echo ""===> Adding hosts for convenience...""        && \
    mkdir -p /etc/ansible                              && \
    echo 'localhost' > /etc/ansible/hosts


COPY ansible-playbook-wrapper /usr/local/bin/

ONBUILD  RUN  DEBIAN_FRONTEND=noninteractive  apt-get update   && \
              echo ""===> Updating TLS certificates...""         && \
              apt-get install -y openssl ca-certificates

ONBUILD  WORKDIR  /tmp
ONBUILD  COPY  .  /tmp
ONBUILD  RUN  \
              echo ""===> Diagnosis: host information...""  && \
              ansible -c local -m setup all



# default command: display Ansible version
CMD [ ""ansible-playbook"", ""--version"" ]
",William-Yeh/docker-ansible,debian7-onbuild/Dockerfile
f3e46f5c186a54453b189f9c6860bb26358d2090,2733,"#
# BUILD    : DF/[ATLASSIAN][BITBUCKET]
# OS/CORE  : java:8
# SERVICES : -
#
# VERSION 1.0.1
#

FROM dunkelfrosch/bitbucket:4.1.0

MAINTAINER Patrick Paechnatz <patrick.paechnatz@gmail.com>
LABEL com.container.vendor=""dunkelfrosch inc."" \
      com.container.service=""atlassian/bitbucket"" \
      com.container.priority=""1"" \
      com.container.project=""workbench/atlassian"" \
      img.version=""1.0.1"" \
      img.description=""our bitbucket atlassian workbench container""

# Setup parametric build arguments
ARG CFG_TARGET_URI
ARG CFG_PROXY_HOST
ARG CFG_PROXY_SCHEME
ARG CFG_PROXY_PORT

# Setup application install environment variables
ENV BITBUCKET_HOME          /var/atlassian/application-data/bitbucket
ENV BITBUCKET_INSTALL_DIR   /opt/atlassian/bitbucket
ENV _RUNJAVA                ""/usr/bin/java""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
ENV RUN_USER  daemon
ENV RUN_GROUP daemon

# using root user for all upcomming installation/setup steps below
USER root

# copy some major config and script files to docker image
ADD /opt/atlassian/bitbucket/conf/server.xml /tmp/server.xml

# x-layer 1: application server setup related processor
RUN cp -f /tmp/server.xml ${BITBUCKET_INSTALL_DIR}/conf/server.xml \
    && chown ${RUN_USER}:${RUN_GROUP} ${BITBUCKET_INSTALL_DIR}/conf/server.xml \
    && rm -f /tmp/server.xml \
    && xmlstarlet ed --inplace \
        -u '//Server/Service/Engine/Host/Context[@path=""_path_""]/@path' -v ""${CFG_TARGET_URI}"" \
        -u '//Server/Service/Connector[@proxyName=""_proxyName_""]/@proxyName' -v ""${CFG_PROXY_HOST}"" \
        -u '//Server/Service/Connector[@scheme=""_scheme_""]/@scheme' -v ""${CFG_PROXY_SCHEME}"" \
        -u '//Server/Service/Connector[@proxyPort=""_proxyPort_""]/@proxyPort' -v ""${CFG_PROXY_PORT}"" \
        ""${BITBUCKET_INSTALL_DIR}/conf/server.xml"" \

    && chmod -R 700 ${BITBUCKET_HOME} ${BITBUCKET_INSTALL_DIR} \
    && chown -R ${RUN_USER}:${RUN_GROUP} ${BITBUCKET_HOME} ${BITBUCKET_INSTALL_DIR}

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory (accessing logs). These directories will be set-and-used during
# data-only container volume bound run-mode.
VOLUME [""${BITBUCKET_INSTALL_DIR}"", ""${BITBUCKET_HOME}""]

# Reset base container execution user/group (no root-right container allowed here)
# using the default unprivileged account.
USER ${RUN_USER}:${RUN_GROUP}

# Set entrypoint script for application, bitbucket will run as foreground process (-fg)
CMD [""./bin/start-bitbucket.sh"", ""-fg""]",dunkelfrosch/docker-atlassian-wb,df-atls-bitbucket/Dockerfile
f6f676f14af96ffe4730cf842022233b65a18984,1172,"##############################################################################
# Keep this file in sync with .travis.yml so that the Docker environment
# is as similar to Travis CI environment as possible.
##############################################################################

FROM ubuntu:14.04
MAINTAINER mehaase@gmail.com
RUN apt-get update
RUN apt-get install -y curl mysql-server postgresql supervisor
RUN curl  https://bootstrap.pypa.io/get-pip.py | python3
RUN pip3 install Click coveralls nose pg8000 PyMySQL sqlparse
COPY supervisor.conf /etc/supervisor/conf.d/agnostic-tests.conf
RUN mkdir -p /var/log/supervisor

RUN /etc/init.d/mysql start && \
    mysql -u root -e ""SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root')""

# ""CREATE DATABASE"" is much faster with fsync disabled:
RUN sed --in-place 's:#fsync = on:fsync = off:' \
       /etc/postgresql/9.3/main/postgresql.conf

RUN /etc/init.d/postgresql start && \
    sudo -u postgres psql \
         --command ""CREATE USER root WITH SUPERUSER PASSWORD 'root';""

# This environment variable allows Click to print to stdout:
ENV LANG=C.UTF-8

VOLUME /opt/agnostic
ENTRYPOINT [""/usr/bin/supervisord""]
",TeamHG-Memex/agnostic,tests/docker/Dockerfile
9c0c06c84e9ad7fc5aa42c6875c7ac3cebfbe653,48,"FROM golang:1.5

RUN chmod -R 777 /usr/local/go
",robdimsdale/wl,scripts/ci/golang-1.5/Dockerfile
c287c7f6c0955ffce8130fb0a6f9919f64956e74,1679,"FROM debian:unstable

MAINTAINER Sysdig <support@sysdig.com>

ENV SYSDIG_REPOSITORY dev

LABEL RUN=""docker run -i -t -v /var/run/docker.sock:/host/var/run/docker.sock -v /dev:/host/dev -v /proc:/host/proc:ro -v /boot:/host/boot:ro -v /lib/modules:/host/lib/modules:ro -v /usr:/host/usr:ro --name NAME IMAGE""

ENV SYSDIG_HOST_ROOT /host

ENV HOME /root

RUN cp /etc/skel/.bashrc /root && cp /etc/skel/.profile /root

ADD http://download.draios.com/apt-draios-priority /etc/apt/preferences.d/

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
	bash-completion \
	curl \
	ca-certificates \
	gcc \
	gcc-4.9 \
	libelf1 && rm -rf /var/lib/apt/lists/*

# Terribly terrible hacks: since our base Debian image ships with GCC 5.0 which breaks older kernels,
# revert the default to gcc-4.9. Also, since some customers use some very old distributions whose kernel
# makefile is hardcoded for gcc-4.6 or so (e.g. Debian Wheezy), we pretend to have gcc 4.6/4.7 by symlinking
# it to 4.9

RUN rm -rf /usr/bin/gcc \
 && ln -s /usr/bin/gcc-4.9 /usr/bin/gcc \
 && ln -s /usr/bin/gcc-4.9 /usr/bin/gcc-4.8 \
 && ln -s /usr/bin/gcc-4.9 /usr/bin/gcc-4.7 \
 && ln -s /usr/bin/gcc-4.9 /usr/bin/gcc-4.6

RUN curl -s https://s3.amazonaws.com/download.draios.com/DRAIOS-GPG-KEY.public | apt-key add - \
 && curl -s -o /etc/apt/sources.list.d/draios.list http://download.draios.com/$SYSDIG_REPOSITORY/deb/draios.list \
 && apt-get update \
 && apt-get install -y --no-install-recommends sysdig \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

RUN ln -s $SYSDIG_HOST_ROOT/lib/modules /lib/modules

COPY ./docker-entrypoint.sh /

ENTRYPOINT [""/docker-entrypoint.sh""]

CMD [""bash""]
",draios/sysdig,docker/dev/Dockerfile
c8a820b263635cc8e2142e18fdd54ea2a7064e8c,474,"FROM armhf/ubuntu
RUN apt-get update && apt-get -qy install \
 wget unzip
WORKDIR /root/
RUN wget \
 https://releases.hashicorp.com/consul/0.6.3/consul_0.6.3_linux_arm.zip
RUN mkdir /data
RUN mkdir /ui
RUN unzip consul*.zip -d /usr/local/bin/

RUN consul version

EXPOSE 8300 8301 8301/udp 8302 8302/udp 8400 8500 53/udp

VOLUME [""/data""]
ADD ./config /config/

ENV DNS_RESOLVES consul
ENV DNS_PORT 8600

ENTRYPOINT [""/usr/local/bin/consul"", ""agent"", ""-config-dir=/config""]
",alexellis/docker-arm,images/consul-arm/Dockerfile
542f8709e11698d03105126ec977d0236b67a794,787,"FROM rancher/hadoop-base:v0.2.0

RUN apt-get update && apt-get install -y --no-install-recommends openjdk-7-jre-headless \
    curl \
    jq \
    maven \
    python \
    git \
    scala

RUN curl -sL http://d3kbcqa49mib13.cloudfront.net/spark-1.5.2-bin-hadoop2.6.tgz | tar -xz -C /usr/local && \
    ln -s /usr/local/spark-1.5.2-bin-hadoop2.6 /usr/local/spark &&\
    useradd -d /home/spark -m spark && \
    cp -r /usr/local/spark/conf /etc/spark && \
    rm -rf /usr/local/spark/conf && ln -s /etc/spark /usr/local/spark/conf && \
    mkdir -p /usr/local/spark/logs && chown -R spark:spark /usr/local/spark/logs

VOLUME [""/etc/spark""]
VOLUME [""/spark/work""]

ADD ./*.sh /

USER spark
ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64
ENV SPARK_HOME /usr/local/spark

CMD [""/bin/bash""]
",rancher/compose-templates,spark/containers/0.1.0/spark/Dockerfile
a2a0a9f179368c84acae783af54a85bd23255ea1,633,"# https://www.ansible.com/
#
# docker run --rm \
# 	-it \
# 	-v ${PWD}/hosts:/etc/ansible/hosts \
# 	-v ${PWD}/ansible.cfg:/etc/ansible/ansible.cfg \
# 	-v ${HOME}/.ssh:/root/.ssh:ro \
# 	ansible all -m ping
#
FROM alpine:latest
MAINTAINER Christian Koep <christiankoep@gmail.com>

RUN builddeps=' \
		python-dev \
		py-pip \
		musl-dev \
		openssl-dev \
		libffi-dev \
		gcc \
		' \
	&& apk --no-cache add \
	ca-certificates \
	python \
	py-paramiko \
	py-yaml \
	py-jinja2 \
	py-httplib2 \
	$builddeps \
	&& pip install --upgrade pip \
	&& pip install \
		ansible \
		six \
	&& apk del --purge $builddeps

ENTRYPOINT [ ""ansible"" ]
",jfrazelle/dockerfiles,ansible/Dockerfile
b18be5e82301f067f6066e550aece8e762c56501,35,"FROM node:0.10-onbuild
EXPOSE 8080
",rangle/the-clusternator,examples/node-mongo/app/Dockerfile
9693e9370ae8044cc2c4dcdd361049c3f26619a2,338,"FROM iron/base:edge

RUN echo '@edge http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories
RUN echo '@community http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories

RUN apk update && apk upgrade
RUN apk add curl nodejs-dev@community nodejs@community
RUN npm install -g npm
RUN rm -rf /var/cache/apk/*
",coolhacks/docker-hacks,micro/node/dev/Dockerfile
8f6667f39e6b6fccae310c8ac630ce5a71b42d11,805,"FROM smebberson/alpine-consul-base:4.0.0
MAINTAINER Scott Mebberson <scott@scottmebberson.com>

# Install nginx
RUN echo ""http://dl-4.alpinelinux.org/alpine/v3.2/main"" >> /etc/apk/repositories && \
    apk add --update nginx=1.8.1-r0 && \
    rm -rf /var/cache/apk/* && \
    chown -R nginx:www-data /usr/share/nginx && \
    ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log && \
    addgroup consul-template nginx

# Add the files
ADD root /

# Setup permissions to allow consul-template to manage nginx
RUN mkdir /etc/services.d/nginx/supervise/ && \
    mkfifo /etc/services.d/nginx/supervise/control && \
    chown -R root:s6 /etc/services.d/nginx/ && \
    chmod g+w /etc/services.d/nginx/supervise/control

# Expose the ports for nginx
EXPOSE 80 443
",smebberson/docker-alpine,alpine-consul-nginx/Dockerfile
ccd7bbe95cd7fcd93f8a21c806088700573e60a9,531,"# phpSysInfo
# VERSION       1

FROM ubuntu:14.04

MAINTAINER phpSysInfo

RUN apt-get install -y apache2 php5 git

RUN git clone https://github.com/phpsysinfo/phpsysinfo.git /var/www/html/phpsysinfo
RUN cp /var/www/html/phpsysinfo/phpsysinfo.ini.new /var/www/html/phpsysinfo/phpsysinfo.ini

ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_PID_FILE /var/run/apache2/apache2.pid

CMD [""/usr/sbin/apache2"", ""-D"", ""FOREGROUND""]

EXPOSE 80
",nightflyza/Ubilling,phpsysinfo/Dockerfile
e2f7206221ed35b7e42fe6c24495e2caa73d513f,38,"FROM golang:1.4.2-onbuild
EXPOSE 9000
",coolhacks/docker-hacks,examples/docker-multi-tenancy/Dockerfile
badfb921a72d3f2e273b9daf9ca4bcf1f89ec485,316,"FROM java:openjdk-8-jre
MAINTAINER Emerson Farrugia <emerson@openmhealth.org>

ENV SERVER_PREFIX /opt/omh-dsu-ri/resource-server
 
RUN mkdir -p $SERVER_PREFIX
ADD resource-server.jar $SERVER_PREFIX/
EXPOSE 8083

CMD /usr/bin/java -jar $SERVER_PREFIX/resource-server.jar --spring.config.location=file:$SERVER_PREFIX/
",openmhealth/omh-dsu-ri,resource-server/docker/Dockerfile
73ccb38f398e090ea56f28161011c09ba4366bc1,383,"FROM java:6b35

MAINTAINER roland@jolokia.org

ENV JOLOKIA_VERSION 1.3.1

# Add environment setup script
ADD jolokia_opts /bin/

RUN chmod 755 /bin/jolokia_opts && mkdir /opt/jolokia && wget http://central.maven.org/maven2/org/jolokia/jolokia-jvm/1.3.1/jolokia-jvm-1.3.1-agent.jar -O /opt/jolokia/jolokia.jar

# Print out the version
CMD java -jar /opt/jolokia/jolokia.jar --version
",rhuss/docker-java-jolokia,openjdk-6/Dockerfile
f75a56f02c914ea96e2d8430df0a66700767bf05,7845,"FROM tutum/centos:centos6
MAINTAINER Eric Stiles <ets04uga@yahoo.com>

#######################################
# install necessary OS packages
RUN yum -y install which && \
    yum -y install libaio && \
    yum -y install glibc.i686 && \
    yum -y install sudo && \
    yum -y install tar && \
    yum -y install unzip.x86_64

#######################################
# environment variables

# user information
ENV USER endeca
ENV USER_HOME_DIR /home/$USER

# environment variable for local location
ENV LOCAL_SCRIPTS scripts
ENV LOCAL_TOOLS tools

# environment variables for installables
ENV BASE_TMP_INSTALL /tmp
ENV BASE_TMP_ENDECA_INSTALL $BASE_TMP_INSTALL/endeca
ENV BASE_TMP_PACKAGE_INSTALL $BASE_TMP_ENDECA_INSTALL/packages

# environment variables for endeca location
ENV BASE_DIR /appl
ENV BASE_ENDECA_DIR $BASE_DIR/endeca
ENV SCRIPT_DIR $BASE_ENDECA_DIR/bin

# platform services silent install specific env variables
ENV ENDECA_HTTP_SERVICE_PORT 8888
ENV ENDECA_HTTP_SERVICE_SHUTDOWN_PORT 8090
ENV ENDECA_CONTROL_SYSTEM_JCD_PORT 8088
ENV RUN_EAC_CONTROLLER Y
ENV ENDECA_MDEX_INSTALL_DIR $BASE_ENDECA_DIR/MDEX/6.4.1.2
ENV INSTALL_REF_APPS Y

# CAS silent install specific env variables
ENV CAS_PORT 8500
ENV CAS_SHUTDOWN_PORT 8506
ENV CAS_HOST localhost

#######################################
# create directories for copying initial endeca packages
RUN mkdir -p $BASE_TMP_PACKAGE_INSTALL && \
    chmod -R 777 $BASE_TMP_ENDECA_INSTALL

# directory for final install of endeca created as part of script directory
RUN mkdir -p $SCRIPT_DIR
RUN chmod -R 755 $SCRIPT_DIR

#######################################
# Copy script that creates unique password for root and other scripts
ADD $LOCAL_SCRIPTS/modsudoers.sh /
ADD $LOCAL_SCRIPTS/setup*.sh /
ADD $LOCAL_SCRIPTS/start.sh $SCRIPT_DIR/
ADD $LOCAL_SCRIPTS/shutdown.sh $SCRIPT_DIR/
ADD $LOCAL_SCRIPTS/captureEndecaLogs.sh $SCRIPT_DIR/
ADD $LOCAL_SCRIPTS/installDiscoverApp.sh $SCRIPT_DIR/

#######################################
# Set properties for scripts to be executable
RUN chmod +x /*.sh
RUN chmod +x $SCRIPT_DIR

#######################################
#Run commands to create endeca user and modify sudoers
RUN /setup.sh

#######################################
# start copying across all endeca packages
#
#mdex_6.4.1.2.763315_x86_64pc-linux.sh
#presAPI_6.4.1.2.763315_x86_64pc-linux.tgz
ADD $LOCAL_TOOLS/V40319-01.zip $BASE_TMP_PACKAGE_INSTALL/V40319-01.zip

#platformservices_614734339_x86_64pc-linux.sh
ADD $LOCAL_TOOLS/V40324-01.zip $BASE_TMP_PACKAGE_INSTALL/V40324-01.zip

#ToolsAndFrameworks
ADD $LOCAL_TOOLS/V37716-01.zip $BASE_TMP_PACKAGE_INSTALL/V37716-01.zip

#cas-3.1.2.1-x86_64pc-linux.RC2.sh
ADD $LOCAL_TOOLS/V40311-01.zip $BASE_TMP_PACKAGE_INSTALL/V40311-01.zip

#relevancy ranking tool
#ADD $LOCAL_TOOLS/V31171-01.zip $BASE_TMP_PACKAGE_INSTALL/V31171-01.zip

#######################################
# Unzip all packages to get install scripts and files
RUN unzip $BASE_TMP_PACKAGE_INSTALL/V40319-01.zip -d $BASE_TMP_ENDECA_INSTALL && \
    unzip $BASE_TMP_PACKAGE_INSTALL/V40324-01.zip -d $BASE_TMP_ENDECA_INSTALL && \
    unzip $BASE_TMP_PACKAGE_INSTALL/V40311-01.zip -d $BASE_TMP_ENDECA_INSTALL
#RUN unzip $BASE_TMP_PACKAGE_INSTALL/V35744-01.zip -d $BASE_TMP_ENDECA_INSTALL
#RUN unzip $BASE_TMP_PACKAGE_INSTALL/V31171-01.zip -d $BASE_TMP_ENDECA_INSTALL

# set permissions of scripts to run
RUN chmod +x $BASE_TMP_INSTALL/**/*.sh

#######################################
# MDEX INSTALLATION FOLLOWS
RUN $BASE_TMP_ENDECA_INSTALL/mdex_6.4.1.2.763315_x86_64pc-linux.sh --target $BASE_DIR

# copy mdex environment variables to .bashrc
RUN /setup2.sh

# set mdex environment variables for rest of install
ENV ENDECA_MDEX_ROOT $BASE_ENDECA_DIR/MDEX/6.4.1.2
ENV PATH $ENDECA_MDEX_ROOT/bin:$PATH

#######################################
# PLATFORM INSTALLATION FOLLOWS

#create silent install text file
RUN echo $ENDECA_HTTP_SERVICE_PORT > $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt && \
    echo $ENDECA_HTTP_SERVICE_SHUTDOWN_PORT >> $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt && \
    echo $ENDECA_CONTROL_SYSTEM_JCD_PORT >> $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt && \
    echo $RUN_EAC_CONTROLLER >> $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt && \
    echo $ENDECA_MDEX_INSTALL_DIR >> $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt && \
    echo $INSTALL_REF_APPS >> $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt

# install platform services
RUN $BASE_TMP_ENDECA_INSTALL/platformservices_614734339_x86_64pc-linux.sh --silent --target $BASE_DIR < $BASE_TMP_ENDECA_INSTALL/platformservices-silent.txt

RUN cat $BASE_ENDECA_DIR/PlatformServices/workspace/setup/installer_sh.ini >> $USER_HOME_DIR/.bashrc
RUN source $USER_HOME_DIR/.bashrc

#RUN SETUP

# set platform services variables for rest of install
ENV VERSION 6.1.4
ENV BUILD_VERSION 6.1.4.734339
ENV ARCH_OS x86_64pc-linux
ENV PRODUCT IAP
ENV ENDECA_INSTALL_BASE $BASE_DIR
ENV ENDECA_ROOT $BASE_ENDECA_DIR/PlatformServices/6.1.4
ENV PERLLIB $ENDECA_ROOT/lib/perl:$ENDECA_ROOT/lib/perl/Control:$ENDECA_ROOT/perl/lib:$ENDECA_ROOT/perl/lib/site_perl:$PERLLIB
ENV PERL5LIB $ENDECA_ROOT/lib/perl:$ENDECA_ROOT/lib/perl/Control:$ENDECA_ROOT/perl/lib:$ENDECA_ROOT/perl/lib/site_perl:$PERL5LIB
ENV PATH $ENDECA_ROOT/bin:$ENDECA_ROOT/perl/bin:$ENDECA_ROOT/utilities:$PATH
ENV ENDECA_CONF $BASE_ENDECA_DIR/PlatformServices/workspace

#  ENDECA_REFERENCE_DIR points to the directory the reference implementations
#  are installed in.  It is not required to run any Endeca software.
ENV ENDECA_REFERENCE_DIR $BASE_ENDECA_DIR/PlatformServices/reference

#######################################
# TOOLS AND FRAMEWORKS INSTALLATION FOLLOWS
RUN unzip $BASE_TMP_PACKAGE_INSTALL/V37716-01.zip -d $BASE_ENDECA_DIR

# set tools and frameworks variables for rest of install
ENV ENDECA_TOOLS_ROOT $BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.2/
ENV ENDECA_TOOLS_CONF $BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.2/server/workspace

RUN echo 'ENDECA_TOOLS_ROOT=$BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.2/' >> $USER_HOME_DIR/.bashrc
RUN echo 'ENDECA_TOOLS_CONF=$BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.2/server/workspace' >> $USER_HOME_DIR/.bashrc
RUN source $USER_HOME_DIR/.bashrc

#######################################
# CAS INSTALLATION FOLLOWS

#create silent install text file
RUN echo $CAS_PORT > $BASE_TMP_ENDECA_INSTALL/cas-silent.txt && \
    echo $CAS_SHUTDOWN_PORT >> $BASE_TMP_ENDECA_INSTALL/cas-silent.txt && \
    echo $CAS_HOST >> $BASE_TMP_ENDECA_INSTALL/cas-silent.txt

#install CAS
RUN $BASE_TMP_ENDECA_INSTALL/cas-3.1.2.1-x86_64pc-linux.RC2.sh --silent --target $BASE_DIR < $BASE_TMP_ENDECA_INSTALL/cas-silent.txt

#######################################
#
# TODO TODO TODO TODO
#
# install relevancy evaluator
#RUN mv /tmp/endeca/Endeca/Solutions $BASE_ENDECA_DIR

#RUN cp $BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.1/assembler/lib/endeca_navigation-6.4.0.jar $BASE_ENDECA_DIR/Solutions/relrankEvaluator-2.1.2/relrankEvaluator/WEB-INF/lib/endeca_navigation.jar

# write context into relrankEvaluator.xml file
#RUN /setup5.sh

# place correct extensions file
#ADD tools/ws-extensions.xml $BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.1/server/workspace/conf/ws-extensions.xml

# place correct menu items
#ADD tools/ws-mainMenu.xml $BASE_ENDECA_DIR/ToolsAndFrameworks/3.1.1/server/workspace/conf/ws-mainMenu.xml

#######################################
# create apps directory
RUN mkdir $BASE_ENDECA_DIR/apps

#######################################
# set user and permissions to endeca
RUN chown -R endeca.endeca $BASE_ENDECA_DIR/
RUN chmod -R 755 $BASE_ENDECA_DIR/

#######################################
# install is done start cleanup to remove initial packages
RUN rm -rf $BASE_TMP_ENDECA_INSTALL
RUN rm /setup*.sh

ENV AUTHORIZED_KEYS **None**

EXPOSE 22
CMD [""/run.sh""]",ericstiles/OracleCommerceOnDocker,endeca-3.1.2/Dockerfile
5180ddc428bb8d377959a2078c4b42b12aefcde5,307,"FROM anroots/sensu

ENV DOCKERCLOUD_NODE_FQDN= DOCKERCLOUD_IP_ADDRESS= SUBSCRIPTIONS=

COPY conf.d /etc/sensu/conf.d/

CMD dockerize -template /etc/sensu/conf.d/rabbitmq.tmpl:/etc/sensu/conf.d/rabbitmq.json \
	-wait tcp://$RABBITMQ_PORT_5672_TCP_ADDR:5672 \
	/opt/sensu/bin/sensu-client -d /etc/sensu/conf.d",anroots/sensu-stack,client/Dockerfile
42e40db12b6676b25047a2a1873df2b603ae56eb,2016,"
FROM ubuntu:14.10
MAINTAINER mithro@mithis.com

# Update the Ubuntu image to prevent it occuring below
#RUN \
#  apt-get update && \
#  apt-get upgrade

# Add the kicad PPA, update packages, install dependencies, then kicad
RUN \
  echo 'APT::Get::Assume-Yes ""true"";' > /etc/apt/apt.conf.d/yes && \
  apt-get update && \
  export DKICAD_INSTALL=/tmp/kicad-install.sh && \
  python3 -c ""import sys as s; from urllib.request import urlopen as o; s.stdout.detach().write(o(s.argv[1]).read())"" \
    ""http://bazaar.launchpad.net/~kicad-product-committers/kicad/product/download/head:/kicadinstall.sh-20131017152909-uyumxtw74s418lqr-1/kicad-install.sh"" > $DKICAD_INSTALL && \
  md5sum $DKICAD_INSTALL && \
  chmod a+rx $DKICAD_INSTALL && \
  $DKICAD_INSTALL --install-or-update && \
  $DKICAD_INSTALL --remove-sources && \
  apt-get remove \
    bzr bzrtools build-essential cmake cmake-curses-gui debhelper doxygen \
    libbz2-dev libcairo2-dev libglew-dev libssl-dev libwxgtk3.0-dev && \
  apt-get autoremove && \
  rm $DKICAD_INSTALL && \
  rm /etc/apt/apt.conf.d/yes

# Add the kicad user
#RUN adduser --disabled-password --gecos """" kicad
#USER kicad
# Download the .pretty component libraries
#ENV DKICAD_FPTABLE /home/kicad/.config/kicad/fp-lib-table
#ENV DKICAD_LIBINSTALL /home/kicad/.config/kicad/library-repos-install.sh
#ENV DKICAD_PRETTY /home/kicad/kicad_sources/library-repos
#RUN \
#  mkdir -p ~/.config/kicad/ && \
#  curl ""https://raw.githubusercontent.com/KiCad/kicad-library/master/template/fp-lib-table.for-pretty"" > $DKICAD_FPTABLE && md5sum $DKICAD_FPTABLE && \
#  curl ""http://bazaar.launchpad.net/~kicad-product-committers/kicad/product/download/head:/libraryreposinstall.-20131202165949-wv7mnbj220s2m4cy-1/library-repos-install.sh"" > $DKICAD_LIBINSTALL && chmod a+rx $DKICAD_LIBINSTALL && md5sum $DKICAD_LIBINSTALL && \
#  mkdir -p $DKICAD_PRETTY && $DKICAD_LIBINSTALL --install-or-update && \
#  ls -l $DKICAD_PRETTY
#ENV KISYSMOD /home/kicad/kicad_sources/library-repos
#WORKDIR /home/kicad/
",mithro/docker-kicad,kicad-src/Dockerfile
872438689c48551cb1feed159a9909c05f5cab5d,90,"FROM busybox:latest
VOLUME [""/etc/ssl/certs""]
COPY deploybot /
ENTRYPOINT [""/deploybot""]

",builderscon/octav,gke/images/deploybot/Dockerfile
183e831c3b45a4ae14ea79ea2cc2f409ae836d46,224,"FROM      ubuntu:latest

# Copy testrun.sh files into the container

ADD .   /src/

run ls -la /src

run cp /src/folderA/testAddFolder.sh /usr/local/bin/ && chmod +x /usr/local/bin/testAddFolder.sh

CMD [""testAddFolder.sh""]
",docker-java/docker-java,src/test/resources/buildTests/ADD/folder/Dockerfile
4c3ff5a98d76ac72086da03e7325a88025afc45f,310,"FROM projectatomic/atomicapp:0.6.0

MAINTAINER Red Hat, Inc. <container-tools@redhat.com>

LABEL io.projectatomic.nulecule.specversion=""0.0.2"" \
      io.projectatomic.nulecule.providers=""kubernetes,docker,openshift""

ADD /Nulecule gpl-3.0.txt /application-entity/
ADD /artifacts /application-entity/artifacts
",projectatomic/nulecule-library,postgresql-centos7-atomicapp/Dockerfile
23d314b3f59465a72a9b4638c09c648af1d8544d,2021,"# Copyright 2014 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Normal Linux builder
# Docker tag gcr.io/go-dashboard-dev/linux-x86-std (staging)
# and gcr.io/symbolic-datum-552/linux-x86-std (prod)

FROM debian:wheezy
MAINTAINER golang-dev <golang-dev@googlegroups.com>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update
RUN apt-get install -y --no-install-recommends ca-certificates
# Optionally used by runtime tests for gdb:
RUN apt-get install -y --no-install-recommends gdb
# Optionally used by some net/http tests:
RUN apt-get install -y --no-install-recommends strace
# For building Go's bootstrap 'dist' prog
RUN apt-get install -y --no-install-recommends gcc libc6-dev
# For 32-bit builds:
# TODO(bradfitz): move these into a 386 image that derives from this one.
RUN apt-get install -y --no-install-recommends libc6-dev-i386 gcc-multilib
# For downloading Go 1.4:
RUN apt-get install -y --no-install-recommends curl

# And misc basic tools:
RUN apt-get install -y --no-install-recommends procps lsof psmisc

# Required by x/mobile repo:
RUN apt-get install -y --no-install-recommends libgles2-mesa-dev libopenal-dev fonts-droid

RUN mkdir -p /go1.4-amd64 && (curl --silent https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz | tar -C /go1.4-amd64 -zxv)
RUN mv /go1.4-amd64/go /go1.4 && rmdir /go1.4-amd64

RUN curl -o /usr/local/bin/stage0 https://storage.googleapis.com/go-builder-data/buildlet-stage0.linux-amd64-kube
RUN chmod +x /usr/local/bin/stage0

# TODO(evanbrown): optimize for image size and reduced layers
RUN rm -rf /var/lib/apt/lists /usr/share/doc
RUN rm -rf /go1.4/pkg/linux_amd64_race /go1.4/api /go1.4/blog /go1.4/doc /go1.4/misc /go1.4/test
RUN find /go1.4 -type d -name testdata | xargs rm -rf
RUN rm -rf /go1.4/pkg/linux_amd64_race /go1.4/test /go1.4/api
RUN (cd /usr/share/locale/ && ls -1 | grep -v en | xargs rm -rf)
RUN rm -rf /var/cache/debconf/*
RUN rm -rf /usr/share/man
",golang/build,env/linux-x86-std-kube/Dockerfile
22c99c2d3982e74a7b8fc9475e36671b67ca141a,359,"# Copyright 2015 basebuilder authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# this file describes how to build tsuru python3 image
# to run it:
# 1 - tsuru-admin platform-add python3 -d https://raw.github.com/tsuru/basebuilder/master/python3/Dockerfile

FROM	tsuru/python3
",tsuru/basebuilder,python3/Dockerfile
74d928f612efb152e2ad17ea7f07787673a64104,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.0.5-1-x86_64.pkg.tar.xz /tmp/php-5.0.5-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.0.5-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.0.5/Dockerfile
69ba7803113f402799945be4dde88c1a3bf80306,46,"FROM nginx:1.9

COPY ./nginx.conf /etc/nginx/
",mrkschan/nginxbeat,test/etc/nginx/Dockerfile
370d99f7fd5a80fa0292fa45a4f0ed6c53714ecc,172,"FROM airhacks/payara-configured
MAINTAINER Adam Bien, adam-bien.com
# For more information about ping see: https://github.com/AdamBien/ping/
ADD ping.war ${DEPLOYMENT_DIR}
",AdamBien/docklands,payara-ping/Dockerfile
e2b0d510b5f2b8ec67840d8fab408dfd6c77181e,675,"FROM gliderlabs/alpine
MAINTAINER kost, https://github.com/kost/docker-alpine

# Install redis
RUN apk add --update redis && \
    rm -rf /var/cache/apk/* && \
    mkdir /data && \
    chown -R redis:redis /data && \
    sed -i 's#logfile /var/log/redis/redis.log#logfile """"#i' /etc/redis.conf && \
    sed -i 's#daemonize yes#daemonize no#i' /etc/redis.conf && \
    sed -i 's#dir /var/lib/redis/#dir /data#i' /etc/redis.conf && \
    echo -e ""# placeholder for local options\n"" > /etc/redis-local.conf && \
    echo -e ""include /etc/redis-local.conf\n"" >> /etc/redis.conf

VOLUME [""/data""]

USER redis
# Expose the ports for redis
EXPOSE 6379

ENTRYPOINT [""redis-server""]

",kost/docker-alpine,alpine-redis/Dockerfile
473e65832d2e23bb1ace0e4c980908f31db0229b,707,"FROM ubuntu:14.04
MAINTAINER jdoliner@pachyderm.io

# Install FUSE
RUN \
  apt-get update -yq && \
  apt-get install -yq --no-install-recommends \
    git \
    ca-certificates \
    curl \
    fuse && \
  apt-get clean && \
  rm -rf /var/lib/apt

# Install Go 1.6.0
RUN \
  curl -sSL https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz | tar -C /usr/local -xz && \
  mkdir -p /go/bin
ENV PATH /usr/local/go/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
ENV GOPATH /go
ENV GOROOT /usr/local/go

# Install Pachyderm job-shim
RUN go get github.com/pachyderm/pachyderm && \
	go get github.com/pachyderm/pachyderm/src/server/cmd/job-shim && \
    cp $GOPATH/bin/job-shim /job-shim
",pachyderm/pachyderm,etc/user-job/Dockerfile
04a663892cba3f8ddb1f31a4861bde823e36b4f4,149,"FROM flynn/busybox:trusty-20160217

ADD bin/flanneld /bin/flanneld
ADD bin/flannel-wrapper /bin/flannel-wrapper

ENTRYPOINT [""/bin/flannel-wrapper""]
",flynn/flynn,flannel/Dockerfile
df00ff6c38be8e2fad36aa6eafa4ec73f7d107e2,465,"# Go cross compiler (xgo): Go 1.6 layer
# Copyright (c) 2014 PÃ©ter SzilÃ¡gyi. All rights reserved.
#
# Released under the MIT license.

FROM tudorg/xgo-deb6-base

MAINTAINER Tudor Golubenco <tudor@elastic.co>

# Configure the root Go distribution and bootstrap based on it
RUN \
  export ROOT_DIST=""https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz"" && \
  export ROOT_DIST_SHA1=""b8318b09de06076d5397e6ec18ebef3b45cd315d"" && \
  \
  $BOOTSTRAP_PURE
",radoondas/apachebeat,vendor/github.com/elastic/beats/dev-tools/packer/docker/xgo-image-deb6/go-1.6/Dockerfile
5767d75daa3ca06ccabeaffcb9f22f94b87e10c7,887,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM ubuntu:16.04
MAINTAINER Amir Sanjar

COPY puppetize.sh /tmp/puppetize.sh

RUN bash /tmp/puppetize.sh
",apache/bigtop,docker/bigtop-puppet/ubuntu-16.04/Dockerfile
bdc7bafd27651fab13c2accc0f1f17de0ff8dfd5,1256,"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Start from a Java image.
FROM java:7

# Ignite version
ENV IGNITE_VERSION 1.5.0.final

WORKDIR /opt/ignite

ADD http://www.us.apache.org/dist/ignite/1.5.0.final/apache-ignite-fabric-1.5.0.final-bin.zip /opt/ignite/ignite.zip

# Ignite home
ENV IGNITE_HOME /opt/ignite/apache-ignite-fabric-1.5.0.final-bin

RUN unzip ignite.zip

RUN rm ignite.zip

# Copy sh files and set permission
ADD ./run.sh $IGNITE_HOME/

RUN chmod +x $IGNITE_HOME/run.sh

CMD $IGNITE_HOME/run.sh",apache/ignite,modules/docker/1.5.0.final/Dockerfile
d44d65e2c14438b585c80a1d46af413dfdfce6de,553,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.4.2-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/4.4.2/Dockerfile
cbbf3293f1251a224c01b0346a91bcb403b622a4,339,"FROM ubuntu:latest

MAINTAINER Evlos <4tyle8@gmail.com>

RUN apt-get update && apt-get -y upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y install supervisor

RUN mkdir -p /app_config && \
	cd /app_config

ADD supervisord.conf /app_config/supervisord.conf

VOLUME [""/app""]
EXPOSE 60000
WORKDIR /app_config
CMD [""/usr/bin/supervisord""]
",Evlos/dockerfile,sentry/Dockerfile
9d73f9ce89cd0fd1cdd784156398bcd0a485d0b7,1592,"# CEPH BASE IMAGE
# CEPH VERSION: Hammer
# CEPH VERSION DETAIL: 0.94.x

FROM ubuntu:14.04
MAINTAINER SÃ©bastien Han ""seb@redhat.com""

ENV ETCDCTL_VERSION v2.2.0
ENV ETCDCTL_ARCH linux-amd64
ENV CEPH_VERSION hammer

ENV KVIATOR_VERSION 0.0.7
ENV CONFD_VERSION 0.10.0

# Install prerequisites
RUN apt-get update && apt-get install -y wget unzip runit

# Install Ceph
RUN wget -q -O- 'https://download.ceph.com/keys/release.asc' | apt-key add -
RUN echo deb http://download.ceph.com/debian-${CEPH_VERSION}/ trusty main | tee /etc/apt/sources.list.d/ceph-${CEPH_VERSION}.list
RUN apt-get update && apt-get install -y --force-yes ceph radosgw && \
apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install etcdctl
RUN wget -q -O- ""https://github.com/coreos/etcd/releases/download/${ETCDCTL_VERSION}/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}.tar.gz"" |tar xfz - -C/tmp/ etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl
RUN mv /tmp/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl /usr/local/bin/etcdctl

#install kviator
ADD https://github.com/AcalephStorage/kviator/releases/download/v${KVIATOR_VERSION}/kviator-${KVIATOR_VERSION}-linux-amd64.zip /tmp/kviator.zip
RUN cd /usr/local/bin && unzip /tmp/kviator.zip && chmod +x /usr/local/bin/kviator && rm /tmp/kviator.zip

# Install confd
ADD https://github.com/kelseyhightower/confd/releases/download/v${CONFD_VERSION}/confd-${CONFD_VERSION}-linux-amd64 /usr/local/bin/confd
RUN chmod +x /usr/local/bin/confd && mkdir -p /etc/confd/conf.d && mkdir -p /etc/confd/templates

ADD entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]

",ceph/ceph-docker,ceph-releases/hammer/ubuntu/14.04/base/Dockerfile
e8bd0bbe6597bdd6e133e08545783ba0e79e0425,225,"FROM martinrusev/amonbase:latest

RUN apt-get update
RUN apt-get install -y gdebi-core
ADD EDGIUM_DEB_FILE var/edgium.deb

RUN gdebi -n /var/edgium.deb


RUN ls -lh /usr/local/edgium/
RUN edgium install boo

CMD [""/bin/bash""]",martinrusev/edgium,packaging/debian/Dockerfile
9628b745f365a2919802fc654589106824df845a,1023,"FROM golang:1.5.1

MAINTAINER Diogo Monica ""diogo@docker.com""

RUN apt-get update && apt-get install -y \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

RUN buildDeps=' \
        autoconf \
        automake \
        build-essential \
        libtool \
        libssl-dev \
        libsqlite3-dev \
    ' \
    && set -x \
    && apt-get update && apt-get install -y $buildDeps --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && git clone https://github.com/opendnssec/SoftHSMv2.git /usr/src/SoftHSMv2 \
    && cd /usr/src/SoftHSMv2 \
    && sh autogen.sh \
    && ./configure --with-objectstore-backend-db \
    && make \
    && make install \
    && rm -rf /usr/src/SoftHSMv2 \
    && apt-get purge -y --auto-remove $buildDeps \
    && mkdir -p /softhsm2/tokens

# Default locations for the SoftHSM2 configuration and PKCS11 bindings
ENV SOFTHSM2_CONF=""/etc/softhsm2/softhsm2.conf""
ENV LIBDIR=""/usr/local/lib/softhsm/""
COPY ./softhsm2.conf /etc/softhsm2/softhsm2.conf

ENTRYPOINT [""softhsm2-util""]

",docker/notary,signer/Dockerfile
b98b4bde63a8bde0a3d45f9f85f5011f5e17f901,326,"# https://pages.github.com/versions/
FROM ruby:2.1-slim

RUN apt-get update && apt-get install -y --no-install-recommends \
		gcc make patch \
		nodejs python-pygments \
	&& rm -rf /var/lib/apt/lists/*

RUN gem install github-pages

WORKDIR /blog
EXPOSE 4000
CMD [""jekyll"", ""serve"", ""--host"", ""0.0.0.0""]

ONBUILD COPY . /blog
",tianon/dockerfiles,github-pages/Dockerfile
db7f3b563d21603b6aeedae2394b48f19f73a2a4,553,"FROM nodesource/vivid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_0.12/pool/main/n/nodejs/nodejs_0.12.3-1nodesource1~vivid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/vivid/node/0.12.3/Dockerfile
78eb1d4e25f8a1a6760eb98434b0ff8e7d72550f,695,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/hhvm-nginx:ubuntu-16.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/hhvm:ubuntu-16.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm
ENV WEB_PHP_SOCKET  127.0.0.1:9000

COPY conf/ /opt/docker/

# Install nginx
RUN /usr/local/bin/apt-install \
        nginx \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-nginx --role webdevops-hhvm-nginx \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/hhvm-nginx/ubuntu-16.04/Dockerfile
ce564499b7dd2454f84cc7c6c03a38d42c779c92,557,"# Our custom docker image with app
FROM fedora:23
MAINTAINER <RH>

LABEL company=""Redhat"" product=""CFME"" environment=""dev"" tier=""test""

# mandatory packages
RUN dnf -y install git python-pip gcc postgresql-devel libxml2-devel libxslt-devel zeromq3-devel libcurl-devel python-devel redhat-rpm-config libffi-devel openssl-devel \
tigervnc-server fluxbox xterm java-1.8.0-openjdk.x86_64 \
ftp://rpmfind.net/linux/fedora/linux/releases/22/Everything/x86_64/os/Packages/f/firefox-38.0.1-1.fc22.x86_64.rpm \
python-setuptools sshpass findutils \
&& dnf clean all
",RedHatQE/cfme_tests,dockerfiles/cfme_tests_base/Dockerfile
94cbcfa632c67855390799bb0191a60b9356b39f,1364,"#################################################################
# Dockerfile
#
# Version:          1
# Software:         ProteoWizard
# Software Version: 3_0_9740
# Description:      tools and software libraries that facilitate proteomics data analysis.
# Website:          http://proteowizard.sourceforge.net/
# Tags:             Proteomics
# Provides:         ProteoWizard 3_0_9740
# Base Image:       biodckr/biodocker:latest
# Build Cmd:        docker build --rm -t biodckr/pwiz 3_0_9740/.
# Pull Cmd:         docker pull biodckr/pwiz
# Run Cmd:          docker run --rm biodckr/pwiz
#################################################################

# Set the base image to biodckr/biodocker
FROM biodckr/biodocker:latest

################## BEGIN INSTALLATION ###########################

USER biodocker

RUN ZIP=pwiz-bin-linux-x86_64-gcc48-release-3_0_9740.zip && \
    wget https://github.com/BioDocker/software-archive/releases/download/proteowizard/$ZIP -O /tmp/$ZIP && \
    unzip /tmp/$ZIP -d /home/biodocker/bin/pwiz/ && \
    chmod -R 755 /home/biodocker/bin/pwiz/* && \
    rm /tmp/$ZIP

ENV PATH /home/biodocker/bin/pwiz/pwiz-bin-linux-x86_64-gcc48-release-3_0_9740:$PATH

WORKDIR /data/

##################### INSTALLATION END ##########################

# File Author / Maintainer
MAINTAINER Felipe da Veiga Leprevost <felipe@leprevost.com.br>
",BioDocker/containers,proteowizard/3_0_9740/Dockerfile
46aca145f2e7d0b0fc5a9deb8df3927f4f91323d,793,"FROM java:8-alpine

ENV CONSUL_TEMPLATE_VERSION=0.14.0
ENV GRAYLOG_VERSION=1.3.4

RUN apk --update add bash wget

RUN mkdir /graylog

RUN wget -O /graylog/consul-template.zip https://releases.hashicorp.com/consul-template/${CONSUL_TEMPLATE_VERSION}/consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.zip

RUN cd /graylog && unzip /graylog/consul-template.zip
RUN rm /graylog/*.zip

RUN wget -O /graylog/graylog.tgz https://packages.graylog2.org/releases/graylog2-web-interface/graylog-web-interface-${GRAYLOG_VERSION}.tgz
RUN cd /graylog && tar -xzf ./graylog.tgz && rm graylog.tgz

ADD ./entrypoint.sh /graylog/entrypoint.sh
ADD ./start-graylog.sh /graylog/start-graylog.sh

RUN ln -s /graylog/graylog-* /graylog/current

RUN chmod +x /graylog/*.sh

ENTRYPOINT [""/graylog/entrypoint.sh""]
",yanndegat/swarmer,examples/graylog/docker-images/graylog-web/Dockerfile
9a59204c884fe9e98a41b8a7a29083cf53c1583c,770,"#
# This is an openvswitch image meant to enable OpenShift OVS based SDN
#
# The standard name for this image is openshift/openvswitch
#
FROM centos:centos7

COPY scripts/* /usr/local/bin/

RUN curl -L -o /etc/yum.repos.d/origin-next-epel-7.repo https://copr.fedoraproject.org/coprs/maxamillion/origin-next/repo/epel-7/maxamillion-origin-next-epel-7.repo && \
    INSTALL_PKGS=""openvswitch"" && \
    yum install -y $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum clean all && \
    chmod +x /usr/local/bin/*

LABEL io.k8s.display-name=""OpenShift Origin OpenVSwitch Daemon"" \
      io.k8s.description=""This is a component of OpenShift Origin and runs an OpenVSwitch daemon process.""
VOLUME /etc/openswitch
ENV HOME /root
ENTRYPOINT [""/usr/local/bin/ovs-run.sh""]
",openshift/origin,images/openvswitch/Dockerfile
e66fe9ba03402c9fb00fdf71eb00e72aee3eb13a,1124,"FROM debian:jessie

ENV UNISON_VERSION=2.48.4

RUN apt-get update  && apt-get install -y \
    curl \
  && curl -fsSL -o /tmp/Release.key ""http://download.opensuse.org/repositories/home:ocaml/xUbuntu_14.04/Release.key"" \
  && apt-key add - < /tmp/Release.key \
  && sh -c ""echo 'deb http://download.opensuse.org/repositories/home:/ocaml/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/ocaml.list"" \
  && apt-get update -y \
  && apt-get install -y \
    ocaml \
    build-essential \
    exuberant-ctags \
  && curl -fsSL -o /tmp/unison.tar.gz ""http://www.seas.upenn.edu/~bcpierce/unison//download/releases/unison-$UNISON_VERSION/unison-$UNISON_VERSION.tar.gz"" && \
    cd /tmp && tar -xzvf unison.tar.gz && \
    rm -rf unison.tar.gz && \
    cd src \
  && make UISTYLE=text && \
    cp -f unison /usr/local/bin && \
    cp -f unison-fsmonitor /usr/local/bin \
  && apt-get purge -y ocaml build-essential exuberant-ctags \
  && apt-get clean autoclean \
  && apt-get autoremove -y \
  && rm -rf /var/lib/{apt,dpkg,cache,log}/ /tmp/* /var/tmp/*

COPY sync.profile /root/.unison/default.prf
COPY run.sh /run.sh

CMD [""/run.sh""]
",kalabox/kalabox,plugins/kalabox-sharing/dockerfiles/unison/Dockerfile
ca365fc50413c9a82a7297d9d29ff39eda40f1de,653,"From ubuntu
Maintainer Ethan J. Jackson

RUN apt-get update && apt-get install -y \
        default-jre-headless \
        python-minimal \
        wget \
&& wget -qO- http://www-us.apache.org/dist/spark/spark-1.6.1/spark-1.6.1-bin-hadoop2.6.tgz | tar -xzf - \
&& mv /spark* /spark \
&& wget -qO- https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz | tar -xzf - \
&& mv /mysql-connector-java* /mysql-connector-java \
&& apt-get remove --purge -y wget \
&& apt-get autoremove --purge -y \
&& rm -rf /var/lib/lists/* /tmp/* /var/tmp/*

ENV PATH /spark/sbin:/spark/bin:$PATH

Copy run /bin/
Copy log4j.properties /spark/conf
",NetSys/quilt,specs/spark/Dockerfile
9954f7b4e165941391416307dc717f10d0b494fd,99,"FROM alpine

RUN apk update && apk upgrade
RUN apk add ca-certificates
RUN rm -rf /var/cache/apk/*
",coolhacks/docker-hacks,micro/base/Dockerfile
57433add93b1c7ab807715cc3febfa18305e6af6,78,"FROM alpine:3.2
ADD template-srv /template-srv
ENTRYPOINT [ ""/template-srv"" ]
",micro/micro,examples/template/srv/Dockerfile
ea580d4f750617b97723b63387d67c0fa33a8062,543,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_2.x/pool/main/i/iojs/iojs_2.4.0-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/iojs/2.4.0/Dockerfile
b232d290712e7e327a2cdfe85fde04c21fdc32a8,31,"FROM scratch
COPY Dockerfile /
",stackwork/stackwork,src/test/gradle-projects/tag/Dockerfile
cdff0a22867c7e139794ce9945641ccbafc97799,231,"FROM {{ base_docker_image }}
MAINTAINER Jan Provaznik <jprovazn@redhat.com>

# install main packages:
RUN yum -y update; yum clean all;
RUN yum -y install bind-utils bind

EXPOSE 53

# start services:
CMD [""/usr/sbin/named"", ""-f""]
",openshift/openshift-ansible,roles/dns/templates/Dockerfile
80fa3ecc4481dc724fcb6c72d8822a08f7a45bee,1108,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM BASEIMAGE

# If we're building for another architecture than amd64, the CROSS_BUILD_ placeholder is removed so e.g. CROSS_BUILD_COPY turns into COPY
# If we're building normally, for amd64, CROSS_BUILD lines are removed
CROSS_BUILD_COPY qemu-ARCH-static /usr/bin/

# All apt-get's must be in one run command or the
# cleanup has no effect.
RUN DEBIAN_FRONTEND=noninteractive apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y iptables \
    && rm -rf /var/lib/apt/lists/*
",fabric8io/gofabric8,vendor/k8s.io/kubernetes/build/debian-iptables/Dockerfile
844e32dc36e7e4114326d41c3761eab2c49f28db,1046,"FROM debian:jessie
MAINTAINER zealic <zealic@gmail.com>

RUN dpkg --add-architecture i386 && apt-get update \
  && apt-get install -y curl lib32gcc1 lib32stdc++6 libgcc1 libcurl4-gnutls-dev:i386 \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN useradd -u 10999 -m steam
RUN mkdir /DST \
  && chown steam:steam /DST \
  && mkdir -p /home/steam/.klei \
  && chown -R steam:steam /home/steam/.klei

USER steam
RUN mkdir ~/steamcmd
# Visit: http://steamcommunity.com/games/322330/announcements/
# Update DST_SERVER_VERSION to force build new docker image
ENV DST_SERVER_VERSION 180814
RUN cd  ~/steamcmd && curl -SLO ""http://media.steampowered.com/installer/steamcmd_linux.tar.gz"" \
  && tar -xvf steamcmd_linux.tar.gz -C ~/steamcmd && rm steamcmd_linux.tar.gz
RUN ~/steamcmd/steamcmd.sh +login anonymous +force_install_dir /home/steam/steamapps/DST +app_update 343050 validate +quit

USER root
ADD ./bin/* /usr/local/bin/
RUN chmod +x /usr/local/bin/run-dst

USER steam
EXPOSE 10999/udp
VOLUME [""/DST""]
ENTRYPOINT [""/usr/local/bin/run-dst""]
",zealic/dockerfiles,dst_server/Dockerfile
fb18413681d8af9d958ebf9e1d2123ccab6cb40a,931,"FROM debian:wheezy

ENV BITCOIND_VERSION 0.11.2

RUN apt-get update && apt-get install -y curl \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN curl -LsS https://bitcoin.org/bin/${BITCOIND_VERSION}/bitcoin-${BITCOIND_VERSION}-linux.tar.gz | tar -xzf - -C /tmp \
  && chown -R root:root /tmp/bitcoin-${BITCOIND_VERSION}-linux \
  && mv /tmp/bitcoin-${BITCOIND_VERSION}-linux/bin/64/bitcoin-cli /usr/local/bin \
  && mv /tmp/bitcoin-${BITCOIND_VERSION}-linux/bin/64/bitcoind /usr/local/bin \
  && mv /tmp/bitcoin-${BITCOIND_VERSION}-linux/bin/64/test_bitcoin /usr/local/bin \
  && rm -rf /tmp/bitcoin-${BITCOIND_VERSION}-linux

RUN groupadd -r bitcoind \
  && useradd -c ""Bitcoind"" -d /var/lib/bitcoind -g bitcoind -m -r -s /sbin/nologin bitcoind \
  && rm /var/lib/bitcoind/.bash*

ENV HOME /var/lib/bitcoind

USER bitcoind

EXPOSE 8332 8333 18332 18333

VOLUME [""/var/lib/bitcoind""]

ENTRYPOINT [""/usr/local/bin/bitcoind""]
",zealic/docker-library-dst_server,bitcoind/Dockerfile
7523314c7c2b8cd0f492cdadaf07c8cfa273c261,932,"# based on Dockerfile by Brent Baude

FROM openscap-daemon-f22

RUN dnf -y update && dnf -y groupinstall ""Development Tools"" && dnf -y install make wget git && dnf clean all

RUN dnf -y install 'dnf-command(builddep)' && dnf builddep -y atomic openscap-daemon openscap scap-security-guide && dnf -y install libtool && dnf clean all

RUN git clone -b maint-1.2 https://github.com/OpenSCAP/openscap.git && \
    pushd /openscap && ./autogen.sh && \
    ./configure --enable-sce --prefix=/usr && make -j 4 install && popd

RUN git clone https://github.com/OpenSCAP/scap-security-guide.git && \
    pushd /scap-security-guide && make install && popd

RUN git clone https://github.com/OpenSCAP/openscap-daemon && \
    pushd /openscap-daemon && python setup.py install && popd

RUN git clone https://github.com/projectatomic/atomic.git && \
    pushd /atomic && PREFIX=/usr PYLINT=/bin/true make install && \
    popd && rm -rf ./atomic
",OpenSCAP/openscap-daemon,atomic-git/f22_spc/Dockerfile
0809736a1642855c1364230e6066ccd7fe09663d,553,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.3.0-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/4.3.0/Dockerfile
405e6cdf92b655f3a553b3fbd301bd832a56e3ce,710,"# Nginx
#
# VERSION               0.0.1

FROM debian:jessie
MAINTAINER ClÃ¡udio Varandas <cvarandas@gmail.com>

RUN echo 'deb http://mirrors.fe.up.pt/dotdeb/ stable all' >> /etc/apt/sources.list && \
    echo 'deb-src http://mirrors.fe.up.pt/dotdeb/ stable all' >> /etc/apt/sources.list && \
    apt-get update && apt-get install -y wget && \
    wget https://www.dotdeb.org/dotdeb.gpg && \
    apt-key add dotdeb.gpg && \
    apt-get update && \
    apt-get install -y nginx

RUN useradd nginx

ADD nginx.conf /etc/nginx/
ADD projectx.conf /etc/nginx/sites-available/

RUN ln -s /etc/nginx/sites-available/projectx.conf /etc/nginx/sites-enabled/projectx
RUN rm /etc/nginx/sites-enabled/default

CMD [""nginx""]
",kadinho/dockervel,nginx/Dockerfile
8578acdbe1296593f6c5831a167d99161ec27f49,727,"FROM magneticio/vamp-clique-zookeeper:VAMP_VERSION

RUN set -ex && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF && \
    echo ""deb http://repos.mesosphere.io/debian jessie main"" | tee /etc/apt/sources.list.d/mesosphere.list && \
    apt-get update && \
    apt-get -y install lxc marathon=0.15.3-1.0.463.debian81 mesos=0.27.0-0.2.190.debian81 chronos=2.4.0-0.1.20151007110204.debian81 && \
    apt-get clean && apt-get autoremove -y && rm -rf /var/lib/apt/lists/* && \
    mkdir -p /usr/local/marathon

ADD mesos-master.sh mesos-slave.sh marathon.sh chronos.sh /usr/local/marathon/

ADD supervisord.conf /etc/supervisor/supervisord.conf
CMD [""supervisord"", ""-n"", ""-c"", ""/etc/supervisor/supervisord.conf""]
",magneticio/vamp-docker,clique-zookeeper-marathon/Dockerfile
077172672ff99e36228a46e4227403cb1547dcb3,235,"# Base openjdk image

FROM fgrehm/ventriloquist-base

RUN apt-get update && \
    apt-get install -y openjdk-7-jre-headless && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/* && \
    apt-get autoremove && \
    apt-get clean
",fgrehm/ventriloquist,services/openjdk7/Dockerfile
b713f5fdd7bcd1b93140164c1008868441be006f,99,"FROM scratch
MAINTAINER Ivan Pedrazas <ipedrazas@gmail.com>

ADD ping-redis /

CMD [""/ping-redis""]
",ipedrazas/kubernetes-workshop,examples/ping-redis/Dockerfile
42f72293bbe2984684b29156378d1fb769744930,158,"FROM ubuntu:precise

RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		curl \
		wget \
	&& rm -rf /var/lib/apt/lists/*
",docker-library/buildpack-deps,precise/curl/Dockerfile
2001c5011371ec2840190a0fdf80039f0911f7df,87,"FROM ubuntu:14.04
WORKDIR /app
CMD while true ; do nc -l 8080 < /app/index.html ; done
",leighmcculloch/vagrant-docker-compose,example/app/Dockerfile
dbe15458a657f2f7c0f24914ef1df7768c0cbc4f,318,"# Drush Docker Container
FROM drush/drush:base-alpine
MAINTAINER Rob Loach <robloach@gmail.com>

# Set the Drush version.
ENV DRUSH_VERSION 7.3.0

# Install Drush using Composer.
RUN composer global require drush/drush:""$DRUSH_VERSION"" --prefer-dist

# Display which version of Drush was installed
RUN drush --version
",RobLoach/drush-docker,7/alpine/Dockerfile
593b8ba1cdefac9879f975825d8efb2b65dd1640,2621,"FROM rhel:7.2-released

LABEL \
      io.openshift.s2i.scripts-url=image:///usr/libexec/s2i \
      io.s2i.scripts-url=image:///usr/libexec/s2i \
      BZComponent=""openshift-sti-base-docker"" \
      Name=""openshift3/sti-base"" \
      Version=""1.0"" \
      Release=""36"" \
      Architecture=""x86_64""

ENV \
    # DEPRECATED: Use above LABEL instead, because this will be removed in future versions.
    STI_SCRIPTS_URL=image:///usr/libexec/s2i \
    # Path to be used in other layers to place s2i scripts into
    STI_SCRIPTS_PATH=/usr/libexec/s2i \
    # The $HOME is not set by default, but some applications needs this variable
    # TODO: There is a bug in rhel7.1 image where the PATH variable is not exported
    # properly as Docker image metadata, which causes the $PATH variable do not
    # expand properly.
    HOME=/opt/app-root/src \
    PATH=/opt/app-root/src/bin:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# When bash is started non-interactively, to run a shell script, for example it
# looks for this variable and source the content of this file. This will enable
# the SCL for all scripts without need to do 'scl enable'.
COPY contrib/scl_enable /opt/app-root/etc/scl_enable
ENV BASH_ENV=/opt/app-root/etc/scl_enable \
    ENV=/opt/app-root/etc/scl_enable \
    PROMPT_COMMAND="". /opt/app-root/etc/scl_enable""

# This is the list of basic dependencies that all language Docker image can
# consume.
# Also setup the 'openshift' user that is used for the build execution and for the
# application runtime execution.
# TODO: Use better UID and GID values
RUN yum-config-manager --enable rhel-7-server-optional-rpms && \
  INSTALL_PKGS=""autoconf \
  automake \
  bsdtar \
  findutils \
  gcc-c++ \
  gd-devel \
  gdb \
  gettext \
  git \
  libcurl-devel \
  libxml2-devel \
  libxslt-devel \
  lsof \
  make \
  mariadb-devel \
  mariadb-libs \
  openssl-devel \
  patch \
  postgresql-devel \
  procps-ng \
  scl-utils \
  sqlite-devel \
  tar \
  unzip \
  wget \
  which \
  yum-utils \
  zlib-devel"" && \
  mkdir -p ${HOME}/.pki/nssdb && \
  chown -R 1001:0 ${HOME}/.pki && \
  yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
  rpm -V $INSTALL_PKGS && \
  yum clean all -y && \
  useradd -u 1001 -r -g 0 -d ${HOME} -s /sbin/nologin \
      -c ""Default Application User"" default && \
  chown -R 1001:0 /opt/app-root

# Copy executable utilities.
COPY bin/ /usr/bin/

# Directory with the sources is set as the working directory so all STI scripts
# can execute relative to this path.
WORKDIR ${HOME}

ENTRYPOINT [""container-entrypoint""]
CMD [""base-usage""]
",sclorg/rhscl-dockerfiles,rhel7.sti-base/Dockerfile
f6e6015ce54b7488663203f5d9aadf10361e533f,1810,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM php:5.5

RUN echo ""deb http://ftp.us.debian.org/debian jessie-backports main"" | tee -a /etc/apt/sources.list

ENV GRPC_VERSION 0.10.2-1~bpo8+1

RUN apt-get update && apt-get install -y -q php5 php5-dev phpunit php-pear libgrpc-dev=${GRPC_VERSION}

RUN pecl install grpc-alpha
",grpc/grpc-docker-library,0.10/php/Dockerfile
cd300b0a489cb5b23cfe85e326a5899b9bb97c11,2279,"# FROM debian:jessie
FROM gliderlabs/alpine:3.3

# USER
ENV SHELL /bin/zsh
ENV TERM xterm-256colors
ENV USER user
ENV HOME /home/$USER

# RUN \
#     apt-get update &&\
#     apt-get install -y \
#       autoconf \
#       automake \
#       build-essential \
#       cmake \
#       curl \
#       g++ \
#       git \
#       libssl-dev \
#       libtool \
#       libtool-bin \
#       pkg-config \
#       python-dev python-pip python3-dev python3-pip \
#       stow \
#       sudo \
#       tmux \
#       unzip \
#       zsh \
#       &&\
#     git clone https://github.com/neovim/neovim &&\
#     cd neovim &&\
#     make CMAKE_BUILD_TYPE=Release &&\
#     make install &&\
#     cd .. &&\
#     rm -rf ./neovim &&\
#     pip3 install neovim &&\
#     pip2 install neovim &&\
#     apt-get autoremove -y && apt-get clean -y &&\
#     rm -rf /var/lib/apit/lists &&\
#     adduser --disabled-password --gecos '' --shell $SHELL $USER &&\
#     adduser $USER sudo &&\
#     chown -R $USER:$USER $HOME &&\
#     echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

#      build-essential \
#      libssl-dev \
#      libtool-bin \
#      pkg-config \
#      stow  python3-pip
RUN \
    apk --no-cache add \
      autoconf \
      automake \
      build-base \
      cmake \
      curl \
      g++ \
      git \
      libtool \
      linux-headers \
      openssl-dev \
      python-dev py-pip python3-dev \
      sudo \
      tmux \
      unzip \
      zsh \
      &&\
    apk --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ add \
      libtermkey-dev \
      unibilium-dev

RUN \
    git clone https://github.com/neovim/libvterm &&\
    cd libvterm &&\
    make &&\
    make install &&\
    cd .. &\
    rm -rf ./libvterm &&\
    git clone https://github.com/neovim/neovim &&\
    cd neovim &&\
    make CMAKE_BUILD_TYPE=Release &&\
    make install &&\
    cd .. &&\
    rm -rf ./neovim &&\
    pip install neovim &&\
    adduser -D -g '' -s $SHELL $USER &&\
    adduser $USER sudo &&\
    chown -R $USER:$USER $HOME &&\
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers


WORKDIR $HOME
USER $USER

ENTRYPOINT [""zsh"", ""-c"", ""STOW_INSTALL=\""$HOME/.dotfiles/scripts/install.sh\""; [[ -f $STOW_INSTALL ]] && bash $STOW_INSTALL &>/dev/null; zsh -i""]
",slogsdon/develop-on-docker,develop-base/alpine/Dockerfile
6598354d773a0b9626aa668f1e10c78e04360da3,1207,"# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM gcr.io/_b_dev_containers/cloud-dev-java:prod

# Make sure instance is up to date
RUN apt-get update && apt-get upgrade -y  && \
   apt-get install -y  -qq --no-install-recommends

# Add needed packages
RUN apt-get install -y -qq --no-install-recommends

# Install Go
RUN curl -L -s http://golang.org/dl/go1.4.2.linux-amd64.tar.gz | tar -zx -C /usr/local
ENV PATH $PATH:/usr/local/go/bin
ENV GOPATH /go
ENV GOROOT /usr/local/go

# Copy files needed for dind test
ADD shipshape/test/dind/docker/endpoint.sh /endpoint.sh
ADD shipshape/cli/shipshape /shipshape

ENV ONRUN ${ONRUN} ""/endpoint.sh""

EXPOSE 10022

",google/shipshape,shipshape/test/dind/docker/Dockerfile
bffcaa0ced30bc232ebd1809d4b7958ff10577e9,330,"FROM alexcrichton/rust-slave-linux-cross:2016-04-15
USER root

RUN apt-get update
RUN apt-get install -y --no-install-recommends \
  qemu qemu-kvm kmod cpu-checker

ENTRYPOINT [""sh""]

ENV PATH=$PATH:/rust/bin \
    QEMU=freebsd.qcow2 \
    CAN_CROSS=1 \
    CARGO_TARGET_X86_64_UNKNOWN_FREEBSD_LINKER=x86_64-unknown-freebsd10-gcc
",rust-lang/libc,ci/docker/x86_64-unknown-freebsd/Dockerfile
cbc816397daefa0a7592037a1267d4f5f466feea,96,"FROM node

RUN npm install --global \
    bower \
    gulp

WORKDIR /src

CMD [""gulp"", ""watch""]
",best-coloc-ever/twitch-cast,frontend/sender/Dockerfile
d59ba0d19c5c24b5c6fc8ee0ab94699e9c45d375,881,"FROM node:0.12.4
MAINTAINER Sing Li <sing.li@rocket.chat>

RUN npm install -g coffee-script yo generator-hubot  &&  \
	useradd hubot -m

USER hubot

WORKDIR /home/hubot

ENV DEV false

ENV BOT_NAME ""hubot""
ENV BOT_OWNER ""No owner specified""
ENV BOT_DESC ""Hubot with Rocket.Chat adapter""

ENV EXTERNAL_SCRIPTS=hubot-diagnostics,hubot-gitsy

RUN yo hubot --owner=""$BOT_OWNER"" --name=""$BOT_NAME"" --description=""$BOT_DESC"" --defaults && \
	sed -i /heroku/d ./external-scripts.json && \
	sed -i /redis-brain/d ./external-scripts.json && \
	npm install hubot-rocketchat

CMD node -e ""console.log(JSON.stringify('$EXTERNAL_SCRIPTS'.split(',')))"" > external-scripts.json && \
	npm install $(node -e ""console.log('$EXTERNAL_SCRIPTS'.split(',').join(' '))"") && \
	if $DEV; then coffee -c /home/hubot/node_modules/hubot-rocketchat/src/*.coffee; fi && \
	bin/hubot -n $BOT_NAME -a rocketchat

",RocketChat/Rocket.Chat.Ops,hubots/hubot-gitsy/Dockerfile
0861b26adb69a77f62a79a246bcbfc35d8a71ab1,1785,"# vim:ft=Dockerfile
FROM debian:sid

RUN echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup
# Paper over occasional network flakiness of some mirrors.
RUN echo 'APT::Acquire::Retries ""5"";' > /etc/apt/apt.conf.d/80retry

# NOTE: I tried exclusively using gce_debian_mirror.storage.googleapis.com
# instead of httpredir.debian.org, but the results (Fetched 123 MB in 36s (3357
# kB/s)) are not any better than httpredir.debian.org (Fetched 123 MB in 34s
# (3608 kB/s)). Hence, letâs stick with httpredir.debian.org (default) for now.

# Install mk-build-deps (for installing the i3 build dependencies),
# clang and clang-format-3.5 (for checking formatting and building with clang),
# lintian (for checking spelling errors),
# test suite dependencies (for running tests)
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    dpkg-dev devscripts git equivs \
    clang clang-format-3.5 \
    lintian \
    libanyevent-perl libanyevent-i3-perl libextutils-pkgconfig-perl xcb-proto cpanminus xvfb xserver-xephyr xauth libinline-perl libinline-c-perl libxml-simple-perl libmouse-perl libmousex-nativetraits-perl libextutils-depends-perl perl-modules libtest-deep-perl libtest-exception-perl libxml-parser-perl libtest-simple-perl libtest-fatal-perl libdata-dump-perl libtest-differences-perl libxml-tokeparser-perl libipc-run-perl libxcb-xtest0-dev libx11-xcb-perl libanyevent-i3-perl && \
    rm -rf /var/lib/apt/lists/*

# Install i3 build dependencies.
COPY debian/control /usr/src/i3-debian-packaging/control
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive mk-build-deps --install --remove --tool 'apt-get --no-install-recommends -y' /usr/src/i3-debian-packaging/control && \
    rm -rf /var/lib/apt/lists/*
",i3/i3,travis/travis-base.Dockerfile
f6d50b59d5ebaa41b89b1458718e93185ac68973,908,"#
# MAINTAINER        Carson,C.J.Zeong <zcy@nicescale.com>
# DOCKER-VERSION    1.6.2
#
# Dockerizing logstash-forwarder: Dockerfile for building logstash-forwarder images
#
FROM       csphere/centos:7.1
MAINTAINER Carson,C.J.Zeong <zcy@nicescale.com>

ENV LOGSTASH_FORWARDER_VERSION 0.4.0-1
ENV LOG_DIR /data/logs

RUN yum -y install rsyslog && \
    wget -q https://download.elastic.co/logstash-forwarder/binaries/logstash-forwarder-${LOGSTASH_FORWARDER_VERSION}.x86_64.rpm && \
    yum -y localinstall logstash-forwarder-${LOGSTASH_FORWARDER_VERSION}.x86_64.rpm && \
    mkdir -p /data/logs

COPY logstash-forwarder.conf /etc/logstash-forwarder.conf
COPY logstash-forwarder.crt /etc/pki/tls/certs/logstash-forwarder.crt
COPY supervisor_rsyslog.conf /etc/supervisor.conf.d/rsyslog.conf
COPY supervisor_logstash-forwarder.conf /etc/supervisor.conf.d/logstash-forwarder.conf

VOLUME [""/data/logs""]

EXPOSE 514",nicescale/docker-training,third/logstash-forwarder/Dockerfile
b5e4ef594083fb6e5b11ecfe07b15ca777af7a84,298,"FROM elasticsearch:2.2.0

# Install the required plugins
RUN plugin install polyfractal/elasticsearch-inquisitor
RUN plugin install royrusso/elasticsearch-HQ
RUN plugin install https://github.com/NLPchina/elasticsearch-sql/releases/download/2.2.0/elasticsearch-sql-2.2.0.zip

CMD [""elasticsearch""]
",dial-once/sensu-stack,elasticsearch/Dockerfile
6a3c70d9d7e377f0c2de4d139933406c0a36f070,347,"FROM iojs:2.0

RUN npm install -g bower ember-cli

RUN git clone https://github.com/facebook/watchman.git \
    && cd watchman \
    && git checkout v3.1 \
    && ./autogen.sh \
    && ./configure \
    && make \
    && make install

RUN mkdir /app
ADD . /app

WORKDIR /app

RUN npm install
RUN bower install --allow-root

CMD [""ember"", ""server""]
",colindensem/peep-stack,applications/client/Dockerfile
bde9fcdd23906f9593279157d2e13cc18e60e564,1371,"FROM ubuntu:14.04

RUN apt-get -y update
RUN apt-get -y install make cpp python

RUN apt-get -y install curl
RUN useradd -u 1000 -m -s /bin/bash -G sudo postgres

ENV PG_VERSION=9.4
RUN curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    echo 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' > /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get -y install acl \
      postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} && \ 
    mkdir -p /var/run/postgresql/9.4-main.pg_stat_tmp/ && \
    chown -R postgres.postgres /var/run/postgresql

ENV HOME=/var/run/postgresql

WORKDIR /mal

# Travis runs as user ID 1001 so add that user
RUN useradd -ou 1001 -m -s /bin/bash -G sudo,postgres travis

# Enable postgres and travis users to sudo for postgres startup
RUN echo ""%sudo ALL=(ALL:ALL) NOPASSWD: ALL"" >> /etc/sudoers

# Allow both travis and postgres user to connect to DB as 'postgres'
RUN sed -i 's/peer$/peer map=mal/' /etc/postgresql/9.4/main/pg_hba.conf
RUN echo ""mal postgres postgres"" >> /etc/postgresql/9.4/main/pg_ident.conf
RUN echo ""mal travis postgres"" >> /etc/postgresql/9.4/main/pg_ident.conf

# Add entrypoint.sh which starts postgres then run bash/command
ADD entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
",kanaka/mal,plpgsql/Dockerfile
b3d914c6c4ff3b4fa340aa2d94e5dd45c7fa3ddd,49,"FROM      localhost:5000/testuser/busybox:latest
",docker-java/docker-java,src/test/resources/buildTests/FROM/privateRegistry/Dockerfile
3c8baee486be46230c7338c173778625383cfeae,150,"FROM hirooka/chukasa:0.0.1-SNAPSHOT

MAINTAINER hirooka

ADD chukasa-0.0.1-SNAPSHOT.jar chukasa.jar

EXPOSE 80
ENTRYPOINT [""/bin/bash"", ""/startup.sh""]",hirooka/chukasa,aws/elastic_beanstalk/docker/single/Dockerfile
7cb45eed1032e2c9604ec726a2f48164b525b5fa,480,"FROM nodesource/centos7-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_4.x/el/7/x86_64/nodejs-4.2.3-1nodesource.el7.centos.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/7/node/4.2.3/Dockerfile
6c7bdedafe4023721cac1c73f9a0d421c890382d,1033,"FROM damsl/k3-vanilla:latest
WORKDIR /software

RUN apt-get update && apt-get install -y python-pip libyaml-dev libprotobuf-dev libgoogle-glog-dev libsvn-dev libapr1-dev python-dev
RUN apt-get install -y google-perftools libgoogle-perftools-dev
ADD intelpcm.tar.gz /software/

RUN mv /software/intelpcm/lib/* /usr/local/lib && mv /software/intelpcm/include/* /usr/local/include 
ADD libmesos.tar.gz /software/
ADD mesos-eggs.tar.gz /software/
ADD mesos-include.tar.gz /software/

RUN mv libmesos/* /usr/local/lib
RUN cp -r mesos /usr/local/include
RUN apt-get install -y cmake
RUN easy_install mesos-eggs/mesos.*
RUN pip install pyyaml
RUN git clone https://github.com/3rdparty/stout.git && mv stout/include/stout /usr/include/
ENV LD_LIBRARY_PATH /usr/local/lib/:/usr/lib/x86_64-linux-gnu/
RUN ulimit -c unlimited

RUN wget https://github.com/jemalloc/jemalloc/archive/3.6.0.tar.gz && tar -xvf 3.6.0.tar.gz
WORKDIR /software/jemalloc-3.6.0
RUN ./autogen.sh --enable-prof --enable-prof-libunwind 
RUN make  
RUN make install || true
",DaMSL/K3,tools/scripts/docker/deployment/Dockerfile
9e3bd078374137a9a1c63479102b6614c0aefbd1,167,"FROM fedora/tools
MAINTAINER David Becvarik <dbecvari@redhat.com>

RUN dnf install 9pfs -y && dnf clean all
#FIXME do not run this as root
CMD [""9pfs"", ""-p"", ""6000""]

",coolhacks/docker-hacks,examples/container-swiss-knife/Dockerfiles/fedora-tool/Dockerfile
40c941e52c87c0ca03270db6307b834631a6cdf4,235,"FROM rancher/confd-base:0.11.0-dev-rancher

ADD ./conf.d /etc/confd/conf.d
ADD ./templates /etc/confd/templates

VOLUME [""/etc/hadoop""]

ENTRYPOINT [""/confd""]
CMD [""--interval"", ""10"", ""--backend"", ""rancher"", ""--prefix"", ""/2015-07-25""]
",rancher/compose-templates,hadoop/containers/0.2.0/hadoop-followers-config/Dockerfile
5979345513b7af9d68c69a054901e6def3acf64c,196,"FROM anapsix/alpine-java:8
VOLUME /tmp
ADD discovery-service-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]",kbastani/spring-cloud-event-sourcing-example,discovery-service/src/main/docker/Dockerfile
a5b094b7fe0ee232a32abc8096e7cbdb2980cc95,387,"FROM ubuntu:14.04

RUN apt-get update && apt-get install -y wget
RUN wget https://raw.githubusercontent.com/cmu-db/peloton/master/scripts/vagrant/packages.sh && sh ./packages.sh

RUN git clone https://github.com/cmu-db/peloton && cd peloton && ./bootstrap && cd build && ../configure && make -j8 && cd tests && make check-build -j8

ENV LD_LIBRARY_PATH /usr/local/lib:${LD_LIBRARY_PATH}
",mli/15721-ta,proj1/Dockerfile
9ef0b086ee3f702cc89272e0b0daded39625c1e1,181,"FROM node:latest

RUN git clone --depth 1 https://github.com/AdventureLookup/adventurelookup-frontend.git /src

WORKDIR /src
RUN npm i

VOLUME /src/dist

CMD [""npm"", ""run"", ""dist""]
",AdventureLookup/adventurelookup-backend,frontend/Dockerfile
72946d936313fcb3ecd29c31dc9dca0aadb5ace5,480,"FROM nodesource/centos7-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_5.x/el/7/x86_64/nodejs-5.1.0-2nodesource.el7.centos.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/7/node/5.1.0/Dockerfile
c24d1078aa6d74b8aebe2093c139e20e46970e51,181,"FROM node:6.2.2

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

ONBUILD COPY package.json /usr/src/app/
ONBUILD RUN npm install
ONBUILD COPY . /usr/src/app

CMD [ ""npm"", ""start"" ]
",nodejs/docker-node,6.2/onbuild/Dockerfile
d312818d7257fa8cab174b75487cfb31eebf12de,2077,"# Copyright (C) 2014 - 2015  Jack O. Wasey
#
# This file is part of icd9.
#
# icd9 is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# icd9 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with icd9. If not, see <http:#www.gnu.org/licenses/>.

## start with the Docker 'base R' Debian-based image
# n.b. the github repo is actually called r-devel-san-clang
FROM rocker/r-devel-ubsan-clang

# openmp is disabled in this image

## do install these pesky libraries which must come from unstable (sid), and not the testing repo which is the default.
RUN apt-get update -y && apt-get dist-upgrade -y && apt-get install -y -t unstable \
  fonts-inconsolata \
  git \
  libcurl4-openssl-dev \
  libssl-dev/unstable \
  libxml2-dev/unstable \
  libssh2-1-dev \
  pandoc \
  pandoc-citeproc \
  qpdf \
  texlive-base

## now we can pre-install a load of packages we know we'll need, or alternatively, devtools can do this based on the DESCRIPTION file once the package source is available (but this wouldn't be preserved in the docker image)

# use Rdevel (from the rocker image, because R is the standard g++ unsanitized one)
RUN Rdevel -e ""install.packages(c('devtools', 'XML', 'testthat', 'Rcpp', 'ggplot2', 'brew', 'rcolorbrewer', 'dichromat', 'munsell', 'checkmate', 'scales', 'proto', 'catools', 'evaluate', 'plyr', 'gtable', 'reshape2', 'knitr', 'microbenchmark', 'profr', 'xtable', 'rmarkdown', 'fastmatch'))""

# can only add files inside the docker directory: the following script is copied from parent directory by rocker-icd9.sh
ADD build_install_check_in_docker.sh /tmp/
ENV R_CMD Rdevel
CMD [""/tmp/build_install_check_in_docker.sh""]
",jackwasey/icd9,tools/r-devel-ubsan-clang/Dockerfile
0bf85f88c24568073f08018b8768ff4fe00e3da9,141,"FROM nginx:1.9.1
MAINTAINER Michael Hausenblas ""michael.hausenblas@gmail.com""
ENV REFRESHED_AT 2015-06-19

COPY content /usr/share/nginx/html",mhausenblas/m-shop,frontend-static/Dockerfile
dbb9fe4178dd8312a449034bf9ef4fbdb2b048a1,445,"FROM nubs/phpunit

USER root

RUN pacman-key --populate archlinux && pacman-key --refresh-keys && pacman --sync --refresh --noconfirm --noprogressbar --quiet && pacman --sync --refresh --sysupgrade --noconfirm --noprogressbar --quiet && pacman-db-upgrade && pacman --sync --noconfirm --noprogressbar --quiet php-mongo

USER build

ADD provisioning/set-env.sh /home/build/set-env.sh

ENTRYPOINT [""/home/build/set-env.sh""]
CMD [""/code/build.php""]
",dominionenterprises/tol-api-php,tests/Dockerfile
4ed54fab8709968ab06443eaca1b292c476871f0,526,"FROM centos:centos7
MAINTAINER Maxfield Stewart

# Install NGINX
RUN yum -y update; yum clean all
RUN yum -y install http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm; yum -y makecache
RUN yum -y install nginx-1.8.0

# Remove default files we don't need
RUN rm /etc/nginx/conf.d/default.conf
RUN rm /etc/nginx/conf.d/example_ssl.conf

# Add default configuration
COPY conf/jenkins.conf /etc/nginx/conf.d/jenkins.conf
COPY conf/nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD [""nginx""]",maxfields2000/dockerjenkins_tutorial,tutorial_07/jenkins-nginx/Dockerfile
955943882cc02c9cae1b795bc1a0e36a7b74ac95,484,"FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apk update && apk add \
	ca-certificates \
	groff \
	less \
	python \
	py-pip \
	&& rm -rf /var/cache/apk/* \
	&& pip install awscli \
	&& mkdir -p /root/.aws \
	&& { \
		echo '[default]'; \
		echo 'output = json'; \
		echo 'region = $AMAZON_REGION'; \
		echo 'aws_access_key_id = $AMAZON_ACCESS_KEY_ID'; \
		echo 'aws_secret_access_key = $AMAZON_SECRET_ACCESS_KEY'; \
	} > /root/.aws/config

ENTRYPOINT [ ""aws"" ]
",coolhacks/docker-hacks,dockerfiles/awscli/Dockerfile
37ca2a1ace1d6dcf1b333d522383b58571576837,167,"FROM ubuntu:16.04

RUN apt-get -y update && apt-get -y upgrade
RUN apt-get -y install g++ clang cmake wget libsodium-dev
RUN mkdir /opt/sodiumpp
WORKDIR /opt/sodiumpp
",rubendv/sodiumpp,travis/Dockerfile
e4f795400ec4b2c53c0de43cf36eef2973e78bbf,565,"# Simplest web app ever

FROM ubuntu:14.04

MAINTAINER Wojciech Sielski ""wsielski@team.mobile.de""

RUN DEBIAN_FRONTEND=noninteractive apt-get update; apt-get install -y curl
RUN mkdir -p /opt/web/cgi-bin
WORKDIR /opt/web
ENV HOME  /opt/web

ADD ./index.html /opt/web/
ADD ./cgi-bin/index /opt/web/cgi-bin/
RUN chmod a+x /opt/web/cgi-bin/index 

ADD https://raw.githubusercontent.com/eBayClassifiedsGroup/PanteraS/master/frameworks/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

EXPOSE 8000

WORKDIR /

ENTRYPOINT [""/usr/local/bin/start.sh""]
",eBayClassifiedsGroup/PanteraS,examples/SmoothWebappPython/simple_webapp_python/Dockerfile
ea77989a6da811de6572c0750278e4f1b70550cb,545,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.43-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/node/0.10.43/Dockerfile
c0e6f781a540510efe86b966e83bdbce6b6764ef,102,"FROM iron/base

RUN apk update && apk upgrade \
  && apk add libstdc++ \
  && rm -rf /var/cache/apk/*
",iron-io/dockers,gcc/Dockerfile
848d666005c0884c317a1bb42793428b58580b49,3666,"# Dockerfile
FROM debian:wheezy

# Local caches - only set those you actually have such caches
#ENV apt_proxy http://10.42.44.100:3142/
#ENV http_proxy http://10.42.44.100:3128/
#ENV https_proxy http://10.42.44.100:3128/

# Arch to output
ENV ARCH 64
ENV NODE_VERSION 0.10.40
ENV PKG_ARCH amd64
ENV PKG_VERSION 1.4.2
ENV PKG_REL 1
ENV PKG_NAME peerio-client_$PKG_VERSION-${PKG_REL}_$PKG_ARCH

ENV NODE_BIN_DIR=/usr/local/bin
ENV DEBIAN_FRONTEND=noninteractive 

RUN test ""$apt_proxy"" && echo 'Acquire::http { Proxy ""$apt_proxy""; };' >/etc/apt/apt.conf.d/01proxy
RUN apt-get update && apt-get install -y \
    build-essential curl devscripts gcc-multilib git lsb-release make python-pip rsync sudo wget libxss1

WORKDIR /usr/src
RUN wget https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.gz
RUN tar -xzf node-v$NODE_VERSION.tar.gz
WORKDIR /usr/src/node-v$NODE_VERSION
RUN ./configure ; make ; make install
RUN test -x $NODE_BIN_DIR/nodejs -a ! -x $NODE_BIN_DIR/node && ln -sf $NODE_BIN_DIR/nodejs $NODE_BIN_DIR/node || true
RUN curl -k -L https://npmjs.org/install.sh | sh
RUN pip install transifex-client
RUN npm install -g nw
RUN git clone https://github.com/PeerioTechnologies/peerio-client /usr/src/peerio-client
WORKDIR /usr/src/peerio-client
RUN npm install
RUN patch -p0 <debian/patch/00-build.patch
RUN ./node_modules/.bin/gulp build
RUN mkdir ../$PKG_NAME
WORKDIR /usr/src/$PKG_NAME
RUN mkdir -p DEBIAN usr/share/man/man1 usr/share/doc/peerio-client usr/bin usr/share/applications usr/share/icons/hicolor/16x16/apps usr/share/icons/hicolor/32x32/apps usr/share/icons/hicolor/48x48/apps usr/share/icons/hicolor/64x64/apps usr/share/icons/hicolor/128x128/apps
RUN rsync -avWxzP /usr/src/peerio-client/build/Peerio/linux$ARCH/ usr/share/peerio-client/
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/LICENSE.md usr/share/doc/peerio-client/LICENSE.md
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/application/img/icon16.png usr/share/icons/hicolor/16x16/apps/peerio-client.png
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/application/img/icon32.png usr/share/icons/hicolor/32x32/apps/peerio-client.png
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/application/img/icon48.png usr/share/icons/hicolor/48x48/apps/peerio-client.png
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/application/img/icon64.png usr/share/icons/hicolor/64x64/apps/peerio-client.png
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/application/img/icon128.png usr/share/icons/hicolor/128x128/apps/peerio-client.png
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/pkg/control DEBIAN/control
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/pkg/copyright usr/share/doc/peerio-client/copyright
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/pkg/peerio-client usr/bin/peerio-client
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/pkg/desktop usr/share/applications/peerio-client.desktop
ADD https://raw.githubusercontent.com/PeerioTechnologies/peerio-client/master/pkg/man.1 usr/share/man/man1/peerio-client.1
RUN sed -i -e ""s|/ARCH/|$PKG_ARCH|"" -e ""s|/VERSION/|$PKG_VERSION|"" -e ""s|/PKGREL/|$PKG_REL|"" DEBIAN/control
RUN cd usr/share/man/man1 && gzip -9 -f peerio-client.1
RUN find . -type f -exec chmod 0644 {} \;
RUN find . -type d -exec chmod 0755 {} \;
RUN chmod 0755 usr/share/peerio-client/Peerio usr/bin/peerio-client
WORKDIR /usr/src
RUN dpkg-deb --build $PKG_NAME
",PeerioTechnologies/peerio-client,pkg/debian/wheezy-amd64.Dockerfile
9ba4437e87063e2b5838c7ed685425aa2365f8aa,591,"FROM softsam/android:latest

MAINTAINER softsam

# Install dependencies for emulator
RUN echo y | android update sdk --no-ui --all -t `android list sdk --all|grep ""SDK Platform Android 5.1.1, API 22""|awk -F'[^0-9]*' '{print $2}'` && \
    echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-22 --force && \
    echo y | android update sdk --no-ui --all --filter sys-img-x86-android-22 --force

RUN echo n | android create avd --force -n ""x86"" -t android-22 --abi default/x86
RUN echo n | android create avd --force -n ""arm"" -t android-22 --abi default/armeabi-v7a
",softsam/docker-android-emulator,android-22/Dockerfile
078b8984acfdec6357deff1bdab3c0dd6a239a1d,525,"FROM jenkins:1.625.1

USER root

RUN apt-get update && apt-get install -y libapparmor-dev

ENV SWARM_CLIENT_VERSION 2.0
ADD http://maven.jenkins-ci.org/content/repositories/releases/org/jenkins-ci/plugins/swarm-client/${SWARM_CLIENT_VERSION}/swarm-client-${SWARM_CLIENT_VERSION}-jar-with-dependencies.jar /usr/share/jenkins/swarm-client-${SWARM_CLIENT_VERSION}.jar
RUN chmod 644 /usr/share/jenkins/swarm-client-${SWARM_CLIENT_VERSION}.jar

ADD ./run.sh /run.sh

USER jenkins
WORKDIR /var/jenkins_home

ENTRYPOINT [""/run.sh""]
",rancher/compose-templates,jenkins_swarm_clients/container/0.1.0/jenkins-swarm/Dockerfile
7f6dd42b212761919b4f6131be2543fc6088643f,895,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM ppc64le/ubuntu:14.04
MAINTAINER Amir Sanjar

COPY puppetize.sh /tmp/puppetize.sh

RUN bash /tmp/puppetize.sh
",apache/bigtop,docker/bigtop-puppet/ubuntu-14.04-ppc64le/Dockerfile
3918693a827bc5d2bb8e2b12981dc8bf5c33598d,1501,"FROM $USER/ferry-base
NAME cassandra

# Download the various packages needed
RUN apt-get --yes install openjdk-7-jdk

# Create necessary directories
RUN mkdir -p /service/data/main /service/logs /service/conf /service/data/cache /service/data/commits /service/sbin /service/package;chown -R ferry:docker /service/data;chown -R ferry:docker /service/logs;chown -R ferry:docker /service/conf

# Download the latest package
RUN wget $DOWNLOAD_URL/apache-cassandra-2.1.0-bin.tar.gz -P /service/package/
RUN cd /service/package;tar -xzf apache-cassandra-2.1.0-bin.tar.gz

# Get rid of the tarballs
RUN rm /service/package/*tar.gz

# Make soft links to the bin and configuration for easy access
RUN ln -s /service/package/apache-cassandra-2.1.0/bin /service;ln -s /service/package/apache-cassandra-2.1.0/conf /service/conf/cassandra
RUN ln -s /service/package/apache-cassandra-2.1.0/bin/* /usr/local/bin/

# Environment variables.
ENV CASSANDRA_HOME /service/package/apache-cassandra-2.1.0
ENV CASSANDRA_CONF /service/conf/cassandra
ENV CASSANDRA_INCLUDE /service/bin/cassandra.in.sh
RUN echo export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 >> /etc/profile
RUN echo export CASSANDRA_HOME=/service/package/apache-cassandra-2.1.0 >> /etc/profile
RUN echo export CASSANDRA_CONF=/service/conf/cassandra >> /etc/profile
RUN echo export CASSANDRA_INCLUDE=/service/bin/cassandra.in.sh >> /etc/profile

# Add the control script to the image. 
ADD ./startnode /service/sbin/
RUN chmod a+x /service/sbin/startnode
",jhorey/ferry,ferry/data/dockerfiles/cassandra/Dockerfile
6147c19e4a810586eb49f03bd0186fec0b5f2557,2004,"FROM resin/rpi-raspbian:wheezy

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    wget \
    bzr \
    git \
    mercurial \
    openssh-client \
    subversion \
    procps \
    autoconf \
    automake \
    bzip2 \
    file \
    g++ \
    gcc \
    imagemagick \
    libbz2-dev \
    libc6-dev \
    libcurl4-openssl-dev \
    libevent-dev \
    libffi-dev \
    libgeoip-dev \
    libglib2.0-dev \
    libjpeg-dev \
    liblzma-dev \
    libmagickcore-dev \
    libmagickwand-dev \
    libmysqlclient-dev \
    libncurses-dev \
    libpng-dev \
    libpq-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libtool \
    libwebp-dev \
    libxml2-dev \
    libxslt-dev \
    libyaml-dev \
    make \
    patch \
    xz-utils \
    zlib1g-dev \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NPM_CONFIG_LOGLEVEL info
ENV NODE_VERSION 5.11.1

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-armv6l.tar.gz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-armv6l.tar.gz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xzf ""node-v$NODE_VERSION-linux-armv6l.tar.gz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-armv6l.tar.gz"" SHASUMS256.txt SHASUMS256.txt.asc

CMD [ ""node"" ]
",hypriot/rpi-node,5.11/wheezy/Dockerfile
f5dd1c6b44bb08c828747ee6d71493b65ca3ee82,74,"FROM python:2.7.10

RUN useradd docker
USER docker

ENTRYPOINT [""python""]
",instructure/straitjacket,languages/python2/Dockerfile
b65d8a916959fd02866b907a5d659a0627226b96,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.6.0-1-x86_64.pkg.tar.xz /tmp/php-5.6.0-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.6.0-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.6.0/Dockerfile
78d7575a86d52361ff763b4b3e64977f1a09530a,1841,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM fedora:21

# Make yum work properly under docker when using overlay storage driver.
# https://bugzilla.redhat.com/show_bug.cgi?id=1213602#c9
# https://github.com/docker/docker/issues/10180
RUN yum install -y yum-plugin-ovl

RUN yum clean all && yum update -y && yum install -y ruby

RUN gem install bundler
",grpc/grpc,tools/dockerfile/distribtest/ruby_fedora21_x64/Dockerfile
8c801498f098a1eff5a71c5d5602cb02279902d9,1393,"FROM openshift3/sti-base:1.0

# This image provides a Ruby 2.0 environment you can use to run your Ruby
# applications.

EXPOSE 8080

ENV RUBY_VERSION 2.0

LABEL summary=""Platform for building and running Ruby 2.0 applications"" \
      io.k8s.description=""Platform for building and running Ruby 2.0 applications"" \
      io.k8s.display-name=""Ruby 2.0"" \
      io.openshift.expose-services=""8080:http"" \
      io.openshift.tags=""builder,ruby,ruby20""

# Labels consumed by Red Hat build service
LABEL BZComponent=""openshift-sti-ruby-docker"" \
      Name=""openshift3/ruby-20-rhel7"" \
      Version=""2.0"" \
      Release=""34"" \
      Architecture=""x86_64""

RUN yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    INSTALL_PKGS=""ruby200 ruby200-ruby-devel ruby200-rubygem-rake v8314 ror40-rubygem-bundler nodejs010"" && \
    yum install -y --setopt=tsflags=nodocs  $INSTALL_PKGS && rpm -V $INSTALL_PKGS && \
    yum clean all -y

# Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH
COPY ./s2i/bin/ $STI_SCRIPTS_PATH

# Each language image can have 'contrib' a directory with extra files needed to
# run and build the applications.
COPY ./contrib/ /opt/app-root

RUN chown -R 1001:0 /opt/app-root

USER 1001

# Set the default CMD to print the usage of the language image
CMD $STI_SCRIPTS_PATH/usage
",sclorg/rhscl-dockerfiles,rhel7.ruby20/Dockerfile
34d1ece09868afaee68d07b47826538fcfec6c1a,554,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.10.1-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/5.10.1/Dockerfile
8592655381c7edd9c7b1e31c254c21b71d100ba5,288,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-7.0.0RC1-1-x86_64.pkg.tar.xz /tmp/php-7.0.0RC1-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-7.0.0RC1-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-7.0.0-rc.1/Dockerfile
8a8d33788caadba88ba0daa28f66c38cad335294,730,"FROM fedora:rawhide
MAINTAINER http://fedoraproject.org/wiki/Cloud

ENV container docker

RUN dnf -y update && dnf clean all

RUN dnf -y install systemd && dnf clean all && \
(cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
rm -f /lib/systemd/system/multi-user.target.wants/*;\
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;

VOLUME [ ""/sys/fs/cgroup"", ""/tmp"", ""/run"" ]
CMD [""/usr/sbin/init""]
",fedora-cloud/Fedora-Dockerfiles,systemd/systemd/Dockerfile
4023f10be42fd074e3d5e43fbc9ebec327dc683c,1084,"FROM tleyden5iwx/caffe-gpu-master

RUN apt-get update
RUN apt-get -y install python-pip
RUN apt-get -y install python-skimage
RUN apt-get -y install yasm
RUN pip install numpy matplotlib scipy

WORKDIR /home
RUN wget http://ffmpeg.org/releases/ffmpeg-3.0.1.tar.bz2
RUN tar -xvf ffmpeg-3.0.1.tar.bz2
WORKDIR /home/ffmpeg-3.0.1
RUN ./configure && make && make install

WORKDIR /home
RUN git clone https://github.com/ackimball/autocolorization
WORKDIR /home/autocolorization

RUN wget http://eecs.berkeley.edu/~rich.zhang/projects/2016_colorization/files/demo_v0/colorization_release_v0.caffemodel

RUN apt-get -y install libsnappy-dev
RUN apt-get -y install libgraphicsmagick-dev

RUN git clone https://github.com/torch/distro.git ~/torch --recursive
WORKDIR /home/torch 
RUN bash install-deps
RUN chmod 777 install.sh
RUN ./install.sh

WORKDIR /home
RUN luarocks install graphicsmagick # upgrade
RUN luarocks install lua-csnappy
RUN luarocks install md5
RUN luarocks install uuid

RUN git clone --depth 1 https://github.com/nagadomi/waifu2x.git
RUN mv waifu2x/* /home/autocolorization
",ackimball/autocolorization,gpu/Dockerfile
c28e521dd1db270c2b590557046e5080d96690a8,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-7.0.4-1-x86_64.pkg.tar.xz /tmp/php-7.0.4-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-7.0.4-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-7.0.4/Dockerfile
d6120aec2d9635e554622e4617a71a0b1cae6ae2,5144,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jre""                                    && \
    export JAVA_UPDATE=""77""                                      && \
    export JAVA_BUILD=""03""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u77/jre/slim/Dockerfile
efab7948ae1e42ab537f467f629640c0a5249d09,1426,"FROM centos:7
MAINTAINER NVIDIA CORPORATION <digits@nvidia.com>

LABEL com.nvidia.volumes.needed=""nvidia_driver""

ENV NVIDIA_GPGKEY_SUM bd841d59a27a406e513db7d405550894188a4c1cd96bf8aa4f82f1b39e0b5c1c

RUN curl -fsSL http://developer.download.nvidia.com/compute/cuda/repos/GPGKEY | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \
    echo ""$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA"" | sha256sum -c --strict -

COPY cuda.repo /etc/yum.repos.d/cuda.repo

ENV CUDA_VERSION 7.0
LABEL com.nvidia.cuda.version=""7.0""

ENV CUDA_PKG_VERSION 7-0-7.0-28
RUN yum install -y \
        cuda-nvrtc-$CUDA_PKG_VERSION \
        cuda-cusolver-$CUDA_PKG_VERSION \
        cuda-cublas-$CUDA_PKG_VERSION \
        cuda-cufft-$CUDA_PKG_VERSION \
        cuda-curand-$CUDA_PKG_VERSION \
        cuda-cusparse-$CUDA_PKG_VERSION \
        cuda-npp-$CUDA_PKG_VERSION \
        cuda-cudart-$CUDA_PKG_VERSION && \
    ln -s cuda-$CUDA_VERSION /usr/local/cuda && \
    rm -rf /var/cache/yum/*

RUN echo ""/usr/local/cuda/lib"" >> /etc/ld.so.conf.d/cuda.conf && \
    echo ""/usr/local/cuda/lib64"" >> /etc/ld.so.conf.d/cuda.conf && \
    ldconfig

RUN echo ""/usr/local/nvidia/lib"" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo ""/usr/local/nvidia/lib64"" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
",NVIDIA/nvidia-docker,centos-7/cuda/7.0/runtime/Dockerfile
df34f780a3171bad389c3da7f741e026e1cd6aa4,132,"FROM scratch
ADD https://github.com/multiarch/qemu-user-static/releases/download/v2.5.0/x86_64_qemu-mips64el-static.tar.xz /usr/bin
",multiarch/qemu-user-static,archs/x86_64-mips64el/Dockerfile
597966b9c30b7d85d5fd1ef56b709a010dfcca15,3053,"FROM staci/base:0.1

# Add staci user and set password
RUN useradd -u 1000 -ms /bin/bash atlassian
RUN echo ""atlassian:praqma"" | chpasswd

# Configuration variables.
ENV BITBUCKET_HOME     /var/atlassian/bitbucket
ENV BITBUCKET_INSTALL  /opt/atlassian/bitbucket
ENV BITBUCKET_VERSION  4.0.2

# Define memory usage for tomcat
ENV Xms           512m
ENV Xmx           1512m

# Install Atlassian Bitbucket, tools and setup initial home directory structure.
RUN set -x \
    && apt-get install git perl -y \
    && mkdir -p               ""${BITBUCKET_HOME}/lib"" \
    && chmod -R 700           ""${BITBUCKET_HOME}"" \
    && chown -R atlassian:atlassian ""${BITBUCKET_HOME}"" \
    && mkdir -p               ""${BITBUCKET_INSTALL}"" \
    && curl -Ls               ""https://www.atlassian.com/software/stash/downloads/binary/atlassian-bitbucket-${BITBUCKET_VERSION}.tar.gz"" | tar -zx --directory  ""${BITBUCKET_INSTALL}"" --strip-components=1 --no-same-owner \
    && chmod -R 700           ""${BITBUCKET_INSTALL}/conf"" \
    && chmod -R 700           ""${BITBUCKET_INSTALL}/logs"" \
    && chmod -R 700           ""${BITBUCKET_INSTALL}/temp"" \
    && chmod -R 700           ""${BITBUCKET_INSTALL}/work"" \
    && chown -R atlassian:atlassian ""${BITBUCKET_INSTALL}/conf"" \
    && chown -R atlassian:atlassian ""${BITBUCKET_INSTALL}/logs"" \
    && chown -R atlassian:atlassian ""${BITBUCKET_INSTALL}/temp"" \
    && chown -R atlassian:atlassian ""${BITBUCKET_INSTALL}/work"" \
    && ln --symbolic          ""/usr/lib/x86_64-linux-gnu/libtcnative-1.so"" ""${BITBUCKET_INSTALL}/lib/native/libtcnative-1.so"" \
    && sed --in-place         's/^# umask 0027$/umask 0027/g' ""${BITBUCKET_INSTALL}/bin/setenv.sh"" \
    && xmlstarlet             ed --inplace \
        --delete              ""Server/Service/Engine/Host/@xmlValidation"" \
        --delete              ""Server/Service/Engine/Host/@xmlNamespaceAware"" \
                              ""${BITBUCKET_INSTALL}/conf/server.xml"" \
    && sed -ri 's/JVM_MINIMUM_MEMORY=""512m""/JVM_MINIMUM_MEMORY=""'""${Xms}""'""/' $BITBUCKET_INSTALL/bin/setenv.sh \
    && sed -ri 's/JVM_MAXIMUM_MEMORY=""768m""/JVM_MAXIMUM_MEMORY=""'""${Xmx}""'""/' $BITBUCKET_INSTALL/bin/setenv.sh

# Getting the MySQL driver
RUN curl -Ls ""http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.36.tar.gz"" | tar -xz --directory ""${BITBUCKET_INSTALL}/lib/"" --strip-components=1 --no-same-owner

# Fix Issue with Context Path
COPY setContextPath.sh /tmp/setContextPath.sh
RUN /tmp/setContextPath.sh

# Use the user atlassian to run Jira.
USER atlassian:atlassian

# Expose default HTTP connector port.
EXPOSE 7990 7999

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/bitbucket""]

# Set the default working directory as the installation directory.
WORKDIR ${BITBUCKET_HOME}

# Run Atlassian Bitbucket as a foreground process by default.
CMD [""/opt/atlassian/bitbucket/bin/start-bitbucket.sh"", ""-fg""]
",Praqma/staci,images/bitbucket/context/Dockerfile
55873bef6ec54fc40072c7267581587eba4bb74f,478,"FROM nodesource/fedora20-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_0.12/fc/20/x86_64/nodejs-0.12.3-1nodesource.fc20.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/20/node/0.12.3/Dockerfile
3a6431d338ac48d1149f9acb563bb2f1c7e33247,708,"FROM ubuntu:14.04
MAINTAINER Eris Industries <support@erisindustries.com>

# shut up debian
ENV DEBIAN_FRONTEND noninteractive
ENV DEBIAN_PRIORITY critical
ENV DEBCONF_NOWARNINGS yes
ENV TERM linux
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Where to install binaries
ENV INSTALL_BASE /usr/local/bin

# User Creation
# Choose the user id number 1000 to work well with Boot2Docker volumes.  See:
# https://github.com/boot2docker/boot2docker/issues/581#issuecomment-62491280
ENV USER eris
ENV ERIS /home/$USER/.eris
RUN groupadd --system $USER \
  && useradd --system --create-home --uid 1000 --gid $USER $USER

RUN mkdir $ERIS
RUN chown --recursive $USER:$USER $ERIS
",eris-ltd/common,docker/ubuntu/Dockerfile
9a622a33a5187eff4849ef7b491857662e79fb5d,1034,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM bigtop/puppet:ubuntu-15.04
MAINTAINER Amir Sanjar

COPY bigtop_toolchain /etc/puppet/modules/bigtop_toolchain

RUN puppet apply -e ""include bigtop_toolchain::installer""
COPY . /tmp/bigtop
RUN cd /tmp/bigtop && ./gradlew && cd && rm -rf /tmp/bigtop
",apache/bigtop,docker/bigtop-slaves/ubuntu-15.04/Dockerfile
5982c9783e08b341fccbbf9550a3280a03499fb1,2426,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM ubuntu:14.04

# Install Git and basic packages.
RUN apt-get update && apt-get install -y \
  autoconf \
  autotools-dev \
  build-essential \
  bzip2 \
  ccache \
  curl \
  gcc \
  gcc-multilib \
  git \
  golang \
  gyp \
  lcov \
  libc6 \
  libc6-dbg \
  libc6-dev \
  libgtest-dev \
  libtool \
  make \
  perl \
  strace \
  python-dev \
  python-setuptools \
  python-yaml \
  telnet \
  unzip \
  wget \
  zip && apt-get clean

#================
# Build profiling
RUN apt-get update && apt-get install -y time && apt-get clean

#=================
# C++ dependencies
RUN apt-get update && apt-get -y install libgflags-dev libgtest-dev libc++-dev clang && apt-get clean

#======================
# Zookeeper dependencies
# TODO(jtattermusch): is zookeeper still needed?
RUN apt-get install -y libzookeeper-mt-dev

RUN mkdir /var/local/jenkins

# Define the default command.
CMD [""bash""]
",grpc/grpc,tools/dockerfile/test/cxx_ubuntu1404_x64/Dockerfile
afea52f14649eca88bbf8905444008c01e2ff651,1009,"FROM quay.io/eris/tools
MAINTAINER Eris Industries <support@erisindustries.com>

ENV NAME bitcoincore

RUN apt-add-repository -y ppa:bitcoin/bitcoin && \
  apt-get update -qq && \
  apt-get install -qq -y --no-install-recommends \
    bitcoind && \
  rm -rf /var/lib/apt/lists/*

# Expose mainnet wallet rpc port.
EXPOSE 8332

# Expose mainnet peer port.
EXPOSE 8333

# Expose mainnet rpc port.
EXPOSE 8334

# Expose testnet wallet rpc port.
EXPOSE 18332

# Expose testnet peer port.
EXPOSE 18333

# Expose testnet rpc port.
EXPOSE 18334

# persist data, set user
WORKDIR $ERIS
ENV DATA_DIR $ERIS/scratch/data/$NAME
RUN mkdir -p $DATA_DIR && \
  touch $DATA_DIR/bitcoin.conf && \
  echo rpcuser=bitcoinrpc >> $DATA_DIR/bitcoin.conf && \
  echo rpcpassword=Hze7btPVjmo6iJmUCdB5DXppCzZWaK8PEDHUJYYAYuFC >> $DATA_DIR/bitcoin.conf && \
  chmod 600 $DATA_DIR/bitcoin.conf && \
  chown $USER -R /home/$USER/

VOLUME /home/$USER/.eris

USER $USER
CMD bitcoind -conf=$DATA_DIR/bitcoin.conf -datadir=$DATA_DIR -daemon
",eris-ltd/common,docker/bitcoincore/Dockerfile
91523b56618dabf24b4b33bc7a698c8fb4ba08a9,998,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/apache:ubuntu-15.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/base:ubuntu-15.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm

COPY conf/ /opt/docker/

# Install apache
RUN /usr/local/bin/apt-install \
        apache2 \
        libapache2-mod-fastcgi \
	&& sed -ri ' \
		s!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g; \
		s!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g; \
		' /etc/apache2/apache2.conf \
	&& rm -f /etc/apache2/sites-enabled/* \
	&& ln -sf /opt/docker/etc/httpd/main.conf /etc/apache2/sites-enabled/10-docker.conf \
	&& a2enmod actions fastcgi ssl rewrite headers expires \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-apache \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/apache/ubuntu-15.04/Dockerfile
c7c446739266084d996f9f64fe89d278613ab252,518,"#an image with jdk 1.8, maven, to run the spring-doge sample app
# https://github.com/joshlong/spring-doge
# https://www.youtube.com/watch?v=eCos5VTtZoI
FROM jamesdbloom/docker-java8-maven

MAINTAINER Patrick Chanezon <patrick@chanezon.com>

EXPOSE 8080

#checkout and build spring-doge
WORKDIR /local/git
RUN git clone https://github.com/joshlong/spring-doge.git
WORKDIR /local/git/spring-doge
RUN mvn package
CMD java -Dserver.port=8080 -Dspring.data.mongodb.uri=$MONGODB_URI -jar spring-doge/target/spring-doge.jar
",chanezon/azure-linux,coreos/cloud-init/spring-doge/Dockerfile
44140479ab6d2879e2029a9201c1278d415924bd,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-4.1.2-1-x86_64.pkg.tar.xz /tmp/php-4.1.2-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-4.1.2-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-4.1.2/Dockerfile
632c6ec776bf12b259b58c99879e3f2dab12b063,98,"FROM gliderlabs/logspout:master

ADD ./entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
",rancher/compose-templates,logspout/containers/logspout-logstash/Dockerfile
5ca21e030543fffb2a837566a37d706700850615,148,"FROM elasticsearch:latest

RUN plugin -i mobz/elasticsearch-head
RUN plugin -i elasticsearch/marvel/latest

EXPOSE 9200 9300

CMD [""elasticsearch""]
",juxt/joplin,example/elasticsearch-docker/Dockerfile
782368bf8d10a5f6e655dff2079de394723faa91,1887,"# Copyright 2015-2016, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM ubuntu:12.04

RUN apt-get update -y && apt-get install -y curl

# Install rvm
RUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
RUN \curl -sSL https://get.rvm.io | bash -s stable --ruby

RUN /bin/bash -l -c ""echo '. /etc/profile.d/rvm.sh' >> ~/.bashrc""
RUN /bin/bash -l -c ""gem install --update bundler""
",chai2010/grpc-windows,grpc/grpc-release-0_13_0/tools/dockerfile/distribtest/ruby_ubuntu1204_x64/Dockerfile
cd5141c04d85ab0067ce027a44eaad6ec16f39f5,21,"# example Dockerfile
",rafecolton/docker-builder,_testing/fixtures/repodir/Dockerfile
edb73247b595805a8ca9e5ebd21b0294b0153b92,112,"FROM fedora:23
RUN yum install -y python python-pip git sudo
COPY tests.sh /tmp/tests.sh
CMD bash /tmp/tests.sh
",Nekmo/simple-monitor-alert,docker/Fedora23-sma/Dockerfile
8d066b32c6c24b14ace9eb2ac806808de12841e0,485,"FROM centos:centos6
MAINTAINER svanoort <samvanoort@gmail.com>

# Set up EPEL
RUN rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

# pycurl is part of yum, and so is python, so we don't install
RUN yum install -y python-pip git-core python-mock rpm-build tar && yum clean all \
    && pip install discover jmespath jsonschema pyyaml django==1.6.5 django-tastypie==0.12.1

COPY verify_image.py /tmp/verify_image.py
RUN chmod a+rwx /tmp/verify_image.py",svanoort/pyresttest,docker/centos6-py26/Dockerfile
55dfa1f821fa493a59746a84bad3c6cce8b6c086,762,"FROM ubuntu:14.04

MAINTAINER Varun Mittal <varun91@uw.edu>

ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root

RUN apt-get update
RUN apt-get install -y --force-yes --no-install-recommends software-properties-common
RUN add-apt-repository -y ppa:webupd8team/java

RUN apt-get update
RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 seen true | /usr/bin/debconf-set-selections
RUN apt-get install -y --force-yes --no-install-recommends oracle-java8-installer oracle-java8-set-default

RUN apt-get purge software-properties-common -y --force-yes
RUN apt-get -y autoclean
RUN apt-get -y autoremove
RUN rm -rf /var/lib/apt/lists/*

",WebDataScience/GUIdock,BaseImages/pre_created_Dockerfiles/java8/Dockerfile
8234f884a844a02dfe9a3c75173d4ed55486b1ae,1116,"FROM buildpack-deps:wheezy

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NODE_VERSION 0.10.46

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xJf ""node-v$NODE_VERSION-linux-x64.tar.xz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.xz"" SHASUMS256.txt.asc SHASUMS256.txt

CMD [ ""node"" ]
",nodejs/docker-node,0.10/wheezy/Dockerfile
81528ce567665f673c36f12cc94b60c53afb71d3,562,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/deb/generate.sh""!
#

FROM ubuntu-debootstrap:utopic

RUN apt-get update && apt-get install -y bash-completion btrfs-tools build-essential curl ca-certificates debhelper dh-systemd git libapparmor-dev libdevmapper-dev libsqlite3-dev --no-install-recommends && rm -rf /var/lib/apt/lists/*

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS apparmor selinux
",fabric8io/gofabric8,vendor/github.com/docker/docker/contrib/builder/deb/ubuntu-debootstrap-utopic/Dockerfile
d40450a447682fde334009bec43b9718e6961bb0,556,"FROM python:3.4.3

# Installs SSH for pycharm etc
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo 'root:password' | chpasswd
RUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
CMD [""/usr/sbin/sshd"", ""-D""]

ADD . ./code
WORKDIR /code
RUN pip install -r requirements/local.txt && pip install -r requirements/test.txt
",Keats/django-drf-template,project_name/Dockerfile
4862c926b120f237e174ff9d897dc8dc22cf4a29,700,"FROM pblittle/docker-logstash:0.20.0
MAINTAINER P. Barrett Little <barrett@barrettlittle.com> (@pblittle)

# Download packages required to run the test suite
#
RUN apt-get update \
    && apt-get install -yq \
        apt-utils \
        git \
        net-tools \
        --no-install-recommends \
    && rm -rf /var/cache/apt/* \
    && rm -rf /var/lib/apt/lists/*

# Download and install BATS test framework
#
RUN git clone https://github.com/sstephenson/bats.git /tmp/bats \
    && /tmp/bats/install.sh /usr/local \
    && rm -rf /tmp/bats

# $TERM needs to be set for bats
#
ENV TERM xterm-256color

ADD test.bats /app/test.bats

EXPOSE 9200 9300

CMD [ '/usr/local/bin/bats', '/app/test.bats' ]
",pblittle/docker-logstash,1.4/test/elasticsearch-linked/Dockerfile
62d4ac28b9bbdee97d23d0e5d13d2c441a8d24a5,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.6.6-1-x86_64.pkg.tar.xz /tmp/php-5.6.6-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.6.6-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.6.6/Dockerfile
19d27a50c9c30ff0449517aa30ecf098b467d260,1516,"FROM ubuntu:14.04

MAINTAINER Craig Citro <craigcitro@google.com>

# Pick up some TF dependencies
RUN apt-get update && apt-get install -y \
        curl \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-numpy \
        python-pip \
        python-scipy \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        && \
    python -m ipykernel.kernelspec

ENV TENSORFLOW_VERSION 0.8.0

# --- DO NOT EDIT OR DELETE BETWEEN THE LINES --- #
# These lines will be edited automatically by parameterized_docker_build.sh. #
# COPY _PIP_FILE_ /
# RUN pip --no-cache-dir install /_PIP_FILE_
# RUN rm -f /_PIP_FILE_

# Install TensorFlow CPU version from central repo
RUN pip --no-cache-dir install \
    http://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl
# --- ~ DO NOT EDIT OR DELETE BETWEEN THE LINES --- #

# Set up our notebook config.
COPY jupyter_notebook_config.py /root/.jupyter/

# Copy sample notebooks.
COPY notebooks /notebooks

# Jupyter has issues with being run directly:
#   https://github.com/ipython/ipython/issues/7062
# We just add a little wrapper script.
COPY run_jupyter.sh /

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

WORKDIR ""/notebooks""

CMD [""/run_jupyter.sh""]
",tensorflow/tensorflow,tensorflow/tools/docker/Dockerfile
8a4a677600226f9d133daf7ba7dcb9d91b5207b5,196,"FROM      ubuntu:latest

# Copy testrun.sh files into the container

ADD	./testrun.sh       /tmp/

RUN cp /tmp/testrun.sh /usr/local/bin/ && chmod +x /usr/local/bin/testrun.sh

CMD [""testrun.sh""]
",docker-java/docker-java,src/test/resources/buildTests/dockerignore/DockerfileIgnored/Dockerfile
15cb817167a705e5884937583893e3cd44e11a74,387,"FROM debian:jessie
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN apt-get update \
 && apt-get install -y --force-yes --no-install-recommends\
      apt-transport-https \
      ssh-client \
      build-essential \
      curl \
      ca-certificates \
      git \
      libicu-dev \
      lsb-release \
      python-all \
      rlwrap \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,base/debian/jessie/Dockerfile
4cc150978abdc5559bd581271a6b998b396718b2,671,"FROM stackbrew/debian:wheezy

[[ updateApt ]]
[[ addUserFiles ]]

WORKDIR [[ .Container.GetFirstMountedDir ]]

RUN apt-get install -y -f nginx

RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf

ADD default /etc/nginx/sites-enabled/default

# Add setup script
ADD setup.sh /root/setup.sh
RUN chmod +x /root/setup.sh

# Add custom setup script
[[ beforeAfterScripts ]]

[[ if .EmptyCmd ]]
CMD /bin/bash
[[ else ]]
CMD [[ if (.Container.HasBeforeScript) ]] /bin/bash /root/before-setup.sh && [[end]] /bin/bash /root/setup.sh \
    && (/etc/init.d/nginx start &) \
    [[ if (.Container.HasAfterScript) ]] && /bin/bash /root/after-setup.sh \[[end]]
    && /bin/bash
[[ end ]]
",marmelab/gaudi,templates/nginx/Dockerfile
cd37dcc514b3643fe3fedcb61abb919bafe09d1d,404,"# base on latest ruby base image
FROM ruby:2.2.1

# update and install dependencies
RUN apt-get update -qq
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential libpq-dev nodejs apt-utils

# setup app folders
RUN mkdir /app
WORKDIR /app

# copy over Gemfile and install bundle
ADD Gemfile /app/Gemfile
ADD Gemfile.lock /app/Gemfile.lock
RUN bundle install --jobs 20 --retry 5

Add . /app
",codeship/codeship-tool-examples,03.redis-postgres/Dockerfile
9c68f3f84b3c0ec74787428923800fd28cf6c32d,1096,"# This container should as much as possible be like amazone ubuntu container.
FROM ubuntu:14.04.3
MAINTAINER Danil Kutkevich <danil@kutkevich.org>

ENV REFRESHED_AT 2016-03-24

RUN localedef --force --inputfile=en_US --charmap=UTF-8 \
    --alias-file=/usr/share/locale/locale.alias \
    en_US.UTF-8
ENV LANG en_US.UTF-8

RUN apt-get --yes update
RUN apt-get --yes upgrade

RUN apt-get install --yes openssh-server python-apt sudo

USER root

RUN useradd --user-group --create-home --shell /bin/bash ubuntu \
    && echo 'ubuntu:ubuntu' | chpasswd && adduser ubuntu sudo
RUN echo 'ubuntu ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

USER ubuntu

RUN mkdir ~/.ssh
RUN touch ~/.ssh/authorized_keys

USER root

COPY ../../secure/local_docker.pub /home/ubuntu/.ssh/local_docker.pub
RUN chown ubuntu:ubuntu /home/ubuntu/.ssh/local_docker.pub

USER ubuntu

RUN cat ~/.ssh/local_docker.pub > ~/.ssh/authorized_keys
RUN touch ~/.ssh/known_hosts
RUN chmod 700 ~/.ssh
RUN chmod 600 ~/.ssh/authorized_keys

USER root

RUN mkdir /var/run/sshd && chmod 0755 /var/run/sshd
EXPOSE 22
CMD [""/usr/sbin/sshd"", ""-D""]
",fhirbase/fhirbase-plv8,perf/provisioning/Dockerfile
f2fbbe22694c1112584278b09ad8cc2d087ce06b,735,"FROM centos
MAINTAINER aophir@rmn.com

RUN yum install epel-release -y
RUN yum install -y \
    vim-enhanced \
    mlocate \
    git \
    python-pip \
    python-devel \ 
    postgres-devel \
    postgres-contrib \
    libpqxx-devel \
    npm

Run pip install --upgrade pip && \
    pip install email

#  The config file used to launch a local run
ADD ./dart-local.yaml /root

# preparing to run the webserver using the same env variables as above
ENV AWS_SECRET_ACCESS_KEY=not_needed_locally  \
    AWS_SECRET_ACCESS_KEY=not_needed_locally  \
    DART_ROLE=web  \
    DART_CONFIG=/root/dart-local.yaml  \ 
    PYTHONPATH=/tmp/src/python



ADD ./docker_CMD.sh /root
RUN chmod +x /root/docker_CMD.sh

WORKDIR /root
CMD ./docker_CMD.sh",RetailMeNotSandbox/dart,tools/vagrant/tests/statics/gold_files/subscription/Dockerfile
b9221f7beb921cc11b248c444173a77f3d7b4b89,333,"FROM bjodah/bjodahimg:v1.0
MAINTAINER BjÃ¶rn Dahlgren <bjodah@DELETEMEgmail.com>
RUN wget --quiet ""http://hera.physchem.kth.se/~chemreac/chemreac-0.3.0.tar.gz"" -O /tmp/ && \
export CPLUS_INCLUDE_PATH=""$CPLUS_INCLUDE_PATH:/usr/include/python2.7"" && \
cd /tmp && tar xzf chemreac-0.3.0.tar.gz && cd chemreac && python setup.py install
",chemreac/chemreac,scripts/docker_dist/Dockerfile
8117af5149331903bcafe7f40d2f89677c4494db,1047,"FROM artbio/galaxy-kickstart-base

MAINTAINER Marius van den Beek <m.vandenbeek@gmail.com>

COPY  .  /setup
WORKDIR /setup

RUN ansible-playbook -i extra-files/artimed/artimed_inventory.yml -c local galaxy.yml && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Expose port 80 (webserver), 21 (FTP server), 8800 (Proxy), 9002 (supvisord web app)
EXPOSE :80
EXPOSE :21
EXPOSE :8800
EXPOSE :9002

CMD printenv >> /etc/default/supervisor && bash -c ""source /etc/default/supervisor &&\
           ansible-playbook galaxy.yml -c local \
           --tags ""persists_galaxy,nginx_config,galaxy_config_files,galaxy_extras_job_conf"" --skip-tags=skip_supervisor_start_in_docker \
           --extra-vars nginx_galaxy_location=$NGINX_GALAXY_LOCATION \
           --extra-vars galaxy_admin=$GALAXY_CONFIG_ADMIN_USERS \
           --extra-vars ftp_upload_site=$IP_ADDRESS \
           -i inventory_files/docker && \
           /usr/bin/python /usr/bin/supervisord -c /etc/supervisor/supervisord.conf --nodaemon""
",ARTbio/ansible-artimed,dockerfiles/galaxy-kickstart-artimed/Dockerfile
8c179da6c8696faf0d08028b72b7157aea1f3728,2680,"# Copyright 2015-2016, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# A work-in-progress Dockerfile that allows running gRPC homebrew
# installations inside docker containers
FROM debian:jessie

# Core dependencies
RUN apt-get update && apt-get install -y \
  bzip2 curl git ruby wget

# Install linuxbrew
ENV PATH /home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH
RUN git clone https://github.com/Homebrew/linuxbrew.git /home/linuxbrew/.linuxbrew
RUN brew doctor || true

# Python dependency
RUN apt-get update && apt-get install -y python-dev
RUN curl https://bootstrap.pypa.io/get-pip.py | python

# NodeJS dependency
RUN touch .profile
RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash
RUN /bin/bash -l -c ""nvm install 0.12""

# Ruby dependency
RUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
RUN /bin/bash -l -c ""\curl -sSL https://get.rvm.io | bash -s stable""
RUN /bin/bash -l -c ""rvm install ruby-2.1""

# PHP dependency
RUN apt-get update && apt-get install -y php5 php5-dev php-pear phpunit unzip

RUN /bin/bash -l -c ""echo 'export PATH=/home/linuxbrew/.linuxbrew/bin:\$PATH' >> ~/.bashrc""

CMD [""bash""]
",chai2010/grpc-windows,grpc/grpc-release-0_13_0/tools/dockerfile/grpc_linuxbrew/Dockerfile
64d758cea42c25da0205df8d38b9c2a8ff2cbc43,585,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/rpm/generate.sh""!
#

FROM centos:7

RUN yum groupinstall -y ""Development Tools""
RUN yum -y swap -- remove systemd-container systemd-container-libs -- install systemd systemd-libs
RUN yum install -y btrfs-progs-devel device-mapper-devel glibc-static libselinux-devel selinux-policy selinux-policy-devel sqlite-devel tar

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS selinux
",coolhacks/docker-hacks,examples/docker-pull-dry-run/docker/contrib/builder/rpm/centos-7/Dockerfile
e37c05bc0aa49c7c7dde6851992ce0357dd55a17,364,"FROM haproxy:1
MAINTAINER Nazar Mokrynskyi <nazar@mokrynskyi.com>

RUN \
	apt-get update && \
	apt-get upgrade -y && \
	apt-get install -y --no-install-recommends inotify-tools && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/*


COPY haproxy.conf /usr/local/etc/haproxy/haproxy.conf.dist
COPY webserver-entrypoint.sh /

ENTRYPOINT [""/webserver-entrypoint.sh""]
",nazar-pc/docker-webserver,haproxy/Dockerfile
9fc09509f8c1a76f1a5b0f4199b136ebbfdbd6c4,433,"# Pull base image.
FROM node:0.12.4

ENV APP_USER mgreau

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN useradd --create-home --user-group --shell /bin/bash ${APP_USER}

RUN mkdir /data

# Install Bower & Grunt
RUN npm install -g bower grunt-cli

USER ${APP_USER}

# Define working directory.

WORKDIR /data

# Define default command.
CMD [""bash""]
",mgreau/docker4dev-tennistour-app,docker/dev/build/frontend/Dockerfile
5538e5ec739bec48a45c1743eddece6de95279ab,399,"########################################################################
# Dockerfile for provider container example
########################################################################

FROM busybox

MAINTAINER Joan Ordinas <jordinas@escoladeltreball.org>

COPY ECHO.sh /home/ECHO.sh

ENTRYPOINT [ ""nc"", ""-ll"", ""-p"", ""7"", ""-e"", ""/home/ECHO.sh"" ]

EXPOSE 7

# vim:syntax=dockerfile:ai:sw=4:ts=4
",fadado/shed,tests/ECHO/Dockerfile
415a81ffeb849b1d24f78862efedc49ada7de6ce,921,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/vsftp:latest
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/base:latest

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV FTP_USER     application
ENV FTP_PASSWORD application
ENV FTP_UID      1000
ENV FTP_GID      1000
ENV FTP_PATH     /data/ftp/

COPY conf/ /opt/docker/

# Install vsftp
RUN /usr/local/bin/apt-install \
        vsftpd \
    && ln -sf /opt/docker/etc/vsftpd/vsftpd.conf /etc/vsftpd.conf \
    && mkdir -p \
            /var/run/vsftpd/empty \
            /var/log/supervisor \
    && /opt/docker/bin/provision add --tag entrypoint  webdevops-vsftp \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-vsftp \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 20 21 12020 12021 12022 12023 12024 12025
",webdevops/Dockerfile,docker/vsftp/latest/Dockerfile
0be85e5da10e16e6b428f04060d37262e7b43673,257,"FROM cuda

RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-samples-$CUDA_PKG_VERSION && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /usr/local/cuda/samples/0_Simple/matrixMulCUBLAS
RUN make

CMD ./matrixMulCUBLAS -sizemult=10
",NVIDIA/nvidia-docker,samples/ubuntu/matrixMulCUBLAS/Dockerfile
701d7de07842c058131517910673a9747847cb8c,1957,"FROM haoyangz/matlab2014a-mcr8.3

MAINTAINER Haoyang Zeng <haoyangz@mit.edu>

RUN sudo apt-get update
RUN sudo apt-get install -yq tar r-base make gcc libc6-dev Docker git git-core git-email g++ gdb build-essential libboost-all-dev cmake mpich2 libmpich2-dev python-numpy python-scipy python-matplotlib python-tk python-pip lzop
RUN sudo apt-get -q -y install git git-core g++ build-essential libboost-all-dev cmake r-base python-pip lzop libgsl0-dev

RUN mkdir /scripts/
RUN mkdir /seq_data/
RUN mkdir /scripts/snp-kmer-scoring/
RUN mkdir /scripts/preprocess/
RUN mkdir /scripts/postprocess/
RUN mkdir /mcrtmp/

RUN mkdir /kmm
RUN git clone https://thashim-ro:*SybT2X9@bitbucket.org/ddkang/ccm_testing.git /kmm/master
RUN cd /kmm/master; git checkout glm_v2
RUN mkdir /kmm/master/build
RUN cd /kmm/master/build; cmake ..

RUN git clone https://thashim-ro:*SybT2X9@bitbucket.org/thashim/delete_later.git /kmm/nocov
RUN cd /kmm/nocov; git checkout no91
RUN mkdir /kmm/nocov/build
RUN cd /kmm/nocov/build; cmake ..

RUN chmod -R 777 /kmm

RUN echo ""r <- getOption('repos'); r['CRAN'] <- 'http://cran.us.r-project.org'; options(repos = r);"" > ~/.Rprofile
RUN Rscript -e ""install.packages('bitops')""
RUN Rscript -e ""install.packages('R.methodsS3')""
RUN Rscript -e ""install.packages('R.oo')""
RUN Rscript -e ""install.packages('R.utils')""
RUN Rscript -e ""install.packages('R.matlab')""

ENV LD_LIBRARY_PATH /opt/mcr/v83/runtime/glnxa64:/opt/mcr/v83/bin/glnxa64/
ENV XAPPLRESDIR /opt/mcr/v83/X11/app-defaults
ENV PATH $PATH:$LD_LIBRARY_PATH:$XAPPLRESDIR
ENV MCR_CACHE_ROOT /mcrtmp/

ADD run.r /scripts/
ADD seq_data/ /seq_data/
ADD kmersnp_module /scripts/
ADD preprocess/baseline/get_background_hg19_covar.R /scripts/preprocess/baseline/
ADD preprocess/kmer_mat/prepare_kmer_mat.R /scripts/preprocess/kmer_mat/
ADD postprocess/combineKSS/combine_snp.m /scripts/postprocess/combineKSS/

RUN chmod +x /scripts/run.r
RUN chmod -R 777 /scripts
RUN chmod -R 777 /mcrtmp
",gifford-lab/GERV,variant-scoring/Dockerfile
6ddfe829afc0429e7ed02b238ad02d010ab715ed,555,"FROM nodesource/precise-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.2.0-1nodesource1~precise1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/precise/node/5.2.0/Dockerfile
521bb2a41ee5940656123d03fc094356f65a03ba,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.5.6-1-x86_64.pkg.tar.xz /tmp/php-5.5.6-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.5.6-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.5.6/Dockerfile
ade9ed71cb4a5c92f181df14c4fdc30049217606,376,"FROM webratio/java:7

# Installs Ant
ENV ANT_VERSION 1.9.6
RUN cd && \
    wget -q http://www.us.apache.org/dist//ant/binaries/apache-ant-${ANT_VERSION}-bin.tar.gz && \
    tar -xzf apache-ant-${ANT_VERSION}-bin.tar.gz && \
    mv apache-ant-${ANT_VERSION} /opt/ant && \
    rm apache-ant-${ANT_VERSION}-bin.tar.gz
ENV ANT_HOME /opt/ant
ENV PATH ${PATH}:/opt/ant/bin",webratio/docker,ant/1.9.6/Dockerfile
c19b99723d0ef12b1f2196c9c67a683a846077c3,1116,"FROM buildpack-deps:wheezy

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NODE_VERSION 0.12.15

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.xz\$"" SHASUMS256.txt | sha256sum -c - \
  && tar -xJf ""node-v$NODE_VERSION-linux-x64.tar.xz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.xz"" SHASUMS256.txt.asc SHASUMS256.txt

CMD [ ""node"" ]
",nodejs/docker-node,0.12/wheezy/Dockerfile
1d097b57ac2c4c2e3f546dd01008d493eccf3ba7,675,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM redis

ADD run.sh /run.sh

RUN chmod a+x /run.sh

CMD /run.sh
",linux-on-ibm-z/kubernetes,examples/guestbook/redis-slave/Dockerfile
e6c57cf92d5a9a9150b5c5e7346f23fc2061ddb6,253,"FROM alpine:latest
WORKDIR /usr/local/bin
RUN apk add --update unzip curl && rm -rf /var/cache/apk/*
COPY fluent-agent-hydra /usr/local/bin/fluent-agent-hydra
COPY hydra.conf /etc/hydra.conf
CMD exec /usr/local/bin/fluent-agent-hydra -c /etc/hydra.conf
",fujiwara/fluent-agent-hydra,benchmark/hydra/Dockerfile
07af44ceb75fc224dae03127bb7d4e0795dd1ac2,701,"FROM java:openjdk-8u72-jdk

MAINTAINER itzg

ENV ES_VERSION 2.3.2

RUN wget -qO /tmp/es.tgz https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/$ES_VERSION/elasticsearch-$ES_VERSION.tar.gz && \
  cd /usr/share && \
  tar xf /tmp/es.tgz && \
  rm /tmp/es.tgz

ENV ES_HOME /usr/share/elasticsearch-$ES_VERSION
RUN useradd -d $ES_HOME -M -r elasticsearch && \
  chown -R elasticsearch: $ES_HOME

RUN mkdir /data /conf && touch /data/.CREATED /conf/.CREATED && chown -R elasticsearch: /data /conf
VOLUME [""/data"",""/conf""]

ADD start /start

WORKDIR $ES_HOME
USER elasticsearch

EXPOSE 9200 9300

ENV OPTS=-Dnetwork.host=_non_loopback_

CMD [""/start""]
",itzg/dockerfiles,elasticsearch/Dockerfile
08b297933f57f48582764b64ff852fc30115075c,1131,"FROM centos:7
MAINTAINER Maxfield Stewart

# Install Essentials
RUN yum update -y && \
    yum clean all

# Install Packages
RUN yum install -y git && \
    yum install -y wget && \
	yum install -y openssh-server && \
	yum install -y java-1.8.0-openjdk && \
	yum install -y sudo && \
	yum clean all

# gen dummy keys, centos doesn't autogen them like ubuntu does
RUN /usr/bin/ssh-keygen -A

# Set SSH Configuration to allow remote logins without /proc write access
RUN sed -ri 's/^session\s+required\s+pam_loginuid.so$/session optional pam_loginuid.so/' /etc/pam.d/sshd

# Create Jenkins User
RUN useradd jenkins -m -s /bin/bash

# Add public key for Jenkins login
RUN mkdir /home/jenkins/.ssh

COPY /files/authorized_keys /home/jenkins/.ssh/authorized_keys

RUN chown -R jenkins /home/jenkins
RUN chgrp -R jenkins /home/jenkins
RUN chmod 600 /home/jenkins/.ssh/authorized_keys
RUN chmod 700 /home/jenkins/.ssh

# Add the jenkins user to sudoers
RUN echo ""jenkins    ALL=(ALL)    ALL"" >> etc/sudoers

# Set Name Servers
COPY /files/resolv.conf /etc/resolv.conf

# Expose SSH port and run SSHD
EXPOSE 22
CMD [""/usr/sbin/sshd"",""-D""]
",maxfields2000/dockerjenkins_tutorial,tutorial_07/jenkins-slave/Dockerfile
22405dbd013328286488a0cfdeaa1f1b0d21d414,180,"FROM node:4

ENV HTTP_SERVER_VERSION 0.9.0
ENV PUBLIC_FOLDER /opt/www

RUN mkdir -p $PUBLIC_FOLDER
RUN npm install -g http-server@0.9.0

CMD http-server $PUBLIC_FOLDER

EXPOSE 8080",webratio/docker,nodejs-http-server/0.9.0/Dockerfile
2791f7c1a92ab1d936ec492fcb5be5ad3ea066a0,631,"
FROM centos:7

WORKDIR /root

ENV INSIDE_DOCKER Yes

# Install required tools
RUN yum install -y curl tar java-1.7.0-openjdk-devel expect rpm-build rpm-sign vim-enhanced

# Install Maven
RUN mkdir -p /usr/local/apache-maven
RUN curl -O http://archive.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz
RUN tar xzf apache-maven-3.2.5-bin.tar.gz --strip-components 1 -C /usr/local/apache-maven
ENV M2_HOME /usr/local/apache-maven
ENV PATH ${M2_HOME}/bin:${PATH}

# Install Pig
RUN cd /etc/yum.repos.d && curl -O http://www.apache.org/dist/bigtop/bigtop-1.1.0/repos/centos7/bigtop.repo
RUN yum install -y pig
",nielsbasjes/logparser,docker/centos7/Dockerfile
314401c4e5cbfcfcb79f75421822dd332e8f27ac,294,"# Copyright 2015 tsuru authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

FROM	tsuru/base-platform
ADD	. /var/lib/tsuru/elixir
RUN	cp /var/lib/tsuru/elixir/deploy /var/lib/tsuru
RUN	/var/lib/tsuru/elixir/install
",tsuru/platforms,elixir/Dockerfile
ffe5621ecd8be95501961fffa1d08e7d51acfc6f,447,"# set author and base
FROM centos
MAINTAINER Luis PabÃ³n <lpabon@redhat.com>

LABEL version=""1.0""
LABEL description=""CI Development build""

# post install config and volume setup
ADD ./heketi /usr/bin/heketi
ADD ./heketi.json /etc/heketi/heketi.json

RUN mkdir /var/lib/heketi
VOLUME /var/lib/heketi

# expose port, set user and set entrypoint with config option
ENTRYPOINT [""/usr/bin/heketi""]
EXPOSE 8080

CMD [""-config=/etc/heketi/heketi.json""]
",heketi/heketi,extras/docker/ci/Dockerfile
a53d2104b097c8bed059bd1d7c8c77b17238331c,918,"FROM alpine:3.3

RUN apk add --no-cache \
                bash \
                btrfs-progs \
                curl \
                e2fsprogs \
                iptables \
                xz

ENV DOCKER_BUCKET get.docker.com
ENV DOCKER_VERSION 1.10.2
ENV DOCKER_SHA256 3fcac4f30e1c1a346c52ba33104175ae4ccbd9b9dbb947f56a0a32c9e401b768

RUN curl -fSL ""https://${DOCKER_BUCKET}/builds/Linux/x86_64/docker-$DOCKER_VERSION"" -o /usr/local/bin/docker \
	&& echo ""${DOCKER_SHA256}  /usr/local/bin/docker"" | sha256sum -c - \
	&& chmod +x /usr/local/bin/docker

ENV DIND_COMMIT 3b5fac462d21ca164b3778647420016315289034

RUN curl -fSL ""https://raw.githubusercontent.com/docker/docker/3b5fac462d21ca164b3778647420016315289034/hack/dind"" -o /usr/local/bin/dind \
	&& chmod +x /usr/local/bin/dind

# Install golem binary
COPY golem /usr/local/bin/golem

VOLUME /var/lib/docker

ENTRYPOINT [ ""/usr/local/bin/dind"" ]
CMD [ ""golem"" ]
",docker/golem,images/Dockerfile
3620f2073e4bfd3add3f36596e15f85626c4ad30,547,"FROM quintenk/supervisor

MAINTAINER Quinten Krijger ""https://github.com/Krijger""

RUN apt-get -y install python-software-properties
RUN add-apt-repository ppa:webupd8team/java
RUN apt-get update && apt-get -y upgrade

# automatically accept oracle license
RUN echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
# and install java 8 oracle jdk
RUN apt-get -y install oracle-java8-installer && apt-get clean
RUN update-alternatives --display java 
ENV JAVA_HOME /usr/lib/jvm/java-8-oracle
",Krijger/docker-cookbooks,jdk8-oracle/Dockerfile
e2af5aed2c041277f5bd4ff9da9478ecb9d7b21d,2475,"# As Arch Linux has no official Docker image, bootstrap from Debian
# Usage: docker build -t archlinux . && docker run --rm -ti archlinux
FROM debian:sid
LABEL Description=""Arch Linux base image""

# Steps:
# - Install wget to be able to download and extract Arch Linux images
# - Download bootstrap image and extract it in /arch/root (cf. https://wiki.archlinux.org/index.php/Install_from_existing_Linux)
# - Switch over to Arch Linux, keeping Docker-special files
# - Configure pacman, locales, etc.
# - Initialize pacman keyring
# - Remove packages which are not needed and install some useful base packages
RUN \
    export DEBIAN_FRONTEND=noninteractive && \
    apt-get -qq update && \
    apt-get install -qqy wget && \
    apt-get clean && \
    gpg --keyserver hkp://pool.sks-keyservers.net. --recv-key 4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC && \
    mkdir /arch && cd /arch && \
    (wget -qO- https://mirror.rackspace.com/archlinux/iso/latest/sha1sums.txt | fgrep 'x86_64.tar' > sha1sum.txt) && \
    read -r SHA1 FILE < sha1sum.txt && \
    wget -q ""https://mirror.rackspace.com/archlinux/iso/latest/$FILE"" && \
    wget -q ""https://mirror.rackspace.com/archlinux/iso/latest/$FILE.sig"" && \
    gpg --verify ""$FILE.sig"" ""$FILE"" && \
    sha1sum -c sha1sum.txt && \
    tar -xpzf ""$FILE"" && \
    cd /arch/root.x86_64 && \
    rm -r /bin /lib* /opt /root /sbin /srv /usr /var && \
    LD_LIBRARY_PATH=/arch/root.x86_64/lib /arch/root.x86_64/lib/ld-linux-x86-64.so.* bin/mv bin lib* opt root sbin srv usr var / && \
    find /etc/* -maxdepth 0 -not \( -name resolv.conf -o -name hostname -o -name hosts \) -exec rm -r {} + && \
    rm /arch/root.x86_64/etc/hosts /arch/root.x86_64/etc/resolv.conf && \
    mv /arch/root.x86_64/etc/* /etc && \
    cd / && \
    rm -r /arch && \
    echo 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist && \
    ln -s /usr/share/zoneinfo/UTC /etc/localtime && \
    echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && \
    pacman-key --init && \
    pacman-key --populate archlinux && \
    pacman --noconfirm -Rn arch-install-scripts dbus hwids iptables kbd kmod libdbus libelf libseccomp systemd && \
    pacman --noconfirm -Syu diffutils gawk grep procps-ng sed tar which && \
    (pkill gpg-agent ; true) && \
    pacman --noconfirm -Sc && \
    rm -r /usr/share/info/* /usr/share/man/* && \
    rm -r /var/cache/pacman/pkg/* /var/lib/pacman/sync/* /var/log/*.log

CMD [""/usr/bin/bash""]
",fishilico/shared,machines/archlinux/Dockerfile
fa82185d56baf873d2f6d7fbee343a8d5f392e04,115,"FROM node:4

EXPOSE 3001/udp
EXPOSE  3000/tcp
EXPOSE 3003

COPY . /app
WORKDIR /app
RUN npm install

CMD npm start
",dokku/dokku,tests/apps/dockerfile-procfile/Dockerfile
31912c61f8f0c77d64464e2051f72b7209ddba27,635,"FROM java:openjdk-8u45-jdk

MAINTAINER tilen.faganel@me.com

RUN apt-get update -qq && apt-get install -y wget git

RUN wget http://mirrors.sonic.net/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz && \
       tar -zxf apache-maven-3.3.3-bin.tar.gz && rm apache-maven-3.3.3-bin.tar.gz && \
       mv apache-maven-3.3.3 /usr/local && ln -s /usr/local/apache-maven-3.3.3/bin/mvn /usr/bin/mvn

RUN mkdir /app

WORKDIR /app

ADD . /app

RUN mvn clean package -Pdeploy

ENV JAVA_ENV=PRODUCTION

EXPOSE 8080

CMD [""java"", ""-server"", ""-cp"", ""routes/target/classes:routes/target/dependency/*"", ""com.kumuluz.ee.EeApplication""]",TFaga/kumuluzee-examples,java-magazine-trains/routes/Dockerfile
3a1486fe644dc95570aa3537c1499c8c4bf128d7,307,"FROM jenkins

MAINTAINER ContainerSolutions


USER root
#TODO the group ID for docker group on my Ubuntu is 125, therefore I can only run docker commands if I have same group id inside. 
# Otherwise the socket file is not accessible.
RUN groupadd -g 125 docker && usermod -a -G docker jenkins 
USER jenkins
",ContainerSolutions/cd_demo,jenkins/Dockerfile
f937f64f071c0fa04e75a5bc78255157bb5daa47,174,"FROM tianon/qemu

RUN apt-get update && apt-get install -y --no-install-recommends \
		autopkgtest \
		vmdebootstrap \
	&& rm -rf /var/lib/apt/lists/*

CMD [""vmdebootstrap""]
",tianon/dockerfiles,qemu/vmdebootstrap/Dockerfile
c05cf51ad3bd0469b6cfa94a2c977a864d3bf1e1,282,"# ab (apache benchmark)
# in a container
#
# docker run --rm -it \
# 	jess/ab
#
FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apk update && apk add \
	apache2-ssl \
	apache2-utils \
	ca-certificates \
	htop \
	&& rm -rf /var/cache/apk/*

ENTRYPOINT [ ""ab"" ]
",coolhacks/docker-hacks,dockerfiles/ab/Dockerfile
4dbfb4cfac176a082b284d604949f10cca4fdac6,1923,"# VERSION:		  0.1
# DESCRIPTION:	  Create SimpleScreenRecorder in a container 
# AUTHOR:		  Jessica Frazelle <jess@docker.com>
# COMMENTS:
#	This file describes how to build SimpleScreenRecoder
#	in a container with all dependencies installed.
#	Tested on Debian Jessie.
# USAGE:
#	# Download ssr Dockerfile
#	wget http://raw.githubusercontent.com/jfrazelle/dockerfiles/master/ssr/Dockerfile
#
#	# Build ssr image
#	docker build -t ssr .
#
#	docker run -v /tmp/.X11-unix:/tmp/.X11-unix \
#		-e DISPLAY=unix$DISPLAY ssr
#

# Base docker image
FROM debian:jessie
MAINTAINER Jessica Frazelle <jess@docker.com>

# Install dependencies
RUN dpkg --add-architecture i386 && apt-get update && apt-get install -y \
	build-essential \
	ca-certificates \
	git \
	pkg-config \
	qt4-qmake \
	libqt4-dev \
	libavformat-dev \
	libavcodec-dev \
	libavutil-dev \
	libswscale-dev \
	libasound2-dev \
	libpulse-dev \
	libjack-jackd2-dev \
	libgl1-mesa-dev \
	libglu1-mesa-dev \
	libx11-dev \
	libxfixes-dev \
	libxext-dev \
	libxi-dev \
	g++-multilib \
	libx11-6 \
	libxext6 \
	libxfixes3 \
	libxfixes3:i386 \
	libglu1-mesa:i386 \
	sudo \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

# make adjustments
RUN cd /usr/lib/i386-linux-gnu && \
	ln -s libGL.so.1 libGL.so && \
	ln -s libGLU.so.1 libGLU.so && \
	ln -s libX11.so.6 libX11.so && \
	ln -s libXext.so.6 libXext.so && \
	ln -s libXfixes.so.3 libXfixes.so && \
	ldconfig

# add user
#RUN adduser --system --home=/src --shell=/bin/sh --no-create-home \
   # --group ssr

# clone source
RUN git clone https://github.com/MaartenBaert/ssr.git /src

# install
#RUN echo ""ssr ALL = NOPASSWD: /src/simple-build-and-install"" >> /etc/sudoers
RUN sed -i"".bak"" '10,13d' /src/simple-build-and-install
RUN sed -i"".bak"" '13,14d' /src/postinstall
RUN cd /src && \
	#chown -R ssr /src && \
	#sudo -u ssr 
	/src/simple-build-and-install

# Autorun ssr
CMD [""/usr/bin/simplescreenrecorder""]
",jfrazelle/dockerfiles,ssr/Dockerfile
d7e4f2c0acd32b08bf03ecbb8e2afc79ddeed64a,450,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/rpm/generate.sh""!
#

FROM centos:7

RUN yum groupinstall -y ""Development Tools""
RUN yum install -y btrfs-progs-devel device-mapper-devel glibc-static libselinux-devel sqlite-devel tar

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS selinux
",boucher/docker,contrib/builder/rpm/centos-7/Dockerfile
4b7f48ee3df5e025b602a108abda7369550a0935,1513,"# Run tor browser in a container
#
# docker run -v /tmp/.X11-unix:/tmp/.X11-unix \
#	-v /dev/snd:/dev/snd \
#	-e DISPLAY=unix$DISPLAY \
#	tor-browser
#
FROM debian:jessie
MAINTAINER Christian Koep <christian.koep@fom-net.de>

RUN apt-get update && apt-get install -y \
	ca-certificates \
	curl \
	libasound2 \
	libdbus-glib-1-2 \
	libgtk2.0-0 \
	libxrender1 \
	libxt6 \
	xz-utils \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

ENV HOME /home/user
RUN useradd --create-home --home-dir $HOME user \
	&& chown -R user:user $HOME

ENV LANG C.UTF-8

ENV TOR_VERSION 5.5a6-hardened
ENV TOR_FINGERPRINT 0x4E2C6E8793298290

# download tor and check signature
RUN cd /tmp \
	&& curl -sSOL ""https://dist.torproject.org/torbrowser/${TOR_VERSION}/tor-browser-linux64-${TOR_VERSION}_ALL.tar.xz"" \
	&& curl -sSOL ""https://dist.torproject.org/torbrowser/${TOR_VERSION}/tor-browser-linux64-${TOR_VERSION}_ALL.tar.xz.asc"" \
	&& mkdir ~/.gnupg \
	&& gpg --keyserver x-hkp://keys.gnupg.net --recv-keys ${TOR_FINGERPRINT} \
	&& gpg --fingerprint ${TOR_FINGERPRINT} | grep ""Key fingerprint = EF6E 286D DA85 EA2A 4BA7  DE68 4E2C 6E87 9329 8290"" \
	&& gpg --verify tor-browser-linux64-${TOR_VERSION}_ALL.tar.xz.asc \
	&& tar -vxJ --strip-components 1 -C /usr/local/bin -f tor-browser-linux64-${TOR_VERSION}_ALL.tar.xz \
	&& rm -rf tor-browser* \
	&& rm -rf ~/.gnupg


# good fonts
COPY local.conf /etc/fonts/local.conf

WORKDIR $HOME
USER user

ENTRYPOINT [""/bin/bash""]
CMD [ ""/usr/local/bin/Browser/start-tor-browser"" ]
",coolhacks/docker-hacks,dockerfiles/tor-browser/hardened/Dockerfile
14e8eb5045b2dee656330a9bf743a3762a673316,723,"FROM debian:jessie

RUN apt-get update && apt-get install -y wget logrotate && rm -rf /var/lib/apt/lists/*

ENV MMS_VERSION 4.2.0.263-1

# see https://mms.mongodb.com/settings/monitoring-agent
# click on ""Ubuntu 12.04+""
RUN wget -O mms.deb ""https://cloud.mongodb.com/download/agent/monitoring/mongodb-mms-monitoring-agent_${MMS_VERSION}_$(dpkg --print-architecture).ubuntu1604.deb"" \
	&& dpkg -i mms.deb \
	&& rm mms.deb

# missing dep in mms.deb
RUN apt-get update && apt-get install -y libsasl2-2 && rm -rf /var/lib/apt/lists/*

COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT [""docker-entrypoint.sh""]

USER mongodb-mms-agent
CMD [""mongodb-mms-monitoring-agent"", ""-conf"", ""/etc/mongodb-mms/monitoring-agent.config""]
",tianon/dockerfiles,mongodb-mms/Dockerfile
28dc652c8fdefbee924286761a7b33375046909a,2453,"FROM rhscl/s2i-base-rhel7:1

# This image provides an Apache+PHP environment for running PHP
# applications.

EXPOSE 8080

ENV PHP_VERSION=5.6 \
    PATH=$PATH:/opt/rh/rh-php56/root/usr/bin

LABEL io.k8s.description=""Platform for building and running PHP 5.6 applications"" \
      io.k8s.display-name=""Apache 2.4 with PHP 5.6"" \
      io.openshift.expose-services=""8080:http"" \
      io.openshift.tags=""builder,php,php56,rh-php56""

# Labels consumed by Red Hat build service
LABEL Name=""rhscl/php-56-rhel7"" \
      BZComponent=""rh-php56-docker"" \
      Version=""5.6"" \
      Release=""14.3"" \
      Architecture=""x86_64""

# Install Apache httpd and PHP
RUN yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    INSTALL_PKGS=""rh-php56 rh-php56-php rh-php56-php-mysqlnd rh-php56-php-pgsql rh-php56-php-bcmath \
                  rh-php56-php-gd rh-php56-php-intl rh-php56-php-ldap rh-php56-php-mbstring rh-php56-php-pdo \
                  rh-php56-php-pecl-memcache rh-php56-php-process rh-php56-php-soap rh-php56-php-opcache rh-php56-php-xml \
                  rh-php56-php-pecl-xdebug"" && \
    yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum clean all -y

# Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH
COPY ./s2i/bin/ $STI_SCRIPTS_PATH

# Each language image can have 'contrib' a directory with extra files needed to
# run and build the applications.
COPY ./contrib/ /opt/app-root

# In order to drop the root user, we have to make some directories world
# writeable as OpenShift default security model is to run the container under
# random UID.
RUN sed -i -f /opt/app-root/etc/httpdconf.sed /opt/rh/httpd24/root/etc/httpd/conf/httpd.conf && \
    sed -i '/php_value session.save_path/d' /opt/rh/httpd24/root/etc/httpd/conf.d/rh-php56-php.conf && \
    head -n151 /opt/rh/httpd24/root/etc/httpd/conf/httpd.conf | tail -n1 | grep ""AllowOverride All"" || exit && \
    echo ""IncludeOptional /opt/app-root/etc/conf.d/*.conf"" >> /opt/rh/httpd24/root/etc/httpd/conf/httpd.conf && \
    mkdir /tmp/sessions && \
    chmod -R a+rwx /etc/opt/rh/rh-php56 && \
    chmod -R a+rwx /opt/rh/httpd24/root/var/run/httpd && \
    chmod -R a+rwx /tmp/sessions && \
    chown -R 1001:0 /opt/app-root /tmp/sessions

USER 1001

# Set the default CMD to print the usage of the language image
CMD $STI_SCRIPTS_PATH/usage
",sclorg/rhscl-dockerfiles,rhel7.rh-php56/Dockerfile
8c90295c84146a6fc3fb9d19ad4f4c3a19a24208,351,"# Emby Server
FROM emby/emby-base
ENV APP_NAME=""emby-server"" IMG_NAME=""embyserver"" TAG_NAME=""dev"" PKG_NAME=""emby-server-dev""

RUN zypper --gpg-auto-import-keys ref \
 && zypper --non-interactive in $PKG_NAME \
 && zypper cc --all \
 && rm -rf /var/cache/zypp*

VOLUME [ ""/config"" ]
EXPOSE 8096 8920 7359/udp 1900/udp

COPY root /
ENTRYPOINT [""/init""]
",MediaBrowser/Emby.Build,docker-containers/dev/Dockerfile
f3a41473d6a6152317d0da17fd92b3d39c27c671,1307,"FROM ubuntu
RUN \
 sed 's/main$/main universe/' -i /etc/apt/sources.list && \
 apt-get update && \
 env DEBIAN_FRONTEND=noninteractive apt-get install -y curl
RUN \
 cd /tmp && \
 (curl -L  https://github.com/coreos/etcd/releases/download/v2.0.9/etcd-v2.0.9-linux-amd64.tar.gz | tar -xz) && \
 mkdir -p /opt/etcd/bin && \
 cp -v /tmp/etcd-v2.0.9-linux-amd64/etcd /opt/etcd/bin && \
 cp -v /tmp/etcd-v2.0.9-linux-amd64/etcdctl /opt/etcd/bin && \
 rm -rf /tmp/etcd-v2.0.9-linux-amd64
WORKDIR /opt/etcd
VOLUME [""/opt/etcd/data""]
CMD MY_IP=$(awk ""/${HOSTNAME}/ {print \$1}"" < /etc/hosts) && \
    export HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL:-100} && \
    echo ""My IP: ${MY_IP}"" && \
    echo ""Container host: ${CONTAINER_HOST}"" && \
    echo ""My Discovery: ${DISCOVERY}"" && \
    echo ""Heartbeat interval: ${HEARTBEAT_INTERVAL}"" && \
    /opt/etcd/bin/etcd --discovery=""${DISCOVERY}"" \
          --name=${ETCD_NAME} \
          --advertise-client-urls=http://${CONTAINER_HOST}:4001 \
          --initial-advertise-peer-urls=http://${CONTAINER_HOST}:7001 \
          --listen-client-urls=http://${MY_IP}:4001 \
          --listen-peer-urls=http://${MY_IP}:7001 \
          --data-dir=/opt/etcd/data \
          --heartbeat-interval=${HEARTBEAT_INTERVAL} \
          --election-timeout=6000
EXPOSE 4001 7001

",google/certificate-transparency,cloud/etcd/Dockerfile
04cc369217ef936327d7523a5a8db4a1cdde46bc,219,"FROM 2gis/openstack-kilo-base
MAINTAINER 2GIS

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        heat-api-cfn && \
    apt-get clean

ADD root/ /

EXPOSE 8000
ENTRYPOINT [""/sbin/my_init""]
",2gis/whalestack,docker/openstack/heat/heat-api-cfn/Dockerfile
58500a2fbebb81ab28d40195f428a63d3c995541,329,"FROM ubuntu:vivid

RUN apt-get update && \
    apt-get install -y git \
                    libpam0g-dev \
                    libcairo2-dev \
                    libxcb* \
                    libxkbcommon* \
                    libev-dev && \
    git clone https://github.com/Lixxia/i3lock.git && \
    cd i3lock && \
    make 
",jamesnetherton/dockerfiles,i3lock/Dockerfile
a44068528f0578deda526685d00a3ebb478407f1,342,"FROM java:8
ADD order-1.0.0-SNAPSHOT.jar app.jar
ADD selfsigned.cer /selfsigned.cer
RUN bash -c 'keytool -import -file selfsigned.cer -alias selfsigned -noprompt -storepass changeit'
VOLUME /tmp
VOLUME /target
RUN bash -c 'touch /app.jar'
EXPOSE 9301
ENTRYPOINT [""java"",""-Xmx256M"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]
",thomasletsch/moserp,backend/order-module/order/src/main/docker/Dockerfile
1d6595cbecab93ac2e0c7edc392ab6a2fb248cec,692,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php-nginx:ubuntu-15.10
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/php:ubuntu-15.10

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm
ENV WEB_PHP_SOCKET  127.0.0.1:9000

COPY conf/ /opt/docker/

# Install nginx
RUN /usr/local/bin/apt-install \
        nginx \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-nginx --role webdevops-php-nginx \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/php-nginx/ubuntu-15.10/Dockerfile
64ea2c8d3a5a1798d9fef6b274716d64e4daa1ba,578,"FROM ubuntu:12.10
MAINTAINER Antonin Hildebrand <antonin@binaryage.com>

RUN apt-get update
RUN apt-get install -y wget make g++ python-leveldb libboost-all-dev libssl-dev libdb++-dev
RUN wget http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/bitcoin-0.8.6-linux.tar.gz
RUN tar xfz bitcoin-0.8.6-linux.tar.gz
RUN cd bitcoin-0.8.6-linux/src/src && make USE_UPNP= -f makefile.unix
RUN ln -s /bitcoin-0.8.6-linux/src/src/bitcoind /bin/bitcoind

ADD . /bitcoind
WORKDIR /bitcoind

EXPOSE 8333
EXPOSE 8332

ADD	enter /enter
RUN	chmod +x /enter
ENTRYPOINT [""/enter""]",binaryage/electrum-server-docker,bitcoind/Dockerfile
0560d1e3cbf95e6a531bb0114c84eb2ddde518b7,3163,"FROM steeve/cross-compiler:windows-x86
MAINTAINER Steeve Morin ""steeve.morin@gmail.com""

RUN mkdir -p /build
WORKDIR /build

# Install Boost.System
ENV BOOST_VERSION 1.58.0
RUN curl -L http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_`echo ${BOOST_VERSION} | sed 's/\\./_/g'`.tar.bz2/download | tar xvj && \
    cd boost_`echo ${BOOST_VERSION} | sed 's/\\./_/g'`/ && \
    ./bootstrap.sh --prefix=${CROSS_ROOT} && \
    echo ""using gcc : mingw32 : ${CROSS_TRIPLE}-c++ ;"" > ${HOME}/user-config.jam && \
    ./b2 --with-date_time --with-system --prefix=${CROSS_ROOT} toolset=gcc-mingw32 link=static variant=release threading=multi target-os=windows threadapi=win32 install && \
    rm -rf ${HOME}/user-config.jam && \
    rm -rf `pwd`

# Install OpenSSL
ENV OPENSSL_VERSION 1.0.2c
RUN curl -L http://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar xvz && \
    cd openssl-${OPENSSL_VERSION}/ && \
    CROSS_COMPILE=${CROSS_TRIPLE}- ./Configure threads no-shared mingw --prefix=${CROSS_ROOT} && \
    make && make install && \
    rm -rf `pwd`

# Somehow this is needed or libtorrent complains about boost
RUN ${CROSS_TRIPLE}-ranlib ${CROSS_ROOT}/lib/*.a

# Install libtorrent
# Changes:
# - define WIN32, _UNICODE, IPV6_TCLASS=39
ENV LIBTORRENT_VERSION 1.0.5
RUN curl -L http://sourceforge.net/projects/libtorrent/files/libtorrent/libtorrent-rasterbar-${LIBTORRENT_VERSION}.tar.gz/download | tar xvz && \
    cd libtorrent-rasterbar-${LIBTORRENT_VERSION}/ && \
    sed -i 's/$PKG_CONFIG openssl --libs-only-/$PKG_CONFIG openssl --static --libs-only-/' ./configure && \
    sed -i -e s/Windows.h/windows.h/ -e s/Wincrypt.h/wincrypt.h/ ./ed25519/src/seed.cpp && \
    \
    PKG_CONFIG_PATH=${CROSS_ROOT}/lib/pkgconfig/ \
    CC=${CROSS_TRIPLE}-cc CXX=${CROSS_TRIPLE}-c++ \
    CFLAGS=""${CFLAGS} -O2 -DUNICODE -D_UNICODE -DWIN32 -DIPV6_TCLASS=39"" \
    CXXFLAGS=""${CXXFLAGS} ${CFLAGS}"" \
    ./configure --enable-static --disable-shared --disable-deprecated-functions \
    --host=${CROSS_TRIPLE} --prefix=${CROSS_ROOT} \
    --with-boost=${CROSS_ROOT} --with-boost-libdir=${CROSS_ROOT}/lib && \
    \
    make && make install && \
    rm -rf `pwd`

# Install SWIG
# Need to build from >3.0.2 because Go 1.4.2
ENV SWIG_VERSION 5c57a8c877f88c9388b68067d665c63546244ba0
RUN apt-get update && apt-get install -y automake libpcre3-dev bison yodl
RUN curl -L https://github.com/swig/swig/archive/${SWIG_VERSION}.tar.gz | tar xvz && \
    cd swig-${SWIG_VERSION}/ && \
    curl -L https://github.com/steeve/swig/compare/swig:${SWIG_VERSION}...packed-struct-libtorrent.diff | patch -p1 && \
    curl -L https://github.com/steeve/swig/compare/swig:${SWIG_VERSION}...fix-windows.diff | patch -p1 && \
    ./autogen.sh && \
    ./configure && make && make install && \
    rm -rf `pwd`

# Install Golang
ENV GO_VERSION 1.4.2
RUN cd /usr/local && \
    curl -L http://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar xvz && \
    cd /usr/local/go/src && \
    CC_FOR_TARGET=${CROSS_TRIPLE}-cc CXX_FOR_TARGET=${CROSS_TRIPLE}-c++ GOOS=windows GOARCH=386 CGO_ENABLED=1 ./make.bash
ENV PATH ${PATH}:/usr/local/go/bin

WORKDIR /
RUN rm -rf /build
",steeve/libtorrent-go,windows-x86/Dockerfile
af3ade235b65b720fa17bb8a25e83e069c710c9d,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-4.4.8-1-x86_64.pkg.tar.xz /tmp/php-4.4.8-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-4.4.8-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-4.4.8/Dockerfile
365c7baea163e3c1a1fc5a921ee092544391e18b,299,"FROM node:4

MAINTAINER Sean Macdonald <sean.macdonald@stjoseph.com>

#	bootstrap
RUN mkdir -p /usr/src/app
COPY ./package.json /usr/src/
WORKDIR /usr/src
RUN npm install
COPY ./ /usr/src/app/
WORKDIR /usr/src/app

#	Orchestra
LABEL io.sjc.orchestra.version=""0.0.1""

CMD [""npm"",""start""]
EXPOSE 8888
",coolhacks/docker-hacks,examples/tweedy-zebra/dogs/services/nodejs/Dockerfile
3a7496d4552a7fa2a50655b466d4fdabfe8c793b,637,"FROM alpine:3.3

RUN apk add openssh --update

RUN adduser -D alice && (echo alice:alice | chpasswd)
COPY id_ecdsa /home/alice/.ssh/id_ecdsa
COPY id_ecdsa.pub /home/alice/.ssh/id_ecdsa.pub
COPY id_ecdsa.pub /home/alice/.ssh/authorized_keys
COPY ssh_host_ecdsa_key /etc/ssh/ssh_host_ecdsa_key
COPY ssh_host_ecdsa_key.pub /etc/ssh/ssh_host_ecdsa_key.pub
RUN chmod 600 /home/alice/.ssh/* \
  && chmod 700 /home/alice/.ssh \
  && chown -R alice:alice /home/alice \
  && chmod 600 /etc/ssh/ssh_host_ecdsa_key \
  && chmod 644 /etc/ssh/ssh_host_ecdsa_key.pub
COPY sshd_config /etc/ssh/sshd_config

EXPOSE 22
CMD [""/usr/sbin/sshd"", ""-D"", ""-e""]
",eagletmt/libssh-ruby,spec/Dockerfile
c68fcd4c00fd3f153bcab2c09a8912fda478ed88,497,"# mxabierto base image
# Base OS installation with common packages and files
# Build:
#   docker build -t mxabierto/base .
# Usage:
#   docker run --rm -it mxabierto/base

# Base image
FROM debian:wheezy

MAINTAINER bcessa <ben@pixative.com>

# Add gosu
ADD https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64 /bin/gosu
RUN chmod +x /bin/gosu

# Common files
ADD root /root

# Enviroment variables
ENV HOME=/root

# Working directory
WORKDIR /root

# Default command
CMD [""/bin/bash""]
",mxabierto/dockerfile,base/Dockerfile
92afa0aac6d1cbcded2c4615290e5792bffa782c,841,"FROM phusion/baseimage:0.9.16
MAINTAINER Open Knowledge

# set UTF-8 locale
RUN locale-gen en_US.UTF-8 && \
    echo 'LANG=""en_US.UTF-8""' > /etc/default/locale

RUN apt-get -qq update

# Install required packages
RUN DEBIAN_FRONTEND=noninteractive apt-get -qq -y install \
        python-minimal \
        python-dev \
        python-virtualenv \
        libevent-dev \
        libpq-dev \
        libxml2-dev \
        libxslt1-dev \
        build-essential

ENV DATAPUSHER_HOME /usr/lib/ckan/datapusher
RUN virtualenv $DATAPUSHER_HOME

ADD datapusher $DATAPUSHER_HOME/src/datapusher
RUN pip install pip==1.4.1
RUN pip install -r $DATAPUSHER_HOME/src/datapusher/requirements.txt

WORKDIR $DATAPUSHER_HOME/src/datapusher/
EXPOSE 8800

CMD [ ""python"", ""datapusher/main.py"", ""deployment/datapusher_settings.py""]
",ckan/ckan-docker,_service-provider/_datapusher/Dockerfile
dab7b715252f31f8baca5caa8f6673b72c9a724e,195,"FROM scratch
MAINTAINER Neerav Kumar <me@nero.im>
# mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t trusty.tar.xz trusty http://sg.archive.ubuntu.com/ubuntu/
ADD trusty.tar.xz /
",neeravkumar/dockerfiles,trusty/Dockerfile
9f55a441538a82fbcfc40a1b821455ec5b7d497f,2058,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:14.04

# Install Git, which is missing from the Ubuntu base images.
RUN apt-get update && apt-get install -y git

# Add the dependencies from the hbase_docker folder and delete ones we don't need.
WORKDIR /root
ADD . /root
RUN find . -not -name ""*tar.gz"" -delete

# Install Java.
RUN mkdir -p /usr/java
RUN tar xzf *jdk* --strip-components 1 -C /usr/java
ENV JAVA_HOME /usr/java

# Install Maven.
RUN mkdir -p /usr/local/apache-maven
RUN tar xzf *maven* --strip-components 1 -C /usr/local/apache-maven
ENV MAVEN_HOME /usr/local/apache-maven

# Add Java and Maven to the path.
ENV PATH /usr/java/bin:/usr/local/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Pull down HBase and build it into /root/hbase-bin.
RUN git clone http://git.apache.org/hbase.git -b branch-1
RUN mvn clean install -DskipTests assembly:single -f ./hbase/pom.xml
RUN mkdir -p hbase-bin
RUN tar xzf /root/hbase/hbase-assembly/target/*tar.gz --strip-components 1 -C /root/hbase-bin

# Set HBASE_HOME, add it to the path, and start HBase.
ENV HBASE_HOME /root/hbase-bin
ENV PATH /root/hbase-bin/bin:/usr/java/bin:/usr/local/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

CMD [""/bin/bash"", ""-c"", ""start-hbase.sh; hbase shell""]
",cloudera/impala-kudu,thirdparty/hbase-1.2.0-cdh5.7.0/dev-support/hbase_docker/Dockerfile
c0399a330f3da82a7d6b6e34d28fe2d727d68d59,2324,"
##################################################
#                                                #
# DO NOT EDIT THIS FILE MANUALLY                 #
# AUTOMATICALLY CREATED WITH docker-builder.sh   #
#                                                #
##################################################
  

FROM whatwedo/base:latest
RUN apt-get update -y && \
apt-get install -y apache2
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid
ENV APACHE_RUN_DIR /var/run/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
RUN mkdir -p $APACHE_RUN_DIR $APACHE_LOCK_DIR $APACHE_LOG_DIR && \
rm -rf /var/www/html/* && \
chown -R www-data /var/www/ && \
chmod -R 755 /var/www/ && \
sed -i '/<Directory \/var\/www\/>/,/<\/Directory>/ s/AllowOverride None/AllowOverride all/' /etc/apache2/apache2.conf && \
echo ""#\0041/bin/bash"" > /bin/start-apache && \
echo ""rm -rf /run/httpd/*"" >> /bin/start-apache && \
echo ""apache2 -D FOREGROUND"" >> /bin/start-apache && \
chmod 755 /bin/start-apache && \
touch /var/log/apache2/access.log && chown www-data /var/log/apache2/access.log && \
touch /var/log/apache2/error.log && chown www-data /var/log/apache2/error.log
COPY files/supervisord/apache.conf /etc/supervisor/conf.d/apache.conf
RUN add-apt-repository -y ppa:ondrej/php5-5.6 && \
apt-get update && \
apt-get install php5-cli php5-common php5-cgi php5-curl php5-imagick php5-imap php5-pgsql php5-sqlite php5-mysql php5-fpm php5-mcrypt php5-ldap php5-json php5-intl php5-gd -y && \
echo ""cgi.fix_pathinfo = 0;"" >> /etc/php5/fpm/php.ini && \
echo ""php_flag[expose_php] = Off"" >> /etc/php5/fpm/pool.d/www.conf && \
echo ""php_admin_value[upload_max_filesize] = 32M"" >> /etc/php5/fpm/pool.d/www.conf && \
echo ""php_admin_value[post_max_size] = 32M"" >> /etc/php5/fpm/pool.d/www.conf && \
echo ""php_flag[display_errors] = off"" >> /etc/php5/fpm/pool.d/www.conf && \
echo ""php_admin_flag[log_errors] = on"" >> /etc/php5/fpm/pool.d/www.conf && \
echo ""php_flag[expose_php] = Off"" >> /etc/php5/fpm/pool.d/www.conf && \
chmod -R 777 /var/lib/php5 && \
apt-get install -y libapache2-mod-php5 && \
apt-get autoremove -y && \
apt-get clean -y && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
EXPOSE 80
EXPOSE 443
LABEL ch.whatwedo.image.base=""whatwedo/apache-php56""
",whatwedo/docker-base-images,dist/apache-php56/Dockerfile
b1d939fffee558056cc23127126b0013db8e0a1a,227,"# Example - Kafka
#
# Agent running a Kafka check

FROM datadog/docker-dd-agent

# Install JMXFetch dependencies
RUN apk add --update openjdk7-jre

# Add Kafka check configuration
ADD kafka.yaml /etc/dd-agent/conf.d/kafka.yaml
",DataDog/docker-dd-agent,alpine/examples/kafka/Dockerfile
e809ba719a743229fd680322b66542cd88c95576,506,"FROM golang:1.6.2
RUN apt-get update && \
	apt-get install -y libpcap-dev python-requests time file && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN go clean -i net && \
	go install -tags netgo std && \
	go install -race -tags netgo std
RUN go get -tags netgo \
		github.com/fzipp/gocyclo \
		github.com/golang/lint/golint \
		github.com/kisielk/errcheck \
		github.com/mjibson/esc \
		github.com/client9/misspell/cmd/misspell && \
	rm -rf /go/pkg/ /go/src/
COPY build.sh /
ENTRYPOINT [""/build.sh""]
",weaveworks/scope,backend/Dockerfile
ffef6ae4ddb5f8443a8341bf7572c576299dbc81,236,"FROM java7jre_image

ENV HOME /root
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update

RUN apt-get install -y python-pip zookeeper curl jq

RUN pip install awscli

ADD ./scripts /scripts

# Define default command.
CMD [""bash""]




",SeldonIO/seldon-vm,images/semantic_vectors_image/Dockerfile
d2c4d1acfed7f897c3b26e19a99e44ef8af70bf7,440,"FROM golang:alpine

ENV GIN_MODE release
RUN apk add --update git bash && rm -rf /var/cache/apk/*
RUN go get -d github.com/channelmeter/vault-gatekeeper-mesos && \
	cd $GOPATH/src/github.com/channelmeter/vault-gatekeeper-mesos && \
	git checkout tags/0.1.3
RUN cd $GOPATH/src/github.com/channelmeter/vault-gatekeeper-mesos && \
	/bin/bash ./build.bash && cp ./vltgatekeeper /bin/vltgatekeeper

EXPOSE 9201

ENTRYPOINT [""/bin/vltgatekeeper""]",ChannelMeter/vault-gatekeeper-mesos,dockerfile/Dockerfile
6f88c1aed4be5d0e9df8a79796799113c6467f0f,298,"FROM alpine:3.3
RUN apk add --update python
RUN apk add --update --virtual build-dependencies \
    python-dev \
    py-pip \
    && pip install requests==2.9.1 \
    && pip install docker-py==1.8.0 \
    && apk del build-dependencies
ADD . /src/
ENV log_level INFO
CMD [""python"", ""/src/agent.py""]
",CheggEng/ecs_id_mapper,agent/Dockerfile
eeae7985dfebf18bef224a93cfdc3a77f58f9fde,661,"# FROM debian:jessie
FROM dorajistyle/golang-mysql-base
MAINTAINER JoongSeob Vito Kim <dorajissanai@nate.com>

ENV USER_PATH /go/src/github.com/dorajistyle
ENV PROJECT_PATH $USER_PATH/goyangi

WORKDIR /go/src
RUN mkdir -p $USER_PATH
WORKDIR $USER_PATH
RUN mkdir $PROJECT_PATH
ADD . $PROJECT_PATH
WORKDIR $PROJECT_PATH/frontend/canjs/compiler
RUN gulp
WORKDIR $PROJECT_PATH/migrate
# RUN goop install
RUN /usr/bin/mysqld_safe & \
sleep 10s && \
mysql -uroot -e 'create database goyangi_dev' && \
goop exec go run migrate.go

WORKDIR $PROJECT_PATH
#RUN /usr/bin/mysqld_safe & \
#    sleep 10s && \
#    go run server.go
EXPOSE 3001
ENTRYPOINT [""./run_server.sh""]
",dorajistyle/goyangi,dockerFiles/main/local-mysql/Dockerfile
0b4ae22bc3bba49fbe3a06ceba8cf99d911c563c,1076,"FROM ubuntu:vivid
MAINTAINER Joel Martin <github@martintribe.org>

##########################################################
# General requirements for testing or common across many
# implementations
##########################################################

RUN apt-get -y update

# Required for running tests
RUN apt-get -y install make python

# Some typical implementation and test requirements
RUN apt-get -y install curl libreadline-dev libedit-dev

RUN mkdir -p /mal
WORKDIR /mal

##########################################################
# Specific implementation requirements
##########################################################

# Guile
RUN apt-get -y install libunistring-dev libgc-dev autoconf libtool flex gettext texinfo libgmp-dev
RUN apt-get -y install git pkg-config libffi-dev
# TODO: remove /tmp/guile in same command
RUN git clone git://git.sv.gnu.org/guile.git /tmp/guile \
    && cd /tmp/guile && ./autogen.sh && ./configure && make && make install
RUN ldconfig
# TODO: move this up with other deps
RUN apt-get -y install libpcre3 libpcre3-dev

",kanaka/mal,guile/Dockerfile
e66c083f0dad433ccd13aa656970877d8a553584,2974,"FROM openshift/base-centos7

# This image provides a Node.JS environment you can use to run your Node.JS
# applications.

MAINTAINER RyanJ <ryanj@redhat.com>

EXPOSE 8080

# This image will be initialized with ""npm run $NPM_RUN""
# See https://docs.npmjs.com/misc/scripts, and your repo's package.json
# file for possible values of NPM_RUN
ENV NPM_RUN=start \
    NODE_VERSION=6.2.2 \
    NPM_CONFIG_LOGLEVEL=info \
    NPM_CONFIG_PREFIX=$HOME/.npm-global \
    PATH=$HOME/node_modules/.bin/:$HOME/.npm-global/bin/:$PATH \
    NPM_VERSION=3 \
    DEBUG_PORT=5858 \
    NODE_ENV=production \
    DEV_MODE=false

LABEL io.k8s.description=""Platform for building and running Node.js applications"" \
      io.k8s.display-name=""Node.js v$NODE_VERSION"" \
      io.openshift.expose-services=""8080:http"" \
      io.openshift.tags=""builder,nodejs,nodejs$NODE_VERSION"" \
      com.redhat.deployments-dir=""/opt/app-root/src""

# Download and install a binary from nodejs.org
# Add the gpg keys listed at https://github.com/nodejs/node
RUN set -ex && \
  for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done && \
  INSTALL_PKGS=""bzip2 nss_wrapper"" && \
  yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
  rpm -V $INSTALL_PKGS && \
  yum clean all -y && \
  curl -o node-v${NODE_VERSION}-linux-x64.tar.gz -sSL https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz && \
  curl -o SHASUMS256.txt.asc -sSL https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc && \
  gpg --batch -d SHASUMS256.txt.asc | grep "" node-v${NODE_VERSION}-linux-x64.tar.gz\$"" | sha256sum -c - && \
  tar -zxf node-v${NODE_VERSION}-linux-x64.tar.gz -C /usr/local --strip-components=1 && \
  npm install -g npm@${NPM_VERSION} && \
  find /usr/local/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; \
  rm -rf ~/node-v${NODE_VERSION}-linux-x64.tar.gz ~/SHASUMS256.txt.asc /tmp/node-v${NODE_VERSION} ~/.npm ~/.node-gyp ~/.gnupg \
    /usr/share/man /tmp/* /usr/local/lib/node_modules/npm/man /usr/local/lib/node_modules/npm/doc /usr/local/lib/node_modules/npm/html

# Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH
COPY ./s2i/bin/ $STI_SCRIPTS_PATH

# Each language image can have 'contrib' a directory with extra files needed to
# run and build the applications.
COPY ./contrib/ /opt/app-root

# Drop the root user and make the content of /opt/app-root owned by user 1001
RUN chown -R 1001:0 /opt/app-root
USER 1001

# Set the default CMD to print the usage of the language image
CMD $STI_SCRIPTS_PATH/usage
",ryanj/origin-s2i-nodejs,nodejs.org/Dockerfile
01d9c42d1bbabe7c15d805fe18e0c2d9e1359461,1041,"# PHPUnit Docker Container.
FROM composer/composer:php7
MAINTAINER Julien Breux <julien.breux@gmail.com>

# Run some Debian packages installation.
ENV PACKAGES=""php-pear curl""
RUN apt-get update && \
    apt-get install -yq --no-install-recommends $PACKAGES && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Run xdebug installation.
RUN curl -L http://pecl.php.net/get/xdebug-2.4.0.tgz >> /usr/src/php/ext/xdebug.tgz && \
    tar -xf /usr/src/php/ext/xdebug.tgz -C /usr/src/php/ext/ && \
    rm /usr/src/php/ext/xdebug.tgz && \
    docker-php-ext-install xdebug-2.4.0 && \
    docker-php-ext-install pcntl && \
    php -m

# Goto temporary directory.
WORKDIR /tmp

# Run composer and phpunit installation.
RUN composer selfupdate && \
    composer require ""phpunit/phpunit:~5.4.0"" --prefer-source --no-interaction && \
    ln -s /tmp/vendor/bin/phpunit /usr/local/bin/phpunit

# Set up the application directory.
VOLUME [""/app""]
WORKDIR /app

# Set up the command arguments.
ENTRYPOINT [""/usr/local/bin/phpunit""]
CMD [""--help""]
",JulienBreux/phpunit-docker,5.4.0/Dockerfile
e3bbcdce82b8370d201b5ab6746e135085997948,476,"FROM nodesource/fedora20-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_4.x/fc/20/x86_64/nodejs-4.2.1-1nodesource.fc20.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/20/node/4.2.1/Dockerfile
4c008c7e0133db67d3b9e31f753a56f240147875,558,"FROM markadams/chromium-xvfb

RUN apt-get update && apt-get install -y \
    python3 python3-pip curl unzip libgconf-2-4

RUN pip3 install pytest selenium

ENV CHROMEDRIVER_VERSION 2.14

RUN curl -SLO ""https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"" \
  && unzip ""chromedriver_linux64.zip"" -d /usr/local/bin \
  && rm ""chromedriver_linux64.zip""

WORKDIR /usr/src/app

CMD py.test

ONBUILD COPY requirements.txt /usr/src/app/requirements.txt
ONBUILD RUN pip3 install -r requirements.txt
ONBUILD COPY . /usr/src/app
",mark-adams/docker-chromium-xvfb,images/python3-onbuild/Dockerfile
dd785b0f427619e9f8a96ccf6897b2dd69cef01f,274,"FROM fedora:23
MAINTAINER ""Peter Schiffer"" <pschiffe@redhat.com>

RUN dnf -y --setopt=tsflags=nodocs install \
        wget \
        tar \
        perl \
        perl-Net-SMTP-SSL \
        perl-Math-BigInt \
        perl-GDGraph \
        cronie \
    && dnf -y clean all
",josefkarasek/docker101,csf-example/Dockerfile
a467c3525a1f4453d082c9b58601207f9db69ad9,5144,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jdk""                                    && \
    export JAVA_UPDATE=""73""                                      && \
    export JAVA_BUILD=""02""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u73/jdk/slim/Dockerfile
81ee57b47db359236af1aa2ba354e796815bcdfb,600,"FROM evlos/nodejs

MAINTAINER Evlos <4tyle8@gmail.com>

ADD sources.list /etc/apt/sources.list
RUN apt-get update && \
	apt-get -y upgrade && \
	DEBIAN_FRONTEND=noninteractive apt-get -y install curl unzip && \
	mkdir -p /app && \
	cd /app && \
	curl -L https://ghost.org/zip/ghost-latest.zip -o ghost.zip && \
	unzip -uo ghost.zip && \
	rm *.zip && \
	npm install --production && \
	mv /app/content /app/content_ && \
	mkdir /app/content

ENV NODE_ENV production
ADD config.js /app/config.js
ADD start.sh /app/start.sh
VOLUME [""/app/content""]
WORKDIR /app

EXPOSE 2368
CMD [""bash"", ""/app/start.sh""]
",Evlos/dockerfile,ghost/Dockerfile
615c4428b02b39e642bf60c114cfa63446725023,300,"FROM quay.io/eris/tools
MAINTAINER Eris Industries <support@erisindustries.com>

RUN echo ""setting up node, npm, and io.js"" && \
  curl -sL https://deb.nodesource.com/setup_4.x | bash - > /dev/null && \
  apt-get install -y -qq --no-install-recommends \
    nodejs && \
  rm -rf /var/lib/apt/lists/*
",eris-ltd/common,docker/node/Dockerfile
82e1249792b0a821dd203d4d412fcb470a739c1a,7021,"FROM ubuntu:trusty

MAINTAINER Alexandre Viau <alexandre.viau@savoirfairelinux.com>

RUN apt-get update && apt-get install -y vim git supervisor python-dev libffi-dev libssl-dev nagios-nrpe-server wget python-virtualenv python-openssl
# libffi-devand libssl-dev are for python-cryptography

### Alignak
RUN apt-get update && apt-get install -y python-pip python-pycurl
RUN useradd alignak && pip install https://github.com/Alignak-monitoring/alignak/archive/d7f457d5ed94f08d9a6a38809106d3e0d35a1712.tar.gz

## modules
# mod-webui
RUN cd /tmp && \
    wget -O mod-webui.tar.gz https://github.com/shinken-monitoring/mod-webui/archive/3215d6c775326d1fb3afb161eb279dfb44e45986.tar.gz && \
    tar -zxvf mod-webui.tar.gz && \
    mv /tmp/mod-webui-*/module /var/lib/alignak/modules/webui && \
    rm -rfv /tmp/mod-webui*

# auth-cfg-password
RUN cd /tmp && \
    wget -O mod-auth-cfg-password.tar.gz https://github.com/shinken-monitoring/mod-auth-cfg-password/archive/6079d31974305b74e332424df44efecc9dfeabfc.tar.gz && \
    tar -zxvf mod-auth-cfg-password.tar.gz && \
    mv /tmp/mod-auth-cfg-password-*/module /var/lib/alignak/modules/auth-cfg-password && \
    rm -rfv /tmp/mod-auth-cfg-password*

# mod-booster-nrpe
RUN cd /tmp && \
    wget -O mod-booster-nrpe.tar.gz https://github.com/shinken-monitoring/mod-booster-nrpe/archive/de7099706855e32c1962c77740be0fae446d15f5.tar.gz && \
    tar -zxvf mod-booster-nrpe.tar.gz && \
    mv /tmp/mod-booster-nrpe-*/module /var/lib/alignak/modules/mod-booster-nrpe && \
    rm -rfv /tmp/mod-booster-nrpe*

# mod-surveil
RUN pip install python-surveilclient==0.13.3
RUN cd /tmp && \
    wget -O mod-surveil-config.tar.gz https://github.com/Alignak-monitoring/mod-surveil/archive/fdc98b4fc036aa483ecb58459f11f9a87cf2254a.tar.gz && \
    tar -zxvf mod-surveil-config.tar.gz && \
    mv /tmp/mod-surveil-*/alignak/modules/mod_surveil /var/lib/alignak/modules/mod-surveil && \
    rm -rfv /tmp/mod-surveil*

# mod-influxdb
RUN pip install influxdb==2.8.0
RUN cd /tmp && \
    wget -O mod-influxdb.tar.gz https://github.com/savoirfairelinux/mod-influxdb/archive/9433b726492a09d5faeb70abfc5efdbf1728686f.tar.gz && \
    tar -zxvf mod-influxdb.tar.gz && \
    mv /tmp/mod-influxdb-*/module /var/lib/alignak/modules/mod-influxdb && \
    rm -rfv /tmp/mod-influxdb*

# mod-ws-arbiter
RUN cd /tmp && \
    wget -O mod-ws-arbiter.tar.gz https://github.com/shinken-monitoring/mod-ws-arbiter/archive/ebae7950be9452ab80ec58575e9887d9b2a15d2a.tar.gz && \
    tar -zxvf mod-ws-arbiter.tar.gz && \
    mv /tmp/mod-ws-arbiter-*/module /var/lib/alignak/modules/ws-arbiter && \
    rm -rfv /tmp/mod-ws-arbiter*

# mod-mongo-live-config
RUN pip install pymongo==3.0.2
RUN cd /tmp && \
    wget -O mod-mongo-live-config.tar.gz https://github.com/savoirfairelinux/mod-mongo-live-config/archive/0.3.2.tar.gz && \
    tar -zxvf mod-mongo-live-config.tar.gz && \
    mv /tmp/mod-mongo-live-config-*/mod_mongo_live_config /var/lib/alignak/modules/mod_mongo_live_config && \
    rm -rfv /tmp/mod-mongo-live-config*

# mod-ceilometer
RUN apt-get update && apt-get install -y python-ceilometerclient
RUN cd /tmp && \
    wget -O mod-ceilometer.tar.gz https://github.com/savoirfairelinux/mod-ceilometer/archive/0.2.1.tar.gz && \
    tar -zxvf mod-ceilometer.tar.gz && \
    mv /tmp/mod-ceilometer-*/module /var/lib/alignak/modules/mod-ceilometer && \
    rm -rfv /tmp/mod-ceilometer*

## plugins
RUN apt-get update && apt-get install -y nagios-plugins nagios-nrpe-plugin
# run permissions for user `alignak`
RUN chmod u+s /usr/lib/nagios/plugins/check_icmp
RUN chmod u+s /bin/ping
RUN chmod u+s /bin/ping6

# Download plugins
ENV MONITORING_TOOLS_VERSION 0.4.1
RUN apt-get update && apt-get install -y subversion && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-glance /plugins/check_glance && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-keystone /plugins/check_keystone && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-nova /plugins/check_nova && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-cinder /plugins/check_cinder && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-ceilometer /plugins/check_ceilometer && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/plugins/check-nova-host-status /plugins/check_nova_host_status && \
    apt-get remove -y subversion

## Install plugins dependencies
RUN mkdir -p /opt/surveilplugins
RUN virtualenv /opt/surveilplugins/env
ENV PATH=$PATH:/opt/surveilplugins/env/bin
RUN /opt/surveilplugins/env/bin/pip install -U ""pbr>=1.3,<2.0"" shinkenplugins python-keystoneclient python-glanceclient

## Install Plugins
RUN mkdir -p /usr/lib/monitoring/plugins/sfl
RUN cd /plugins/check_keystone && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_keystone /usr/lib/monitoring/plugins/sfl/
RUN cd /plugins/check_glance && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_glance  /usr/lib/monitoring/plugins/sfl/
RUN cd /plugins/check_nova && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_nova /usr/lib/monitoring/plugins/sfl/
RUN cd /plugins/check_cinder && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_cinder /usr/lib/monitoring/plugins/sfl/
RUN cd /plugins/check_ceilometer && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_ceilometer /usr/lib/monitoring/plugins/sfl/
RUN cd /plugins/check_nova_host_status && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_nova_host_status /usr/lib/monitoring/plugins/sfl/

## Add check example plugin
ADD plugins/check-example /plugins/check_example
RUN virtualenv /plugins/check_example/env
ENV PATH=$PATH:/plugins/check_example/env/bin
RUN /plugins/check_example/env/bin/pip install -r /plugins/check_example/requirements.txt
RUN cd /plugins/check_example && sudo /opt/surveilplugins/env/bin/python setup.py install && ln -s /opt/surveilplugins/env/bin/check_example /usr/lib/monitoring/plugins/sfl

## configuration
ADD setup.sh /setup.sh
RUN rm -rf /etc/alignak
ADD etc/alignak /etc/alignak

RUN chown -R root:alignak /etc/alignak

### Supervisor
ADD etc/supervisor /etc/supervisor

# Alignak WEBUI
EXPOSE 7767

# ws-arbiter
EXPOSE 7760

# OpenStack Authentication credentials. Used for sending data to Ceilometer
ENV SURVEIL_OS_AUTH_URL=http://keystone:5000/v2.0
ENV SURVEIL_OS_USERNAME=admin
ENV SURVEIL_OS_PASSWORD=password
ENV SURVEIL_OS_TENANT_NAME=admin

CMD ./setup.sh && /usr/bin/supervisord
",openstack/surveil,tools/docker/alignak_container/Dockerfile
0ade9344da7dda27955039a2314d87cf18bb8283,164,"FROM java:8
VOLUME /tmp/generator/latex
ADD target/vorto-latex.jar .
ENTRYPOINT /bin/bash -c ""sleep 240; java -jar vorto-latex.jar --spring.profiles.active=docker""
",eclipse/vorto,server/generators/org.eclipse.vorto.codegen.service.latex/Dockerfile
40fc6bea9eafb469f2c918b421405061ab3b23a0,1627,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM ubuntu:16.04

RUN apt-get update -y && apt-get install -y ruby-full

RUN gem install bundler
",leifurhauks/grpc,tools/dockerfile/distribtest/ruby_ubuntu1604_x64/Dockerfile
21723a304740ec382838ce2bd4b25f08b019867a,109,"FROM busybox:latest
ARG greeting=hello
ENV GREETING=$greeting
CMD [""/bin/sh"", ""-c"", ""echo -n \""$GREETING\""""]
",docker/swarm,test/integration/testdata/build_with_args/Dockerfile
e3a0a6b2b7b6bd50abbbea5262de3d070bdab08e,309,"FROM buildpack-deps:jessie

RUN curl -f -L https://static.rust-lang.org/rustup.sh -O && \
    SHELL=sh sh rustup.sh --yes --verbose --revision=1.1.0 --disable-sudo && \
    rm rustup.sh

ADD build-run /build-run
RUN chmod +x /build-run

RUN useradd docker
USER docker

WORKDIR /src

ENTRYPOINT [""/build-run""]
",instructure/straitjacket,languages/rust/Dockerfile
f0cd380143fdeb3b884e99ca5ea292440f65b531,570,"FROM centos:latest
MAINTAINER Olivier Delhomme <olivier.delhomme@free.fr>
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
RUN yum -y update; \
    yum -y install file git autoconf automake libtool make sqlite-devel glib2-devel libmicrohttpd-devel libcurl-devel intltool; \
    git clone git://github.com/akheron/jansson.git; cd jansson; autoreconf -f -i; ./configure --enable-silent-rules; make; make install; cd ..; rm -fr jansson;
RUN git clone https://github.com/dupgit/sauvegarde.git; cd sauvegarde; ./autogen.sh && ./configure && make && make check && make install;

",dupgit/sauvegarde,dockerfiles/centos/Dockerfile
4979a4603d6de5dea2e0be09d8fd044a15370df0,136,"FROM buildpack-deps:jessie

ADD build-run /build-run
RUN chmod +x /build-run

RUN useradd docker
USER docker

ENTRYPOINT [""/build-run""]
",instructure/straitjacket,languages/c/Dockerfile
c1c6f5d2eafd4a3eba3e4c7893418bdb02e76b09,579,"# Dockerfile extending the generic Go image with application files for a
# single application.
FROM golang:1.6

# Copy the local package files to the container's workspace.
ADD _gopath/src/ /go/src
COPY run.sh /opt/logdog_collector/run.sh

# Build the command inside the container.
# (You may fetch or manage dependencies here,
# either manually or with a tool like ""godep"".)
RUN go install github.com/luci/luci-go/server/cmd/logdog_collector

# Run the output command by default when the container starts.
ENTRYPOINT [""/opt/logdog_collector/run.sh"", ""/go/bin/logdog_collector""]
",luci/luci-go,server/cmd/logdog_collector/Dockerfile
6f6e92c94d9444ae890cd77468848b33d610dc4e,183,"FROM fedora:22
MAINTAINER Katello Team <foreman-dev@googlegroups.com>

RUN yum clean all
RUN yum update -y && yum -y install subscription-manager

ADD run.sh /run.sh

CMD [""/run.sh""]
",Katello/katello-deploy,docker/clients/fedora20/Dockerfile
7602a51ad547e9333c8c01acd83e1ba0b2653031,754,"# Dockerfile for swarm integration test environment.
# Use with run_in_docker.sh

FROM dockerswarm/dind:1.9.0

# Install dependencies.
RUN apt-get update && apt-get install -y --no-install-recommends git file parallel \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install golang
ENV GO_VERSION 1.5.4
RUN curl -sSL https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local -xz
ENV PATH /go/bin:/usr/local/go/bin:$PATH
ENV GOPATH /go

# install bats
RUN cd /usr/local/src/ \
    && git clone https://github.com/sstephenson/bats.git \
    && cd bats \
    && ./install.sh /usr/local

RUN mkdir -p /go/src/github.com/docker/swarm
WORKDIR /go/src/github.com/docker/swarm/test/integration

ENTRYPOINT [""/dind""]
",docker/swarm,test/integration/Dockerfile
dc9c388098ce4ac83fde1cbbe75d86c052e144d3,663,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/deb/generate.sh""!
#

FROM debian:wheezy
RUN echo deb http://http.debian.net/debian wheezy-backports main > /etc/apt/sources.list.d/wheezy-backports.list

RUN apt-get update && apt-get install -y bash-completion btrfs-tools build-essential curl ca-certificates debhelper dh-systemd git libapparmor-dev libdevmapper-dev libsqlite3-dev --no-install-recommends && rm -rf /var/lib/apt/lists/*

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS apparmor selinux
",cloudfoundry-incubator/lattice-release,src/github.com/docker/docker/contrib/builder/deb/debian-wheezy/Dockerfile
c13f115d8fc7f235f8c5bf61db3049a2f1a01758,512,"FROM sjtug/jekyll-base:2016-04-07

MAINTAINER VicLuo

VOLUME [""/home/mirror-web""]

WORKDIR /home/mirror-web

RUN bundle install

# WTF
# This is a terrible workaround for
#   Conversion error: Jekyll::Converters::Babel encountered an error while converting 'static/js/index.es6':
#   ""\xEF"" on US-ASCII
# It seems that encoding.rb mishandles babel.js's leading <EF>, which is a utf-8 zero-width whitespace
RUN sed -i ""s/^[ \t]*string.encode('UTF-8')/return string/g"" /usr/lib/ruby/vendor_ruby/execjs/encoding.rb
",sjtug/mirror-docker,jekyll/Dockerfile
94e85f427b5116f4fd299a4dbdd19003b90a863c,2798,"# Copyright (C) 2016 Bitergia
# GPLv3 License

FROM debian:8
MAINTAINER Alvaro del Castillo <acs@bitergia.com>

ENV DEBIAN_FRONTEND noninteractive
ENV DEPLOY_USER bitergia
ENV DEPLOY_USER_DIR /home/${DEPLOY_USER}
ENV SCRIPTS_DIR ${DEPLOY_USER_DIR}/scripts

# Initial user
RUN useradd bitergia --create-home --shell /bin/bash

# Helper scripts
RUN mkdir ${DEPLOY_USER_DIR}/scripts

# install dependencies
RUN apt-get update && \
    apt-get -y install --no-install-recommends \
        bash locales \
        git git-core \
        tree ccze \
        psmisc \
        python python3 pep8 \
        python3-requests python3-dateutil python3-bs4 \
        python3-pip python3-dev python3-redis python3-sqlalchemy \
        python-mysqldb \
        python3-cherrypy3 \
        gcc make libmysqlclient-dev mariadb-client \
        unzip curl wget sudo vim ssh \
        && \
    apt-get clean && \
    find /var/lib/apt/lists -type f -delete

# Not available as package in Debian 8 python3-myssqldb
RUN pip3 install mysqlclient
# rq tasks queue
RUN pip3 install rq && pip3 install rq-dashboard==0.3.4
# Bug in 0.3.5: https://github.com/nvie/rq-dashboard/pull/89/files
# In 0.3.5 workers don't appear in the dashboard

# perceval needs a newer version than Debian 8 - this breaks pip3
RUN pip3 install --upgrade requests

RUN echo ""${DEPLOY_USER}    ALL=NOPASSWD: ALL"" >> /etc/sudoers

# Configuring and UTF-8 local needed by rqworker
# 10 days for timeout in our workerts
RUN sed -i ""s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g"" /etc/locale.gen && \
    locale-gen ""en_US.UTF-8"" && update-locale && \
    echo ""export LANG='en_US.utf8'"" >> ${DEPLOY_USER_DIR}/.bashrc

USER ${DEPLOY_USER}
WORKDIR ${DEPLOY_USER_DIR}

# get SortingHat repository
RUN git clone https://github.com/MetricsGrimoire/sortinghat.git && \
    cd sortinghat && sudo python3 setup.py install

# get GrimoireELK repository
RUN git clone https://github.com/grimoirelab/GrimoireELK && \
	cd GrimoireELK && git checkout arthur

# get VizGrimoireUtils repository for tools like eclipse_projects
RUN git clone https://github.com/VizGrimoire/VizGrimoireUtils.git

# get Perceval repository
RUN git clone https://github.com/grimoirelab/perceval.git && \
    cd perceval && sudo python3 setup.py install

# get Arthur repository
# RUN git clone https://github.com/grimoirelab/arthur.git && \
#    cd arthur && sudo python3 setup.py install && \
#    chmod 755 bin/*
# Use acs fork until sduenas fixes workers and mappings
RUN git clone https://github.com/acs/arthur.git && \
    cd arthur && git checkout mappings && \
    sudo python3 setup.py install && \
    chmod 755 bin/*


COPY init-gelk /init-gelk.sh
# ADD init-gelk ${DEPLOY_USER_DIR}/

# ENTRYPOINT [${DEPLOY_USER_DIR}/init-gelk]
ENTRYPOINT [""/init-gelk.sh""]
# CMD [/init-gelk.sh]
",grimoirelab/GrimoireELK,docker/gelk-arthur/Dockerfile
c4d474382128cef257fa6eaa89f37a771f114041,1734,"# CEPH BASE IMAGE
# CEPH VERSION: Jewel
# CEPH VERSION DETAIL: 10.2.x

FROM ubuntu:14.04
MAINTAINER SÃ©bastien Han ""seb@redhat.com""

ENV ETCDCTL_VERSION v2.2.4
ENV ETCDCTL_ARCH linux-amd64
ENV CEPH_VERSION jewel
ENV KVIATOR_VERSION 0.0.7
ENV CONFD_VERSION 0.10.0

# Download kviator
ADD https://github.com/AcalephStorage/kviator/releases/download/v${KVIATOR_VERSION}/kviator-${KVIATOR_VERSION}-linux-amd64.zip /kviator.zip

# Download confd
ADD https://github.com/kelseyhightower/confd/releases/download/v${CONFD_VERSION}/confd-${CONFD_VERSION}-linux-amd64 /usr/local/bin/confd

# install prerequisites
RUN DEBIAN_FRONTEND=noninteractive apt-get update &&  apt-get install -y wget unzip uuid-runtime python-setuptools udev runit sharutils && \
\
# install ceph
    wget -q -O- 'https://download.ceph.com/keys/release.asc' | apt-key add - && \
    echo ""deb http://download.ceph.com/debian-$CEPH_VERSION/ trusty main"" | tee /etc/apt/sources.list.d/ceph-$CEPH_VERSION.list && \
    apt-get update && apt-get install -y --force-yes ceph radosgw && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
\
# Install etcdctl
    wget -q -O- ""https://github.com/coreos/etcd/releases/download/${ETCDCTL_VERSION}/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}.tar.gz"" |tar xfz - -C/tmp/ etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl && \
    mv /tmp/etcd-${ETCDCTL_VERSION}-${ETCDCTL_ARCH}/etcdctl /usr/local/bin/etcdctl && \
\
# Install kviator
    cd /usr/local/bin && unzip /kviator.zip && chmod +x /usr/local/bin/kviator && rm /kviator.zip && \
\
# Install confd
    chmod +x /usr/local/bin/confd && mkdir -p /etc/confd/conf.d && mkdir -p /etc/confd/templates

ADD entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
",ceph/ceph-docker,ceph-releases/jewel/ubuntu/14.04/base/Dockerfile
2a6119bbcd93f0c8a81ef77a62c6c0b9145523e4,1523,"# This Dockerfile is used to build an image containing basic stuff to be used as a Jenkins slave build node.
FROM ubuntu:trusty
MAINTAINER Ervin Varga <ervin.varga@gmail.com>

# In case you need proxy
#RUN echo 'Acquire::http::Proxy ""http://127.0.0.1:8080"";' >> /etc/apt/apt.conf

# Add locales after locale-gen as needed
# Upgrade packages on image
# Preparations for sshd
run locale-gen en_US.UTF-8 &&\
    apt-get -q update &&\
    DEBIAN_FRONTEND=""noninteractive"" apt-get -q upgrade -y -o Dpkg::Options::=""--force-confnew"" --no-install-recommends &&\
    DEBIAN_FRONTEND=""noninteractive"" apt-get -q install -y -o Dpkg::Options::=""--force-confnew""  --no-install-recommends openssh-server &&\
    apt-get -q autoremove &&\
    apt-get -q clean -y && rm -rf /var/lib/apt/lists/* && rm -f /var/cache/apt/*.bin &&\
    sed -i 's|session    required     pam_loginuid.so|session    optional     pam_loginuid.so|g' /etc/pam.d/sshd &&\
    mkdir -p /var/run/sshd

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Install JDK 7 (latest edition)
RUN apt-get -q update &&\
    DEBIAN_FRONTEND=""noninteractive"" apt-get -q install -y -o Dpkg::Options::=""--force-confnew""  --no-install-recommends openjdk-7-jre-headless &&\
    apt-get -q clean -y && rm -rf /var/lib/apt/lists/* && rm -f /var/cache/apt/*.bin

# Set user jenkins to the image
RUN useradd -m -d /home/jenkins -s /bin/sh jenkins &&\
    echo ""jenkins:jenkins"" | chpasswd

# Standard SSH port
EXPOSE 22

# Default command
CMD [""/usr/sbin/sshd"", ""-D""]
",evarga/docker-images,jenkins-slave/Dockerfile
e152b4637b7f4bcdf019ef67458add6535de73af,187,"FROM gwul/sfm_app:m5_003
MAINTAINER Justin Littman <justinlittman@gwu.edu>

#Enable SSL
RUN a2enmod ssl
RUN a2enmod rewrite
ADD apache.conf /etc/apache2/sites-available/sfm
EXPOSE 80 443
",gwu-libraries/social-feed-manager,docker/app-prod/m5_003_https/Dockerfile
befb2c206decfd6a2310e35ddc387d348b0022e1,606,"## Launch an R terminal: docker run -it cboettig/pdg_control /usr/bin/R
## Launch via RStudio: docker run -d -p 8787:8787 cboettig/pdg_control
##   and then navigate to http://localhost:8787 

FROM rocker/hadleyverse
MAINTAINER Carl Boettiger cboettig@ropensci.org

## Remain current & install binaries for dependencies that don't compile
RUN apt-get update \ 
  && apt-get install -y r-cran-snowfall r-cran-expm latexdiff texlive-generic-recommended

## Install package, with dependencies and suggests
RUN installGithub.r --deps TRUE \ 
  cboettig/cboettigR \
  jrnold/ggthemes \ 
  cboettig/pdg_control

",cboettig/pdg_control,manuscripts/Dockerfile
56d6f04107a76f786aec0f2df3945974ac8fb9d2,790,"FROM nfnty/arch-mini:latest
MAINTAINER nfnty <docker@nfnty.se>

ENV UGID='160000' UGNAME='nginx'
RUN groupadd --gid ""${UGID}"" ""${UGNAME}"" && \
    useradd --uid ""${UGID}"" --gid ""${UGID}"" --shell /usr/bin/false ""${UGNAME}""

ENV VERSION_NGINX_MAINLINE='1.11.1-1'
RUN pacman --sync --noconfirm --refresh --sysupgrade && \
    pacman --sync --noconfirm ""nginx-mainline=${VERSION_NGINX_MAINLINE}"" && \
    find /var/cache/pacman/pkg -mindepth 1 -delete && \
    setcap 'cap_net_bind_service=ep' /usr/bin/nginx && \
    chown --recursive ""${UGNAME}:${UGNAME}"" /var/lib/nginx /var/log/nginx && \
    install --directory --owner=""${UGNAME}"" --group=""${UGNAME}"" --mode=700 /run/nginx

USER ${UGNAME}
VOLUME [""/var/lib/nginx""]
EXPOSE 80/tcp 443/tcp
ENTRYPOINT [""/usr/bin/nginx"", ""-g"", ""daemon off;""]
",nfnty/dockerfiles,images/arch-nginx/latest/Dockerfile
d19607a8db3fce8806c23ab1fb9374e782e03ed9,197,"FROM java:8
MAINTAINER idugalic@gmail.com
EXPOSE 7979
ENV APPLICATION_DOMAIN 192.168.59.103
ADD target/*.jar /hystrix.jar
ENTRYPOINT [""java"",""-Dspring.profiles.active=docker"",""-jar"",""/hystrix.jar""]",idugalic/micro-ecommerce,microservices/microservices-hystrix-dashboard/Dockerfile
ea633116b7f01276cb111aeeeb67089153916c74,717,"# Debian, ESA-STEP-SNAP Dockerfile
# https://github.com/edwardpmorris/docker-snap

FROM epmorris/debian8-snap3:base

MAINTAINER epmorris ""edward.morris@uca.es""

LABEL snap_version='3.0.0 (31.03.2016 8:00)' 

## Setup Python ##
ONBUILD RUN apt-get update -y && apt-get install -y \
  python=2.7.9-1 \
  && rm -fr /var/lib/apt/lists/*

## Toolbox builds ##
# copy over install settings to WRKDIR
ONBUILD COPY snap2.varfile $HOME
ONBUILD RUN ./$TBX -q -varfile snap2.varfile \
  && rm $TBX \
  && rm snap2.varfile
ONBUILD ENV PATH=$PATH:/home/worker/snap/bin \
            SNAP_PATH=/home/worker/snap/bin
# set up snap python API
ONBUILD RUN $SNAP_PATH/snappy-conf /usr/bin/python /usr/local/lib/python2.7/dist-packages
",edwardpmorris/docker-snap,snap3/debian8-snap3-on_build_py/Dockerfile
d084e283dd45d7890bf7995e9146b47aa384f19e,431,"FROM michaxm/hadoop-env

RUN apt-get update && apt-get upgrade -y && apt-get install libbz2-dev

#setup & rarely changing dependencies
RUN cd /usr/local && git clone https://github.com/michaxm/task-distribution.git
RUN cd /usr/local/task-distribution && git submodule init && git submodule update --recursive
RUN cd /usr/local/task-distribution && stack setup
RUN cd /usr/local/task-distribution && stack build --only-dependencies
",michaxm/task-distribution,docker-testsetup/container/task-distribution-base/Dockerfile
b97bd630705801bbd3add161eb04ebeaa4d415d6,71,"FROM node:4.0
ADD index.js /srv/index.js
CMD [""node"", ""/srv/index.js""]
",weaveworks/guides,mesos-marathon/centos/nodejs/Dockerfile
1ed5894abdf370e4c9bdf2efa9f4719957162da6,1467,"# Debian Jessie Backports

FROM debian@sha256:0d7633d9cdbb676b7c6d5f0943c7ad26e287e196e8ad019af5b50bf342b2e1e8

MAINTAINER Gurvinder Singh <gurvinder.singh@uninett.no>

ENV APACHE_SPARK_VERSION 1.6.1

# Install the dependecies
RUN apt-get update && apt-get -y --no-install-recommends install \
    openjdk-8-jre wget && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Fetch Spark
RUN cd /tmp && \
    wget -q http://www-eu.apache.org/dist/spark/spark-${APACHE_SPARK_VERSION}/spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz && \
    echo ""667A62D7F289479A19DA4B563E7151D4 spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz"" | md5sum -c - && \
    tar xzf spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz -C /usr/local && \
    rm spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz

# Install spark and setup corresponding ENV variables
RUN cd /usr/local && ln -s spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6 spark
ENV SPARK_HOME /usr/local/spark
ENV R_LIBS_USER $SPARK_HOME/R/lib
ENV PYTHONPATH $SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.9-src.zip
ENV PATH $SPARK_HOME/bin:$PATH

# Spark logging properties
COPY log4j.properties $SPARK_HOME/conf/log4j.properties

# Install Tini
RUN wget --quiet https://github.com/krallin/tini/releases/download/v0.9.0/tini && \
    echo ""faafbfb5b079303691a939a747d7f60591f2143164093727e870b289a44d9872 *tini"" | sha256sum -c - && \
    mv tini /usr/local/bin/tini && \
    chmod +x /usr/local/bin/tini

ENTRYPOINT [""tini"", ""--""]
",UNINETT/kubernetes-apps,spark/dockerfiles/base/Dockerfile
570facea99d96075ee8c579c75096c1160878fc3,89,"FROM spectralogic/ds3_c_docker

ADD run_tests.sh /opt/

ENTRYPOINT [""/opt/run_tests.sh""]
",SpectraLogic/ds3_c_docker,test/Dockerfile
71cee42dc6f4dfaf897591178105db4d572dddac,753,"#
# Dockerfile for simple example
#
FROM    debian:latest

# Install node
RUN     export DEBIAN_FRONTEND=noninteractive && \
        apt-get update && apt-get upgrade -y && apt-get autoremove && apt-get autoclean && \
        apt-get install -y wget && \
        wget -q http://nodejs.org/dist/v0.10.33/node-v0.10.33-linux-x64.tar.gz && \
        tar --strip-components 1 -xzf node-v* -C /usr/local && \
        apt-get clean; apt-get autoremove && \
        apt-get remove -y wget && \
        rm -rf node-v0.10.33-linux-x64.tar.gz /var/lib/apt/lists/* && \
        node --version && \
        mkdir /bundle; cd /bundle

# Tell Docker to expose the app port
EXPOSE  8080

# The /bundle dir will be mounted at startup
CMD     [""node"", ""/bundle/app.js""]
",JoTrdl/grunt-dock,examples/simple/Dockerfile
31ef0f6d715b4f7374e19779c6bb3f4073524a12,1087,"FROM python:3.4

MAINTAINER Hylke Visser <htdvisser@gmail.com>

# Install dependencies
RUN \
  apt-get update -qq && \
  apt-get install -y netcat && \
  rm -rf /var/lib/apt/lists/* && \
  pip install circus gunicorn

# Install taiga-back
RUN \
  mkdir -p /usr/local/taiga && \
  useradd -d /usr/local/taiga taiga && \
  git clone https://github.com/taigaio/taiga-back.git /usr/local/taiga/taiga-back && \
  mkdir /usr/local/taiga/media /usr/local/taiga/static /usr/local/taiga/logs && \
  cd /usr/local/taiga/taiga-back && \
  git checkout stable && \
  pip install -r requirements.txt && \
  touch /usr/local/taiga/taiga-back/settings/dockerenv.py && \
  touch /usr/local/taiga/circus.ini

# Add Taiga Configuration
ADD ./local.py /usr/local/taiga/taiga-back/settings/local.py

# Configure and Start scripts
ADD ./configure /usr/local/taiga/configure
ADD ./start /usr/local/taiga/start
RUN chmod +x /usr/local/taiga/configure /usr/local/taiga/start

VOLUME /usr/local/taiga/media
VOLUME /usr/local/taiga/static
VOLUME /usr/local/taiga/logs

EXPOSE 8000

CMD [""/usr/local/taiga/start""]
",htdvisser/taiga-docker,taiga-back/Dockerfile
ce36fad6395a0bf55b2ceb1aebc2a6fe56c60374,31,"From busybox

COPY *.pod /opt/
",hyperhq/hyper,mac_installer/dist/opt/hyper/examples/Dockerfile
109ea1ba00a47bfd04bf757b75986db3137fdb8d,42,"FROM multiarch/busybox:kfreebsd-i386-slim
",multiarch/busybox,kfreebsd-i386/Dockerfile
3772362d82d7087f559867cb9c6e6edf0128a3d9,477,"# Supervisor with java7

FROM dockerfile/java:oracle-java7

RUN \
  apt-get update && \
  apt-get install -y supervisor && \
  rm -rf /var/lib/apt/lists/* && \
  sed -i 's/^\(\[supervisord\]\)$/\1\nnodaemon=true/' /etc/supervisor/supervisord.conf

ADD jar-supervisor.conf /etc/supervisor/conf.d/jar-supervisord.conf

WORKDIR /etc/supervisor/conf.d

ADD start-supervisor.sh /opt/start-supervisor.sh
RUN chmod +x /opt/start-supervisor.sh

ENTRYPOINT [""/opt/start-supervisor.sh""]
",Maluuba/docker-files,docker-java-supervisor/Dockerfile
3945f4230ecac0ad14e403348bceb73e18e9d722,560,"FROM debian:latest

# Install Solr
RUN apt-get update -qy && \
	apt-get install -qy wget openjdk-7-jre && \
	wget http://archive.apache.org/dist/lucene/solr/4.9.1/solr-4.9.1.tgz && \
	tar -xvf solr-4.9.1.tgz -C /usr/local && \
	rm solr-4.9.1.tgz && \
	apt-get -qy purge wget && \
	apt-get clean && \
	rm -rf /tmp/*

# Configure Solr
ENV SOLRPATH /usr/local/solr-4.9.1/example
COPY conf/* $SOLRPATH/solr/collection1/conf/

WORKDIR $SOLRPATH

EXPOSE 8983
CMD [""/usr/bin/java"", ""-Xmx1024m"", ""-DSTOP.PORT=55101"", ""-DSTOP.KEY=stop-jetty-solr"", ""-jar"", ""start.jar""]
",andreaskoch/dockerized-magento,docker-images/solr/Dockerfile
2448f5f5975750fb157c5321bd16ae9f22b86adf,1860,"# COMPILE SciDB 15.12
#
# VERSION 1.0
#
#
#
#
#
#PORTS
#ssh					22
#Postgresql		5432
#SciDB 				1239

FROM ubuntu:12.04
MAINTAINER Alber Sanchez


# install
RUN apt-get -qq update && apt-get install --fix-missing -y --force-yes \
	apt-transport-https \
	apt-utils \
	curl \
	dialog \
	expect \
	gcc \
	git \
	libc-dev-bin \
	libc6-dbg \
	libc6-dev \
	libcurl3-dev \
	libgomp1 \
	libssl-dev \
	linux-libc-dev \
	nano \
	openssh-server \
	openssh-client \
	postgresql-8.4 \
	subversion \
	sudo \
	ssh \
	sshpass \
	wget \
	zlib1g-dev


# Set environment
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
RUN env


# Configure users
RUN useradd --home /home/scidb --create-home --uid 1005 --group sudo --shell /bin/bash scidb
RUN usermod -u 1004 -U scidb
RUN groupmod -g 1004 scidb
RUN usermod -a -G sudo scidb
RUN echo 'root:xxxx.xxxx.xxxx' | chpasswd
RUN echo 'postgres:xxxx.xxxx.xxxx' | chpasswd
RUN echo 'scidb:xxxx.xxxx.xxxx' | chpasswd
RUN mkdir /home/scidb/data
RUN chown scidb:scidb /home/scidb/data


# Configure SSH
RUN mkdir /var/run/sshd
RUN echo 'StrictHostKeyChecking no' >> /etc/ssh/ssh_config


# Configure Postgres
RUN echo 'host all all 255.255.0.0/16 md5' >> /etc/postgresql/8.4/main/pg_hba.conf


#Add required files
ADD containerSetup.sh 						/root/containerSetup.sh
ADD installR.sh 									/root/installR.sh
ADD scidb_docker.ini 							/home/scidb/scidb_docker.ini
ADD scidb-15.12.1.4cadab5.tar.gz	/home/scidb/dev_dir
ADD installPackages.R							/home/scidb/installPackages.R


RUN chown -R scidb:scidb /home/scidb/dev_dir
RUN chown root:root  /root/*.*
RUN chmod +x /root/*.sh


# Restarting services
RUN stop ssh
RUN start ssh


EXPOSE 22
EXPOSE 1239
EXPOSE 5432


CMD    [""/usr/sbin/sshd"", ""-D""]
",albhasan/docker_scidb,dev/Dockerfile
b43c0dddec095e392af9e3825afd95f00937fde2,650,"FROM kunstmaan/node-multichain
MAINTAINER Roderik van der Veer

RUN apt-get update \
        && apt-get install -q -y python python-dev python-pip sqlite3 libsqlite3-dev \
        && pip install pycrypto \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*

RUN cd /root \
    && wget https://github.com/MultiChain/multichain-explorer/archive/master.tar.gz \
    && tar -xvzf master.tar.gz \
    && rm -Rf master.tar.gz

RUN cd /root/multichain-explorer-master \
    && python setup.py install --user

ADD ./runexplorer.sh /root/runexplorer.sh
RUN chmod a+x /root/runexplorer.sh

EXPOSE 2750

CMD [""/bin/bash"", ""/root/runexplorer.sh""]
",Kunstmaan/docker-multichain,explorer/Dockerfile
6fa853374a35cb37c5d5218bad6c35eb559be385,122,"FROM golang:1.6-alpine
COPY . /go/src/web
WORKDIR /go/src/web
RUN go build -o main .
CMD [""/go/src/web/main""]
EXPOSE 8080
",ryan0x44/harveycms,web/Dockerfile
6d62b4e5838a1021886e6056cd7d7f5c44a1d65c,1582,"# Dockerfile for building Ansible image for Alpine 3, with as few additional software as possible.
#
# @see https://github.com/gliderlabs/docker-alpine/blob/master/docs/usage.md
#
# Version  1.0
#


# pull base image
FROM alpine:3.4

MAINTAINER William Yeh <william.pjyeh@gmail.com>


RUN echo ""===> Installing sudo to emulate normal OS behavior...""  && \
    apk --update add sudo                                         && \
    \
    \
    echo ""===> Adding Python runtime...""  && \
    apk --update add python py-pip openssl ca-certificates    && \
    apk --update add --virtual build-dependencies \
                python-dev libffi-dev openssl-dev build-base  && \
    pip install --upgrade pip cffi                            && \
    \
    \
    echo ""===> Installing Ansible...""  && \
    pip install ansible                && \
    \
    \
    echo ""===> Removing package list...""  && \
    apk del build-dependencies            && \
    rm -rf /var/cache/apk/*               && \
    \
    \
    echo ""===> Adding hosts for convenience...""  && \
    mkdir -p /etc/ansible                        && \
    echo 'localhost' > /etc/ansible/hosts


COPY ansible-playbook-wrapper /usr/local/bin/

ONBUILD  RUN  echo ""===> Updating TLS certificates...""         && \
              apk --update add openssl ca-certificates

ONBUILD  WORKDIR  /tmp
ONBUILD  COPY  .  /tmp
ONBUILD  RUN  \
              echo ""===> Diagnosis: host information...""  && \
              ansible -c local -m setup all



# default command: display Ansible version
CMD [ ""ansible-playbook"", ""--version"" ]
",William-Yeh/docker-ansible,alpine3-onbuild/Dockerfile
cb77e4caab6c8e92790a7364452cf61254275539,3680,"FROM joynr-base:latest

ENV PKG_CONFIG_PATH /usr/local/lib/pkgconfig:$PKG_CONFIG_PATH

###################################################
# install qt
###################################################
RUN dnf update -y \
	&& dnf install -y \
	qt5-qtbase \
	qt5-qtbase-devel \
	qt5-qtwebsockets \
	qt5-qtwebsockets-devel \
	&& dnf clean all

###################################################
# install boost
###################################################
RUN dnf update -y \
	&& dnf install -y \
	boost \
	boost-devel \
	&& dnf clean all

###################################################
# install clang 3.5 for formatting
###################################################
RUN cd /tmp/ \
    && wget http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-fedora20.tar.xz \
    && tar -xf clang+llvm-3.5.0-x86_64-fedora20.tar.xz \
    clang+llvm-3.5.0-x86_64-fedora20/bin/clang-format \
    --strip-components=2 \
    && mv clang-format /usr/bin/ \
    && rm -f clang+llvm-3.5.0-x86_64-fedora20.tar.xz

###################################################
# install gcovr for code coverage reports
###################################################
RUN dnf update -y \
	&& dnf install -y \
	python-pip \
	&& dnf clean all \
	&& pip install gcovr

###################################################
# install lcov
###################################################
RUN dnf update -y \
	&& dnf install -y \
	lcov \
	&& dnf clean all

###################################################
# install rpm-build required by CMake / CPack
###################################################
RUN dnf update -y \
	&& dnf install -y \
	rpm-build \
	&& dnf clean all

###################################################
# install jsmn
###################################################

RUN cd /opt \
    && git clone https://github.com/zserge/jsmn.git \
    && cd jsmn \
    && git checkout 572ace5 \
    && CFLAGS=-fPIC make \
    && cp libjsmn.a /usr/local/lib \
    && cp jsmn.h /usr/local/include \
    && cd /opt/ \
    && rm -rf jsmn

###################################################
# install spdlog
###################################################

RUN cd /opt \
    && git clone https://github.com/gabime/spdlog.git \
    && cd spdlog \
    && git checkout e91e1b8 \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make install -j""$(nproc)"" \
    && cd /opt/ \
    && rm -rf spdlog

###################################################
# install googletest & googlemock
###################################################

RUN cd /opt \
    && git clone https://github.com/google/googletest.git \
    && cd googletest \
    && git checkout ddb8012e \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make install -j""$(nproc)"" \
    && cd /opt/ \
    && rm -rf googletest

###################################################
# install websocket++
###################################################

RUN cd /opt \
    && git clone https://github.com/zaphoyd/websocketpp.git \
    && cd websocketpp \
    && git checkout 378437aecdcb1dfe62096ffd5d944bf1f640ccc3 \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make install -j""$(nproc)"" \
    && cd /opt/ \
    && rm -rf websocketpp

###################################################
# Copy build scripts
###################################################
COPY scripts /data/scripts

###################################################
# setup build environment
###################################################
RUN mkdir -p /home/joynr/
RUN echo ""source /data/scripts/bashrc.sh"" >> /home/joynr/.bashrc
RUN mkdir /home/joynr/build
RUN date -R > /data/timestamp
",bmwcarit/joynr,docker/joynr-cpp/Dockerfile
5892fe0475ce4bb54665c4e04ebd01c57dbe7ee6,1517,"# Build everything at least. This is a work in progress.
#
# Useful for testing things before a release.
#
# Will also be used for running the camlistore.org website and public
# read-only blobserver.

FROM ubuntu:12.04

MAINTAINER camlistore <camlistore@googlegroups.com>

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y curl make git

RUN curl -o /tmp/go.tar.gz https://storage.googleapis.com/golang/go1.3.1.linux-amd64.tar.gz
RUN tar -C /usr/local -zxvf /tmp/go.tar.gz
RUN rm /tmp/go.tar.gz
RUN /usr/local/go/bin/go version

ENV GOROOT /usr/local/go
ENV PATH $GOROOT/bin:/gopath/bin:$PATH

RUN mkdir -p /gopath/src
ADD pkg /gopath/src/camlistore.org/pkg
ADD cmd /gopath/src/camlistore.org/cmd
ADD website /gopath/src/camlistore.org/website
ADD third_party /gopath/src/camlistore.org/third_party
ADD server /gopath/src/camlistore.org/server
ADD dev /gopath/src/camlistore.org/dev
ADD depcheck /gopath/src/camlistore.org/depcheck

RUN adduser --disabled-password --quiet --gecos Camli camli
RUN mkdir -p /gopath/bin
RUN chown camli.camli /gopath/bin
RUN mkdir -p /gopath/pkg
RUN chown camli.camli /gopath/pkg
USER camli

ENV GOPATH /gopath

RUN go install --tags=purego \
    camlistore.org/server/camlistored \
    camlistore.org/cmd/camput \
    camlistore.org/cmd/camget \
    camlistore.org/cmd/camtool \
    camlistore.org/website \
    camlistore.org/dev/devcam

ENV USER camli
ENV HOME /home/camli
WORKDIR /home/camli

EXPOSE 80 443 3179 8080

CMD /bin/bash
",coreos/coreos-baremetal,vendor/github.com/camlistore/camlistore/Dockerfile
5150f4e9c25993dd83cfb281a0fb13201ef5de1c,160,"FROM coinclone/bitcoin:node

WORKDIR /root/

RUN rm /root/run.sh

COPY config/coin.conf /root/.bitcoin/
COPY config/run.sh /root/

CMD [""bash"", ""/root/run.sh""]
",coinclone/cloner,deploy/Dockerfile
0d66ef8327fe718f44878389d603a10657732a6d,135,"FROM ubuntu:trusty

ENV HOME /root

ADD apps /apps

VOLUME [""/seldon-models""]

# Define default command.
CMD [""/apps/bin/keep_alive""]

",SeldonIO/seldon-vm,images/seldon-models/Dockerfile
125c7ac5b0dfba418e6ef0ea760aaa42663d96d1,1324,"FROM ubuntu:14.04

# Turn off interactive installs
# See https://github.com/phusion/baseimage-docker/issues/58
ENV DEBIAN_FRONTEND noninteractive

# Install Python and other requirements
# The lines following the `python2.7..` line are for installing requirements
# for scipy, matplotlib
RUN apt-get update \
  && apt-get install -y \
    python2.7 python2.7-dev python-pip \
    libblas-dev liblapack-dev gfortran \
    libfreetype6-dev libpng-dev pkg-config libcairo2 libcairo2-dev libffi6 libffi-dev \
    curl \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Install latest pip
RUN pip install --upgrade pip

# Install popular packages
RUN pip install --upgrade \
	numpy scipy pandas cairocffi matplotlib ggplot==0.6.8

# Install Stencila R package
COPY stencila.whl /tmp/stencila-0.00-cp27-none-linux_x86_64.whl
RUN pip install /tmp/stencila-0.00-cp27-none-linux_x86_64.whl

# Install Stencila session script
COPY stencila-session.py /usr/local/bin/stencila-session

# Add a user (creating home and specifying shell) and
# setup working environment
RUN useradd --create-home --shell /bin/bash stencila \
  && mkdir -p /home/stencila/store \
  && chown stencila /home/stencila/store \
  && chmod 755 /usr/local/bin/stencila-session
USER stencila
WORKDIR /home/stencila
ENV STENCILA_STORES /home/stencila/store
",stencila/stencila,docker/ubuntu-14.04-py-2.7/Dockerfile
dad8ec05e034a196ff24f8191009f92e9b940a84,224,"FROM ubuntu:14.04

RUN apt-get update && \
    apt-get -y install openssl
RUN apt-get clean all

ADD makeca.sh /tmp/makeca.sh
RUN chmod +x /tmp/makeca.sh && \
    mkdir /tmp/ca
WORKDIR /tmp/ca

ENTRYPOINT [""/tmp/makeca.sh""]
",how2dock/docbook,ch04/tls/Dockerfile
b885aa751ab7980e4e2823770018ebac52791a19,1324,"FROM openshift/base-centos7

# This image provides a Python 2.7 environment you can use to run your Python
# applications.

MAINTAINER SoftwareCollections.org <sclorg@redhat.com>

EXPOSE 8080

ENV PYTHON_VERSION=2.7 \
    PATH=$HOME/.local/bin/:$PATH

LABEL io.k8s.description=""Platform for building and running Python 2.7 applications"" \
      io.k8s.display-name=""Python 2.7"" \
      io.openshift.expose-services=""8080:http"" \
      io.openshift.tags=""builder,python,python27,rh-python27""

RUN yum install -y \
    https://www.softwarecollections.org/en/scls/rhscl/python27/epel-7-x86_64/download/rhscl-python27-epel-7-x86_64.noarch.rpm && \
    yum install -y --setopt=tsflags=nodocs --enablerepo=centosplus python27 python27-python-devel python27-python-setuptools python27-python-pip epel-release && \
    yum install -y --setopt=tsflags=nodocs install nss_wrapper && \
    yum clean all -y

# Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH
COPY ./s2i/bin/ $STI_SCRIPTS_PATH

# Each language image can have 'contrib' a directory with extra files needed to
# run and build the applications.
COPY ./contrib/ /opt/app-root

RUN chown -R 1001:0 /opt/app-root && chmod -R og+rwx /opt/app-root

USER 1001

# Set the default CMD to print the usage of the language image
CMD $STI_SCRIPTS_PATH/usage
",sclorg/rhscl-dockerfiles,centos7.python27/Dockerfile
1b420e8047bd529258ebc6024bb2529572639fc0,139,"FROM busybox
ARG testargument
RUN if [ -z ""$testargument"" ]; then exit 1; else echo $testargument > /test.txt; fi;
CMD [""cat"",""/test.txt""]
",NrgXnat/docker-client,src/test/resources/dockerDirectoryWithBuildargs/Dockerfile
5555606faa835e8d1b9e349110aa40c53c3c3bbf,539,"FROM golang:1.4

RUN apt-get update && \
    apt-get install -y librados-dev apache2-utils && \
    rm -rf /var/lib/apt/lists/*

ENV DISTRIBUTION_DIR /go/src/github.com/docker/distribution
ENV GOPATH $DISTRIBUTION_DIR/Godeps/_workspace:$GOPATH
ENV DOCKER_BUILDTAGS include_rados

WORKDIR $DISTRIBUTION_DIR
COPY . $DISTRIBUTION_DIR
COPY cmd/registry/config-dev.yml $DISTRIBUTION_DIR/cmd/registry/config.yml
RUN make PREFIX=/go clean binaries

VOLUME [""/var/lib/registry""]
EXPOSE 5000
ENTRYPOINT [""registry""]
CMD [""cmd/registry/config.yml""]
",clearlinux/docker,vendor/src/github.com/docker/distribution/Dockerfile
56849d03f46034cd54c1b5350eabc2f9060d97be,2014,"FROM ubuntu
RUN apt-get update && apt-get -y install curl sudo procps wget && \
    echo ""%sudo ALL=(ALL) NOPASSWD: ALL"" >> /etc/sudoers && \
    useradd -u 1000 -G users,sudo -d /home/user --shell /bin/bash -m user && \
    echo ""secret\nsecret"" | passwd user && \
    curl -sSL https://get.docker.com/ | sh && \
    usermod -aG docker user && sudo apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Maven
ENV MAVEN_VERSION 3.3.9

RUN curl -fsSL https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven
    
USER user
ENV JAVA_VERSION=8u65 \
    JAVA_VERSION_PREFIX=1.8.0_65 \
    CHE_LOCAL_CONF_DIR=/home/user/.che
RUN mkdir /home/user/.che && \
    wget \
   --no-cookies \
   --no-check-certificate \
   --header ""Cookie: oraclelicense=accept-securebackup-cookie"" \
   -qO- \
   ""http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-b14/jdk-$JAVA_VERSION-linux-x64.tar.gz"" | sudo tar -zx -C /opt/
ENV JAVA_HOME /opt/jdk$JAVA_VERSION_PREFIX
ENV PATH $JAVA_HOME/bin:$PATH


EXPOSE 8080

WORKDIR /home/user
RUN git clone https://github.com/sunix/che-plugin-flux-live-edit.git && \
    cd che-plugin-flux-live-edit && \
    mvn clean install -Dmaven.test.skip -Dfindbugs.skip && \
    git checkout assembly4flux && \
    mvn clean install -Dmaven.test.skip -Dfindbugs.skip -f plugins/plugin-orion/che-plugin-orion-editor/pom.xml  && \
    mvn clean install -Dmaven.test.skip -Dfindbugs.skip -f assembly/pom.xml  && \
    rm -rf /home/user/.m2/ && \
    cp -rf assembly/assembly-main/target/eclipse-che-*/eclipse-che-* /home/user/che

CMD sudo chown -R user:user /home/user && \
    rm -rf /home/user/che/lib-copy/* && \
    mkdir -p /home/user/che/lib-copy/ && \
    cp -rf /home/user/che/lib/* /home/user/che/lib-copy && \
    /home/user/che/bin/che.sh run
",sunix/che-plugin-flux-live-edit,che4Docker/Dockerfile
53fc52579744539dc9d223be13fe7be565396bf2,1490,"#
# This Dockerfile builds a recent curl with HTTP/2 client support, using
# a recent nghttp2 build.
#
# See the Makefile for how to tag it. If Docker and that image is found, the
# Go tests use this curl binary for integration tests.
#

FROM ubuntu:trusty

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y git-core build-essential wget

RUN apt-get install -y --no-install-recommends \
       autotools-dev libtool pkg-config zlib1g-dev \
       libcunit1-dev libssl-dev libxml2-dev libevent-dev \
       automake autoconf

# The list of packages nghttp2 recommends for h2load:
RUN apt-get install -y --no-install-recommends make binutils \
        autoconf automake autotools-dev \
        libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev \
        libev-dev libevent-dev libjansson-dev libjemalloc-dev \
        cython python3.4-dev python-setuptools

# Note: setting NGHTTP2_VER before the git clone, so an old git clone isn't cached:
ENV NGHTTP2_VER 895da9a
RUN cd /root && git clone https://github.com/tatsuhiro-t/nghttp2.git

WORKDIR /root/nghttp2
RUN git reset --hard $NGHTTP2_VER
RUN autoreconf -i
RUN automake
RUN autoconf
RUN ./configure
RUN make
RUN make install

WORKDIR /root
RUN wget http://curl.haxx.se/download/curl-7.45.0.tar.gz
RUN tar -zxvf curl-7.45.0.tar.gz
WORKDIR /root/curl-7.45.0
RUN ./configure --with-ssl --with-nghttp2=/usr/local
RUN make
RUN make install
RUN ldconfig

CMD [""-h""]
ENTRYPOINT [""/usr/local/bin/curl""]

",micromdm/micromdm,vendor/golang.org/x/net/http2/Dockerfile
15aa19a7a0d3b439eeb1b9ae466eb9c6de9f4020,803,"FROM rocketchat/base

ENV RC_VERSION develop

MAINTAINER buildmaster@rocket.chat

VOLUME /app/uploads

RUN set -x \
 && curl -SLf ""https://rocket.chat/releases/${RC_VERSION}/download"" -o rocket.chat.tgz \
 && curl -SLf ""https://rocket.chat/releases/${RC_VERSION}/asc"" -o rocket.chat.tgz.asc \
 && gpg --verify rocket.chat.tgz.asc \
 && tar -zxf rocket.chat.tgz -C /app \
 && rm rocket.chat.tgz rocket.chat.tgz.asc \
 && cd /app/bundle/programs/server \
 && npm install \
 && npm cache clear

USER rocketchat

WORKDIR /app/bundle

# needs a mongoinstance - defaults to container linking with alias 'mongo'
ENV MONGO_URL=mongodb://mongo:27017/rocketchat \
    HOME=/tmp \
    PORT=3000 \
    ROOT_URL=http://localhost:3000 \
    Accounts_AvatarStorePath=/app/uploads

EXPOSE 3000

CMD [""node"", ""main.js""]
",RocketChat/Rocket.Chat,.docker/develop/Dockerfile
60602c296b9dc823b943a2d0e3e85deba3592bdb,497,"FROM jetty:9.3-jre8

ADD . /

RUN java -jar ""$JETTY_HOME/start.jar"" --add-to-startd=jmx,jmx-remote,stats

RUN apt-get update && \
   apt-get install -y libgdal-java gdal-bin && \
   rm -rf /var/lib/apt/lists/*

RUN ln -s /usr/share/java/gdal.jar /var/lib/jetty/lib/ext/

VOLUME [ ""/var/local/extracts"" ]

CMD [""sh"", ""-c"", ""exec java -Djava.io.tmpdir=/tmp/jetty -Dgeorchestra.datadir=/etc/georchestra -Dextractor.storage.dir=/var/local/extracts -Xmx$XMX -Xms$XMX -jar /usr/local/jetty/start.jar""]

",georchestra/georchestra,extractorapp/src/docker/Dockerfile
f4fffe9fa44148f5374331da8e29dc52bd9e0007,960,"FROM debian:wheezy
MAINTAINER Pierre Mavro <deimos@deimos.fr>

##################
# User Quick Try #
##################

RUN apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::=""--force-confdef"" \
 -o Dpkg::Options::=""--force-confold"" install whois procps openssh-server
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd

#######
# DEV #
#######

RUN apt-get update
RUN apt-get -y install git
RUN git clone https://github.com/mysecureshell/mysecureshell.git
RUN apt-get -y install libacl1-dev libgnutls-dev gcc make
RUN apt-get -y install build-essential fakeroot lintian devscripts debhelper ubuntu-dev-tools \
 cowbuilder autotools-dev
RUN apt-get -y install sphinx-doc sphinx-common python3-sphinx libjs-sphinxdoc \
 python-pip texlive-latex-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended
RUN pip install sphinx_rtd_theme
RUN apt-get clean

# Start SSHd
EXPOSE 22
CMD [""/usr/sbin/sshd"", ""-D""]
",mysecureshell/mysecureshell,deployment-tools/docker/debian/wheezy/Dockerfile
f72f86c7f5306801801db1babfa700639a0ffbc0,166,"FROM ufaldsg/cloud-asr-base

MAINTAINER Ondrej Klejch

RUN pip install flask flask-socketio==0.6.0 Werkzeug==0.9.6

ADD . /opt/app
WORKDIR /opt/app
CMD python run.py
",UFAL-DSG/cloud-asr,cloudasr/monitor/Dockerfile
0b8e945ee40e73de68992162a28f05f92dff157c,980,"FROM java:8

ENV MAVEN_VERSION 3.2.5
RUN curl -sSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven

RUN mkdir /app /build
WORKDIR /app

RUN git clone https://github.com/robbi5/s3ninja.git /build && \
    cd /build && \
    git checkout s3-root && \
    sed -i '0,/<version>/{s#<version>2.0</version>#<version>2.0-SNAPSHOT</version>#}' /build/pom.xml && \
    mvn compile package && \
    cd /app && unzip /build/target/*.zip && \
    chmod +x sirius.sh

RUN sed -i -e 's#baseDir = ""data/s3""#baseDir = ""/data""#' -e 's#autocreateBuckets = true#autocreateBuckets = false#' /app/app/application.conf

VOLUME /data

#CMD java -server -Xmx1024m -Djava.net.preferIPv4Stack=true IPL
CMD /app/sirius.sh start && tail -F /app/logs/stdout.txt

EXPOSE 9444",robbi5/kleineanfragen,contrib/s3ninja/Dockerfile
3e299c3d1920d5db0360878bc82eaf2a8aeb48f8,65,"FROM luxas/alpine
COPY exechealthz /
ENTRYPOINT [""/exechealthz""]
",luxas/kubernetes-on-arm,images/kubernetesonarm/exechealthz/Dockerfile
dc7eabba19a1403032ab479745897f0ca4a873ad,63,"FROM node:slim

EXPOSE 3000
ENV NODE_ENV=docker-dev
VOLUME /www",redfin/react-server,packages/react-server-examples/bike-share/Dockerfile
83f06def2d2928bfdcd4740e5b162ebf992c56aa,161,"FROM mysql:5

ENV MYSQL_ROOT_PASSWORD 123
ENV MYSQL_DATABASE users
ENV MYSQL_USER users_service
ENV MYSQL_PASSWORD 123

ADD setup.sql /docker-entrypoint-initdb.d",dwmkerr/node-docker-mircroservice,test-database/Dockerfile
9ab8e4552e446b37be54df1f27cbc6a5816c1989,474,"FROM nodesource/fedora21-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub/fc/21/x86_64/nodejs-0.10.36-1nodesource.fc21.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/21/node/0.10.36/Dockerfile
d184e313a3b61604d9d9b267662bf701a7d4fad1,3309,"FROM cloudunit/base-jessie

ENV DEBIAN_FRONTEND noninteractive

ENV PG_MAJOR 9.4
ENV PG_VERSION 9.4.8-1.pgdg80+1

ENV POSTGIS_MAJOR 2.1
#ENV POSTGIS_VERSION 2.1.8+dfsg-5~97.git43a09cc.pgdg80+1

ENV PATH /usr/lib/postgresql/$PG_MAJOR/bin:$PATH
ENV PGDATA /var/lib/postgresql/data
ENV LANG en_US.utf8

RUN groupadd -r postgres --gid=999 && useradd -r -g postgres --uid=999 postgres

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
	&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
	&& wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
	&& wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
	&& gosu nobody true \
	&& apt-get purge -y --auto-remove ca-certificates wget

# RUN echo ""apt-get update && apt-get install -y postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR=$POSTGIS_VERSION""
# RUN apt-get update && apt-get install -y postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR=$POSTGIS_VERSION
RUN apt-get update && \
    apt-get install -y postgresql-9.4-postgis-2.1 \
                       postgis-2.1


# make the ""en_US.UTF-8"" locale so postgres will be utf-8 enabled by default
RUN apt-get update && apt-get install -y locales && rm -rf /var/lib/apt/lists/* \
	&& localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

RUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list
RUN apt-get update

RUN apt-get -y -q install python-software-properties software-properties-common
RUN apt-get -y -q install postgresql-common \
                          postgresql-$PG_MAJOR=$PG_VERSION \
                          postgresql-contrib-$PG_MAJOR=$PG_VERSION \
                          phppgadmin \
                  && rm -rf /var/lib/apt/lists/*

## On Ã©coute sur toutes les IP. La sÃ©curitÃ© est faite avant.
RUN echo ""listen_addresses='*'"" >> /etc/postgresql/9.4/main/postgresql.conf

## Suppression du fichier de configuration d'accÃ¨s
RUN rm /etc/postgresql/9.4/main/pg_hba.conf

## Autorisation en mode 'md5' (password demandÃ©) pour les IP autre que localhost
RUN echo ""local	all all trust""              >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo ""host	all all 127.0.0.1/32 trust"" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo ""host  all all ::1/128      md5"" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo ""host	all all 0.0.0.0/0    md5""   >> /etc/postgresql/9.4/main/pg_hba.conf

# add custom scripts
ADD scripts /cloudunit/scripts
RUN chmod +x /cloudunit/scripts/*

RUN mkdir -p /var/run/postgresql && chown -R postgres /var/run/postgresql

VOLUME /var/lib/postgresql/data

EXPOSE 22

ENTRYPOINT [""/bin/bash"", ""/cloudunit/scripts/start-service.sh""]
",Treeptik/cloudunit,cu-services/images/modules/postgis-2-2/Dockerfile
03bdfefd266255b1d13d1886f11618627ddcfd2e,64,"FROM scratch
ADD rootfs.tar.xz /
CMD [""/bin/sh""]
ENV ARCH=alpha
",multiarch/busybox,alpha/slim/Dockerfile
b35832fe0184caf4dd06bc919ad2ad2951ddefbb,113,"FROM node:5
RUN mkdir /code
WORKDIR /code
ADD . /code/
WORKDIR /code/apostello/assets
RUN npm set progress false
",monty5811/apostello,docker/assets/Dockerfile
724c6e446c516ed7a1b38ebaae53b795a4c81b63,893,"FROM alpine:3.2

MAINTAINER Wojciech Sielski <wsielski@team.mobile.de>

RUN apk --update add curl bash
RUN curl -O ""https://circle-artifacts.com/gh/andyshinn/alpine-pkg-glibc/6/artifacts/0/home/ubuntu/alpine-pkg-glibc/packages/x86_64/glibc-2.21-r2.apk"" \
  && apk add --allow-untrusted glibc-2.21-r2.apk \
  && rm -f glibc-2.21-r2.apk
RUN curl -O ""https://circle-artifacts.com/gh/andyshinn/alpine-pkg-glibc/6/artifacts/0/home/ubuntu/alpine-pkg-glibc/packages/x86_64/glibc-bin-2.21-r2.apk"" \
  && apk add --allow-untrusted glibc-bin-2.21-r2.apk \
  && rm -f glibc-bin-2.21-r2.apk
RUN /usr/glibc/usr/bin/ldconfig /lib /usr/glibc/usr/lib

RUN cd /usr/local/bin/ && curl -O https://raw.githubusercontent.com/eBayClassifiedsGroup/PanteraS/master/frameworks/start.sh
RUN chmod +x /usr/local/bin/start.sh

ENV IMAGE panteras/alpine-glibc
ENV HOME  /
WORKDIR /

ENTRYPOINT [""/usr/local/bin/start.sh""]
",eBayClassifiedsGroup/PanteraS,frameworks/alpine-glibc/Dockerfile
dfa30d5f45c6341e9258f9024ab40d088b912272,1739,"#
# Build and launch a JVM that will generate flamegraph from profiling
# Linux flamegraphs will also be generated and can be used to view the full system.
#
# References :
# http://www.brendangregg.com/blog/2014-06-12/java-flame-graphs.html
#

FROM centos:centos6

# Setup gcc to compile profiler
# http://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos
RUN \
  yum install -y wget && \
  cd /etc/yum.repos.d && \
  wget http://people.centos.org/tru/devtools-1.1/devtools-1.1.repo && \
  yum --enablerepo=testing-1.1-devtools-6 install -y devtoolset-1.1-gcc devtoolset-1.1-gcc-c++ && \
  yum install -y svn which java-1.7.0-openjdk-devel.x86_64 unzip

ENV CC    /opt/centos/devtoolset-1.1/root/usr/bin/gcc  
ENV CPP   /opt/centos/devtoolset-1.1/root/usr/bin/cpp
ENV CXX   /opt/centos/devtoolset-1.1/root/usr/bin/c++
ENV PATH  /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/centos/devtoolset-1.1/root/usr/bin

# Setup java profiler
RUN \
  svn checkout http://lightweight-java-profiler.googlecode.com/svn/trunk/ lightweight-java-profiler-read-only && \
  cd lightweight-java-profiler-read-only && \
  sed -i 's/BITS?=32/BITS?=64/g' Makefile && \
  sed -i 's;INCLUDES=-I$(JAVA_HOME)/$(HEADERS) -I$(JAVA_HOME)/$(HEADERS)/$(UNAME);INCLUDES=-I$(JAVA_HOME)/$(HEADERS) -I$(JAVA_HOME)/$(HEADERS)/$(UNAME) -I/opt/centos/devtoolset-1.1/root/usr/include/c++/4.7.2/x86_64-redhat-linux;g' Makefile && \
  sed -i 's/fprintf(file_, ""\%""PRIdPTR"" "", traces\[i\].count)/fprintf(file_, ""\%"" PRIdPTR "" "", traces\[i\].count)/g' src/display.cc && \
  make all

# Setup FlameGraph
RUN \
  wget 'https://github.com/brendangregg/FlameGraph/archive/master.zip' -O FlameGraph-master.zip && \
  unzip FlameGraph-master.zip
",dcapwell/docker-files,java-flamegraph/Dockerfile
b9716bc9e80c485ec5bb4fa5f3f369b86ca6ca4e,292,"FROM debian:jessie
MAINTAINER Everton Ribeiro <everton@azukiapp.com>

RUN apt-get update -y \
    && apt-get install -y \
                    scons cmake automake autoconf ghostscript \
                    wget git xz-utils \
                    clang valgrind \
                    dnsutils
",azukiapp/libnss-resolver,Dockerfiles/debian8.0/Dockerfile
2351ae0da859b7db9138bf57c4d8db14dba8c11f,497,"#
# THIS FILE IS AUTOGENERATED; SEE ""contrib/builder/rpm/generate.sh""!
#

FROM fedora:22

RUN yum install -y @development-tools fedora-packager
RUN yum install -y btrfs-progs-devel device-mapper-devel glibc-static libselinux-devel selinux-policy selinux-policy-devel sqlite-devel tar

ENV GO_VERSION 1.4.2
RUN curl -fSL ""https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz"" | tar xzC /usr/local
ENV PATH $PATH:/usr/local/go/bin

ENV AUTO_GOPATH 1
ENV DOCKER_BUILDTAGS selinux
",coolhacks/docker-hacks,examples/docker-pull-dry-run/docker/contrib/builder/rpm/fedora-22/Dockerfile
2dc3f15211b2e929e530ce452065929633a82d16,2266,"#FROM staci/base:0.1
FROM debian:jessie

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
#RUN groupadd -r mysql && useradd -u 1000 -r -g mysql mysql
RUN useradd -u 1000 -ms /bin/bash mysql
RUN echo ""mysql:praqma"" | chpasswd

RUN mkdir /docker-entrypoint-initdb.d

# FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:
# File::Basename
# File::Copy
# Sys::Hostname
# Data::Dumper
RUN apt-get update && apt-get install -y perl --no-install-recommends && rm -rf /var/lib/apt/lists/*

# gpg: key 5072E1F5: public key ""MySQL Release Engineering <mysql-build@oss.oracle.com>"" imported
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5

ENV MYSQL_MAJOR 5.6

RUN echo ""deb http://repo.mysql.com/apt/debian/ jessie mysql-${MYSQL_MAJOR}"" > /etc/apt/sources.list.d/mysql.list

# the ""/var/lib/mysql"" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already ""configured"" (ie, stuff in /var/lib/mysql/mysql)
# also, we set debconf keys to make APT a little quieter
RUN { \
		echo mysql-community-server mysql-community-server/data-dir select ''; \
		echo mysql-community-server mysql-community-server/root-pass password ''; \
		echo mysql-community-server mysql-community-server/re-root-pass password ''; \
		echo mysql-community-server mysql-community-server/remove-test-db select false; \
	} | debconf-set-selections \
	&& apt-get update && apt-get install -y mysql-server && rm -rf /var/lib/apt/lists/* \
	&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql

# comment out a few problematic configuration values
# don't reverse lookup hostnames, they are usually another container
RUN sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf \
	&& echo 'skip-host-cache\nskip-name-resolve' | awk '{ print } $1 == ""[mysqld]"" && c == 0 { c = 1; system(""cat"") }' /etc/mysql/my.cnf > /tmp/my.cnf \
	&& mv /tmp/my.cnf /etc/mysql/my.cnf

VOLUME /var/lib/mysql

COPY my.cnf /etc/mysql/my.cnf
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]

EXPOSE 3306
CMD [""mysqld""]
",Praqma/staci,images/mysql/context/Dockerfile
dd8ca422ccd3af30ef94ff1a123cd26c7d2ef25a,145,"FROM phusion/baseimage:0.9.18
MAINTAINER Phusion <info@phusion.nl>

ADD . /pd_build
RUN /pd_build/install.sh
CMD [""/sbin/my_init""]
EXPOSE 80 443
",phusion/passenger-docker,image/Dockerfile
cfb204e1589756902e4b64e385aee67eff949bf9,2103,"# Docker containers are supposedly made to run 1 service per container,.
# this is a dev container for testing nagios quickly - it runs all the
# services needed in one container. Do NOT USE THIS IN PRODUCTION.

# Install Nagios on Centos 6.5
FROM centos:centos6

# me!
MAINTAINER boardstretcher version: 0.1

# update container
RUN yum -y update
RUN yum -y install epel-release
RUN yum -y install gd gd-devel wget httpd php gcc perl tar sendmail supervisor
 
# users and groups
RUN adduser nagios
RUN groupadd nagcmd
RUN usermod -a -G nagcmd nagios
RUN usermod -a -G nagios apache
 
# get archives
ADD http://downloads.sourceforge.net/project/nagios/nagios-4.x/nagios-4.0.8/nagios-4.0.8.tar.gz nagios-4.0.8.tar.gz
ADD http://www.nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz nagios-plugins-2.0.3.tar.gz

# install nagios
RUN tar xf nagios-4.0.8.tar.gz
RUN cd nagios-4.0.8 && ./configure --with-command-group=nagcmd
RUN cd nagios-4.0.8 && make all && make install && make install-init
RUN cd nagios-4.0.8 && make install-config &&  make install-commandmode && make install-webconf

# user/password = nagiosadmin/nagiosadmin
RUN echo ""nagiosadmin:M.t9dyxR3OZ3E"" > /usr/local/nagios/etc/htpasswd.users
RUN chown nagios:nagios /usr/local/nagios/etc/htpasswd.users

# install plugins
RUN tar xf nagios-plugins-2.0.3.tar.gz
RUN cd nagios-plugins-2.0.3 && ./configure --with-nagios-user=nagios --with-nagios-group=nagios
RUN cd nagios-plugins-2.0.3 && make && make install
 
# create initial config
RUN /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
 
# some bug fixes
RUN touch /var/www/html/index.html
RUN chown nagios.nagcmd /usr/local/nagios/var/rw
RUN chmod g+rwx /usr/local/nagios/var/rw
RUN chmod g+s /usr/local/nagios/var/rw
 
# init bug fix
# RUN sed -i '/$NagiosBin -d $NagiosCfgFile/a (sleep 10; chmod 666 \/usr\/local\/nagios\/var\/rw\/nagios\.cmd) &' /etc/init.d/nagios
 
# remove gcc
RUN yum -y remove gcc

# port 80
EXPOSE 25 80

# supervisor configuration
ADD supervisord.conf /etc/supervisord.conf

# start up nagios, sendmail, apache
CMD [""/usr/bin/supervisord""]
",boardstretcher/docker-files,nagios-4.0.8_centos6/Dockerfile
555c7c8e1f00493386a88782d683cedf2055a813,645,"FROM binduwavell/codenvy-alfresco-generator-community:0.4

ADD $app$/package.json /tmp/application/package.json

RUN cd /tmp/application && npm install

# 1. Update permissions
# 2. Copy nodejs modules to the application folder
# 3. Update permissions recursively
# 4. Makes newly created files accessible for anyone
# 5. Link the generator
# 6. Sleep so we can shell into the container
CMD sudo chmod a+rw /home/user/application/ && \
    cp -a /tmp/application/node_modules /home/user/application/ && \
    sudo chmod a+rw -R /home/user/application/ && \
    umask 0 && \
    cd /home/user/application ; sudo npm link && \
    sleep 365d
    
",binduwavell/generator-alfresco,.codenvy/runners/environments/Node.js-0.10-NPM-1.4.21-Yeoman-1.4.6/Dockerfile
e6c645436262b6a1d8bf78c166ca51346f1128db,92,"FROM minimum2scp/baseimage:latest
ADD service.test /tmp/
CMD /tmp/service.test -test.v=true
",timeglass/glass,_vendor/github.com/kardianos/service/linux_test/sysv/Dockerfile
a6dbece1598654ff2e4ade78d58e8ba294eb0dd5,592,"FROM        quay.io/prometheus/golang-builder:1.5-base
MAINTAINER  The Prometheus Authors <prometheus-developers@googlegroups.com>

VOLUME  /app
WORKDIR /app

RUN \
    echo ""deb http://emdebian.org/tools/debian/ unstable main"" > /etc/apt/sources.list.d/crosstools.list \
    && curl http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add - \
    && apt-get update && apt-get install -y --no-install-recommends \
        crossbuild-essential-powerpc \
        crossbuild-essential-ppc64el \
    && rm -rf /var/lib/apt/lists/*

COPY rootfs /

ENTRYPOINT [""/builder.sh""]
",prometheus/golang-builder,1.5/powerpc/Dockerfile
3af0d78e25f02813713b225595688ea4115d00df,920,"FROM golang:1.6-alpine

ENV MR_BURNS_DIR /go/src/github.com/gaia-adm/mr-burns
WORKDIR $MR_BURNS_DIR

# install Git apk
RUN apk --update add git bash \
    && rm -rf /var/lib/apt/lists/* \
    && rm /var/cache/apk/*

# install glide package manager
RUN curl -Ls https://github.com/Masterminds/glide/releases/download/0.10.1/glide-0.10.1-linux-amd64.tar.gz | tar xz -C /tmp \
 && mv /tmp/linux-amd64/glide /usr/bin/

# gox - Go cross compile tool
# cover - Go code coverage tool
# go-junit-report - convert Go test into junit.xml format
RUN go get github.com/mitchellh/gox \
    && go get github.com/jstemmer/go-junit-report

ENV RESULT_DIR $MR_BURNS_DIR/.cover
ENV RESULT_FILE go-results_tests.txt

LABEL test=true
LABEL test.results.dir=$RESULT_DIR
LABEL test.results.file=$RESULT_FILE
LABEL test.cmd=script/go_test.sh

COPY . $MR_BURNS_DIR
RUN chmod u+x script/go_build.sh script/go_test.sh

CMD [""script/go_build.sh""]
",gaia-adm/mr-burns,Build.Dockerfile
e45f2800933dc037a9f6d022bd04300406f43652,167,"FROM java:8-jre
MAINTAINER Alexander Lukyanchikov <sqshq@sqshq.com>

ADD ./target/registry.jar /app/
CMD [""java"", ""-Xmx200m"", ""-jar"", ""/app/registry.jar""]

EXPOSE 8761",sqshq/PiggyMetrics,registry/Dockerfile
466cfe30de84f8c94d574c0fd57f7d218f3f32ad,555,"FROM nodesource/precise-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.1.0-2nodesource1~precise1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/precise/node/5.1.0/Dockerfile
975f9c7e3ee26690eb8c95a04040c5d9c077d07b,572,"FROM ubuntu:12.10
MAINTAINER Antonin Hildebrand <antonin@binaryage.com>

RUN apt-get update
RUN apt-get install -y python-leveldb python-setuptools python-pip python-openssl git
RUN pip install jsonrpclib

ADD	. /electrum
WORKDIR /electrum

RUN git clone https://github.com/spesmilo/electrum-server.git
WORKDIR /electrum/electrum-server
RUN chmod +x server.py

RUN ln -s /electrum/electrum-server/server.py /bin/electrum-server
RUN chmod +x /bin/electrum-server

EXPOSE 50001
EXPOSE 8081
EXPOSE 50002
EXPOSE 8082

ADD enter /enter
RUN	chmod +x /enter
ENTRYPOINT [""/enter""]",binaryage/electrum-server-docker,electrum/Dockerfile
54e280c10732180a4a7764821d1c6d40b995b0ad,3519,"FROM staci/base:0.1

# Setup useful environment variables
ENV CONF_HOME     /var/atlassian/confluence
ENV CONF_INSTALL  /opt/atlassian/confluence
ENV CONF_VERSION  5.9.1

# Define memory usage for tomcat
ENV Xms		  512m
ENV Xmx		  2048m

# Add luci user and set password
RUN useradd -u 1000 -ms /bin/bash atlassian
RUN echo ""atlassian:praqma"" | chpasswd

# Install Atlassian Confluence and helper tools and setup initial home
# directory structure.
RUN set -x \
    && mkdir -p                ""${CONF_HOME}"" \
    && chmod -R 700            ""${CONF_HOME}"" \
    && chown atlassian:atlassian     ""${CONF_HOME}"" \
    && mkdir -p                ""${CONF_INSTALL}/conf"" \
    && curl -Ls                ""http://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-${CONF_VERSION}.tar.gz"" | tar -xz --directory ""${CONF_INSTALL}"" --strip-components=1 --no-same-owner \
    && chmod -R 700            ""${CONF_INSTALL}/conf"" \
    && chmod -R 700            ""${CONF_INSTALL}/temp"" \
    && chmod -R 700            ""${CONF_INSTALL}/logs"" \
    && chmod -R 700            ""${CONF_INSTALL}/work"" \
    && chown -R atlassian:atlassian  ""${CONF_INSTALL}/conf"" \
    && chown -R atlassian:atlassian  ""${CONF_INSTALL}/temp"" \
    && chown -R atlassian:atlassian  ""${CONF_INSTALL}/logs"" \
    && chown -R atlassian:atlassian  ""${CONF_INSTALL}/work"" \
    && echo -e                 ""\nconfluence.home=$CONF_HOME"" >> ""${CONF_INSTALL}/confluence/WEB-INF/classes/confluence-init.properties"" \
    && xmlstarlet              ed --inplace \
        --delete               ""Server/@debug"" \
        --delete               ""Server/Service/Connector/@debug"" \
        --delete               ""Server/Service/Connector/@useURIValidationHack"" \
        --delete               ""Server/Service/Connector/@minProcessors"" \
        --delete               ""Server/Service/Connector/@maxProcessors"" \
        --delete               ""Server/Service/Engine/@debug"" \
        --delete               ""Server/Service/Engine/Host/@debug"" \
        --delete               ""Server/Service/Engine/Host/Context/@debug"" \
                               ""${CONF_INSTALL}/conf/server.xml"" \
    && sed -ri ""s/-Xms1024m -Xmx1024m/-Xms${Xms} -Xmx${Xmx}/"" $CONF_INSTALL/bin/setenv.sh

# Getting the MySQL driver
RUN curl -Ls ""http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.36.tar.gz"" | tar -xz --directory ""${CONF_INSTALL}/confluence/WEB-INF/lib/"" --strip-components=1 --no-same-owner

# Fix Issue #2  -- https://github.com/Praqma/staci/issues/2
COPY setContextPath.sh /tmp/setContextPath.sh
RUN /tmp/setContextPath.sh

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER atlassian:atlassian

# Expose default HTTP connector port.
EXPOSE 8090

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/confluence""]

# Fix Issue #1  -- https://github.com/Praqma/staci/issues/1
RUN sed -i -e 's/<Context>/<Context sessionCookieName=""CONFLUENCESESSIONID"">/g' /opt/atlassian/confluence/conf/context.xml

# Set the default working directory as the Confluence home directory.
WORKDIR ${CONF_HOME}

# Run Atlassian Confluence as a foreground process by default.
CMD [""/opt/atlassian/confluence/bin/start-confluence.sh"", ""-fg""]
",Praqma/staci,images/confluence/context/Dockerfile
64437a72acd4f22ce68e8d0007e83930049d8695,2102,"FROM debian:jessie

RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
		bzip2 \
		ca-certificates \
		curl \
		libffi-dev \
		libgdbm3 \
		libssl-dev \
		libyaml-dev \
		procps \
		zlib1g-dev \
	&& rm -rf /var/lib/apt/lists/*

# skip installing gem documentation
RUN mkdir -p /usr/local/etc \
	&& { \
		echo 'install: --no-document'; \
		echo 'update: --no-document'; \
	} >> /usr/local/etc/gemrc

ENV RUBY_MAJOR 2.2
ENV RUBY_VERSION 2.2.5
ENV RUBY_DOWNLOAD_SHA256 30c4b31697a4ca4ea0c8db8ad30cf45e6690a0f09687e5d483c933c03ca335e3
ENV RUBYGEMS_VERSION 2.6.6

# some of ruby's build scripts are written in ruby
# we purge this later to make sure our final image uses what we just built
RUN set -ex \
	&& buildDeps=' \
		autoconf \
		bison \
		gcc \
		libbz2-dev \
		libgdbm-dev \
		libglib2.0-dev \
		libncurses-dev \
		libreadline-dev \
		libxml2-dev \
		libxslt-dev \
		make \
		ruby \
	' \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends $buildDeps \
	&& rm -rf /var/lib/apt/lists/* \
	&& curl -fSL -o ruby.tar.gz ""http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz"" \
	&& echo ""$RUBY_DOWNLOAD_SHA256 *ruby.tar.gz"" | sha256sum -c - \
	&& mkdir -p /usr/src/ruby \
	&& tar -xzf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \
	&& rm ruby.tar.gz \
	&& cd /usr/src/ruby \
	&& { echo '#define ENABLE_PATH_CHECK 0'; echo; cat file.c; } > file.c.new && mv file.c.new file.c \
	&& autoconf \
	&& ./configure --disable-install-doc \
	&& make -j""$(nproc)"" \
	&& make install \
	&& apt-get purge -y --auto-remove $buildDeps \
	&& gem update --system $RUBYGEMS_VERSION \
	&& rm -r /usr/src/ruby

ENV BUNDLER_VERSION 1.12.5

RUN gem install bundler --version ""$BUNDLER_VERSION""

# install things globally, for great justice
# and don't create "".bundle"" in all our apps
ENV GEM_HOME /usr/local/bundle
ENV BUNDLE_PATH=""$GEM_HOME"" \
	BUNDLE_BIN=""$GEM_HOME/bin"" \
	BUNDLE_SILENCE_ROOT_WARNING=1 \
	BUNDLE_APP_CONFIG=""$GEM_HOME""
ENV PATH $BUNDLE_BIN:$PATH
RUN mkdir -p ""$GEM_HOME"" ""$BUNDLE_BIN"" \
	&& chmod 777 ""$GEM_HOME"" ""$BUNDLE_BIN""

CMD [ ""irb"" ]
",docker-library/ruby,2.2/slim/Dockerfile
0babbdf2fbace6236d66a49969a9e101f041b73a,927,"FROM ubuntu:14.04
MAINTAINER Tutum Labs <support@tutum.co>

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \
    echo ""deb http://repo.mongodb.org/apt/ubuntu ""$(lsb_release -sc)""/mongodb-org/3.0 multiverse"" | tee /etc/apt/sources.list.d/mongodb-org-3.0.list && \
    apt-get update && \
    apt-get install -y pwgen mongodb-org mongodb-org-server mongodb-org-shell mongodb-org-mongos mongodb-org-tools && \
    echo ""mongodb-org hold"" | dpkg --set-selections && echo ""mongodb-org-server hold"" | dpkg --set-selections && \
    echo ""mongodb-org-shell hold"" | dpkg --set-selections && \
    echo ""mongodb-org-mongos hold"" | dpkg --set-selections && \
    echo ""mongodb-org-tools hold"" | dpkg --set-selections

VOLUME /data/db

ENV AUTH yes
ENV STORAGE_ENGINE wiredTiger
ENV JOURNALING yes

ADD run.sh /run.sh
ADD set_mongodb_password.sh /set_mongodb_password.sh

EXPOSE 27017 28017

CMD [""/run.sh""]
",tutumcloud/mongodb,3.0/Dockerfile
8ca658e94dafed251e8c206aa3e8517275b20418,1385,"#################################################################
# Dockerfile
#
# Version:          2
# Software:         Comet
# Software Version: 2015020
# Description:      basic local alignment search tool
# Website:          http://comet-ms.sourceforge.net/
# Tags:             Proteomics
# Provides:         Comet 2015020
# Base Image:       biodckr/biodocker:latest
# Build Cmd:        docker build --rm -t biodckr/comet 2015020/.
# Pull Cmd:         docker pull biodckr/comet
# Run Cmd:          docker run --rm biodckr/comet comet
#################################################################

# Set the base image to biodckr/biodocker
FROM biodckr/biodocker:latest

################## BEGIN INSTALLATION ###########################

USER biodocker

RUN ZIP=comet_binaries_2015020.zip && \
    wget https://github.com/BioDocker/software-archive/releases/download/Comet/$ZIP -O /tmp/$ZIP && \
    unzip /tmp/$ZIP -d /home/biodocker/bin/Comet/ && \
    chmod -R 755 /home/biodocker/bin/Comet/* && \
    rm /tmp/$ZIP

RUN mv /home/biodocker/bin/Comet/comet.2015020.linux.exe /home/biodocker/bin/Comet/comet

ENV PATH /home/biodocker/bin/Comet:$PATH

WORKDIR /data/

##################### INSTALLATION END ##########################

# File Author / Maintainer
MAINTAINER Felipe da Veiga Leprevost <felipe@leprevost.com.br>
# Modified by Felipe da Veiga Leprevost 01-26-2016
",BioDocker/containers,comet/2015020/Dockerfile
c5b011316c8b17c38631d474b476e40718b0425c,2051,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM opensuse:42.1

RUN zypper --non-interactive install curl

RUN zypper --non-interactive install tar which

RUN zypper --non-interactive install ca-certificates-mozilla

# Install rvm
RUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
RUN \curl -sSL https://get.rvm.io | bash -s stable --ruby

# OpenSUSE is a bit crazy and ignores .bashrc for login shell.
RUN /bin/bash -l -c ""echo '. /etc/profile.d/rvm.sh' >> ~/.profile""

RUN /bin/bash -l -c 'gem install --update bundler'
",leifurhauks/grpc,tools/dockerfile/distribtest/ruby_opensuse_x64/Dockerfile
b0db73cc1bd362f0eed5fadb6c929f50057e1010,766,"# Start from a Debian image with the latest version of Go installed
# and a workspace (GOPATH) configured at /go.
FROM golang

# Copy the local package files to the container's workspace.
ADD . /go/src

# Build the outyet command inside the container.
# (You may fetch or manage dependencies here,
# either manually or with a tool like ""godep"".)

RUN go install ./bin/facebookprofile

# Run the outyet command by default when the container starts.
ENTRYPOINT /go/bin/facebookprofile

# Document that the service listens on port 8080.
# EXPOSE 8080
# TODO make this configurable

# to build the docker machine
# docker build -t facebookprofile -f ./bin/dockerfiles/facebookprofile/Dockerfile ./src/

# to run the built docker machine
# docker run -it facebookprofile
",cihangir/gene,example/tinder/dockerfiles/facebookprofile/Dockerfile
4fec7c30e132ef6ae9f037d7054a018dae219b1a,1449,"# https://github.com/monitoringartist/zabbix-server-stress-test

## Dockerized compilation (build from remote URL or local PATH):
# docker build --rm=true -t local/zabbix-module-compilation https://github.com/monitoringartist/zabbix-server-stress-test.git#master:dockerfiles/ubuntu/
# docker build --rm=true -t local/zabbix-module-compilation .
# docker run --rm -v /tmp:/tmp local/zabbix-module-compilation cp /root/zabbix/src/modules/zabbix_module_stress/zabbix_module_stress.so /tmp/zabbix_module_stress.so
# docker rmi -f local/zabbix-module-compilation
## use/copy file /tmp/zabbix_module_stress.so

# Define required Debian version by using FROM tag. Avalaible: wheezy/jessie/...
FROM ubuntu:14.04

MAINTAINER ""Jan Garaj"" <info@monitoringartist.com>

# Define required Zabbix version (tag/<version>) or branch (branches/<version>), e.g. tags/2.4.5, or branches/2.4  
ENV ZABBIX_VERSION=branches/3.0

WORKDIR /root

RUN \
   apt-get update && \
   apt-get --assume-yes install git subversion automake autoconf gcc make pkg-config && \
   git clone https://github.com/monitoringartist/zabbix-server-stress-test && \
   mkdir ~/zabbix/ && \
   svn co svn://svn.zabbix.com/${ZABBIX_VERSION} ~/zabbix/ && \
   cd ~/zabbix/ && \
   ./bootstrap.sh  && \
   ./configure --enable-agent  && \
   cp -R ~/zabbix-server-stress-test/src/modules/zabbix_module_stress/ ~/zabbix/src/modules/  && \
   cd ~/zabbix/src/modules/zabbix_module_stress && \
   make
",monitoringartist/zabbix-server-stress-test,dockerfiles/ubuntu/Dockerfile
a13675ebe3b4672d20e39bccc4fa00c1131f358c,510,"FROM debian:jessie

RUN apt-get update && \
    apt-get install -y build-essential \
                       python3-dev \
                       python3-virtualenv \
                       python-virtualenv \
                       uwsgi-core \
                       uwsgi-plugin-python3

# Create venvs
RUN virtualenv -p python3 /opt/venv

# Create app directory
RUN mkdir -p /opt/lanets-website
ADD requirements.txt /opt/lanets-website/
RUN /opt/venv/bin/pip install -r /opt/lanets-website/requirements.txt
",lanets/new.lanets.ca,docker/uwsgi-python3/Dockerfile
03dc28a1b2f305fbb1fee4a8d00bb45829d2e9c0,553,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.4.0-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/5.4.0/Dockerfile
8aeffd503e30ad5e3d498e96a3c188c3a9384d52,107,"FROM prom/prometheus:latest
MAINTAINER Alexey Medvedchikov <alexey.medvedchikov@gmail.com>

ADD rootfs/ /

",agalitsyn/yagoda,prometheus/image-prometheus/Dockerfile
129738e5285323d272ce36f6a2dd81069a8a7392,562,"FROM nfnty/arch-nginx:latest
MAINTAINER nfnty <docker@nfnty.se>

USER root

ENV VERSION_PHP='7.0.7-1'
RUN pacman --sync --noconfirm --refresh --sysupgrade && \
    pacman --sync --noconfirm ""php=${VERSION_PHP}"" ""php-fpm=${VERSION_PHP}"" python && \
    find /var/cache/pacman/pkg -mindepth 1 -delete && \
    install --directory --owner=""${UGNAME}"" --group=""${UGNAME}"" --mode=700 /run/php-fpm

USER ${UGNAME}
ENTRYPOINT [ \
    ""/opt/multiprocess.py"", ""--"", \
    ""/usr/bin/php-fpm --fpm-config /etc/php/php-fpm.conf"", \
    ""/usr/bin/nginx -g 'daemon off;'"" \
]
",nfnty/dockerfiles,images/arch-nginx-php/latest/Dockerfile
575fd12143cf7c4fd5f7d385519ce79c563a55d0,2471,"FROM python:2.7
MAINTAINER Federico Gonzalez

# Update debian packages
RUN DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get upgrade -y

# Install debian dependencies
RUN apt-get --force-yes install -y wget curl locales git nano htop build-essential nginx
RUN apt-get --force-yes install -y nodejs nodejs-legacy
RUN apt-get --force-yes install -y binutils libproj-dev gdal-bin libgeoip1 python-gdal
RUN apt-get --force-yes install -y libjpeg-dev libpng3 libpng12-dev libfreetype6-dev zlib1g-dev
RUN apt-get --force-yes install -y jpegoptim optipng
RUN apt-get --force-yes install -y libffi-dev libxml2-dev libxslt1-dev

# Install npm
RUN curl -sL https://deb.nodesource.com/setup_4.x | bash -
RUN wget http://npmjs.org/install.sh
RUN sh install.sh

# Configure npm
RUN npm config set registry http://registry.npmjs.org
RUN git config --global url.""https://"".insteadOf git://

# Install bower and gulp
RUN npm install -g bower

# Download source
RUN cd /var/www/ && git clone https://github.com/gnutn/eventoL.git eventol

# Install python dependencies
RUN cd /var/www/eventol/ && virtualenv venv
RUN cd /var/www/eventol/ && . venv/bin/activate && pip install -r requirements.txt

# Install npm and bower dependencies
RUN cd /var/www/eventol/ && bower install --allow-root

# Compile less files
RUN npm install -g less
RUN lessc /var/www/eventol/manager/static/manager/less/flisol.less > /var/www/eventol/manager/static/manager/css/flisol.css
RUN lessc /var/www/eventol/manager/static/manager/less/flisol-bootstrap.less > /var/www/eventol/manager/static/manager/css/flisol-bootstrap.css

# Configure source
RUN chmod +x /var/www/eventol/manage.py

# Install supervisord and gunicorn
RUN cd /var/www/eventol/ && . venv/bin/activate && pip install supervisor
RUN cd /var/www/eventol/ && . venv/bin/activate && pip install gunicorn
ADD supervisor/supervisord.conf /etc/supervisord.conf
ADD gunicorn/gunicorn-eventol.sh /var/www/eventol/gunicorn-eventol.sh
RUN chmod +x /var/www/eventol/gunicorn-eventol.sh

# Configure nginx
RUN rm -rf /etc/nginx/sites-enabled/*
RUN rm -rf /etc/nginx/sites-available/*
RUN rm -rf /etc/nginx/conf.d/default.conf
ADD nginx/nginx.conf /etc/nginx/nginx.conf
ADD nginx/eventol.conf /etc/nginx/sites-available/eventol.conf
RUN ln -s /etc/nginx/sites-available/eventol.conf /etc/nginx/sites-enabled/eventol.conf

# Add run script
RUN mkdir /var/www/eventol/log
ADD script/run.sh /run.sh
RUN chmod +x /run.sh

EXPOSE 8000

CMD [""/run.sh""]",GNUtn/eventoL,deploy/docker/Dockerfile
890febe7b68e29a55639ae5a8d21d283cd5d33a7,904,"# Spark Worker
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

FROM spark-test-base
ENV SPARK_WORKER_PORT 8888
ADD default_cmd /root/
ENTRYPOINT [""/root/default_cmd""]
",cloudera/spark,docker/spark-test/worker/Dockerfile
be2d50495cde54aa279587341d6a00a7c1b7f77a,133,"FROM scratch
ADD https://github.com/multiarch/qemu-user-static/releases/download/v2.5.0/x86_64_qemu-mipsn32el-static.tar.xz /usr/bin
",multiarch/qemu-user-static,archs/x86_64-mipsn32el/Dockerfile
aa10e2e309d4afec6bba53522533073423f61971,478,"FROM nodesource/centos7-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub/el/7/x86_64/nodejs-0.10.45-1nodesource.el7.centos.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/7/node/0.10.45/Dockerfile
cb93a38461d371c1fb1ca87b3c94628c26626636,388,"FROM thewtex/cross-compiler-base
MAINTAINER Matt McCormick ""matt.mccormick@kitware.com""

ENV CROSS_TRIPLE x86_64-linux-gnu
ENV CROSS_ROOT /usr/bin/${CROSS_TRIPLE}
ENV AS=/usr/bin/${CROSS_TRIPLE}-as \
    AR=/usr/bin/${CROSS_TRIPLE}-ar \
    CC=/usr/bin/${CROSS_TRIPLE}-gcc \
    CPP=/usr/bin/${CROSS_TRIPLE}-cpp \
    CXX=/usr/bin/${CROSS_TRIPLE}-g++ \
    LD=/usr/bin/${CROSS_TRIPLE}-ld
",thewtex/cross-compilers,linux-x64/Dockerfile
7fbd092b149cbc37219b98874438989101ddd7fb,178,"FROM mysql

ENV MYSQL_IMPORT /usr/local/mysql/scripts/import.sql

ADD entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ADD import.sql /usr/local/mysql/scripts/import.sql
",drGrove/koa-boilerplate,db/Dockerfile
f028edaaf7525c099a4f5aba54e4b6a86b9638f2,355,"FROM ubuntu:14.04

MAINTAINER Sergii Suchkov (srg.suchkov@gmail.com)

RUN apt-get update && \
    apt-get install -y \
    curl \
    jq

RUN curl -s https://download.elastic.co/kibana/kibana/kibana-4.2.0-linux-x64.tar.gz | \
    tar -xzC / && \
    mv /kibana-4.2.0-linux-x64 /kibana
VOLUME [""/data""]
WORKDIR /data 
ADD bootstrap.sh /data/bootstrap.sh


",pintostack/core,docker/kibana/Dockerfile
0e66d587090334e31b114ad83bfd4b8b1252d79c,4180,"FROM alpine:3.3

MAINTAINER Luciano Mores <luciano.mores@gmail.com>

ENV JAVA_VERSION=""6""  \
    JAVA_UPDATE=""45"" \
    JAVA_BUILD=""06"" \
    JAVA_HOME=""/usr/lib/jvm/default-jvm"" \
    GROOVY_VERSION=""2.3.11"" \
    LANG=C.UTF-8

RUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip && \
    ALPINE_GLIBC_BASE_URL=""https://github.com/andyshinn/alpine-pkg-glibc/releases/download"" && \
    ALPINE_GLIBC_PACKAGE_VERSION=""2.23-r1"" && \
    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=""glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk"" && \
    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=""glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk"" && \
    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=""glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk"" && \
    wget -q -o /dev/null \
        ""$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"" \
        ""$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"" \
        ""$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"" && \
    apk add --no-cache --allow-untrusted \
        ""$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"" \
        ""$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"" \
        ""$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"" && \
    \
    # Hotfix for glibc hack that fixes the order of DNS resolving (i.e. check /etc/hosts first and then lookup DNS-servers).
    # To fix this we just create /etc/nsswitch.conf and add the following line:
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    echo ""export LANG=C.UTF-8"" > /etc/profile.d/locale.sh && \
    \
    apk del glibc-i18n && \
    \
    rm \
        ""$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"" \
        ""$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"" \
        ""$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"" && \
    cd ""/tmp"" && \
    wget -q -o /dev/null --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" \
        ""http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.bin"" && \
    wget -q -o /dev/null --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" \
        ""http://download.oracle.com/otn-pub/java/jce_policy/6/jce_policy-6.zip"" && \
    sh ""jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.bin"" && \
    mkdir -p ""/usr/lib/jvm"" && \
    mv ""/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}"" ""/usr/lib/jvm/java-${JAVA_VERSION}-oracle"" && \
    ln -s ""java-${JAVA_VERSION}-oracle"" ""$JAVA_HOME"" && \
    unzip -jo -d ""$JAVA_HOME/jre/lib/security"" ""/tmp/jce_policy-6.zip"" && \
    ln -s ""$JAVA_HOME/bin/""* ""/usr/bin/"" && \
    rm -rf ""$JAVA_HOME/""*src.zip && \
    rm -rf ""$JAVA_HOME/lib/missioncontrol"" \
           ""$JAVA_HOME/lib/visualvm"" \
           ""$JAVA_HOME/lib/""*javafx* \
           ""$JAVA_HOME/jre/lib/plugin.jar"" \
           ""$JAVA_HOME/jre/lib/ext/jfxrt.jar"" \
           ""$JAVA_HOME/jre/bin/javaws"" \
           ""$JAVA_HOME/jre/lib/javaws.jar"" \
           ""$JAVA_HOME/jre/lib/desktop"" \
           ""$JAVA_HOME/jre/plugin"" \
           ""$JAVA_HOME/jre/lib/""deploy* \
           ""$JAVA_HOME/jre/lib/""*javafx* \
           ""$JAVA_HOME/jre/lib/""*jfx* \
           ""$JAVA_HOME/jre/lib/amd64/libdecora_sse.so"" \
           ""$JAVA_HOME/jre/lib/amd64/""libprism_*.so \
           ""$JAVA_HOME/jre/lib/amd64/libfxplugins.so"" \
           ""$JAVA_HOME/jre/lib/amd64/libglass.so"" \
           ""$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so"" \
           ""$JAVA_HOME/jre/lib/amd64/""libjavafx*.so \
           ""$JAVA_HOME/jre/lib/amd64/""libjfx*.so && \
    rm -rf ""$JAVA_HOME/jre/bin/keytool"" \
           ""$JAVA_HOME/jre/bin/orbd"" \
           ""$JAVA_HOME/jre/bin/pack200"" \
           ""$JAVA_HOME/jre/bin/policytool"" \
           ""$JAVA_HOME/jre/bin/rmid"" \
           ""$JAVA_HOME/jre/bin/rmiregistry"" \
           ""$JAVA_HOME/jre/bin/servertool"" \
           ""$JAVA_HOME/jre/bin/tnameserv"" \
           ""$JAVA_HOME/jre/bin/unpack200"" \
           ""$JAVA_HOME/jre/lib/jfr.jar"" \
           ""$JAVA_HOME/jre/lib/jfr"" \
           ""$JAVA_HOME/jre/lib/oblique-fonts"" && \
    apk del build-dependencies && \
    rm -rf /tmp/* /var/cache/apk/*

# Define working directory.
WORKDIR /data
",andreptb/Dockerfiles,oracle-java/alpine/jdk-6/Dockerfile
7846b2298c3176ca4fd1f58c2a3ac397a08f77ea,2853,"FROM debian:jessie

# persistent / runtime deps
RUN apt-get update && apt-get install -y ca-certificates curl libxml2 --no-install-recommends && rm -r /var/lib/apt/lists/*

# phpize deps
RUN apt-get update && apt-get install -y autoconf gcc libc-dev make pkg-config --no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
RUN apt-get update && apt-get install -y apache2-bin apache2.2-common --no-install-recommends && rm -rf /var/lib/apt/lists/*

RUN rm -rf /var/www/html && mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && chown -R www-data:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html

# Apache + PHP requires preforking Apache for best results
RUN a2dismod mpm_event && a2enmod mpm_prefork

RUN mv /etc/apache2/apache2.conf /etc/apache2/apache2.conf.dist
COPY apache2.conf /etc/apache2/apache2.conf
# it'd be nice if we could not COPY apache2.conf until the end of the Dockerfile, but its contents are checked by PHP during compilation

ENV PHP_EXTRA_BUILD_DEPS apache2-dev
ENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2
##</autogenerated>##

RUN gpg --keyserver pool.sks-keyservers.net --recv-keys F38252826ACD957EF380D39F2F7956BC5DA04B5D

ENV PHP_VERSION 5.4.38

# --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself)
RUN buildDeps="" \
		$PHP_EXTRA_BUILD_DEPS \
		bzip2 \
		file \
		libcurl4-openssl-dev \
		libreadline6-dev \
		libssl-dev \
		libxml2-dev \
	""; \
	set -x \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.bz2/from/this/mirror"" -o php.tar.bz2 \
	&& curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.bz2.asc/from/this/mirror"" -o php.tar.bz2.asc \
	&& gpg --verify php.tar.bz2.asc \
	&& mkdir -p /usr/src/php \
	&& tar -xf php.tar.bz2 -C /usr/src/php --strip-components=1 \
	&& rm php.tar.bz2* \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path=""$PHP_INI_DIR"" \
		--with-config-file-scan-dir=""$PHP_INI_DIR/conf.d"" \
		$PHP_EXTRA_CONFIGURE_ARGS \
		--disable-cgi \
		--enable-mysqlnd \
		--with-curl \
		--with-openssl \
		--with-readline \
		--with-zlib \
	&& make -j""$(nproc)"" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps \
	&& make clean

COPY docker-php-ext-* /usr/local/bin/

##<autogenerated>##
COPY apache2-foreground /usr/local/bin/
WORKDIR /var/www/html

EXPOSE 80
CMD [""apache2-foreground""]
##</autogenerated>##
",FriendsOfPHP/php,5.4/apache/Dockerfile
67eed839bfbfc54e931bddd7e9be297f89b3d063,214,"FROM python:2.7

ENV PYTHONUNBUFFERED 1

RUN mkdir /code \
        /pip-src
WORKDIR /code
ADD requirements.txt /code/requirements.txt

RUN pip install cython \
    && pip install -r requirements.txt --src=/pip-src
",douban/code,dockerfiles/python/Dockerfile
6938865ac41b662a826f11d2203bc66b4f7a5c24,1838,"FROM	phusion/baseimage:0.9.16
MAINTAINER	Markus Binsteiner <makkus@gmail.com>

CMD [""/sbin/my_init""]

# Seafile dependencies and system configuration
RUN apt-get update && apt-get install -y \
		python2.7 \
		python-setuptools \
		python-simplejson \
		python-imaging \
		sqlite3 \
		python-mysqldb \
		python-memcache \
		mysql-client \
		socat \
		zile \ 
		bup \
		expect \
		python-flup

RUN ulimit -n 30000

# script to download seafile
RUN mkdir -p /opt/scripts/
ADD setup-seafile.sh /usr/local/bin/setup-seafile
ADD setup-seafile.expect /usr/local/bin/setup-seafile.expect
RUN chmod 755 /usr/local/bin/setup-seafile
RUN chmod 755 /usr/local/bin/setup-seafile.expect
ADD upgrade-seafile.sh /usr/local/bin/upgrade-seafile
ADD create_db.sql /opt/scripts/create_db.sql
ADD garbage_collection.sh /opt/scripts/seafile-gc
ADD backup.sh /opt/scripts/seafile-backup
ADD custom /tmp/seafile-custom
# create seafile & backup user
ADD ids.lst /tmp/ids.lst
ADD prepare-user.sh /tmp/prepare-user.sh
RUN /tmp/prepare-user.sh

ADD backup_schedule.sh /etc/cron.d/backup_schedule.sh
ADD garbage_collection_schedule.sh /etc/cron.d/garbage_collection_schedule.sh

EXPOSE 10001 12001 8000 8080 8082

RUN mkdir -p /var/log/seafile
RUN chown -R seafile /var/log/seafile

# Seafile daemons
RUN mkdir -p /etc/service/seafile_services
ADD seafile_services.sh /etc/service/seafile_services/run
ADD seafile_services_stop.sh /etc/service/seafile_services/finish
RUN mkdir -p /etc/seafile/service/seafile /etc/seafile/service/seahub
ADD seafile.sh /etc/seafile/service/seafile/run
ADD seafile_stop.sh /etc/seafile/service/seafile/finish
ADD seahub.sh /etc/seafile/service/seahub/run
ADD seahub_stop.sh /etc/seafile/service/seahub/finish
RUN chown -R seafile /etc/seafile

# Clean up for smaller image
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /var/tmp/*
",makkus/docker-seafile,seafile/Dockerfile
fe1406be98c978591cf1d84b7a4dbf76dd679d65,1888,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM opensuse:42.1

RUN zypper --non-interactive install python
RUN zypper --non-interactive install python-pip

# ""which"" command required by python's run_distrib_test.sh
RUN zypper --non-interactive install which

# Without this, pip won't be able to connect to
# https://pypi.python.org/simple/
RUN zypper --non-interactive install ca-certificates-mozilla
",grpc/grpc,tools/dockerfile/distribtest/python_opensuse_x64/Dockerfile
a9b31b0860e5b0a7dd84c41c8d1a127f1eaa6c21,551,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.36-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/0.10.36/Dockerfile
ebbc5c1a782066966ea4ae975d9a4922f97ba2bd,237,"FROM centos:6.7

RUN yum -y install epel-release

ENV RPM_DIR     /rpms
ENV TEST_SCRIPT /test_installation

COPY *.rpm ""${RPM_DIR}/""
COPY test_installation ""${TEST_SCRIPT}""

CMD yum -y install ""${RPM_DIR}""/*.rpm && \
   ""${TEST_SCRIPT}""
",dshearer/jobber,platform_tests/centos_6.7/Dockerfile
42df5ff58b37673f8865a1c2b7a7c783984d8a4b,473,"FROM nodesource/centos6-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_4.x/el/6/x86_64/nodejs-4.4.5-1nodesource.el6.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/6/node/4.4.5/Dockerfile
f2369b0086800024ec41f59aacac2fa355c3cfc3,3187,"FROM ubuntu:14.04

ENV DEBIAN_FRONTEND noninteractive

RUN echo 'deb http://archive.ubuntu.com/ubuntu/ trusty main' | tee /etc/apt/sources.list                                                    \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty main' | tee -a /etc/apt/sources.list                                          \
    && echo 'deb http://archive.ubuntu.com/ubuntu/ trusty-updates main' | tee -a /etc/apt/sources.list                                      \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty-updates main' | tee -a /etc/apt/sources.list                                  \
    && echo 'deb http://archive.ubuntu.com/ubuntu/ trusty universe' | tee -a /etc/apt/sources.list                                          \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty universe' | tee -a /etc/apt/sources.list                                      \
    && echo 'deb http://archive.ubuntu.com/ubuntu/ trusty-updates universe' | tee -a /etc/apt/sources.list                                  \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty-updates universe' | tee -a /etc/apt/sources.list                              \
    && echo 'deb http://archive.ubuntu.com/ubuntu/ trusty multiverse' | tee -a /etc/apt/sources.list                                        \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty multiverse' | tee -a /etc/apt/sources.list                                    \
    && echo 'deb http://archive.ubuntu.com/ubuntu/ trusty-updates multiverse' | tee -a /etc/apt/sources.list                                \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty-updates multiverse' | tee -a /etc/apt/sources.list                            \
    && echo 'deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse' | tee -a /etc/apt/sources.list     \
    && echo 'deb-src http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse' | tee -a /etc/apt/sources.list \
    && echo 'deb http://security.ubuntu.com/ubuntu trusty-security main' | tee -a /etc/apt/sources.list                                     \
    && echo 'deb-src http://security.ubuntu.com/ubuntu trusty-security main' | tee -a /etc/apt/sources.list                                 \
    && echo 'deb http://security.ubuntu.com/ubuntu trusty-security universe' | tee -a /etc/apt/sources.list                                 \
    && echo 'deb-src http://security.ubuntu.com/ubuntu trusty-security universe' | tee -a /etc/apt/sources.list                             \
    && echo 'deb http://security.ubuntu.com/ubuntu trusty-security multiverse' | tee -a /etc/apt/sources.list                               \
    && echo 'deb-src http://security.ubuntu.com/ubuntu trusty-security multiverse' | tee -a /etc/apt/sources.list

RUN locale-gen en_US en_US.UTF-8 \
    && dpkg-reconfigure locales  \
    && apt-get update            \
    && apt-get -y -q autoclean   \
    && apt-get -y -q autoremove  \
    && apt-get clean             \
    && rm -rf /var/lib/apt/lists/*

ADD ./domains /domains
ADD ./aliases /aliases
ADD ./passwords /passwords
",lava/dockermail,mail-base/Dockerfile
151401a96f102b041ced4398bebf179f69428cb0,3697,"############################################################
# Dockerfile to build Traffic Ops 1.4 container images
# Based on CentOS 6.6
############################################################

# Example Build and Run:
# docker network create cdnet
# docker build --file Traffic_Ops_Dockerfile --rm --tag traffic_ops:1.4 .
# docker run --name my-traffic-ops-mysql --hostname my-traffic-ops-mysql --net cdnet --env MYSQL_ROOT_PASSWORD=secretrootpass --detach mysql:5.5
# docker run --name my-traffic-ops --hostname my-traffic-ops --net cdnet --publish 443:443 --env MYSQL_IP=my-traffic-ops-mysql --env MYSQL_PORT=3306 --env MYSQL_ROOT_PASS=secretrootpass --env MYSQL_TRAFFIC_OPS_PASS=supersecretpassword --env ADMIN_USER=superroot --env ADMIN_PASS=supersecreterpassward --env CERT_COUNTRY=US --env CERT_STATE=Colorado --env CERT_CITY=Denver --env CERT_COMPANY=NotComcast --env TRAFFIC_VAULT_PASS=marginallylesssecret --env DOMAIN=cdnet --detach traffic_ops:1.4

FROM centos:6.6
MAINTAINER Robert Butts

RUN yum install -y tar gcc-c++ perl cpan openssl-devel mysql-devel expect

RUN (echo y;echo o conf prerequisites_policy follow;echo o conf urllist push http://cpan.yimg.com/;echo o conf urllist push ftp://cpan.cs.utah.edu/CPAN/;echo o conf urllist push ftp://cpan.cs.utah.edu/CPAN/;echo o conf urllist push ftp://mirrors.syringanetworks.net/CPAN/;echo o conf commit;echo install YAML;echo install IPC::Cmd;echo install HTTP::Tiny;echo install CPAN;echo reload cpan)|cpan

RUN cpan Carton

RUN curl -O http://traffic-control-cdn.net/downloads/1.4.0/RELEASE-1.4.0-RC10/traffic_ops-1.4.0-2426.2876438a.x86_64.rpm
RUN yum install -y traffic_ops-1.4.0-2426.2876438a.x86_64.rpm

RUN cd /opt/traffic_ops/app && carton

# \todo Workaround for PR #1153. Remove when fixed.
RUN sed -i -- 's/system(""mysql $db_name/system(""mysql -h $host_ip -P $host_port $db_name/g' /opt/traffic_ops/app/db/admin.pl
RUN sed -i -- 's/my $host_ip/$host_ip/g' /opt/traffic_ops/app/db/admin.pl
RUN sed -i -- 's/my $host_port/$host_port/g' /opt/traffic_ops/app/db/admin.pl
RUN sed -i -- 's/my \$db_password = '\'''\'';/my \$db_password = '\'''\'';\nmy \$host_ip = '\'''\'';\nmy \$host_port = '\'''\'';/g' /opt/traffic_ops/app/db/admin.pl

RUN export PERL5LIB=/opt/traffic_ops/app/local/lib/perl5/:/opt/traffic_ops/install/lib/ \
&& export TERM=xterm \
&& export USER=root \
&& yes | /opt/traffic_ops/install/bin/build_trafficops_perl_library -i

RUN export PERL5LIB=/opt/traffic_ops/app/local/lib/perl5/:/opt/traffic_ops/install/lib/ \
&& export TERM=xterm \
&& export USER=root \
&& /opt/traffic_ops/install/bin/download_web_deps -i

# \todo Workaround for issue #1016. Remove when fixed.
RUN sed -i -- ""s#/opt/rascal/conf#/opt/traffic_monitor/conf#g"" /opt/traffic_ops/install/data/profiles/profile.traffic_monitor.traffic_ops

RUN sed -i -- 's#],#,{""config_file"":""CRConfig.json"",""name"":""api.auth.url"",""value"":""http://${toHostname}/api/1.1/user/login""}],#g' /opt/traffic_ops/install/data/profiles/profile.traffic_router.traffic_ops

# \todo add Drive Letters to postinstall input
RUN sed -i -- 's/""value"": ""b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y""/""value"": ""0""/g' /opt/traffic_ops/install/data/profiles/profile.trafficserver_edge.traffic_ops
RUN sed -i -- 's/""value"": ""b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y""/""value"": ""0""/g' /opt/traffic_ops/install/data/profiles/profile.trafficserver_mid.traffic_ops

RUN echo ""{\""user\"": \""riakuser\"",\""password\"": \""$TRAFFIC_VAULT_PASS\""}"" > /opt/traffic_ops/app/conf/production/riak.conf

EXPOSE 443
WORKDIR /opt/traffic_ops/app
ENV MOJO_MODE production
ADD profile.origin.traffic_ops /
ADD Traffic_Ops_Dockerfile_run.sh /
ENTRYPOINT /Traffic_Ops_Dockerfile_run.sh
",Comcast/traffic_control,docker/Traffic_Ops_Dockerfile
e5f7c63dda4236e1a348095da4811f170142969c,1010,"FROM brandonmathis/taperole:latest

# add playbooks to the image. This might be a git repo instead
ADD . /taperole

# We dont have swap access on travis. Chill this role out
RUN truncate -s 0 /taperole/roles/general/tasks/swapfile.yml

# Install Tape
WORKDIR /taperole
RUN gem build taperole.gemspec
RUN gem install slack-notifier
RUN gem install --local taperole

# Configure tape
RUN git clone https://github.com/BrandonMathis/vanilla-rails-app.git
WORKDIR /taperole/vanilla-rails-app
RUN echo 'n' | tape installer install
ADD ./test/rails/tape_vars.yml taperole/tape_vars.yml

# FIXME
# Disable ufw bc docker gets mad about iptables
RUN sed -i '/ufw/d' taperole/omnibox.yml

# Run Tape
RUN echo '[omnibox]' > taperole/hosts
RUN echo 'localhost ansible_connection=local be_app_env=production be_app_branch=master' >> taperole/hosts
RUN tape ansible everything
RUN chown deployer:users /home/deployer -R
ADD test/rails/start_rails.sh /

# Set command that runs the rails app
WORKDIR /
CMD [""/start_rails.sh""]
",smashingboxes/taperole,test/rails/Dockerfile
c43e45865c9f37be154df275d455b53d8795c44f,49,"FROM scratch
CMD ['echo ""hello world from CWD""']
",adaltas/node-mecano,test/docker/resources/Dockerfile
cbf52cee316d4df1457dd68eb11f4b7cd0812925,479,"# Alpine network performance better than Debian jessie
FROM alpine:3.2
MAINTAINER zealic <zealic@gmail.com>

RUN echo ""http://dl-4.alpinelinux.org/alpine/edge/community/"" >> /etc/apk/repositories \
  && apk add --update openvpn iptables bash easy-rsa tcpdump mtr \
  && ln -s /usr/share/easy-rsa/easyrsa /usr/local/bin \
  && rm -rf /tmp/* /var/tmp/* /var/cache/apk/*

ADD ./bin/* /usr/local/bin/

ENV OPENVPN /etc/openvpn

EXPOSE 1194/udp

ENTRYPOINT [""/usr/local/bin/run-vpn""]
",zealic/docker-library-dst_server,openvpn/Dockerfile
89c377b250a1332a37027b2488bf5dcf49d0a406,329,"FROM ubuntu:latest
MAINTAINER TOm Barber

RUN sudo apt-get update 
RUN sudo apt-get install -y openjdk-7-jre-headless openjdk-7-jre

WORKDIR /usr/src

ADD saiku-server/target/saiku-server-foodmart-*.tar.gz /usr/src/

EXPOSE 8080

CMD /usr/src/saiku-server/start-saiku.sh && tail -f /usr/src/saiku-server/tomcat/logs/catalina.out
",OSBI/saiku,util/Dockerfile
425e51d0628adf1cd8193ea84c1a58c850e1bcb9,1093,"FROM andreptb/oracle-java:8-alpine

# Define environment variables.
ENV MULE_HOME /opt/mule
ENV MULE_VERSION 3.8.0
ENV MULE_DOWNLOAD_URL https://repository-master.mulesoft.org/nexus/content/repositories/releases/org/mule/distributions/mule-standalone/${MULE_VERSION}/mule-standalone-${MULE_VERSION}.tar.gz

# Install NTPD for time synchronization.
RUN apk --no-cache add --virtual build-dependencies wget ca-certificates && \
    update-ca-certificates && \
# Create the /opt directory in which software in the container is installed.
    mkdir -p /opt && \
    cd /opt && \
# Install Mule ESB.
    wget ${MULE_DOWNLOAD_URL} && \
    tar xvzf mule-standalone-*.tar.gz && \
    rm mule-standalone-*.tar.gz && \
    mv mule-standalone-* mule && \
    rm -rf /tmp/* && \
    apk del --purge build-dependencies

# Define mount points.
VOLUME [""${MULE_HOME}/logs"", ""${MULE_HOME}/conf"", ""${MULE_HOME}/apps"", ""${MULE_HOME}/domains""]

# Define working directory.
WORKDIR /opt/mule

CMD [ ""/opt/mule/bin/mule"" ]

# Default http port
EXPOSE 8081
# JMX port.
EXPOSE 1099
",andreptb/Dockerfiles,mule-esb/alpine/3.8.0/Dockerfile
f2a8f4d137acd037d7b857496ce432b3b37c04d6,443,"FROM centos:centos7
MAINTAINER Raghavendra Prabhu raghavendra.prabhu@percona.com
RUN yum install -y git automake gcc  make g++ libtool autoconf pkgconfig gettext  mysql-libs mariadb-devel rsync
RUN git clone --depth=1 https://github.com/akopytov/sysbench
WORKDIR /sysbench 
RUN ./autogen.sh 
RUN ./configure 
RUN make 
RUN make install
RUN mkdir -p /usr/share/doc/sysbench/tests/
RUN rsync -a sysbench/tests/db  /usr/share/doc/sysbench/tests/
",percona/pxc-docker,sysbench/Dockerfile
1c603dfb77e74222f8a48b43013af835b3453906,1555,"FROM itzg/ubuntu-openjdk-7

MAINTAINER itzg

ENV APT_GET_UPDATE 2014-07-19

RUN apt-get update
RUN apt-get install -y wget unzip

ENV TITAN_VER 0.4.4
ENV TITAN_STORAGE all
ENV REXSTER_VER 2.4.0

RUN wget -O /tmp/titan.zip http://s3.thinkaurelius.com/downloads/titan/titan-$TITAN_STORAGE-$TITAN_VER.zip
RUN wget -O /tmp/rexster.zip http://tinkerpop.com/downloads/rexster/rexster-server-$REXSTER_VER.zip

WORKDIR /opt

RUN unzip /tmp/titan.zip
RUN rm /tmp/titan.zip

RUN unzip /tmp/rexster.zip
RUN rm /tmp/rexster.zip

RUN ln -s titan-$TITAN_STORAGE-$TITAN_VER titan
RUN ln -s rexster-server-$REXSTER_VER rexster-server

RUN mkdir /opt/rexster-server/ext/titan
RUN ln -s /opt/titan-$TITAN_STORAGE-$TITAN_VER/lib/* /opt/rexster-server/ext/titan
RUN wget -O /opt/rexster-server/ext/titan/titan-rexter-$TITAN_VER.jar \
   http://central.maven.org/maven2/com/thinkaurelius/titan/titan-rexster/$TITAN_VER/titan-rexster-$TITAN_VER.jar

# Clean up distro area
RUN rm /opt/rexster-server/ext/titan/log4j* /opt/rexster-server/ext/titan/slf4j*
RUN rm /opt/rexster-server/lib/lucene-core*

ADD gremlin /usr/local/bin/gremlin
ADD rexster /usr/local/bin/rexster

WORKDIR titan

ADD titan.properties /opt/titan/conf/titan.properties
ADD init-graph-storage.groovy /tmp/init-graph-storage.groovy

VOLUME [""/data"", ""/config"", ""/scripts""]
RUN ln -s /data /opt/titan/db

RUN gremlin -e /tmp/init-graph-storage.groovy && rm /tmp/init-graph-storage.groovy

EXPOSE 8182 8184

ADD rexster.xml /config/rexster.xml

CMD [""/usr/local/bin/rexster"", ""-s"", ""-c"", ""/config/rexster.xml""]
",itzg/dockerfiles,titandb/Dockerfile
d229555b712e4382dda9fe9e64cb5c6f919c6d58,497,"FROM centos

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN yum update -y && \
    curl --insecure --junk-session-cookies --location --remote-name --silent --header ""Cookie: oraclelicense=accept-securebackup-cookie"" http://download.oracle.com/otn-pub/java/jdk/8u71-b15/jdk-8u71-linux-x64.rpm && \
    yum localinstall -y jdk-8u71-linux-x64.rpm && \
    rm jdk-8u71-linux-x64.rpm && \
    yum clean all

ENV JAVA_HOME=/usr/java/jdk1.8.0_71/ \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8
",lwieske/dockerfiles-java-8,8u71/jdk/Dockerfile
5a95259b99ab373de02d349b3d4f7d0a6af87212,387,"FROM alpine
MAINTAINER izuolan <i@zuolan.me>

RUN echo '@edge http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories
RUN echo '@community http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories

RUN apk update && apk upgrade \
  && apk add ca-certificates git nodejs-dev@community nodejs@community \
  && npm install -g npm \
  && rm -rf /var/cache/apk/*
",izuolan/dockerfiles,base/node/dev/Dockerfile
f64ed05f65a8d30f485a69dead6942876c3b6a3d,1462,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php:debian-7
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/base-app:debian-7

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm

COPY conf/ /opt/docker/

# Install php environment
RUN /usr/local/bin/apt-install \
        # Install tools
        imagemagick \
        graphicsmagick \
        # Install php (cli/fpm)
        php5-cli \
        php5-fpm \
        php5-json \
        php5-intl \
        php5-curl \
        php5-mysqlnd \
        php5-mcrypt \
        php5-gd \
        php5-sqlite \
        php5-xmlrpc \
        php5-xsl \
        php5-geoip \
        php5-ldap \
        php5-memcache \
        php5-memcached \
        php5-imagick \
        php-pear \
    && pear channel-update pear.php.net \
    && pear upgrade-all \
    && pear config-set auto_discover 1 \
    && ln -sf /etc/php5/mods-available/mcrypt.in /etc/php5/cli/conf.d/20-mcrypt.ini \
    && ln -sf /etc/php5/mods-available/mcrypt.in /etc/php5/fpm/conf.d/20-mcrypt.ini \
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-php \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 9000
",webdevops/Dockerfile,docker/php/debian-7/Dockerfile
e6715e066ee2bb1c6809350db1c3e1abbb82cf22,1392,"FROM mono:4.0.1

ENV DNX_VERSION 1.0.0-beta7
ENV DNX_USER_HOME /opt/dnx

RUN apt-get -qq update && apt-get -qqy install unzip libc6-dev && rm -rf /var/lib/apt/lists/*

RUN curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_USER_HOME=$DNX_USER_HOME DNX_BRANCH=v$DNX_VERSION sh
RUN bash -c ""source $DNX_USER_HOME/dnvm/dnvm.sh \
	&& dnvm install $DNX_VERSION -alias default \
	&& dnvm alias default | xargs -i ln -s $DNX_USER_HOME/runtimes/{} $DNX_USER_HOME/runtimes/default""

# Install libuv for Kestrel from source code (binary is not in wheezy and one in jessie is still too old)
# Combining this with the uninstall and purge will save us the space of the build tools in the image
RUN LIBUV_VERSION=1.4.2 \
	&& apt-get -qq update \
	&& apt-get -qqy install autoconf automake build-essential libtool \
	&& curl -sSL https://github.com/libuv/libuv/archive/v${LIBUV_VERSION}.tar.gz | tar zxfv - -C /usr/local/src \
	&& cd /usr/local/src/libuv-$LIBUV_VERSION \
	&& sh autogen.sh && ./configure && make && make install \
	&& rm -rf /usr/local/src/libuv-$LIBUV_VERSION \
	&& ldconfig \
	&& apt-get -y purge autoconf automake build-essential libtool \
	&& apt-get -y autoremove \
	&& apt-get -y clean \
	&& rm -rf /var/lib/apt/lists/*

ENV PATH $PATH:$DNX_USER_HOME/runtimes/default/bin

# Prevent `dnu restore` from stalling (gh#63, gh#80)
ENV MONO_THREADS_PER_CPU 50
",aspnet/aspnet-docker,1.0.0-beta7/Dockerfile
a3d23d759ba48d0cdcde6684011dfad919805f4f,1919,"FROM ubuntu:14.04
MAINTAINER Mike Orzel <mike.orzel@emergingstack.com>

RUN apt-get -y update && apt-get -y install git bc make dpkg-dev libssl-dev && mkdir -p /usr/src/kernels && mkdir -p /opt/nvidia/nvidia_installers

RUN apt-get -y install software-properties-common python-software-properties

# install gcc 4.9 for newer kernels
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update
RUN apt-get install -y gcc-4.9 g++-4.9
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9

ADD http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run /opt/nvidia
#ADD http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run /opt/nvidia/

WORKDIR /usr/src/kernels
RUN git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git linux
WORKDIR linux
RUN git checkout -b stable v`uname -r | sed -e ""s/-.*//"" | sed -e ""s/\.[0]*$//""` && zcat /proc/config.gz > .config && make modules_prepare
RUN sed -i -e ""s/`uname -r | sed -e ""s/-.*//"" | sed -e ""s/\.[0]??*$//""`/`uname -r`/"" include/generated/utsrelease.h # In case a '+' was added

# Nvidia drivers setup
WORKDIR /opt/nvidia/
RUN chmod +x cuda_7.5.18_linux.run && ./cuda_7.5.18_linux.run -extract=`pwd`/nvidia_installers
WORKDIR /opt/nvidia/nvidia_installers

RUN ./NVIDIA-Linux-x86_64-352.39.run -a -x --ui=none
#RUN sed -i ""s/read_cr4/__read_cr4/g"" NVIDIA-Linux-x86_64-346.46/kernel/nv-pat.c
#RUN sed -i ""s/write_cr4/__write_cr4/g"" NVIDIA-Linux-x86_64-346.46/kernel/nv-pat.c

COPY nvprocfs.patch /opt/nvidia/nvidia_installers
RUN patch NVIDIA-Linux-x86_64-352.39/kernel/nv-procfs.c < nvprocfs.patch

CMD ./NVIDIA-Linux-x86_64-352.39/nvidia-installer -q -a -n -s --kernel-source-path=/usr/src/kernels/linux/ && insmod /opt/nvidia/nvidia_installers/NVIDIA-Linux-x86_64-352.39/kernel/uvm/nvidia-uvm.ko

",emergingstack/es-dev-stack,corenvidiadrivers/Dockerfile
3cc64210e85bc579000c466194a2ab346e373914,905,"# From the base image which is node and node-inspector together
FROM nodejs-inspector:0.10

# Install the required modules of the node application into tmp and copy
# Best practice for docker is to install npm deps only when package.json changes
# Then later ADD the SRC files. Docker cached layers will not redo npm deps if
#   the other more common application files are updated
ADD ./package.json /tmp/package.json
RUN cd /tmp && npm install

# Copy dependencies into run path
RUN mkdir -p /opt/app/node
RUN if [ -d /tmp/node_modules ] ; then cp -a /tmp/node_modules /opt/app/node; fi

# now add the node application SRC from the host
WORKDIR /opt/app/node
ADD . /opt/app/node
RUN cd /opt/app/node

# the node-inspector web host port
EXPOSE 8080

ENTRYPOINT [""node-debug"", ""--web-host"", ""0.0.0.0"", ""--cli"", ""true""]

# These are default parameters which can be overridden at run time
CMD [""./index.js""]
",glennschler/docker-debugnode,debugapp/v0.10.LTS/Dockerfile
03222c5610c092b7c264878021aae19efdce88d3,301,"FROM java:8
MAINTAINER bitsofinfo.g@gmail.com

######################
# IMAGE DETAILS
######################

RUN mkdir -p /sample

ADD sample.jar /sample/sample.jar

EXPOSE 8080 8443
 
ADD docker-entrypoint.sh /entrypoint.sh 
RUN chmod +x /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]

CMD [""java""]
 
",bitsofinfo/docker-discovery-registrator-consul,sample/Dockerfile
e2cb31484a94773bd375574b423d6dccbd4328b2,553,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.4.5-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/4.4.5/Dockerfile
b839e6377cbfde5b7d8de45429540ca064b7a53b,8087,"# Copyright 2016 The WWU eLectures Team All rights reserved.
#
# Licensed under the Educational Community License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/ECL-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM java:8-jdk-alpine
MAINTAINER WWU eLectures team <electures.dev@uni-muenster.de>

ENV OPENCAST_VERSION=""2.2.0"" \
    OPENCAST_DISTRIBUTION=""presentation"" \
    OPENCAST_SRC=""/usr/src/opencast"" \
    OPENCAST_HOME=""/opencast"" \
    OPENCAST_DATA=""/data"" \
    OPENCAST_CUSTOM_CONFIG=""/etc/opencast"" \
    OPENCAST_USER=""opencast"" \
    OPENCAST_GROUP=""opencast"" \
    OPENCAST_UID=""800"" \
    OPENCAST_GID=""800"" \
    \
    TESSERACT_BASE_URL=""https://github.com/tesseract-ocr/tessdata/raw/3cf1e2df1fe1d1da29295c9ef0983796c7958b7d"" \
    HUNSPELL_BASE_URL=""http://download.services.openoffice.org/contrib/dictionaries""
ENV OPENCAST_SCRIPTS=""${OPENCAST_HOME}/docker/scripts"" \
    OPENCAST_CONFIG=""${OPENCAST_HOME}/etc"" \
    OPENCAST_URL=""https://bitbucket.org/opencast-community/matterhorn/get/${OPENCAST_VERSION}.tar.gz""

RUN echo ""http://dl-cdn.alpinelinux.org/alpine/edge/testing"" >> /etc/apk/repositories \
 && apk add --no-cache --virtual .build-deps \
      tar gzip \
      git \
      make gcc g++ binutils-gold \
      maven \
      python \
      \
      # TODO: for tesseract; remove once package is updated
      automake autoconf libtool \
  \
  # Install dependencies
  #   - FFmpeg
  #   - Sound eXchange (SoX)
  #   - Tesseract Open Source OCR Engine
  #   - Hunspell
 && apk add --no-cache --virtual .run-deps \
      su-exec openssl tzdata \
      fontconfig ttf-caladea ttf-cantoraone ttf-carlito ttf-courier-prime \
      ttf-dejavu ttf-droid ttf-droid-nonlatin ttf-freefont ttf-gelasio \
      ttf-heuristica ttf-inconsolata ttf-liberation ttf-linux-libertine \
      ttf-merriweather ttf-merriweather-sans ttf-noto ttf-noto-sans \
      ttf-noto-serif ttf-opensans ttf-signika-family ttf-symbola \
      ttf-ubuntu-font-family \
      ffmpeg \
      sox \
      hunspell \
      \
      # TODO: for tesseract; remove once package is updated
      libjpeg-turbo-dev tiff-dev libpng-dev zlib-dev giflib-dev libwebp-dev \
  \
  # TODO: Remove @old repo when http://stackoverflow.com/questions/37450473/cssmin-is-giving-me-path-must-be-a-string-received-undefined is fixed
  && apk add --no-cache --repository ""@old http://dl-cdn.alpinelinux.org/alpine/v3.3/main"" \
      nodejs@old \
  # TODO: compile tesseract; remove once package is updated
 && LEPTONICA_VERSION=1.73 \
 && TESSERACT_VERSION=3.04.01 \
 && mkdir -p /tmp/compile/leptonica /tmp/compile/tesseract \
 && cd /tmp/compile \
 && wget -q -O - ""http://www.leptonica.com/source/leptonica-${LEPTONICA_VERSION}.tar.gz"" | tar -xz --strip 1 -C leptonica \
 && wget -q -O - ""https://github.com/tesseract-ocr/tesseract/archive/${TESSERACT_VERSION}.tar.gz"" | tar -xz --strip 1 -C tesseract \
 && cd leptonica \
 && ./configure \
      --prefix=/usr \
      --sysconfdir=/etc \
      --mandir=/usr/share/man \
      --infodir=/usr/share/info \
      --localstatedir=/var \
 && make \
 && make install \
 && cd ../tesseract/ \
 && ./autogen.sh \
 && ./configure \
      --prefix=/usr \
      --sysconfdir=/etc \
      --mandir=/usr/share/man \
      --infodir=/usr/share/info \
      --localstatedir=/var \
      --disable-static \
      --disable-graphics \
 && make \
 && make install \
  \
  # Install languag files for tesseract and hunspell
 && mkdir -p /tmp/tesseract /tmp/hunspell /usr/share/tessdata /usr/share/hunspell \
 && { \
      echo ""cb7eb42a7e972cec7ef904fe81825d7b547c46df684c814fdb11a930b13bca3a  deu.traineddata""; \
      echo ""64adf2cc0b2a6705368aa357224d1a6739035d5fe892cd0cc457016df5b4280f  eng.cube.bigrams""; \
      echo ""2b229895623934b493fe69c51fcc387295d91af8b4e43cc51748b3d269a95eed  eng.cube.fold""; \
      echo ""a6f769245b0a55f42a3ce157cd19d96828483c3384c6483433ed83579ea16e36  eng.cube.lm""; \
      echo ""8f345f1c19772dd71a5214bc94175ccf647c003ab77e4143fde48f11bf3cb0ef  eng.cube.nn""; \
      echo ""c2aa2854951bd823d89cc86d53a6d9712a6a885de6fbaf650ff3df48bfed85d7  eng.cube.params""; \
      echo ""e5f95de7e2754eb2df03451885277ca4573b3770816043ae2e2f09d1f7232604  eng.cube.size""; \
      echo ""8d612bef20ae3052fce0b8650575a80d87c94d772ec6d1f0c6a1ad591586ea44  eng.cube.word-freq""; \
      echo ""196bedc8a5bc8c30361c2c9518f648b45b498759cb6041827ff6fbfb8da2a8d1  eng.tesseract_cube.nn""; \
      echo ""c0515c9f1e0c79e1069fcc05c2b2f6a6841fb5e1082d695db160333c1154f06d  eng.traineddata""; \
    } > /tmp/tesseract-sha256sum.txt \
 && cd /tmp/tesseract \
 && for file in $(awk '{print $2}' /tmp/tesseract-sha256sum.txt); do \
      wget -O ""${file}"" ""${TESSERACT_BASE_URL}/${file}""; \
      grep ""${file}"" /tmp/tesseract-sha256sum.txt | sha256sum -c -; \
      cp ""${file}"" /usr/share/tessdata; \
    done \
 && { \
      echo ""2478723ab67dd801ec6add11b1af9d32665e7859a1cb00c95bfc2b618584a802  de_AT.zip""; \
      echo ""c30bb085ba0a3d22a23aef51f4dd94ae9ae0cc811c0590ebf3713a93b209d823  de_CH.zip""; \
      echo ""220e01c3137000305247336d8d10cd550bda3990fb10e50b31633947969a34b8  de_DE_comb.zip""; \
      echo ""22e217a631977d7b377f8dd22d2bbacd2d36b32765ce13f3474b03a4a97dd700  en_AU.zip""; \
      echo ""31fac12a1b520cde686f328d3fa7560f6eba772cddc872197ff842c57a0dc1ea  en_CA.zip""; \
      echo ""5869d8bd80eb2eb328ebe36b356348de4ae2acb1db6df39d1717d33f89f63728  en_GB.zip""; \
      echo ""6cc717b4de43240595662a2deef5447b06062e82380f5647196f07c9089284fa  en_NZ.zip""; \
      echo ""9227f658f182c9cece797352f041a888134765c11bffc91951c010a73187baea  en_US.zip""; \
      echo ""090285b721dcaabff51b467123f82a181a6904d187c90bda812c6e5f365ff19a  en_ZA.zip""; \
    } > /tmp/hunspell-sha256sum.txt \
 && cd /tmp/hunspell \
 && for file in $(awk '{print $2}' /tmp/hunspell-sha256sum.txt); do \
      wget -O ""${file}"" ""${HUNSPELL_BASE_URL}/${file}""; \
      grep ""${file}"" /tmp/hunspell-sha256sum.txt | sha256sum -c -; \
      unzip ""/tmp/hunspell/${file}""; \
    done \
 && cp *.aff *.dic /usr/share/hunspell \
  \
  # Compile front-end assets manually as the bundeled node does not run on Alpine
 && mkdir -p ""${OPENCAST_SRC}"" ""${OPENCAST_HOME}"" ""${OPENCAST_DATA}"" ""${OPENCAST_SCRIPTS}"" \
 && wget -O - ""${OPENCAST_URL}"" | tar -xz --strip 1 -C ""${OPENCAST_SRC}"" \
 && cd ""${OPENCAST_SRC}/modules/matterhorn-admin-ui-ng"" \
 && sed -i 's/""grunt-sass"":.*/""grunt-sass"": ""^1.2.0"",/g' package.json \
 && npm install -g npm \
 && npm install -g grunt-cli \
 && npm install \
 && grunt build --no-color --skipTests=true \
  \
  # Compile and install Opencast
 && cd ""${OPENCAST_SRC}"" \
 && mvn --quiet --batch-mode install -P '!frontend' -DskipTests=true -Dcheckstyle.skip=true -DskipJasmineTests=true \
 && tar -xzf build/opencast-dist-${OPENCAST_DISTRIBUTION}-*.tar.gz --strip 1 -C ""${OPENCAST_HOME}"" \
 && addgroup -S -g ""${OPENCAST_GID}"" ""${OPENCAST_GROUP}"" \
 && adduser -S -D -H -G ""${OPENCAST_GROUP}"" -h ""${OPENCAST_HOME}"" -u ""${OPENCAST_UID}"" ""${OPENCAST_USER}"" \
 && chown -R ""${OPENCAST_USER}:${OPENCAST_GROUP}"" ""${OPENCAST_HOME}"" ""${OPENCAST_DATA}"" \
  \
  # Cleanup
 && apk del --no-cache nodejs \
 && apk del --no-cache .build-deps \
 && rm -rf ""${OPENCAST_SRC}"" /tmp/* ~/.m2 ~/.npm ~/.node-gyp /usr/lib/node_modules

COPY assets/scripts/* ""${OPENCAST_SCRIPTS}/""
COPY assets/etc/* ""${OPENCAST_CONFIG}/""
COPY assets/etc/index/adminui/settings.yml ""${OPENCAST_CONFIG}/index/adminui/""
RUN javac ""${OPENCAST_SCRIPTS}/TryToConnectToDb.java"" \
 && chown -R ""${OPENCAST_USER}:${OPENCAST_GROUP}"" ""${OPENCAST_CONFIG}""

WORKDIR ""${OPENCAST_HOME}""

EXPOSE 8080
VOLUME [ ""${OPENCAST_DATA}"" ]

COPY assets/docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]
CMD [""app:start""]
",learnweb/docker-opencast,Dockerfiles/presentation/Dockerfile
28882687ef84de04b53287dd4c20ee43bea7dff3,497,"FROM centos

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN yum update -y && \
    curl --insecure --junk-session-cookies --location --remote-name --silent --header ""Cookie: oraclelicense=accept-securebackup-cookie"" http://download.oracle.com/otn-pub/java/jdk/8u51-b16/jdk-8u51-linux-x64.rpm && \
    yum localinstall -y jdk-8u51-linux-x64.rpm && \
    rm jdk-8u51-linux-x64.rpm && \
    yum clean all

ENV JAVA_HOME=/usr/java/jdk1.8.0_51/ \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8
",lwieske/dockerfiles-java-8,8u51/jdk/Dockerfile
5ad436f1bc3910f1b86468cb11d759409a713679,682,"FROM pblittle/docker-logstash:0.20.0
MAINTAINER P. Barrett Little <barrett@barrettlittle.com> (@pblittle)

# Download packages required to run the test suite
#
RUN apt-get update \
    && apt-get install -yq \
        apt-utils \
        git \
        net-tools \
        --no-install-recommends \
    && rm -rf /var/cache/apt/* \
    && rm -rf /var/lib/apt/lists/*

# Download and install BATS test framework
#
RUN git clone https://github.com/sstephenson/bats.git /tmp/bats \
    && /tmp/bats/install.sh /usr/local \
    && rm -rf /tmp/bats

# $TERM needs to be set for bats
#
ENV TERM xterm-256color

ADD test.bats /app/test.bats

CMD [ '/usr/local/bin/bats', '/app/test.bats' ]
",pblittle/docker-logstash,1.4/test/elasticsearch-embedded/Dockerfile
2dab835e59cdd886095059396d317d067e9114a5,559,"FROM debian:jessie
MAINTAINER Jessica Frazelle <jess@docker.com>

# run
# docker run -d -p 1234:80 -p 25:25 jess/mailman
#
# curl http://localhost:1234/cgi-bin/mailman/admin
# for admin screen

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -y \
	lighttpd \
	mailman \
	postfix \
	supervisor \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

# Lighttpd configuration
COPY lighttpd.conf /etc/lighttpd/lighttpd.conf

COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

EXPOSE 25 80

ENTRYPOINT [ ""supervisord"" ]
",jfrazelle/dockerfiles,mailman/Dockerfile
bdf63418efdf093290c204ce0b8da6601ca9e791,2440,"#
# Base Docker4Data image
#
# https://github.com/talos/docker4data
#

FROM debian:wheezy
MAINTAINER John Krauss <irving.krauss@gmail.com>

ENV LANG en_US.UTF8
ENV LC_ALL en_US.UTF8
ENV LANGUAGE en_US.UTF8
ENV PATH /usr/lib/postgresql/9.4/bin:$PATH
ENV PASSWORD docker4data

COPY scripts /scripts
COPY conf /conf
COPY site /site
COPY cli /cli

RUN apt-get update --fix-missing
RUN apt-get install -y freetds-dev wget openssl ca-certificates \
  apt-transport-https git-core time pv

RUN echo ""===> add user and group to make sure their IDs get assigned consistently"" && \
  groupadd -r postgres && useradd -r -g postgres postgres && \
  \
  \
  echo ""===> grab gosu for easy step-down from root"" && \
  wget -O /usr/local/bin/gosu \
      https://github.com/tianon/gosu/releases/download/1.1/gosu  && \
  chmod +x /usr/local/bin/gosu && \
  \
  \
  echo ""make en_US.UTF-8 locale so postgres will be utf-8 enabled by default"" && \
  apt-get install -y locales && \
  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

RUN echo ""===> install postgres"" && \
  echo ""deb http://apt.postgresql.org/pub/repos/apt/ wheezy-pgdg main"" | tee \
    /etc/apt/sources.list.d/wheezy-pgdg.list  && \
  wget -q -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
    apt-key add - && \
  apt-get update && \
  apt-get install -y postgresql-common && \
  sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf && \
  apt-get install -y postgresql-9.4-postgis-2.1 postgresql-contrib pgtune && \
  \
  \
  echo ""===> clean up"" && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN mkdir -p /var/run/postgresql && chown -R postgres /var/run/postgresql
RUN mkdir -p /data && chown -R postgres /data

RUN /scripts/createdb.sh

RUN echo ""===> install postgis"" && \
    gosu postgres pg_ctl -D /var/lib/postgresql/data -w start && \
    gosu postgres psql < /usr/share/postgresql/9.4/contrib/postgis-2.1/postgis.sql && \
    gosu postgres psql < /usr/share/postgresql/9.4/contrib/postgis-2.1/spatial_ref_sys.sql && \
    gosu postgres pg_ctl -D /var/lib/postgresql/data stop

#apt-get remove -y freetds-dev openssl ca-certificates \
#  apt-transport-https

RUN git clone https://github.com/talos/docker4data.git
RUN mkdir /logs

RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
EXPOSE 5432

ENTRYPOINT ""/scripts/docker-entrypoint.sh""
",talos/docker4data,images/base/Dockerfile
a1301d14570d82d9e4a6fe5a978ee8896f521788,208,"FROM python:3
MAINTAINER Mark Ignacio <mignacio@hackucf.org>
EXPOSE 80

RUN mkdir -p /opt/challenges/http50
WORKDIR /opt/challenges/http50
COPY . .
RUN pip install -r requirements.txt
CMD python challenge.py
",HackUCF/workshops-http,http50/Dockerfile
3a97cc2ca7115557c0e2b900b7ba50bbb35d88c5,44,"FROM evild/alpine-nodejs:stable

ADD root /
",Evild67/docker-alpine-nodejs,ci/test_image/current/Dockerfile
590a7c97eb64b1a6b82cbca4d67a8b876d3dfe39,109,"# Use the 5.2.N distribution runner with Share included
FROM dockerreg.alfresco.com/dist-runner:5.2.20160510
",Alfresco/community-edition,packaging/distribution-docker/src/main/resources/Dockerfile
a36a2746824388a000705419017e5a891e5de5aa,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.4.0-1-x86_64.pkg.tar.xz /tmp/php-5.4.0-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.4.0-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.4.0/Dockerfile
9cbf9a30bd334f2dbd2cca43629f3768c74f0bb5,790,"# docker build -t mesoscope/docker-registry .

FROM mesoscope/common

ENV GOLANG_VERSION=""1.5.2.linux-amd64""
ENV GOPATH=""/go""
ENV PATH=""$GOPATH/bin:/usr/local/go/bin:$PATH""
ENV SRVPATH=""/opt/docker-registry""

RUN apt-get update && \
	apt-get install -y --no-install-recommends git mercurial curl && \
	apt-get clean

RUN curl -sSL https://golang.org/dl/go${GOLANG_VERSION}.tar.gz | \
	tar -v -C /usr/local -xz

RUN mkdir -p ${GOPATH}
RUN go get -x github.com/tools/godep && \
	go get -x golang.org/x/sys/unix && \
	go get -x github.com/inconshreveable/mousetrap && \
	godep get github.com/docker/distribution/registry

RUN mkdir -p ${SRVPATH}/conf ${SRVPATH}/data
ADD files/config.yml ${SRVPATH}/conf/config.yml

EXPOSE 5000

ENTRYPOINT [""registry"", ""/opt/docker-registry/conf/config.yml""]
",schibsted/mesoscope,docker-registry/Dockerfile
c9d95148b7368256f536e33acaf4066d86ed0f13,781,"# docker build -t opencog/ros-hydro-percept .
# xhost +
# docker run -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -i -t opencog/ros-hydro-percept /bin/bash
# docker run -t -i --rm --privileged -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -v /home/mandeep/sharedFolder:/tmp/shared -v /dev/video0:/dev/video0 mandeep/ros-hydro-percept /bin/bash
# from https://github.com/OpenNI/OpenNI

FROM opencog/ros-hydro-openni
MAINTAINER Mandeep Singh Bhatia ""mandeep.singh.bhatia@gmail.com""
MAINTAINER David Hart ""dhart@opencog.org""

# RUN apt-get -y update

ADD https://github.com/hansonrobotics/perception_synthesizer/archive/master.zip /perception_synthesizer.zip
RUN unzip /perception_synthesizer.zip

WORKDIR /perception_synthesizer-master/build
RUN cmake ..
RUN make
RUN make install

CMD /bin/bash
",opencog/docker,hydro/percept/Dockerfile
baa74bf4b11925332e5c468e8c3dc88bd4e3ad88,141,"FROM debian:jessie

RUN apt-get update && apt-get install -y nginx && echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf

CMD [""nginx""]

EXPOSE 80",wouterd/docker-maven-plugin,src/broken-it/tag-and-push-it/src/test/resources/Dockerfile
73c503ba8516c65fd5292c8c33d3ec4c6ea27a75,1078,"FROM php:7-fpm

MAINTAINER Alexandre JARDIN <aja@emakina.fr>

COPY extra/*.ini /usr/local/etc/php/conf.d/

RUN apt-get update \
    && apt-get install -y \
        git \
        libcurl4-openssl-dev \
        libicu-dev \
        libfreetype6-dev \
        libjpeg-dev \
        libmemcached-dev \
        libmcrypt-dev \
        libpng-dev \
        libxml2-dev \
        libxslt-dev \
    && docker-php-ext-configure bcmath \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install -j$(nproc) \
        bcmath \
        curl \
        gd \
        hash \
        iconv \
        intl \
        json \
        mbstring \
        mcrypt \
        opcache \
        pdo_mysql \
        simplexml \
        soap \
        xml \
        xsl \
        zip \
    && rm -rf /var/lib/apt/lists/*

RUN git clone https://github.com/php-memcached-dev/php-memcached /php-memcached \
    && cd /php-memcached && git checkout php7 \
    && phpize && ./configure && make && make install

RUN usermod -u 1000 www-data
",ajardin/docker-magento2,php/Dockerfile
3a858e3884a3d6241b33cd112f5e0f5bec58918f,281,"FROM ubuntu:16.04
RUN apt-get update
RUN apt-get install -y --no-install-recommends \
  gcc libc6-dev ca-certificates \
  gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user
ENV CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc \
    PATH=$PATH:/rust/bin
",rust-lang/libc,ci/docker/arm-unknown-linux-gnueabihf/Dockerfile
30a2ab7a74db50676090c35358fa37645add61b1,931,"# PHP 5.4 container, optimised for Continuous Integration.
FROM sitback/soe:php5.4
MAINTAINER Chinthaka Godawita <chin@sitback.com.au>

# Install all packages.
RUN apt-get update

## MySQL.
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server

# Configure MySQL (installed with user:root and no password).
RUN mysql_install_db
ADD ./conf/mysql/ci_overrides.cnf /etc/mysql/conf.d/ci_overrides.cnf

# Log to stdout/stderr.
RUN ln -sfv /dev/stdout /var/log/mysql/mysql.log
RUN ln -sfv /dev/stderr /var/log/mysql/error.log

# PHPCS & Coder.
RUN composer global require drupal/coder
RUN phpcs --config-set installed_paths \
  ~/.composer/vendor/drupal/coder/coder_sniffer

# Startup settings.
ADD ./conf/supervisor/ci.conf /etc/supervisor/conf.d/ci.conf

# Prevent socat from taking over the MySQL socket.
RUN perl -pi -e 'BEGIN{undef $/;} s/(\[program:socat.*?autostart=)true/$1false/sgm' /etc/supervisor/conf.d/soe.conf
",Sitback/docker-containers,ci/php5.4/Dockerfile
8513ba9ba61f54180285e755f51bb053f4ea4528,194,"FROM anapsix/alpine-java:8
VOLUME /tmp
ADD account-service-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]",kbastani/spring-cloud-event-sourcing-example,account-service/src/main/docker/Dockerfile
0912d22ce1caa80e08e2ca81290b25b86a086872,1629,"# Based on the Fedora image
FROM fedora

# File Author / Maintainer
MAINTAINER http://fedoraproject.org/wiki/Cloud
# based on the work of Takayoshi Kimura <tkimura@redhat.com>

ENV container docker
ENV MATTERMOST_VERSION 3.0.1

# Labels consumed by Red Hat build service
LABEL Component=""mattermost"" \
      Name=""fedora-cloud/mattermost-301"" \
      Version=""3.0.1"" \
      Release=""1""

# Labels could be consumed by OpenShift
LABEL io.k8s.description=""Mattermost is an open source, self-hosted Slack-alternative"" \
      io.k8s.display-name=""Mattermost 3.0.1"" \
      io.openshift.expose-services=""8065:mattermost"" \
      io.openshift.tags=""mattermost,slack""

# Labels could be consumed by Nulecule Specification
LABEL io.projectatomic.nulecule.environment.required=""MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE"" \
      io.projectatomic.nulecule.environment.optional=""VOLUME_CAPACITY"" \
      io.projectatomic.nulecule.volume.data=""/var/lib/psql/data,1Gi""

RUN dnf update -y && \
    dnf install -y tar --setopt=tsflags=nodocs && \
    dnf clean all

RUN cd /opt && \
    curl -LO https://releases.mattermost.com/3.0.1/mattermost-team-3.0.1-linux-amd64.tar.gz && \
    tar xf mattermost-team-3.0.1-linux-amd64.tar.gz && \
    rm mattermost-team-3.0.1-linux-amd64.tar.gz && \
    mkdir /opt/mattermost/data && \
    chmod 777 /opt/mattermost/config /opt/mattermost/logs /opt/mattermost/data

COPY mattermost-launch.sh /opt/mattermost/bin/mattermost-launch.sh
COPY config.json /opt/mattermost/config/config.json
RUN chmod 777 /opt/mattermost/config/config.json

EXPOSE 8065

WORKDIR /opt/mattermost

CMD bin/mattermost-launch.sh
",fedora-cloud/Fedora-Dockerfiles,mattermost/Dockerfile
42c1cec40e6c22087c0f1867d639e7bd7ae3a53c,2411,"FROM centos:centos7

# PostgreSQL image for OpenShift.
# Volumes:
#  * /var/lib/psql/data   - Database cluster for PostgreSQL
# Environment:
#  * $POSTGRESQL_USER     - Database user name
#  * $POSTGRESQL_PASSWORD - User's password
#  * $POSTGRESQL_DATABASE - Name of the database to create
#  * $POSTGRESQL_ADMIN_PASSWORD (Optional) - Password for the 'postgres'
#                           PostgreSQL administrative account

MAINTAINER SoftwareCollections.org <sclorg@redhat.com>

ENV POSTGRESQL_VERSION=9.2 \
    HOME=/var/lib/pgsql \
    PGUSER=postgres

LABEL io.k8s.description=""PostgreSQL is an advanced Object-Relational database management system"" \
      io.k8s.display-name=""PostgreSQL 9.2"" \
      io.openshift.expose-services=""5432:postgresql"" \
      io.openshift.tags=""database,postgresql,postgresql92""

EXPOSE 5432

# This image must forever use UID 26 for postgres user so our volumes are
# safe in the future. This should *never* change, the last test is there
# to make sure of that.
RUN rpmkeys --import file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 && \
    yum -y --setopt=tsflags=nodocs install https://www.softwarecollections.org/en/scls/rhscl/postgresql92/epel-7-x86_64/download/rhscl-postgresql92-epel-7-x86_64.noarch.rpm && \
    yum -y --setopt=tsflags=nodocs --enablerepo=centosplus install gettext bind-utils postgresql92 epel-release && \
    yum -y --setopt=tsflags=nodocs install nss_wrapper && \
    yum clean all && \
    localedef -f UTF-8 -i en_US en_US.UTF-8 && \
    mkdir -p /var/lib/pgsql/data && chown postgres.postgres /var/lib/pgsql/data && \
    test ""$(id postgres)"" = ""uid=26(postgres) gid=26(postgres) groups=26(postgres)"" && \
    # Loosen permission bits to avoid problems running container with arbitrary UID
    chmod -R a+rwx /var/run/postgresql

COPY run-*.sh /usr/local/bin/
COPY contrib /var/lib/pgsql/

# Loosen permission bits to avoid problems running container with arbitrary UID
RUN chmod -R a+rwx /var/lib/pgsql

# When bash is started non-interactively, to run a shell script, for example it
# looks for this variable and source the content of this file. This will enable
# the SCL for all scripts without need to do 'scl enable'.
ENV BASH_ENV=/var/lib/pgsql/scl_enable \
    ENV=/var/lib/pgsql/scl_enable \
    PROMPT_COMMAND="". /var/lib/pgsql/scl_enable""

VOLUME [""/var/lib/pgsql/data""]

USER 26

ENTRYPOINT [""run-postgresql.sh""]
CMD [""postgres""]
",sclorg/rhscl-dockerfiles,centos7.postgresql92/Dockerfile
b87bb22bcab08631a3b5888804c3c9bba9753286,553,"FROM nodesource/wheezy-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.3.1-1nodesource1~wheezy1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/wheezy/node/4.3.1/Dockerfile
e1649b50de21df13c7e349de8dfc46f1d98f4d0a,2405,"###########################
# KOHA DEBIAN BUILDER IMAGE
#
# this docker image takes a given koha release,
# applys patches, runs tests and builds debian packages
###########################

FROM debian:jessie

MAINTAINER Oslo Public Library ""digitalutvikling@gmail.com""

ENV DEBIAN_FRONTEND noninteractive
ENV DEBIAN_PRIORITY critical
ENV DEBCONF_NOWARNINGS yes
ENV REFRESHED_AT 2016-06-10

RUN apt-get update && \
    apt-get install --no-install-recommends -q -y vim.tiny telnet screen htop curl git \
            devscripts equivs python && \
    apt-get clean

#######################
# KOHA SOURCES AND DEPS
#######################

# Add Koha Stable repo
RUN echo ""deb http://debian.koha-community.org/koha stable main"" > /etc/apt/sources.list.d/koha.list
RUN curl -L http://debian.koha-community.org/koha/gpg.asc | apt-key add -


ENV KOHA_VERSION 16.05.00
ENV GITREF c91b16bd9e82588c7625f69e37d6435dd378915e

# Pull/Download Koha from GITREF or KOHA_VERSION tarball, try old_releases if not existing
ADD ./pull.sh /root/pull.sh
RUN /root/pull.sh

# Install Koha deps
RUN apt-get update && \
    apt-get install -y koha-deps koha-perldeps make build-essential && \
    apt-get clean

##########
# WORKAROUNDS - REMOVE WHEN OBSOLETE
##########

# One of the tests in Logger.t fails in our setup,
# probably due to user permissions in the docker build-container.
RUN rm /koha/t/Logger.t

##########
# GIT-BZ, PATCHLIBS AND BUILDSCRIPT
##########

# modified and stripped git-bz for patching non-git source
ADD ./git-bz /usr/bin/git-bz

# bugzilla user and pass needed for git-bz to apply patches
# can safely be left untouched
ENV AUTHOR_NAME  ""John Doe""
ENV AUTHOR_EMAIL john@doe.snot
ENV BUGZ_USER    bugsquasher
ENV BUGZ_PASS    bugspass

ENV DEBEMAIL     digitalutvikling@gmail.com
ENV DEBFULLNAME  Oslo Public Library
# OK    Bug 16330 - REST API: add routes to add, update and delete patrons
# OK    Bug 13895 - Add API routes for checkouts retrieval and renewal
# OK    Bug 16271 - Allow more filters on /api/v1/holds
# OK    Bug 16497 - REST API: add routes to list libraries
# FAILS Bug 13666 - Allow SIP2 checkin/checkout to get branch from institution_id field AO
ENV KOHABUGS     ""16330 13895 16271 16497""
ENV TEST_QA      0

RUN mkdir -p /debian
WORKDIR /koha
VOLUME [""/patches"", ""/debian""]

ADD ./applypatch.sh /root/applypatch.sh
ADD ./build.sh /root/build.sh

CMD [""/root/build.sh""]
",digibib/koha-salt-docker,koha-patched/Dockerfile
7ddb5ef21b69157e5c0248acdc655844c1deea00,182,"FROM centos/ruby-22-centos7:latest
USER root
RUN yum -y install expect
RUN echo ""root:redhat"" | chpasswd
USER 1001
COPY ./adduser /usr/libexec/s2i/
COPY ./assemble /usr/libexec/s2i/
",openshift/origin,test/extended/testdata/s2i-dropcaps/rootable-ruby/Dockerfile
38a2da5cc699556e00b3c68c39a716c83de0631f,939,"FROM     debian:sid

EXPOSE 9292

# Base install
RUN apt-get -q update && \
    apt-get upgrade -y && \
    apt-get -q install -y curl git nodejs sudo

# Prepare user
RUN mkdir /var/www && \
    chown -R www-data:www-data /var/www && \
    sed -i 's|www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin|www-data:x:33:33:www-data:/var/www:/bin/bash|' /etc/passwd && \
    echo ""www-data	ALL=(ALL:ALL) NOPASSWD: ALL"" > /etc/sudoers.d/www-data
USER www-data

# Get devdocs
RUN cd /var/www && \
    curl -sSL https://get.rvm.io | bash -s stable --ruby=2.1.2 && \
    git clone https://github.com/Thibaut/devdocs.git /var/www/devdocs && \
    bash -c ""source /var/www/.rvm/scripts/rvm && cd /var/www/devdocs && \
        gem install bundle && bundle install && thor docs:download --all""

# Get latest doc and launch
CMD bash -c ""source /var/www/.rvm/scripts/rvm && \
        cd /var/www/devdocs && thor docs:download --all && \
        rackup""
",hybris42/dockerfiles,devdocs/Dockerfile
5122576c810af32ff0e199f680ad2e1efe9c8c75,5372,"#################################################################
# Dockerfile
#
# Version:          1
# Software:         PIA-web-server
# Software Version: 1.1.0-SNAPSHOT
# Description:      Web server for PIA - Protein Inference Algorithms
# Website:          https://github.com/mpc-bioinformatics/pia
# Tags:             Proteomics
# Provides:         PIA 1.1.0 - Web Interface (through Apache Tomcat)
# Base Image:       biodckr/biodocker:latest
# Build Cmd:        docker build --rm -t biodckr/pia-web 1.1.0-SNAPSHOT/.
# Pull Cmd:         docker pull biodckr/pia-web
# Run Cmd:          docker run  biodckr/pia-web
# Extra:            This container starts up the web-interface (accessible at e.g. http://172.17.0.2:8080/pia, the IP depends on your docker setup). You should restart the container after the first start to keep projects. Projects will be saved inside /data/ inside the container.
#################################################################

# Set the base image
FROM biodckr/biodocker

################## BEGIN INSTALLATION ###########################
USER root

# ubuntu 14.04 desktop has issues with the installation of
# tomcat7 (paths are not created)
# therefore use the installation from the tomcat image
# (https://github.com/docker-library/tomcat/blob/ec75141e3cb6276b07d66c16042152e2d4de119c/7/jre7/Dockerfile)

###### start copy from tomcat Dockerfile ######
ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p ""$CATALINA_HOME""
WORKDIR $CATALINA_HOME

# runtime dependency for Tomcat Native Libraries
RUN apt-get update \
  && apt-get install -y libapr1 graphviz \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# see https://www.apache.org/dist/tomcat/tomcat-8/KEYS
RUN set -ex \
	&& for key in \
		05AB33110949707C93A279E3D3EFE6B686867BA6 \
		07E48665A34DCAFAE522E5E6266191C37C037D42 \
		47309207D818FFD8DCD3F83F1931D684307A10A5 \
		541FBE7D8F78B25E055DDEE13C370389288584E7 \
		61B832AC2F1C5A90F0F9B00A1C506407564C17A3 \
		713DA88BE50911535FE716F5208B0AB1D63011C7 \
		79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED \
		9BA44C2621385CB966EBA586F72C284D731FABEE \
		A27677289986DB50844682F8ACB77FC2E86E29AC \
		A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 \
		DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 \
		F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE \
		F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23 \
	; do \
		gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
	done

ENV TOMCAT_MAJOR 7
ENV TOMCAT_VERSION 7.0.69
ENV TOMCAT_TGZ_URL https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64/

RUN set -x \
	\
	&& curl -fSL ""$TOMCAT_TGZ_URL"" -o tomcat.tar.gz \
	&& curl -fSL ""$TOMCAT_TGZ_URL.asc"" -o tomcat.tar.gz.asc \
	&& gpg --batch --verify tomcat.tar.gz.asc tomcat.tar.gz \
	&& tar -xvf tomcat.tar.gz --strip-components=1 \
	&& rm bin/*.bat \
	&& rm tomcat.tar.gz* \
	\
	&& nativeBuildDir=""$(mktemp -d)"" \
	&& tar -xvf bin/tomcat-native.tar.gz -C ""$nativeBuildDir"" --strip-components=1 \
	&& nativeBuildDeps="" \
		libapr1-dev \
		libssl-dev \
   openjdk-7-jdk \
	"" \
	&& apt-get update \
  && apt-get install -y --no-install-recommends $nativeBuildDeps \
  && rm -rf /var/lib/apt/lists/* \
	&& ( \
		export CATALINA_HOME=""$PWD"" \
		&& cd ""$nativeBuildDir/jni/native"" \
		&& ./configure \
			--libdir=/usr/lib/jni \
			--prefix=""$CATALINA_HOME"" \
			--with-apr=/usr/bin/apr-1-config \
			--with-java-home=""$JAVA_HOME"" \
			--with-ssl=yes \
		&& make -j$(nproc) \
		&& make install \
	) \
	&& apt-get purge -y --auto-remove $nativeBuildDeps \
	&& rm -rf ""$nativeBuildDir"" \
	&& rm bin/tomcat-native.tar.gz \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# verify Tomcat Native is working properly
RUN set -e \
	&& nativeLines=""$(catalina.sh configtest 2>&1)"" \
	&& nativeLines=""$(echo ""$nativeLines"" | grep 'Apache Tomcat Native')"" \
	&& nativeLines=""$(echo ""$nativeLines"" | sort -u)"" \
	&& if ! echo ""$nativeLines"" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
		echo >&2 ""$nativeLines""; \
		exit 1; \
	fi
###### end copy from tomcat Dockerfile ######


ENV USERS_FILE $CATALINA_HOME/conf/tomcat-users.xml

# set-up tomcat, get PIA web frontend and put it into the webapps, set-up PIA
RUN set -x \
  && sed -i.bak -e 's/^<\/tomcat-users>/  <role rolename=""manager-gui""\/>\n  <user username=""admin"" password=""admin"" roles=""manager-gui""\/>\n<\/tomcat-users>/' $USERS_FILE \
  && wget https://github.com/mpc-bioinformatics/pia/releases/download/1.1.0-SNAPSHOT/pia-web-interface-1.1.0-SNAPSHOT.war -O /tmp/pia.war \
  && mv /tmp/pia.war $CATALINA_HOME/webapps/pia.war \
  \
  && startup.sh \
  && /bin/bash -c 'tail -f $CATALINA_HOME/logs/catalina.out | while read LOGLINE; do [[ ""${LOGLINE}"" == *""INFO: Server startup""* ]] && pkill -P $$ tail; done' \
  && shutdown.sh \
  && rm $CATALINA_HOME/webapps/pia.war \
  \
  && echo ""nr_threads=0\n\
data_path=/data\n\
tmp_path=/tmp/\n\
mascot_server=\n\
mascot_path=\n\
psmviewer_rows=50\n\
peptideviewer_rows=50\n\
proteinviewer_rows=50"" > $CATALINA_HOME/webapps/pia/config/pia.properties

EXPOSE 8080
CMD [""catalina.sh"", ""run""]

##################### INSTALLATION END ##########################

# File Author / Maintainer
MAINTAINER Julian Uszkoreit <julian.uszkoreit@rub.de>
# Modified by Julian Uszkoreit 2016-05-03
",BioDocker/containers,pia-web-server/1.1.0-SNAPSHOT/Dockerfile
687dd845814a52769a07a44cd6c408ef4948fa34,224,"FROM centos:centos6

RUN \
  curl -L -o /etc/yum.repos.d/epel-apache-maven.repo http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo && \
  yum install -y apache-maven java-1.7.0-openjdk-devel which
",dcapwell/docker-files,maven/Dockerfile
e80543c222854120e1bfdcea68cd4e56bf646ad7,2676,"# Pull base image.
FROM quay.io/eris/build
MAINTAINER Eris Industries <support@erisindustries.com>


#-----------------------------------------------------------------------------
# install tendermint

# set the repo and install tendermint -- should track vendored commit
ENV REPO_ALIAS github.com/tendermint/tendermint
ENV REPO github.com/eris-ltd/tendermint
#ENV COMMIT 4ee387d0770ed379e2d524f7077938517b38cd7c
ENV COMMIT working
# note, we want to lock in the same commit number
#  as eris-db has vendored.
RUN mkdir -p $GOPATH/src/$REPO
WORKDIR $GOPATH/src/$REPO_ALIAS
RUN git clone --quiet https://$REPO . && \
  git checkout --quiet $COMMIT && \
  go build -o /usr/local/bin/tendermint ./cmd/tendermint

#-----------------------------------------------------------------------------
# install mint-client tools

# set the repo and install mint-client
ENV REPO github.com/eris-ltd/mint-client
ENV BRANCH master
RUN mkdir -p $GOPATH/src/$REPO
WORKDIR $GOPATH/src/$REPO
RUN git clone --quiet https://$REPO . && \
  git checkout --quiet $BRANCH && \
  go install ./... && \
  mv $GOPATH/bin/mint* /usr/local/bin && \
  mv ./mint-client /usr/local/bin/

#-----------------------------------------------------------------------------
# install erisdb

# set the repo and install erisdb
ENV REPO $GOPATH/src/github.com/eris-ltd/eris-db
COPY . $REPO
WORKDIR $REPO
RUN cd ./cmd/erisdb && go build -o /usr/local/bin/erisdb && cd ../..

#-----------------------------------------------------------------------------
# cleanup

RUN rm -rf $GOPATH/src/* && \
  unset REPO && \
  unset REPO_ALIAS && \
  unset COMMIT && \
  unset BRANCH

#-----------------------------------------------------------------------------
# start script

# install the wrapper/start script
COPY DOCKER/start.sh /usr/local/bin/erisdb-wrapper

#-----------------------------------------------------------------------------
# chain manager scripts and default mint config

ENV ECM_PATH /usr/local/lib/ecm
RUN mkdir -p $ECM_PATH
COPY DOCKER/chain_* $ECM_PATH/
COPY DOCKER/config.toml $ECM_PATH/
COPY DOCKER/version.sh $ECM_PATH/

#-----------------------------------------------------------------------------
# permission the directories
RUN chown -R eris /usr/local/bin
RUN chown -R eris $ECM_PATH

#-----------------------------------------------------------------------------
# root dir

# persist data, set user
VOLUME /home/$USER/.eris
WORKDIR /home/$USER/.eris
USER $USER
RUN mkdir -p /home/$USER/.eris/chains/tendermint
ENV TMROOT /home/$USER/.eris/chains/tendermint

# run tendermint
# ports: 1337:eris-db API; 46656:mint-peer; 46657:mint-rpc
EXPOSE 1337
EXPOSE 46656
EXPOSE 46657
CMD ""erisdb-wrapper""
",eris-ltd/eris-db,DOCKER/Dockerfile
f7a36a8a0fed898403fc1d6302835fd191d1d94f,821,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php-nginx-dev:centos-7-php56
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/php-dev:centos-7-php56

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm
ENV WEB_PHP_SOCKET  127.0.0.1:9000
ENV WEB_NO_CACHE_PATTERN  ""\.(css|js|gif|png|jpg|svg|json|xml)$""

COPY conf/ /opt/docker/

# Install tools
RUN /usr/local/bin/yum-install \
        nginx \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-nginx --role webdevops-php-nginx --role webdevops-nginx-dev --role webdevops-php-dev \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/php-nginx-dev/centos-7-php56/Dockerfile
73a3c59991d00224fe9759233a76a8fdba733f8e,1195,"FROM debian:sid

MAINTAINER Tristan Crockett <tristan.h.crockett@gmail.com>

RUN \
  apt-get update && \
  apt-get install -y openjdk-8-jre wget

ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64

RUN \
  mkdir -p /var/otp && \
  wget -O /var/otp/otp.jar http://maven.conveyal.com.s3.amazonaws.com/org/opentripplanner/otp/0.19.0/otp-0.19.0-shaded.jar && \
  wget -O /var/otp/jython.jar http://search.maven.org/remotecontent?filepath=org/python/jython-standalone/2.7.0/jython-standalone-2.7.0.jar

ENV OTP_BASE /var/otp
ENV OTP_GRAPHS /var/otp/graphs

RUN \
  mkdir -p /var/otp/scripting && \
  mkdir -p /var/otp/graphs/chicago && \
  wget -O /var/otp/graphs/chicago/pace.zip http://www.pacebus.com/gtfs/gtfs.zip && \
  wget -O /var/otp/graphs/chicago/cta.zip http://www.transitchicago.com/downloads/sch_data/google_transit.zip && \
  wget -P /var/otp/graphs/chicago https://s3.amazonaws.com/metro-extracts.mapzen.com/chicago_illinois.osm.pbf && \
  java -Xmx8G -jar /var/otp/otp.jar --build /var/otp/graphs/chicago

EXPOSE 8080
EXPOSE 8081

ENTRYPOINT [ ""java"", ""-Xmx6G"", ""-Xverify:none"", ""-cp"", ""/var/otp/otp.jar:/var/otp/jython.jar"", ""org.opentripplanner.standalone.OTPMain"" ]

CMD [ ""--help"" ]
",thcrock/docker-otp-chicago,cta-pace/Dockerfile
6e645f05856c6d48932fa2977302ad9f5eccfb00,452,"# Bamboo Agent
#
# VERSION               0.0.1

FROM hwuethrich/supervisord
MAINTAINER H. WÃ¼thrich ""hw@5px.ch""

# Environment
ENV BAMBOO_USER   bamboo
ENV BAMBOO_HOME   /home/$BAMBOO_USER

# Install Bamboo Agent
ADD start      /start
ADD supervisor /etc/supervisor/conf.d
ADD bin        /usr/local/bin

# Add and run install scripts
ADD install /tmp/install
RUN /tmp/install/all.sh && rm -rf /tmp/install

# Run supervisord
CMD [""/start/supervisord""]
",hwuethrich/docker-images,bamboo-agent/Dockerfile
30a49496272321b8d23209fd9e6e1c4a50d74b39,479,"FROM nodesource/fedora20-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_iojs_3.x/fc/20/x86_64/iojs-3.0.0-1nodesource.fc20.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/20/iojs/3.0.0/Dockerfile
40724357747d6fb357d76185ea90e39b1180b454,195,"FROM ufaldsg/cloud-asr-worker
MAINTAINER Ondrej Klejch

WORKDIR /opt/app
ADD download_models.sh /opt/app/download_models.sh

CMD bash download_models.sh && ( while true; do python run.py; done )
",UFAL-DSG/cloud-asr,examples/worker_downloader/Dockerfile
3c433d6bbb011772d10fa48cef44807996b733f0,1725,"# (C) Copyright IBM Corporation 2015, 2016.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:16.04

MAINTAINER Kavitha Suresh Kumar <kavisuresh@in.ibm.com>

RUN apt-get update \
    && apt-get install -y wget \
    && rm -rf /var/lib/apt/lists/*

# Install JRE
RUN wget  -q  <User Credentials> \
   <URL>/ibm-java*archive.bin -O /tmp/java.bin \
   && chmod +x /tmp/java.bin \
   && /tmp/java.bin -i silent -DUSER_INSTALL_DIR=/opt/ibm/java \
   && rm /tmp/java.bin

ENV JAVA_HOME /opt/ibm/java
ENV PATH $JAVA_HOME/jre/bin:$PATH

# Install Liberty
RUN  wget -q  <User Credential> \
   <URL>/wlp-*-runtime-*.jar -O /tmp/wlp-runtime.jar \
   && java -jar /tmp/wlp-runtime.jar --acceptLicense /opt/ibm \
   && rm /tmp/wlp-runtime.jar

ENV PATH /opt/ibm/wlp/bin:$PATH

# Set Path Shortcuts
ENV LOG_DIR /logs
ENV WLP_OUTPUT_DIR /opt/ibm/wlp/output
RUN mkdir /logs \
    && ln -s $WLP_OUTPUT_DIR/defaultServer /output \
    && ln -s /opt/ibm/wlp/usr/servers/defaultServer /config

# Configure WebSphere Liberty
RUN /opt/ibm/wlp/bin/server create \
    && rm -rf $WLP_OUTPUT_DIR/.classCache

COPY server.xml /opt/ibm/wlp/usr/servers/defaultServer/

EXPOSE 9080 9443

CMD [""/opt/ibm/wlp/bin/server"", ""run"", ""defaultServer""]
",WASdev/ci.docker,ga/production-install/wget/Dockerfile
eab4c816014db3650fd17a974283a5b646b87e1f,2900,"# Base Dockerfile for an App Engine Ruby runtime.
# Dockerfiles for App Engine Ruby apps should inherit FROM this image.

# The base image installs a version of Debian.
FROM gcr.io/google_appengine/base

# Install dependencies for Ruby
# Also installs dependencies for the following common gems:
#
# gems      dependencies
# ------------------------------------------------------------------
# curb      libcurl3, libcurl3-gnutls, libcurl4-openssl-dev
# pg        libpq-dev
# rmagick   libmagickwand-dev
# nokogiri  libxml2-dev, libxslt-dev
# sqlite3   libsqlite3-dev
# mysql2    libmysqlclient-dev

RUN apt-get update -y && \
    apt-get install -y -q --no-install-recommends \
        autoconf \
        build-essential \
        ca-certificates \
        curl \
        git \
        libffi-dev \
        libgdbm-dev \
        libgmp-dev \
        libncurses5-dev \
        libqdbm-dev \
        libreadline6-dev \
        libssl-dev \
        libyaml-dev \
        libz-dev \
        libxml2-dev \
        libxslt-dev \
        libsqlite3-dev \
        libmysqlclient-dev \
        libpq-dev \
        libcurl3 \
        libcurl3-gnutls \
        libcurl4-openssl-dev \
        libmagickwand-dev \
        systemtap && \
    apt-get clean && \
    rm /var/lib/apt/lists/*_*

# Install node
RUN mkdir /nodejs && curl https://nodejs.org/dist/v5.7.1/node-v5.7.1-linux-x64.tar.gz | tar xvzf - -C /nodejs --strip-components=1
ENV PATH /nodejs/bin:$PATH

# Install rbenv
ENV RBENV_ROOT /rbenv
RUN git clone https://github.com/sstephenson/rbenv.git /rbenv && \
    git clone https://github.com/sstephenson/ruby-build.git /rbenv/plugins/ruby-build
ENV PATH /rbenv/shims:/rbenv/bin:$PATH

# Preinstall ruby runtimes.
# The LAST version in the list is set as the default.
ENV PREINSTALLED_RUBY_VERSIONS 2.1.8 2.2.4 2.3.0
ENV RUBY_CONFIGURE_OPTS --disable-install-doc
RUN for V in $PREINSTALLED_RUBY_VERSIONS; do \
    rbenv install -v $V; \
    rbenv rehash; \
    rbenv global $V; \
    done

# Preinstall bundler and foreman gems
ENV BUNDLER_VERSION 1.11.2
ENV FOREMAN_VERSION 0.78.0
RUN for V in $PREINSTALLED_RUBY_VERSIONS; do \
    RBENV_VERSION=$V gem install -q --no-rdoc --no-ri bundler --version $BUNDLER_VERSION; \
    RBENV_VERSION=$V gem install -q --no-rdoc --no-ri foreman --version $FOREMAN_VERSION; \
    rbenv rehash; \
    done
# Tell nokogiri >=1.6 to install using system libraries, for faster builds
RUN bundle config build.nokogiri --use-system-libraries
ENV NOKOGIRI_USE_SYSTEM_LIBRARIES 1

# Temporarily replace ImageMagick policy file with one that fixes
# CVE-2016-3714
RUN mkdir -p /etc/ImageMagick-6 && rm -f /etc/ImageMagick-6/policy.xml
COPY files/policy.xml /etc/ImageMagick-6/

# Common configuration for any ENTRYPOINT
WORKDIR /app
EXPOSE 8080
ENV PORT 8080
CMD []

# Default ENTRYPOINT
ENV RACK_ENV deployment
ENTRYPOINT bundle exec rackup -p $PORT config.ru -E $RACK_ENV
",GoogleCloudPlatform/ruby-docker,appengine/Dockerfile
5db0db65d27288ebd47cc1260c56404cdcb30b00,112,"FROM python:3.5-onbuild
MAINTAINER Nir Galon <nirgn975@gmail.com>
ENV PYTHONUNBUFFERED 1

RUN apt-get update -y
",hasadna/open_pension,server/Dockerfile
732d01172ce12def9964f272bf6a297302f88078,478,"FROM nodesource/centos5-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub/el/5/x86_64/nodejs-0.10.43-1nodesource.el5.centos.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,centos/5/node/0.10.43/Dockerfile
1cdff4198dcea129434650dc361e12f479409748,551,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.40-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/0.10.40/Dockerfile
9370b92c5c947443ea9ac4c8ada83760e1c2851e,1037,"FROM nvidia/cuda:cudnn

RUN apt-get update \
&&  apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gfortran \
        git \
        libfreetype6-dev \
        libjpeg-dev \
        liblapack-dev \
        libopenblas-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python \
        python-dev \
&&  apt-get clean \
&&  rm -rf /var/lib/apt/lists/*

RUN curl -O https://bootstrap.pypa.io/get-pip.py \
&&  python get-pip.py \
&&  rm get-pip.py

# Use two set pip install for scikit-learn due to package not using install_requires
# See: http://stackoverflow.com/questions/33806443/installing-scikit-learn-and-scipy-on-elastic-beanstalk-with-pip-and-requirements
RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        Pillow \
        scipy \
&&  pip --no-cache-dir install \
        scikit-learn \
&&  python -m ipykernel.kernelspec

COPY run_jupyter.sh /

EXPOSE 8888
WORKDIR ""/root""
CMD [""/bin/bash""]
",4Catalyzer/docker-dl,ipython/Dockerfile
01eefc519f650c5415abfeedd9851236d5043bd6,88,"FROM cassandra:3.5

ENV DEBIAN_FRONTEND=noninteractive \
    TERM=xterm

ADD rootfs/ /

",agalitsyn/yagoda,cassandra/image-cassandra/Dockerfile
c81fd1c1c8be3640715ef27fc5f84691273236f0,549,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/iojs_2.x/pool/main/i/iojs/iojs_2.3.4-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/iojs/2.3.4/Dockerfile
c73101cf40b060d586a2bb71431bf5edbdf46ade,366,"FROM andreptb/oracle-java:8

ENV MAVEN_VERSION 3.3.9

RUN curl -fsSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven

CMD [""mvn""]
",andreptb/Dockerfiles,maven/jdk-8/Dockerfile
1ebda77ce5c32583201535f4b5224bb15e0bf630,1460,"FROM ubuntu:trusty

RUN apt-get update && \
	apt-get install -yq iptables apt-transport-https ca-certificates

ENV DIND_COMMIT=b8bed8832b77a478360ae946a69dab5e922b194e
ADD https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind /usr/local/bin/dind
RUN chmod +x /usr/local/bin/dind
VOLUME /var/lib/docker

ENV DOCKER_VERSION=1.10.3-cs2 NGROK_VERSION=1.7 GPG_KEY_ID=A87A2270 GPG_KEY_PACKAGE_ID=A87A2270 REPO=https://repo.cloud.docker.com/ubuntu/ CERT_COMMON_NAME=*.node.dockerapp.io DOCKER_HOST=unix:///var/run/docker.sock DOCKER_HOST_LISTEN=tcp://0.0.0.0:2375 HOST=https://cloud.docker.com/

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys $GPG_KEY_PACKAGE_ID
RUN gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys $GPG_KEY_ID
RUN echo deb [arch=amd64] $REPO dockercloud main > /etc/apt/sources.list.d/dockercloud.list
RUN apt-get update -q && DEBIAN_FRONTEND=noninteractive apt-get install -y dockercloud-agent
ADD https://files.cloud.docker.com/packages/docker/docker-$DOCKER_VERSION.tgz /tmp/
ADD https://files.cloud.docker.com/packages/ngrok/ngrok-$NGROK_VERSION.tgz /tmp/
RUN mkdir -p /usr/lib/dockercloud/ && \
	tar zxf /tmp/docker-$DOCKER_VERSION.tgz -C /usr/lib/dockercloud/ --strip-components 1 && \
	ln -s /usr/lib/dockercloud/docker /usr/bin/docker && \
	tar zxf /tmp/ngrok-$NGROK_VERSION.tgz -C /usr/lib/dockercloud/ --strip-components 1
ADD run.sh /

EXPOSE 2375
ENTRYPOINT [""/usr/local/bin/dind"", ""/run.sh""]",docker/dockercloud-node,1.10.3-cs2/Dockerfile
1765c6fd22d9894a9bfefd59f4d4f24dec4c3c8a,2147,"# @see hopsoft/graphite-statsd
FROM stackbrew/debian:wheezy

[[ updateApt ]]
[[ addUserFiles ]]

WORKDIR [[ .Container.GetFirstMountedDir ]]

RUN apt-get -y --force-yes install vim  nginx  python-flup expect git memcached sqlite3 libcairo2 libcairo2-dev python-cairo pkg-config build-essential python-dev libsqlite3-dev

RUN wget -P /opt http://python-distribute.org/distribute_setup.py
RUN python /opt/distribute_setup.py
RUN easy_install pip

RUN pip install django==1.3 whisper==0.9.12 carbon graphite-web django-tagging==0.3.1 pysqlite flup daemonize gunicorn twisted==11.1.0 python-memcached==1.53 txAMQP==0.6.2

# Configure graphite
RUN mv /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
RUN mv /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
RUN mv /opt/graphite/conf/aggregation-rules.conf.example /opt/graphite/conf/aggregation-rules.conf
RUN mv /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf
RUN mv /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf
RUN mv /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
RUN mv /opt/graphite/webapp/graphite/local_settings.py.example /opt/graphite/webapp/graphite/local_settings.py
RUN echo ""\n\n[stats]\npattern = ^stats.*\nretentions = 10s:6h,1min:6d,10min:1800d"" >> /opt/graphite/conf/storage-schemas.conf

# Create locations for pid/log files
RUN mkdir -p /var/run/graphite && chown www-data /var/run/graphite
RUN mkdir -p /var/log/carbon && chown www-data /var/log/carbon

# Initialize the webapp
sed -i -e ""s|#SECRET_KEY = 'UNSAFE_DEFAULT'|SECRET_KEY = 'OJNOKdsqds!d987Â§8'|"" /opt/graphite/webapp/graphite/local_settings.py
ADD ./graphite_syncdb /tmp/graphite_syncdb
RUN chmod 775 /tmp/graphite_syncdb
RUN /tmp/graphite_syncdb

# Add custom setup script
[[ beforeAfterScripts ]]

ADD ./nginx.conf /etc/nginx/nginx.conf

[[ if .EmptyCmd]]
CMD /bin/bash
[[ else ]]
CMD /opt/graphite/bin/carbon-cache.py --debug start & \
	gunicorn_django -b127.0.0.1:8000 -w2 /opt/graphite/webapp/graphite/settings.py & \
	/usr/sbin/nginx & \
	/bin/bash
[[ end ]]
",marmelab/gaudi,templates/graphite/Dockerfile
8e5799a936958c16c43202d19aec851145547bf7,2937,"FROM steeve/cross-compiler:android-arm
MAINTAINER Steeve Morin ""steeve.morin@gmail.com""

RUN mkdir -p /build
WORKDIR /build

# Install Boost.System
ENV BOOST_VERSION 1.58.0
RUN curl -L http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_`echo ${BOOST_VERSION} | sed 's/\\./_/g'`.tar.bz2/download | tar xvj && \
    cd boost_`echo ${BOOST_VERSION} | sed 's/\\./_/g'`/ && \
    ./bootstrap.sh --prefix=${CROSS_ROOT} && \
    echo ""using gcc : android : ${CROSS_TRIPLE}-c++ ;"" > ${HOME}/user-config.jam && \
    ./b2 --with-date_time --with-system --prefix=${CROSS_ROOT} toolset=gcc-android link=static variant=release threading=multi target-os=linux install && \
    rm -rf ${HOME}/user-config.jam && \
    rm -rf `pwd`

# Install OpenSSL
ENV OPENSSL_VERSION 1.0.2c
RUN curl -L http://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz | tar xvz && \
    cd openssl-${OPENSSL_VERSION}/ && \
    CROSS_COMPILE=${CROSS_TRIPLE}- ./Configure threads no-shared linux-armv4 --prefix=${CROSS_ROOT} && \
    make && make install && \
    rm -rf `pwd`

# Install libtorrent
ENV LIBTORRENT_VERSION 1.0.5
RUN curl -L http://sourceforge.net/projects/libtorrent/files/libtorrent/libtorrent-rasterbar-${LIBTORRENT_VERSION}.tar.gz/download | tar xvz && \
    cd libtorrent-rasterbar-${LIBTORRENT_VERSION}/ && \
    sed -i 's/$PKG_CONFIG openssl --libs-only-/$PKG_CONFIG openssl --static --libs-only-/' ./configure && \
    sed -i -e s/Windows.h/windows.h/ -e s/Wincrypt.h/wincrypt.h/ ./ed25519/src/seed.cpp && \
    \
    PKG_CONFIG_PATH=${CROSS_ROOT}/lib/pkgconfig/ \
    CC=${CROSS_TRIPLE}-gcc CXX=${CROSS_TRIPLE}-g++ \
    CFLAGS=""${CFLAGS} -O2 -DINT64_MAX=0x7fffffffffffffffLL -DINT16_MAX=32767 -DINT16_MIN=-32768"" \
    CXXFLAGS=""${CXXFLAGS} ${CFLAGS}"" \
    ./configure --enable-static --disable-shared --disable-pool-allocators --disable-deprecated-functions \
    --host=${CROSS_TRIPLE} --prefix=${CROSS_ROOT} \
    --with-boost=${CROSS_ROOT} --with-boost-libdir=${CROSS_ROOT}/lib && \
    \
    make && make install && \
    rm -rf `pwd`

# Install SWIG
# Need to build from >3.0.2 because Go 1.4.2
ENV SWIG_VERSION 5c57a8c877f88c9388b68067d665c63546244ba0
RUN apt-get update && apt-get install -y automake libpcre3-dev bison yodl
RUN curl -L https://github.com/swig/swig/archive/${SWIG_VERSION}.tar.gz | tar xvz && \
    cd swig-${SWIG_VERSION}/ && \
    curl -L https://github.com/steeve/swig/compare/swig:${SWIG_VERSION}...packed-struct-libtorrent.diff | patch -p1 && \
    ./autogen.sh && \
    ./configure && make && make install && \
    rm -rf `pwd`

# Install Golang
ENV GO_VERSION 1.4.2
RUN cd /usr/local && \
    curl -L http://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar xvz && \
    cd /usr/local/go/src && \
    CC_FOR_TARGET=${CROSS_TRIPLE}-cc CXX_FOR_TARGET=${CROSS_TRIPLE}-c++ GOOS=android GOARCH=arm GOARM=7 CGO_ENABLED=1 ./make.bash
ENV PATH ${PATH}:/usr/local/go/bin

WORKDIR /
RUN rm -rf /build
",steeve/libtorrent-go,android-arm/Dockerfile
e93d7076384cd9b2ea2385080932179563d2f28b,831,"FROM ubuntu:trusty

ENV GOVERSION 1.6.2

RUN apt-get update -y && \
    apt-get install --no-install-recommends -y -q \
            build-essential \
            ca-certificates \
            curl \
            git \
            ruby \
            ruby-dev \
            zip && \
    gem install bundler

RUN mkdir /goroot && \
    mkdir /gopath && \
    curl https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz | \
         tar xzf - -C /goroot --strip-components=1

# We want to ensure that release builds never have any cgo dependencies so we
# switch that off at the highest level.
ENV CGO_ENABLED 0
ENV GOPATH /gopath
ENV GOROOT /goroot
ENV PATH $GOROOT/bin:$GOPATH/bin:$PATH

RUN mkdir -p $GOPATH/src/github.com/hashicorp/consul
WORKDIR $GOPATH/src/github.com/hashicorp/consul
CMD ./scripts/dist_build.sh
",hashicorp/consul,scripts/consul-builder/Dockerfile
c53d5b52261216853bbbf05af696e8ed95040767,2195,"FROM samsara/base-image-jdk8:a33-j8u72

MAINTAINER Samsara's team (https://github.com/samsara/samsara/docker-images)

#
# Riemann installation
#
RUN export RIEMANN_VERSION=0.2.10 && \
    wget --progress=dot:mega --no-check-certificate \
    https://aphyr.com/riemann/riemann-${RIEMANN_VERSION}.tar.bz2 -O - \
    | tar -jxvf - -C /opt && \
    ln -s /opt/riemann-* /opt/riemann && \
    mv /opt/riemann/etc/riemann.config /opt/riemann/etc/riemann.config.orig

VOLUME [""/data"", ""/logs""]

ADD ./riemann.config  /opt/riemann/etc/riemann.config
ADD ./riemann-supervisor.conf /etc/supervisor/conf.d/riemann-supervisor.conf


#
# InfluxDB installation
#
RUN export INFLUXDB_VERSION=0.10.0-1 && \
    wget --progress=dot:mega --no-check-certificate \
    https://s3.amazonaws.com/influxdb/influxdb-${INFLUXDB_VERSION}_linux_amd64.tar.gz -O - \
    | tar -zxvf - -C /opt && \
    ln -s /opt/influxdb-* /opt/influxdb

ADD ./influxdb-config.toml /opt/influxdb/config/config.toml
ADD ./influxdb-supervisor.conf /etc/supervisor/conf.d/influxdb-supervisor.conf


#
# MySQL installation
#
RUN \
    apk add libaio ncurses5-libs && \
    wget --progress=dot:mega --no-check-certificate \
    http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.10-linux-glibc2.5-x86_64.tar.gz -O - | \
    tar -zxvf - -C /opt && \
    ln -s /opt/mysql-* /opt/mysql

ADD ./mysql-start.sh /opt/mysql/bin/


#
# Grafana installation
#
RUN export GRAFANA_VERSION=2.6.0 && \
    wget --progress=dot:mega --no-check-certificate \
    https://grafanarel.s3.amazonaws.com/builds/grafana-2.6.0.linux-x64.tar.gz -O - \
    | tar -zxvf - -C /opt/ && \
    ln -s /opt/grafana-* /opt/grafana

ADD ./grafana-custom.ini.tmpl /opt/grafana/conf/custom.ini.tmpl
ADD ./grafana-supervisor.conf /etc/supervisor/conf.d/grafana-supervisor.conf
ADD ./mysql-supervisor.conf   /etc/supervisor/conf.d/mysql-supervisor.conf
ADD ./dashboards              /opt/grafana/dashboards

ADD ./configure-and-start.sh /configure-and-start.sh

# expose grafana, rieman ports,      influx,   supervisord
EXPOSE   80       5555 5555/udp 5556 8083 8086 15000

# expose volumes
VOLUME [""/data"", ""/logs""]

ADD ./bootstrap.sh /bootstrap.sh
CMD /configure-and-start.sh
",samsara/samsara,docker-images/monitoring/Dockerfile
e623304e5110934d63ade48eaa8b5ddcbad142a9,189,"FROM cuda

RUN yum install -y \
        cuda-samples-$CUDA_PKG_VERSION && \
    rm -rf /var/cache/yum/*

WORKDIR /usr/local/cuda/samples/1_Utilities/deviceQuery
RUN make

CMD ./deviceQuery
",NVIDIA/nvidia-docker,samples/centos/deviceQuery/Dockerfile
da15e7935037af79ebac0bc2405dd3a96ffda385,1256,"FROM romeoz/docker-phpfpm:5.5
MAINTAINER romeOz <serggalka@gmail.com>

ENV OS_LOCALE=""en_US.UTF-8""
RUN locale-gen ${OS_LOCALE}
ENV LANG=${OS_LOCALE} \
	LANGUAGE=en_US:en \
	LC_ALL=${OS_LOCALE}

COPY ./supervisord.conf /etc/supervisor/conf.d/
COPY ./app /var/www/app/

RUN	\
	buildDeps='software-properties-common python-software-properties' \
	&& apt-get update \
	&& apt-get install --no-install-recommends -y $buildDeps \
	&& add-apt-repository -y ppa:nginx/stable \
	&& apt-get update \
	&& apt-get install -y nginx \
	&& rm -rf  /etc/nginx/sites-enabled/* /etc/nginx/sites-available/* \
	# Install supervisor
	&& apt-get install -y supervisor && mkdir -p /var/log/supervisor \
	&& chown www-data:www-data /var/www/app/ -Rf \
	# Cleaning
	&& apt-get purge -y --auto-remove $buildDeps \
	&& apt-get autoremove -y && apt-get clean \
	&& rm -rf /var/lib/apt/lists/* \
	# Forward request and error logs to docker log collector
	&& ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log

COPY ./configs/nginx.conf /etc/nginx/nginx.conf
COPY ./configs/app.conf /etc/nginx/sites-enabled/app.conf
COPY ./configs/www.conf /etc/php/5.5/fpm/pool.d/www.conf

WORKDIR /var/www/app/

EXPOSE 80 443

CMD [""/usr/bin/supervisord""]",romeOz/docker-nginx-php,5.5/Dockerfile
0cdd967158af61125d2bbd314563e028f3992508,1172,"FROM jrief/uwsgi-django-shop:latest

MAINTAINER Jacob Rief <jacob.rief@gmail.com>

# checkout the merchant's project
WORKDIR /web
RUN git clone --depth=1 https://github.com/jrief/django-shop.git
WORKDIR /web/django-shop

# install packages outside of pypi
RUN npm install
RUN bower install --allow-root

# add uwsgi.ini file into workdir, so that touching this file restarts the Django server
ADD myshop.ini /web/workdir/myshop.ini
RUN ln -s /web/workdir/myshop.ini /etc/uwsgi.d/myshop.ini

# add media files
WORKDIR /web
RUN wget -q -O- http://downloads.django-shop.org/django-shop-workdir.tar.gz | tar zx

# create database and populate static files
WORKDIR /web/django-shop/example
ENV DJANGO_SHOP_TUTORIAL=polymorphic DJANGO_WORKDIR=/web/workdir DJANGO_SETTINGS_MODULE=myshop.settings
RUN ./manage.py migrate
RUN ./manage.py loaddata fixtures/myshop-$DJANGO_SHOP_TUTORIAL.json
RUN ./manage.py compilescss
RUN ./manage.py collectstatic --noinput --ignore='*.scss'
RUN touch /web/workdir/bootstrap
RUN chown -R django.django /web/workdir

VOLUME /web

# when enabling the CMD disable deamonize in uwsgi.ini
EXPOSE 9001
CMD [""/usr/sbin/uwsgi"", ""--ini"", ""/etc/uwsgi.ini""]
",awesto/django-shop,docker/myshop-sample/Dockerfile
c89ba6aa1bec3bc5476793ae2923f76c1aff3bf0,590,"FROM ericfont/armv7hf-debian-qemu:jessie

RUN [ ""cross-build-start"" ]

RUN apt-get update

# need to be able to use https for wget
RUN apt-get install ca-certificates wget #git

# get prebuilt AppImageKit
RUN wget https://bintray.com/artifact/download/ericfont/prebuilt-AppImageKit/AppImageKit-5_built-in-armv7hf-jessie.tar.gz
RUN tar -xvzf AppImageKit-5_built-in-armv7hf-jessie.tar.gz
RUN rm AppImageKit-5_built-in-armv7hf-jessie.tar.gz

# add AppImageKit dependencies
RUN apt-get -y install libfuse-dev libglib2.0-dev cmake git libc6-dev binutils fuse python

RUN [ ""cross-build-end"" ]  
",musescore/MuseScore,build/Linux+BSD/portable/ARM/jessie-packaging-armhf.Dockerfile
20ad8c46b90edd485a4eafa100627c90432b3fc7,909,"FROM       drupalci/php-base
MAINTAINER drupalci

##
# Base.
##

ENV DEBIAN_FRONTEND noninteractive
ENV HOME /root

# Saves us from stale repository issues.
RUN apt-get clean && apt-get update

# Install Apache2 and Apache prefork
RUN apt-get install -y apache2 apache2-mpm-prefork apache2-dev
RUN a2dismod mpm_event && a2enmod mpm_prefork

# TODO: Remove the native php version
RUN apt-get -y remove php5-cli

RUN apt-get clean && apt-get autoremove -y

##
# PHPENV.
##

# Remove fpm since apxs2 (apache) support is being compiled.
RUN sed -i '/--enable-fpm/d' /root/.phpenv/plugins/php-build/share/php-build/default_configure_options
RUN echo ""--with-apxs2=/usr/bin/apxs2"" >> /root/.phpenv/plugins/php-build/share/php-build/default_configure_options
RUN echo ""--with-pdo-pgsql"" >> /root/.phpenv/plugins/php-build/share/php-build/default_configure_options
RUN sudo /root/.phpenv/plugins/php-build/install.sh
",ricardoamaro/drupalci_testbot,containers/base/web-base/Dockerfile
91dd3c5b038828d8851162d542f6f3e1c80659e8,201,"FROM node:0.12.1

MAINTAINER Zalando SE

RUN npm install express@4.12.4
RUN npm install superagent@1.2.0
RUN npm install basic-auth@1.0.1

COPY /src/ /www/

WORKDIR /www/
CMD node server.js
EXPOSE 3002",zalando-stups/mocks,token-service/Dockerfile
f072d915b2356b2676430593b808dd00986b86bf,2148,"FROM debian:jessie

# remove several traces of debian python
RUN apt-get purge -y python.*

# http://bugs.python.org/issue19846
# > At the moment, setting ""LANG=C"" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		libsqlite3-0 \
		libssl1.0.0 \
	&& rm -rf /var/lib/apt/lists/*

# gpg: key 18ADD4FF: public key ""Benjamin Peterson <benjamin@python.org>"" imported
ENV GPG_KEY C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF

ENV PYTHON_VERSION 2.7.11

# if this is called ""PIP_VERSION"", pip explodes with ""ValueError: invalid truth value '<VERSION>'""
ENV PYTHON_PIP_VERSION 8.1.2

RUN set -ex \
	&& buildDeps=' \
		curl \
		gcc \
		libbz2-dev \
		libc6-dev \
		libncurses-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		make \
		xz-utils \
		zlib1g-dev \
	' \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& curl -fSL ""https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"" -o python.tar.xz \
	&& curl -fSL ""https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"" -o python.tar.xz.asc \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$GPG_KEY"" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& rm -r ""$GNUPGHOME"" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& ./configure --enable-shared --enable-unicode=ucs4 \
	&& make -j$(nproc) \
	&& make install \
	&& ldconfig \
	&& curl -fSL 'https://bootstrap.pypa.io/get-pip.py' | python2 \
	&& pip install --no-cache-dir --upgrade pip==$PYTHON_PIP_VERSION \
	&& find /usr/local -depth \
		\( \
		    \( -type d -a -name test -o -name tests \) \
		    -o \
		    \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
		\) -exec rm -rf '{}' + \
	&& apt-get purge -y --auto-remove $buildDeps \
	&& rm -rf /usr/src/python ~/.cache

CMD [""python2""]
",docker-library/python,2.7/slim/Dockerfile
22b65a5961383a7ac88388aed90aa97e635eb7cf,659,"
FROM oesteban/crn_nipype

ARG GIT_BRANCH
ENV GIT_BRANCH ${GIT_BRANCH:-master}

ARG GIT_URL
ENV GIT_URL ${GIT_URL:-""https://github.com/poldracklab/mriqc.git""}

WORKDIR /root/src
RUN git clone $GIT_URL && \
    cd mriqc && \
    git checkout $GIT_BRANCH && \
    source activate crnenv && \
    python setup.py install && \
    python -c ""from mriqc.data import get_brainweb_1mm_normal; get_brainweb_1mm_normal()""
    
ADD files/run_* /usr/bin/
RUN chmod +x /usr/bin/run_*

RUN groupadd -g 1002 agave && \
    groupadd -g 1001 docker && \
    useradd -m -G agave,docker -s /bin/bash -u 1001 ubuntu
USER ubuntu

ENTRYPOINT [""/usr/bin/run_mriqc""]
CMD [""--help""]
",poldracklab/mriqc,build/Dockerfile
e44cbca352d53e85080f40e99598515f477b814b,754,"FROM ipython/ipython:3.x

MAINTAINER IPython Project <ipython-dev@scipy.org>

# From https://github.com/ogrisel/docker-openblas
ADD openblas.conf /etc/ld.so.conf.d/openblas.conf

# From https://github.com/ogrisel/docker-sklearn-openblas
ADD numpy-site.cfg /tmp/numpy-site.cfg
ADD scipy-site.cfg /tmp/scipy-site.cfg

ADD build_scipy_stack.sh /tmp/build_scipy_stack.sh
RUN bash /tmp/build_scipy_stack.sh

## Extremely basic test of install
RUN python2 -c ""import matplotlib, scipy, numpy, pandas, sklearn, seaborn, yt, patsy, sympy, IPython, statsmodels""
RUN python3 -c ""import matplotlib, scipy, numpy, pandas, sklearn, seaborn, yt, patsy, sympy, IPython""

# Clean up from build
RUN rm -f /tmp/build_scipy_stack.sh /tmp/numpy-site.cfg /tmp/scipy-site.cfg
",ipython/docker-notebook,scipystack/Dockerfile
ce4f58dffb894bb88281bedf343458cc4611dba4,1526,"# ------------------------------------------------------------------------
#
# Copyright WSO2, Inc. (http://wso2.com)
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
#
# ------------------------------------------------------------------------

FROM java:8-jre
MAINTAINER architecture@wso2.org

WORKDIR /opt

# --------------------------------
# Copy scripts, packages & plugins
# --------------------------------
COPY packages/petstore-txn.jar /opt/
COPY packages/client-truststore.jks /opt/
COPY packages/data-agent-conf.xml /opt/

# --------------------------------
# HTTP Monitoring and metrics specific config
# --------------------------------
ENV METRICS_REPORTING_DAS_DATAAGENTCONFIGPATH data-agent-conf.xml
ENV METRICS_REPORTING_DAS_RECEIVERURL ""tcp://172.17.8.1:7612""
ENV HTTP_MONITORING_DAS_DATAAGENTCONFIGPATH data-agent-conf.xml
ENV HTTP_MONITORING_DAS_RECEIVERURL ""tcp://172.17.8.1:7612""

# ----------------------
# Expose container ports
# ----------------------
EXPOSE 8080

ENTRYPOINT java -jar /opt/petstore-txn.jar
",wso2/product-mss,samples/petstore/microservices/transaction/container/docker/Dockerfile
099262bfab942efe00e9583876415b78e3b86715,81,"FROM lphoward/fake-s3:latest

CMD [""-r"",  ""/fakes3_root"", ""-p"",  ""80""]
EXPOSE 80
",openspending/openspending,docker-config/fakes3/Dockerfile
d6fe1bc0834148062eb1c60a46dfb083993f5ba7,933,"FROM samsara/base-image-jdk8:a33-j8u72

MAINTAINER Samsara's team (https://github.com/samsara/samsara/docker-images)

#
# Kibana installation
#

RUN export KIBANA_VERSION=4.5.1 && \
    export MARVEL_VERSION=2.3.3 && \
    curl -sSL ""https://download.elastic.co/kibana/kibana/kibana-${KIBANA_VERSION}-linux-x64.tar.gz"" | tar -zxvf - -C /opt && \
    ln -s /opt/kibana-* /opt/kibana && \
    /opt/kibana/bin/kibana plugin --install elasticsearch/marvel/${MARVEL_VERSION} && \
    /opt/kibana/bin/kibana plugin --install elastic/sense && \
    mv /opt/kibana/config/kibana.yml /opt/kibana/config/kibana.yml.orig

### VOLUME [""/data"", ""/logs""]

ADD ./kibana.yml.tmpl  /opt/kibana/config/kibana.yml.tmpl
ADD ./kibana-supervisor.conf /etc/supervisor/conf.d/kibana-supervisor.conf
ADD ./configure-and-start.sh /configure-and-start.sh

### # expose client port, peer port and supervisord port
EXPOSE 8000 15000

CMD /configure-and-start.sh
",samsara/samsara,docker-images/kibana/Dockerfile
2d448fc8d1eb8c4196e94548810a7319b4f19f8c,1392,"FROM ubuntu:trusty

RUN apt-get update && \
	apt-get install -yq iptables apt-transport-https ca-certificates

ENV DIND_COMMIT=b8bed8832b77a478360ae946a69dab5e922b194e
ADD https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind /usr/local/bin/dind
RUN chmod +x /usr/local/bin/dind
VOLUME /var/lib/docker

ENV DOCKER_VERSION=1.11.1-cs1 NGROK_VERSION=1.7 GPG_KEY_ID=A87A2270 GPG_KEY_PACKAGE_ID=A87A2270 REPO=https://repo.cloud.docker.com/ubuntu/ CERT_COMMON_NAME=*.node.dockerapp.io DOCKER_HOST=unix:///var/run/docker.sock DOCKER_HOST_LISTEN=tcp://0.0.0.0:2375 HOST=https://cloud.docker.com/

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys $GPG_KEY_PACKAGE_ID
RUN gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys $GPG_KEY_ID
RUN echo deb [arch=amd64] $REPO dockercloud main > /etc/apt/sources.list.d/dockercloud.list
RUN apt-get update -q && DEBIAN_FRONTEND=noninteractive apt-get install -y dockercloud-agent
ADD https://files.cloud.docker.com/packages/docker/docker-$DOCKER_VERSION.tgz /tmp/
ADD https://files.cloud.docker.com/packages/ngrok/ngrok-$NGROK_VERSION.tgz /tmp/
RUN mkdir -p /usr/lib/dockercloud/ && \
	tar zxf /tmp/docker-$DOCKER_VERSION.tgz -C /usr/bin/ --strip-components 1 && \
	tar zxf /tmp/ngrok-$NGROK_VERSION.tgz -C /usr/lib/dockercloud/ --strip-components 1
ADD run.sh /

EXPOSE 2375
ENTRYPOINT [""/usr/local/bin/dind"", ""/run.sh""]",docker/dockercloud-node,1.11.1-cs1/Dockerfile
0afd40dc2305b89ab3d41b8e0489959ad7991057,583,"FROM centos:6.4

RUN rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

## patch etc network to get past issue
RUN echo ""NETWORKING=yes"" > /etc/sysconfig/network

## Get around su/runuser issues
ADD ./runuser.pam     /etc/pam.d/runuser
ADD ./su.pam          /etc/pam.d/su

RUN yum install -y wget

## Include java 7
RUN yum install java-1.7.0-openjdk-devel -y
ENV JAVA_HOME /usr

RUN yum install -y which

## Setup SSH for local ssh
RUN yum install -y openssh-clients openssh-server
RUN mkdir -p /root/.ssh && chmod 700 /root/.ssh
ADD ssh /root/.ssh
",dcapwell/docker-files,base/Dockerfile
0fce7db5b60747fba6d560bc75c511e29764373f,248,"FROM golang:1.4.3
MAINTAINER vishnuk@google.com


RUN apt-get install -y git
RUN git clone https://github.com/kubernetes/heapster.git /go/src/k8s.io/heapster
RUN cd /go/src/k8s.io/heapster && make && mv heapster /heapster

ENTRYPOINT [""/heapster""]
",fabric8io/gofabric8,vendor/k8s.io/heapster/deploy/docker/canary/Dockerfile
41c3a4acc284a567c2cd1a631e1ce5308ca9d42c,1402,"# https://github.com/monitoringartist/zabbix-server-stress-test

## Dockerized compilation (build from remote URL or local PATH):
# docker build --rm=true -t local/zabbix-module-compilation https://github.com/monitoringartist/zabbix-server-stress-test.git#master:dockerfiles/centos/
# docker build --rm=true -t local/zabbix-module-compilation .
# docker run --rm -v /tmp:/tmp local/zabbix-module-compilation cp /root/zabbix/src/modules/zabbix_module_stress/zabbix_module_stress.so /tmp/zabbix_module_stress.so
# docker rmi -f local/zabbix-module-compilation
## use/copy file /tmp/zabbix_module_stress.so

# Define required CentOS version by using FROM tag. Avalaible: centos7/centos6/...
FROM centos:centos7

MAINTAINER ""Jan Garaj"" <info@monitoringartist.com>

# Define required Zabbix version (tag/<version>) or branch (branches/<version>), e.g. tags/2.4.5, or branches/2.4  
ENV ZABBIX_VERSION=branches/3.0

WORKDIR /root

RUN \
   yum -y install git subversion automake autoconf gcc make && \
   git clone https://github.com/monitoringartist/zabbix-server-stress-test && \
   mkdir ~/zabbix/ && \
   svn co svn://svn.zabbix.com/${ZABBIX_VERSION} ~/zabbix/ && \
   cd ~/zabbix/ && \
   ./bootstrap.sh && \
   ./configure --enable-agent && \
   cp -R ~/zabbix-server-stress-test/src/modules/zabbix_module_stress/ ~/zabbix/src/modules/ && \
   cd ~/zabbix/src/modules/zabbix_module_stress && \
   make
",monitoringartist/zabbix-server-stress-test,dockerfiles/centos/Dockerfile
55b81c54dda2dc2ea83575a93647a9ee63af1713,5151,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""server-jre""                                    && \
    export JAVA_UPDATE=""71""                                      && \
    export JAVA_BUILD=""15""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u71/server-jre/slim/Dockerfile
6ebc44c89087af8c32c7ef4e6902ffffc28fffce,70,"FROM docker

ADD ./ssh2docker /ssh2docker

ENTRYPOINT [""/ssh2docker""]
",moul/ssh2docker,contrib/docker/Dockerfile
1c23e34df843ff4a979c629bb0424382919e531a,242,"FROM golang:1.5.3
MAINTAINER Lars Gierth <larsg@systemli.org>

ADD . /go/src/github.com/whyrusleeping/multireq

RUN cd /go/src/github.com/whyrusleeping/multireq && go get -d && go install && rm -rf /go/src/github.com

ENTRYPOINT [""multireq""]
",ipfs/infrastructure,ipfs/multireq/Dockerfile
815f40a588731ce077041b4a9eacaef459a326f7,135,"FROM quay.io/eris/node

RUN npm --global install commonform-cli

# set user
USER $USER
WORKDIR $ERIS
VOLUME $ERIS
ENTRYPOINT commonform",eris-ltd/common,docker/commonform/Dockerfile
91c70b5e9cdacd70076e9588257ca54544a74c08,25,"FROM scratch
ADD . /code
",6si/shipwright,tests/integration/examples/multi-dockerfile/base/Dockerfile
345ad37575c08c43a8a4c7a102550daacc398100,1890,"# VERSION:		  0.1
# DESCRIPTION:	  Create chromium container with its dependencies
# AUTHOR:		  Jessica Frazelle <jess@docker.com>
# COMMENTS:
#	This file describes how to build a Chromium container with all
#	dependencies installed. It uses native X11 unix socket.
#	Tested on Debian Jessie
# USAGE:
#	# Download Chromium Dockerfile
#	wget http://raw.githubusercontent.com/jfrazelle/dockerfiles/master/chromium/Dockerfile
#
#	# Build chromium image
#	docker build -t chromium .
#
#	# Run stateful data-on-host chromium. For ephemeral, remove -v /data/chromium:/data
#	docker run -v /data/chromium:/data -v /tmp/.X11-unix:/tmp/.X11-unix \
#		-e DISPLAY=unix$DISPLAY chromium

#	# To run stateful dockerized data containers
#	docker run --volumes-from chromium-data -v /tmp/.X11-unix:/tmp/.X11-unix \
#		-e DISPLAY=unix$DISPLAY chromium

# Base docker image
FROM debian:jessie
MAINTAINER Jessica Frazelle <jess@docker.com>

ADD https://dl.google.com/linux/direct/google-talkplugin_current_amd64.deb /src/google-talkplugin_current_amd64.deb

# Install Chromium
RUN echo 'deb http://httpredir.debian.org/debian testing main' >> /etc/apt/sources.list && \
	apt-get update && apt-get install -y \
	chromium \
	chromium-l10n \
	fonts-liberation \
	fonts-roboto \
	hicolor-icon-theme \
	libcanberra-gtk-module \
	libexif-dev \
	libgl1-mesa-dri \
	libgl1-mesa-glx \
	libpango1.0-0 \
	libv4l-0 \
	-t testing \
	fonts-symbola \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/* \
	&& mkdir -p /etc/chromium.d/ \
	&& /bin/echo -e 'export GOOGLE_API_KEY=""AIzaSyCkfPOPZXDKNn8hhgu3JrA62wIgC93d44k""\nexport GOOGLE_DEFAULT_CLIENT_ID=""811574891467.apps.googleusercontent.com""\nexport GOOGLE_DEFAULT_CLIENT_SECRET=""kdloedMFGdGla2P1zacGjAQh""' > /etc/chromium.d/googleapikeys \
	&& dpkg -i '/src/google-talkplugin_current_amd64.deb'

ENTRYPOINT [ ""/usr/bin/chromium"" ]
CMD [ ""--user-data-dir=/data"" ]
",jfrazelle/dockerfiles,chromium/Dockerfile
d3f2fcb60f71d52f113d4ab4ccb9b19f64fa3493,14,"FROM postgres
",openspending/openspending,docker-config/db/Dockerfile
c575031bf43b6fba7fcc526423b8598ba2609c8b,556,"FROM nodesource/precise-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.11.1-1nodesource1~precise1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/precise/node/5.11.1/Dockerfile
c0b66c1454f6eaedbc304e53c45f4b517585cfa4,696,"FROM nfnty/arch-mini:latest
MAINTAINER nfnty <docker@nfnty.se>

ENV UGID='240000' UGNAME='powerdns'
RUN groupadd --gid ""${UGID}"" ""${UGNAME}"" && \
    useradd --uid ""${UGID}"" --gid ""${UGID}"" --shell /usr/bin/false ""${UGNAME}""

ENV VERSION_POWERDNS_RECURSOR='3.7.3-3'
RUN pacman --sync --noconfirm --refresh --sysupgrade && \
    pacman --sync --noconfirm ""powerdns-recursor=${VERSION_POWERDNS_RECURSOR}"" lua-luajson && \
    find /var/cache/pacman/pkg -mindepth 1 -delete && \
    setcap 'cap_net_bind_service=ep' /usr/bin/pdns_recursor && \
    install --directory --owner=""${UGNAME}"" --group=""${UGNAME}"" --mode=700 /run

USER ${UGNAME}
EXPOSE 53/tcp 53/udp
ENTRYPOINT [""/usr/bin/pdns_recursor""]
",nfnty/dockerfiles,images/arch-powerdns-recursor/latest/Dockerfile
230ceef9b7791cd978f6aa0a99411bdb8011e98c,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.5.31-1-x86_64.pkg.tar.xz /tmp/php-5.5.31-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.5.31-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.5.31/Dockerfile
a93c849a91d409685ba9250c227ad1103e38aebe,615,"FROM comcast/dawg-base
MAINTAINER trent_schmidt@cable.comcast.com

RUN mkdir /dawg-combo
WORKDIR /dawg-combo

ADD target/rpms rpms
RUN rpm -Uvh rpms/*
ENV DAWG_DB=dawg-db \
    DAWG_HOUSE=dawg-combo:8080 \
    DAWG_POUND=dawg-combo:8080 \
    DAWG_SHOW=dawg-combo:8080
RUN sed -i ""s|dawg-db.test.domain|${DAWG_DB}|g"" /etc/dawg/dawg.ini
RUN sed -i ""s|http://localhost:8080/dawg-house|${DAWG_HOUSE}/dawg-house|g"" /etc/dawg/dawg.ini
RUN sed -i ""s|http://localhost:8080/dawg-show|${DAWG_SHOW}/dawg-show|g"" /etc/dawg/dawg.ini
RUN sed -i ""s|http://localhost:8080/dawg-pound|${DAWG_POUND}/dawg-pound|g"" /etc/dawg/dawg.ini
",Comcast/dawg,docker/dawg-combo/Dockerfile
2762383dc95f990d27bdd33810fc0f322216055e,1536,"# ------------------------------------------------------------------------
#
# Copyright WSO2, Inc. (http://wso2.com)
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
#
# ------------------------------------------------------------------------

FROM java:8-jre
MAINTAINER architecture@wso2.org

WORKDIR /opt

# --------------------------------
# Copy scripts, packages & plugins
# --------------------------------
COPY packages/petstore-security.jar /opt/
COPY packages/client-truststore.jks /opt/
COPY packages/data-agent-conf.xml /opt/

# --------------------------------
# HTTP Monitoring and metrics specific config
# --------------------------------
ENV METRICS_REPORTING_DAS_DATAAGENTCONFIGPATH data-agent-conf.xml
ENV METRICS_REPORTING_DAS_RECEIVERURL ""tcp://172.17.8.1:7612""
ENV HTTP_MONITORING_DAS_DATAAGENTCONFIGPATH data-agent-conf.xml
ENV HTTP_MONITORING_DAS_RECEIVERURL ""tcp://172.17.8.1:7612""

# ----------------------
# Expose container ports
# ----------------------
EXPOSE 8080

ENTRYPOINT java -jar /opt/petstore-security.jar
",wso2/msf4j,samples/petstore/dev/kubernetes-vagrant-coreos-cluster/docker/security/docker/Dockerfile
c4b6368eff1f19eb7ad10c94bdab4336021bc7bf,1095,"FROM thetallgrassnet/alpine-java:8

RUN apk add --quiet --update bash curl \
    && curl --fail --silent --show-error --location --output lsof.apk http://dl-3.alpinelinux.org/alpine/v3.0/main/x86_64/lsof-4.87-r0.apk \
    && apk add --quiet --allow-untrusted lsof.apk \
    && rm lsof.apk \
    && rm -rf /var/cache/apk/*

ENV NEO4J_VERSION 2.3.2
ENV NEO4J_EDITION community
ENV NEO4J_DOWNLOAD_SHA256 37e24d95c914c54d5cbbe99473d4beef89da78adb2db04eb87258a489225932a
ENV NEO4J_DOWNLOAD_ROOT http://dist.neo4j.org
ENV NEO4J_TARBALL neo4j-$NEO4J_EDITION-$NEO4J_VERSION-unix.tar.gz
ENV NEO4J_URI $NEO4J_DOWNLOAD_ROOT/$NEO4J_TARBALL



RUN curl --fail --silent --show-error --location --output neo4j.tar.gz $NEO4J_URI \
    && echo ""$NEO4J_DOWNLOAD_SHA256  neo4j.tar.gz"" | sha256sum -c -s - \
    && tar -xzf neo4j.tar.gz -C /var/lib \
    && mv /var/lib/neo4j-* /var/lib/neo4j \
    && rm neo4j.tar.gz

WORKDIR /var/lib/neo4j

RUN mv data /data \
    && ln -s /data

VOLUME /data

COPY docker-entrypoint.sh /docker-entrypoint.sh

EXPOSE 7474 7473

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""neo4j""]
",thetallgrassnet/alpine-neo4j,2.3.2/Dockerfile
bb99a44b7ac1e18a8d4e6e2a2223165a92fc7fbf,366,"FROM andreptb/oracle-java:7

ENV MAVEN_VERSION 3.3.9

RUN curl -fsSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven

CMD [""mvn""]
",andreptb/Dockerfiles,maven/jdk-7/Dockerfile
0e68e377368fec5ed4e681e8ca353d1ba5b94e1e,24,"FROM python:3.4-onbuild
",usgo/online-ratings,web/Dockerfile
4e3e8a4809b58fcd30f8c5414161efcd9fbca212,58,"FROM node
RUN npm install -g doctoc
ENTRYPOINT [""doctoc""]
",jpetazzo/pipework,doctoc/Dockerfile
59ae4abca82c9abd444856c08753d02244d18179,191,"FROM b.gcr.io/tensorflow/tensorflow:latest
MAINTAINER Vincent Vanhoucke <vanhoucke@google.com>
RUN pip install scikit-learn
ADD *.ipynb /notebooks/
WORKDIR /notebooks
CMD [""/run_jupyter.sh""]
",napsternxg/Udacity-Deep-Learning,udacity/Dockerfile
0e466ed7bac4f84f1c1f879c1f7a7d5be3481e78,551,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.37-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/0.10.37/Dockerfile
2b641cbd5b5b3de51590d8f4586fec90d2264146,534,"FROM opensuse:13.2
MAINTAINER Jens Reimann <jens.reimann@ibh-systems.com>

# import key

RUN zypper --non-interactive install wget
RUN wget http://download.eclipse.org/package-drone/PD-GPG-KEY
RUN rpm --import PD-GPG-KEY

# add repo

RUN zypper ar -f -n PackageDrone -g http://download.eclipse.org/package-drone/milestone/0.13/opensuse13 pdrone

# install

RUN zypper --non-interactive install org.eclipse.packagedrone.server

# Package drone is running on port 8080

EXPOSE 8080

CMD [""/usr/lib/package-drone-server/instance/server""]",eclipse/packagedrone,deploy/promote/test/opensuse13/Dockerfile
44c12671ffdf365abea98858ba0e9a737a4f992f,640,"FROM ubuntu:14.04
MAINTAINER ss <sarjeetsingh@maprtech.com>
RUN echo ""deb http://apt.qa.lab/myriad mapr optional"" >> /etc/apt/sources.list
RUN echo ""deb http://apt.qa.lab/opensource binary/"" >> /etc/apt/sources.list
RUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF
RUN echo ""deb http://repos.mesosphere.io/ubuntu trusty main"" | sudo tee /etc/apt/sources.list.d/mesosphere.list
RUN apt-get install wget -y
RUN wget http://package.mapr.com/releases/pub/maprgpg.key
RUN apt-key add maprgpg.key
RUN sudo apt-get -y update
RUN apt-get install openjdk-7-jdk -y
RUN apt-get install mapr-cldb mapr-fileserver mapr-zookeeper -y
",coolhacks/docker-hacks,examples/OnDemandYARNClusters/rm_docker_ubuntu/Dockerfile
c9b474cd3697a3266f6620f37db075b84a7574fe,357,"FROM php:7-fpm
# Install modules
RUN apt-get update && apt-get install -y \
	libmcrypt-dev  \
	libicu-dev \
	mysql-client \
	&& docker-php-ext-install pdo_mysql \
	&& docker-php-ext-install iconv \
	&& docker-php-ext-install mcrypt \
	&& docker-php-ext-install intl \
	&& docker-php-ext-install opcache \
	&& docker-php-ext-install mbstring 
CMD [""php-fpm""]",devigner/docker-compose-php,php-fpm-7/Dockerfile
d8f0e00a99d3823abf3954e1a99b4b23bc94c724,891,"# VERSION:		  0.1
# DESCRIPTION:	  Run text-based game dunnet in a container
# AUTHOR:		  Jessica Frazelle <jess@docker.com>
# COMMENTS:
#	This file describes how to build dunnet in a container with all
#	dependencies installed.
#	Tested on Debian Jessie
# USAGE:
#	# Download dunnet Dockerfile
#	wget http://raw.githubusercontent.com/jfrazelle/dockerfiles/master/dunnet/Dockerfile
#
#	# Build dunnet image
#	docker build -t dunnet .
#
#	docker run -it dunnet
#

# Base docker image
FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

# Install emacs:
# Note: Eamcs is only in testing repo -> http://pkgs.alpinelinux.org/packages?package=emacs&repo=all&arch=x86_64
RUN apk update && apk add \
	emacs \
	--update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ \
	&& rm -rf /var/cache/apk/*

# Autorun dunnet
CMD [""/usr/bin/emacs"", ""-batch"", ""-l"", ""dunnet""]
",coolhacks/docker-hacks,dockerfiles/dunnet/Dockerfile
a8bdb916fa703382c3bb2debbfdbc70073d51c45,611,"FROM ubuntu:14.04

RUN apt-get update && apt-get install -y nginx

RUN rm /etc/nginx/sites-enabled/default
RUN ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/mattermost

ADD mattermost /etc/nginx/sites-available/
ADD docker-entry.sh /

RUN mkdir /cert
ADD cert/cert.pem /cert/
ADD cert/private/key-no-password.pem /cert/

RUN chmod +x /docker-entry.sh

# Define mountable directories.
VOLUME [""/etc/nginx/sites-enabled"", ""/etc/nginx/certs"", ""/etc/nginx/conf.d"", ""/var/log/nginx"", ""/var/www/html""]

# Define working directory.
WORKDIR /etc/nginx

ENTRYPOINT /docker-entry.sh

EXPOSE 80 443
",npcode/mattermost-docker,web/Dockerfile
f5996fd4af0521ac094bd7de61dd45683857df81,1105,"FROM haskell:latest
MAINTAINER Petter Rasmussen ""petter.rasmussen@gmail.com""

# Add user
RUN groupadd glot
RUN useradd -m -d /home/glot -g glot -s /bin/bash glot

# Install libs
RUN cabal update && \
    cabal install --global \
        async \
        attoparsec \
        case-insensitive \
        cgi \
        exceptions \
        fgl \
        hashable \
        haskell-src \
        html \
        HTTP \
        HUnit \
        mtl \
        multipart \
        network \
        network-uri \
        ObjectName \
        old-locale \
        old-time \
        parallel \
        parsec \
        primitive \
        QuickCheck \
        random \
        regex-base \
        regex-compat \
        regex-posix \
        scientific \
        split \
        StateVar \
        stm \
        syb \
        text \
        tf-random \
        transformers \
        transformers-compat \
        unordered-containers \
        vector \
        xhtml \
        zlib

# Copy files
COPY files/runner /home/glot/

USER glot
WORKDIR /home/glot/
CMD [""/home/glot/runner""]
ENTRYPOINT ""/home/glot/runner""
",prasmussen/glot-containers,haskell/latest/Dockerfile
335463043c4e79606005653b97ae8ee7e674ae0b,555,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_0.12/pool/main/n/nodejs/nodejs_0.12.8-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/0.12.8/Dockerfile
0f19638bcca6cc7ee8f97c1e69f149a94ea769c2,551,"FROM nodesource/vivid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.2.3-1nodesource1~vivid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/vivid/node/4.2.3/Dockerfile
22b3dd0717db481d0677de2dab865c05696ed4e4,1317,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ORC compile for CentOS 7
#

FROM centos:7
MAINTAINER Owen O'Malley <owen@hortonworks.com>

RUN yum check-update || true
RUN yum install -y \
  cmake \
  curl-devel \
  expat-devel \
  gcc \
  gcc-c++ \
  gettext-devel \
  git \
  java-1.7.0-openjdk \
  java-1.7.0-openjdk-devel \
  make \
  maven \
  openssl-devel \
  which \
  zlib-devel

ENV TZ=America/Los_Angeles
WORKDIR /root

CMD git clone https://github.com/apache/orc.git -b master && \
  mkdir orc/build && \
  cd orc/build && \
  cmake .. && \ 
  make package test-out
",apache/orc,docker/centos7/Dockerfile
9011bb7f1095f38a92cf41c7d50d5a1b32666d3f,1354,"FROM ruby:slim

MAINTAINER Scott Hansen <firecat4153@gmail.com>

ENV DEBIAN_FRONTEND noninteractive
ENV STRINGER_USER stringer
ENV UID 22000

COPY database.yml run.sh schedule.rb /

RUN apt-get -y update && \
    apt-get -qy install \
        git \
        libcurl4-openssl-dev \
        libpq-dev \
        libsqlite3-dev \
        build-essential && \
    gem install -N foreman rufus-scheduler && \
    useradd -g users --uid $UID --create-home $STRINGER_USER && \
    git clone https://github.com/swanson/stringer.git /home/$STRINGER_USER/stringer/ && \
    mv database.yml /home/$STRINGER_USER/stringer/config/ && \
    mv run.sh schedule.rb /home/$STRINGER_USER/stringer/ && \
    chown -R $STRINGER_USER:users /home/$STRINGER_USER /usr/local/bundle

USER stringer
WORKDIR /home/$STRINGER_USER/stringer
ENV RACK_ENV=production

# Sets the production database to sqlite and installs requirements
RUN mkdir data && \
    sed -i 's/^  gem ""pg"".*$/  gem ""sqlite3"", ""~> 1.3"", "">= 1.3.8""/' Gemfile && \
    sed -i '/^group :development do/,/^end/d' Gemfile && \
    sed -i '/pg/d' Gemfile.lock && \
    sed -i ""s/.*/$RUBY_VERSION/"" .ruby-version && \
    bundle install --deployment && \
    sed -i 's/^console/#console/' Procfile

CMD [""./run.sh""]

# Cleanup
USER root
RUN apt-get autoremove -qy build-essential git && \
    rm -rf /var/lib/apt/lists/*
",firecat53/dockerfiles,stringer/Dockerfile
f9fbbe62b832d35e15cc93dd11dc50242253d012,4574,"
##################################################
#                                                #
# DO NOT EDIT THIS FILE MANUALLY                 #
# AUTOMATICALLY CREATED WITH docker-builder.sh   #
#                                                #
##################################################
  

FROM whatwedo/base:latest
RUN apt-get update -y && \
apt-get install -y apache2
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid
ENV APACHE_RUN_DIR /var/run/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
RUN mkdir -p $APACHE_RUN_DIR $APACHE_LOCK_DIR $APACHE_LOG_DIR && \
rm -rf /var/www/html/* && \
chown -R www-data /var/www/ && \
chmod -R 755 /var/www/ && \
sed -i '/<Directory \/var\/www\/>/,/<\/Directory>/ s/AllowOverride None/AllowOverride all/' /etc/apache2/apache2.conf && \
echo ""#\0041/bin/bash"" > /bin/start-apache && \
echo ""rm -rf /run/httpd/*"" >> /bin/start-apache && \
echo ""apache2 -D FOREGROUND"" >> /bin/start-apache && \
chmod 755 /bin/start-apache && \
touch /var/log/apache2/access.log && chown www-data /var/log/apache2/access.log && \
touch /var/log/apache2/error.log && chown www-data /var/log/apache2/error.log
COPY files/supervisord/apache.conf /etc/supervisor/conf.d/apache.conf
RUN add-apt-repository -y ppa:ondrej/php && \
apt-get update && \
apt-get install php7.0 php7.0-cli php7.0-common php7.0-cgi php7.0-curl php7.0-imap php7.0-pgsql php7.0-sqlite3 php7.0-mysql php7.0-fpm php7.0-intl php7.0-gd php7.0-json php7.0-ldap php-memcached php-memcache php-imagick php7.0-xml php7.0-mbstring -y && \
sed -i s/^upload_max_filesize.*/upload_max_filesize\ =\ 32M/g /etc/php/7.0/fpm/php.ini && \
sed -i s/^upload_max_filesize.*/upload_max_filesize\ =\ 32M/g /etc/php/7.0/cgi/php.ini && \
sed -i s/^upload_max_filesize.*/upload_max_filesize\ =\ 32M/g /etc/php/7.0/cli/php.ini && \
sed -i s/^post_max_size.*/post_max_size\ =\ 32M/g /etc/php/7.0/fpm/php.ini && \
sed -i s/^post_max_size.*/post_max_size\ =\ 32M/g /etc/php/7.0/cgi/php.ini && \
sed -i s/^post_max_size.*/post_max_size\ =\ 32M/g /etc/php/7.0/cli/php.ini && \
echo ""php_admin_value[upload_max_filesize] = 32M"" >> /etc/php/7.0/fpm/pool.d/www.conf && \
echo ""php_admin_value[post_max_size] = 32M"" >> /etc/php/7.0/fpm/pool.d/www.conf && \
echo ""php_flag[display_errors] = off"" >> /etc/php/7.0/fpm/pool.d/www.conf && \
echo ""php_admin_flag[log_errors] = on"" >> /etc/php/7.0/fpm/pool.d/www.conf && \
echo ""php_flag[expose_php] = Off"" >> /etc/php/7.0/fpm/pool.d/www.conf && \
mkdir -p /run/php && \
apt-get install -y libapache2-mod-php7.0 && \
a2enmod rewrite && \
apt-get install -qq zziplib-bin smbclient php7.0-zip libreoffice && \
{ \
echo 'opcache.enable=1'; \
echo 'opcache.memory_consumption=128'; \
echo 'opcache.interned_strings_buffer=8'; \
echo 'opcache.max_accelerated_files=4000'; \
echo 'opcache.revalidate_freq=60'; \
echo 'opcache.fast_shutdown=1'; \
echo 'opcache.enable_cli=1'; \
} > /etc/php/7.0/apache2/conf.d/20-opcache-recommended.ini
RUN echo ""extension=zip.so;"" > /etc/php/7.0/apache2/conf.d/20-zip.ini && \
a2enmod rewrite
ENV OWNCLOUD_VERSION 9.0.1
RUN curl -fsSL -o owncloud.tar.bz2 \
""https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2"" \
&& curl -fsSL -o owncloud.tar.bz2.asc \
""https://download.owncloud.org/community/owncloud-${OWNCLOUD_VERSION}.tar.bz2.asc"" \
&& export GNUPGHOME=""$(mktemp -d)"" \
&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys E3036906AD9F30807351FAC32D5D5E97F6978A26 \
&& gpg --batch --verify owncloud.tar.bz2.asc owncloud.tar.bz2 \
&& rm -r ""$GNUPGHOME"" owncloud.tar.bz2.asc \
&& tar -xjf owncloud.tar.bz2 -C /usr/src/ \
&& rm owncloud.tar.bz2
RUN mkdir -p /var/www/html && \
echo 'if [ ! -e '/var/www/html/version.php' ]; then' >> /bin/everyboot && \
echo '    cd /var/www/html' >> /bin/everyboot && \
echo '    tar cf - --one-file-system -C /usr/src/owncloud . | tar xf -' >> /bin/everyboot && \
echo '    chown -R www-data /var/www' >> /bin/everyboot && \
echo 'fi' >> /bin/everyboot && \
echo 'echo ""Installing ownCloud cronjob""' >> /bin/firstboot && \
echo 'crontab -u www-data -l > /tmp/cron' >> /bin/firstboot && \
echo 'echo ""*/15  *  *  *  * php -f /var/www/owncloud/cron.php"" >> /tmp/cron' >> /bin/firstboot && \
echo 'crontab -u www-data /tmp/cron' >> /bin/firstboot && \
echo 'rm /tmp/cron' >> /bin/firstboot && \
apt-get autoremove -y && \
apt-get clean -y && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
EXPOSE 80
EXPOSE 443
VOLUME /var/www/html
LABEL ch.whatwedo.image.base=""whatwedo/owncloud""
",whatwedo/docker-base-images,dist/owncloud/Dockerfile
c1ffafbcc153a2e40260db174029483373dd2792,287,"FROM     debian:wheezy

# Install
RUN apt-get -q update && \
    apt-get -q upgrade -y && \
    apt-get -q install -y git python python-cheetah && \
    git clone https://github.com/midgetspy/Sick-Beard.git /root/sickbeard


# sabnzbd
EXPOSE 8081
CMD python /root/sickbeard/SickBeard.py
",hybris42/dockerfiles,sickbeard/Dockerfile
24d9c0b0d72051972cbcd757a561d1acddaef83b,545,"FROM nodesource/sid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.44-1nodesource1~sid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/sid/node/0.10.44/Dockerfile
fc7a7fa35962b29bf7f72a30126ab61baa27c46d,99,"FROM iron/base

RUN apk update && apk upgrade \
  && apk add python \
  && rm -rf /var/cache/apk/*
",iron-io/dockers,python/python2/Dockerfile
ac8dadcbd3a7192e8fcd2e096f1686601b6ee245,78,"FROM alpine:3.2
ADD template-api /template-api
ENTRYPOINT [ ""/template-api"" ]
",micro/micro,examples/template/api/Dockerfile
86399657a537138357d00dc37567202166a1d500,69,"FROM node:4

COPY . /app
WORKDIR /app
RUN npm install

CMD npm start
",dokku/dokku,tests/apps/dockerfile-noexpose/Dockerfile
bdae784e9d7612aca879d196ff1cad158ca5907e,250,"# curl in a container
#
# docker run --rm -it \
# 	jess/curl -sSL https://check.torproject.org/api/ip
#
FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apk update && apk add \
	curl \
	&& rm -rf /var/cache/apk/*

CMD [ ""curl"" ]
",coolhacks/docker-hacks,dockerfiles/curl/Dockerfile
28af8ad703a678d66281e1d8572861c435768fbd,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.5.17-1-x86_64.pkg.tar.xz /tmp/php-5.5.17-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.5.17-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.5.17/Dockerfile
86f654b18cc6a2a9d49f26a4f249f43f36ca0a0d,544,"FROM mhart/alpine-node:6

# Add gcc and git support for native dependencies.
RUN apk --no-cache --virtual build-dependencies add g++ gcc git make python

# Add a user to avoid running node as `root`.
RUN adduser -S node

# Change the working directory.
WORKDIR /home/node/app

# Workaround because `WORKDIR` always runs as root.
RUN chown -R node /home/node

# Change the user to avoid running as `root`.
USER node

# Copy package.json and npm-shrinkwrap.json if they exist.
ONBUILD COPY *.json ./

# Setup node entrypoint.
ENTRYPOINT [""node""]
",seegno/docker-node,6/slim/Dockerfile
30237ba034083d93479c348032352ab684031452,1305,"FROM debian
# FROM debian:jessie ? 

# install deps
RUN apt-get update
RUN apt-get -y install gcc flex librrd-dev make bison autoconf nginx

ADD nfdump-1.6.12.tar.gz /tmp/
ADD nfsen-1.3.6p1.tar.gz /tmp/

# install nfdump
WORKDIR /tmp/nfdump-1.6.12
RUN ./configure --enable-nfprofile --enable-sflow
RUN make
RUN make install

# configure nginx

# install nfsen
RUN apt-get -y install libsocket6-perl php5-fpm libmailtools-perl rrdtool librrds-perl rsyslog
# Syslog is needed for NfSen or install.pl will fail
# But we need some special config stuff, http://www.projectatomic.io/blog/2014/09/running-syslog-within-a-docker-container/
RUN echo ""\$OmitLocalLogging off"" >> /etc/rsyslog.conf
RUN service rsyslog restart
WORKDIR /tmp/nfsen-1.3.6p1

RUN adduser netflow --no-create-home --disabled-password --disabled-login
RUN usermod -G www-data -a netflow
# replace $WWWUSER and $WWWGROUP to be ""www-data"" and create the new etc/nfsen.conf file
RUN sed -e 's/\(\$WWW\(USER\|GROUP\)\)\s*= ""www""/\1 = ""www-data""/g' etc/nfsen-dist.conf > etc/nfsen.conf

RUN mkdir -p /data/nfsen
RUN ./install.pl etc/nfsen.conf


# git clone
RUN git clone https://github.com/SSHCure/SSHCure.git /sshcure

# symlink front-end, back-end

# download MaxMind DB

# add database
#ADD SSHCure.sqlite3 /data/nfsen/plugins/SSHCure/data/
",SSHCure/SSHCure,docker/base/Dockerfile
7b9398cc15e89577a36dc167670e7c0e0b333f1c,384,"FROM alpine 
MAINTAINER Suker200 <tan.luong1989@gmail.com>
RUN apk update
RUN apk add pcre pcre-dev zlib zlib-dev bash iproute2 ca-certificates 
RUN adduser -D -H -u 10000 -s /sbin/nologin www
RUN mkdir -p /build/nginx/
COPY nginx/ /build/nginx/
COPY config.cnf /
COPY init.sh /
COPY nginx.conf /
COPY index.html /
COPY minimonitor /
ENTRYPOINT [""/bin/sh""]
CMD [""/init.sh""]
EXPOSE 80
",coolhacks/docker-hacks,examples/dockerhcm/Dockerfile
7a93c3147eacbb94ddee268af10fa1358b1b1d59,1521,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/bootstrap:ubuntu-16.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM ubuntu:16.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

# Ensure UTF-8
ENV LANG       en_US.UTF-8
ENV LC_ALL     en_US.UTF-8

ADD baselayout.tar /

# Init bootstrap (and install ansible)
RUN export DEBIAN_FRONTEND=noninteractive \
    && set -x \
    # Fix root terminal
    && echo ""export TERM=xterm"" >> /root/.bashrc \
    # Generate base locale
    && locale-gen en_US.UTF-8 \
    # System update
    && /usr/local/bin/apt-upgrade \
    # Install base stuff
    && /usr/local/bin/apt-install \
        software-properties-common \
        lsb-release \
        ca-certificates \
        apt-transport-https \
    && apt-add-repository multiverse \
    # Install ansible
    && /usr/local/bin/apt-install \
        python-minimal \
        python-setuptools \
        python-pip \
        python-paramiko \
        python-jinja2 \
        python-cffi \
        python-dev \
        libffi-dev \
       	libssl-dev \
        build-essential \
    && pip install --upgrade pip \
    && hash -r \
    && pip install ansible \
    && chmod 750 /usr/local/bin/ansible* \
    # Cleanup
    && apt-get purge -y -f --force-yes \
        python-dev \
        build-essential \
        libssl-dev \
        libffi-dev \
    && apt-get autoremove -y -f \
    && apt-get clean -y
",webdevops/Dockerfile,docker/bootstrap/ubuntu-16.04/Dockerfile
740aa39ef7b01f40839ea7b540c98fd69465c426,407,"# Base K3 image
FROM damsl/k3-base:latest

### Build K3 toolchain.
WORKDIR /k3/K3
RUN git pull && git checkout development

RUN cabal sandbox init && \
    cabal install --only-dependencies --ghc-options=""-O2"" --disable-documentation -j
 
RUN cabal configure --ghc-options=""-O2"" && \
    cabal build -j

### Build K3-Mosaic
WORKDIR /k3/K3-Mosaic
RUN ./build_opt.sh && \
    ./build_utils.sh

WORKDIR /k3/K3
",DaMSL/K3,tools/scripts/docker/vanilla/Dockerfile
434620ea7fd614b2e54d9a6aca754bedfa59254f,287,"# Standard nginx container

FROM nginx:1.8.1

#
# Add your custom stuff here, you will want to make sure
# you switch from `image` to `build` mode in the relevant
# .yml compose file.
#
# For more information on dockerfiles see:
#
#   https://docs.docker.com/engine/reference/builder/
#
",kalabox/kalabox-app-pantheon,app/dockerfiles/nginx/Dockerfile
9ff0bbda8f207645df8b665ea10d891623f10d81,1242,"FROM alpine:latest

MAINTAINER Julien Kernec'h <jkernech@dial-once.com>

# Update base packages
RUN apk update && apk upgrade

# Install base packages and ruby gem dependencies
RUN apk add --no-cache ca-certificates wget git go godep nodejs

# Set go env
ENV GOROOT /usr/lib/go
ENV GOPATH /gopath
ENV GOBIN /gopath/bin
ENV PATH $PATH:$GOROOT/bin:$GOPATH/bin

# Checkout the source
RUN go get github.com/sensu/uchiwa

# Set the workdir
WORKDIR $GOPATH/src/github.com/sensu/uchiwa

# Install npm/bower dependencies
RUN npm install bower -g && bower --allow-root install

RUN ls $GOPATH/src/github.com/sensu/uchiwa/public/bower_components/

# Remove bower and nodejs
RUN npm uninstall bower -g && apk del git nodejs

ENV HTTP_USER=hiro HTTP_PASS=nakamura SENSU_NAME=""Sensu"" UCHIWA_HOST=""0.0.0.0"" UCHIWA_PORT=80 UCHIWA_REFRESH=5

EXPOSE 80

RUN wget https://github.com/jwilder/dockerize/releases/download/v0.0.4/dockerize-linux-amd64-v0.0.4.tar.gz \
  && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.0.4.tar.gz \
	&& rm dockerize-linux-amd64-v0.0.4.tar.gz \
	&& mkdir /etc/uchiwa

COPY config.tmpl /etc/uchiwa/

CMD dockerize -template /etc/uchiwa/config.tmpl:/etc/uchiwa/config.json \
  godep go run uchiwa.go -c /etc/uchiwa/config.json
",dial-once/sensu-stack,uchiwa/Dockerfile
d34d11ca0c63d6f303ef296daf669bbf70035f28,2214,"FROM tatsushid/tinycore:7.1-x86_64

# Instructions are run with 'tc' user

RUN tce-load -wic gnupg curl \
    && rm -rf /tmp/tce/optional/*

# gpg keys listed at https://github.com/nodejs/node
RUN gpg2 --keyserver pool.sks-keyservers.net --recv-keys \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    B9AE9905FFD7803F25714661B63B535A4C206CA9

ENV NPM_CONFIG_LOGLEVEL info
ENV NODE_VERSION 6.2.2

RUN tce-load -wic coreutils \
        binutils \
        file \
    && cd /tmp \
    && curl -SLO ""http://nodejs.org/dist/v$NODE_VERSION/node-v${NODE_VERSION}-linux-x64.tar.gz"" \
    && curl -SLO ""http://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg2 --verify SHASUMS256.txt.asc \
    && grep "" node-v${NODE_VERSION}-linux-x64.tar.gz"" SHASUMS256.txt.asc | sha256sum -c - \
    && tar -xzf ""node-v${NODE_VERSION}-linux-x64.tar.gz"" \
    && rm -f ""node-v${NODE_VERSION}-linux-x64.tar.gz"" SHASUMS256.txt.asc \
    && cd ""/tmp/node-v${NODE_VERSION}-linux-x64"" \
    && for F in `find . | xargs file | grep ""executable"" | grep ELF | grep ""not stripped"" | cut -f 1 -d :`; do \
            [ -f $F ] && strip --strip-unneeded $F; \
        done \
    && sudo cp -R . /usr/local \
    && cd / \
    && sudo ln -s /lib /lib64 \
    && rm -rf ""/tmp/node-v${NODE_VERSION}-linux-x64"" \
    && cd /tmp/tce/optional \
    && for PKG in acl.tcz \
                libcap.tcz \
                coreutils.tcz \
                binutils.tcz \
                file.tcz; do \
            echo ""Removing $PKG files""; \
            for F in `unsquashfs -l $PKG | grep squashfs-root | sed -e 's/squashfs-root//'`; do \
                [ -f $F -o -L $F ] && sudo rm -f $F; \
            done; \
            INSTALLED=$(echo -n $PKG | sed -e s/.tcz//); \
            sudo rm -f /usr/local/tce.installed/$INSTALLED; \
        done \
    && rm -rf /tmp/tce/optional/*

# Instructions after here are run with 'root' user
USER root

CMD [""node""]
",tatsushid/docker-tinycore-node,6.2/Dockerfile
3816c24c36cbadb708ad1c23b0af398d9967a299,1592,"# Dockerfile for building Ansible image for Ubuntu 12.04 (presice), with as few additional software as possible.
#
# @see https://launchpad.net/~ansible/+archive/ubuntu/ansible
#
# Version  1.0
#


# pull base image
FROM ubuntu:12.04

MAINTAINER William Yeh <william.pjyeh@gmail.com>


RUN echo ""===> Adding Ansible's PPA...""  && \
    echo ""deb http://ppa.launchpad.net/ansible/ansible/ubuntu precise main"" | tee /etc/apt/sources.list.d/ansible.list           && \
    echo ""deb-src http://ppa.launchpad.net/ansible/ansible/ubuntu precise main"" | tee -a /etc/apt/sources.list.d/ansible.list    && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7BB9C367    && \
    DEBIAN_FRONTEND=noninteractive  apt-get update  && \
    \
    \
    echo ""===> Installing Ansible (and sudo)...""  && \
    apt-get install -y ansible sudo && \
    \
    \
    echo ""===> Removing Ansible PPA...""  && \
    rm -rf /var/lib/apt/lists/*  /etc/apt/sources.list.d/ansible.list  && \
    \
    \
    echo ""===> Adding hosts for convenience...""  && \
    echo 'localhost' > /etc/ansible/hosts


COPY ansible-playbook-wrapper /usr/local/bin/

ONBUILD  RUN  DEBIAN_FRONTEND=noninteractive  apt-get update   && \
              echo ""===> Updating TLS certificates...""         && \
              apt-get install -y openssl ca-certificates

ONBUILD  WORKDIR  /tmp
ONBUILD  COPY  .  /tmp
ONBUILD  RUN  \
              echo ""===> Diagnosis: host information...""  && \
              ansible -c local -m setup all



# default command: display Ansible version
CMD [ ""ansible-playbook"", ""--version"" ]
",William-Yeh/docker-ansible,ubuntu12.04-onbuild/Dockerfile
b83fe3ec42c171d0711827bcf961bfe339b093ff,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.5.1-1-x86_64.pkg.tar.xz /tmp/php-5.5.1-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.5.1-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.5.1/Dockerfile
dd1d8e895f9ea94ffeb097676ea41af558c670f7,544,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node/pool/main/n/nodejs/nodejs_0.10.38-1chl1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/0.10.38/Dockerfile
16bc7931a03b5e1921ffdc5e243d0c8fa6a029f0,386,"# brunoric/docker-hhvm:tag
FROM brunoric/hhvm:git
MAINTAINER brunoric <brunoric@gmail.com>

ENV CORE_NUMBER 2

# Building HHVM
RUN cmake -DMYSQL_UNIX_SOCK_ADDR=/var/run/mysqld/mysqld.sock .
RUN make -j ${CORE_NUMBER}
RUN make install

# Removing the pulled repository
WORKDIR /
RUN rm -rf hhvm-repo

# Exposing HHVM-FastCGI port
EXPOSE 9000

# Default command
CMD [""/scripts/start.sh""]
",brunoric/docker-hhvm,tag/Dockerfile
943ff4f4017accdb5d75b2161fbd9a55e3b04ece,1157,"# Copyright 2016 Google, Inc
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ruby:2.3

WORKDIR /app

COPY Gemfile Gemfile.lock ./
RUN echo 'gem ""sqlite3""' >> Gemfile
RUN echo 'gem ""therubyracer""' >> Gemfile
RUN bundle install --without development test

COPY . ./
RUN echo 'gem ""sqlite3""' >> Gemfile
RUN echo 'gem ""therubyracer""' >> Gemfile

COPY database.yml ./config/
RUN rake db:schema:load

RUN echo ""Lobsters::Application.config.secret_key_base = '$(rake secret)'"" > config/initializers/secret_token.rb

COPY production.rb ./config/initializers/
RUN rake db:seed

EXPOSE 3000
ENV RAILS_ENV=development
CMD [""/usr/local/bundle/bin/rails"", ""server""]
",GoogleCloudPlatform/kubernetes-workshops,core-concepts/lobsters-2.0/Dockerfile
f81815a78e092b6c8e4d456c84f743b7c2e15999,545,"FROM dreamcat4/tvheadend:stable
MAINTAINER dreamcat4 <dreamcat4@gmail.com>

# Install debugging dependancies
RUN apt-get update -qq && apt-get install -qqy tvheadend-dbg corekeeper gdb && $_apt_clean

# Debug script
ADD debug.sh /debug.sh
RUN chmod +x /debug.sh

# Stacktrace script
ADD stacktrace /usr/sbin/stacktrace
RUN chmod +x /usr/sbin/stacktrace

# Debugging '/crash' volume to save core dump etc.
VOLUME /crash
ENTRYPOINT [""/init"",""/debug.sh"",""-u"",""hts"",""-g"",""hts"",""-c"",""/config"", \
""--fork"",""--dump"",""--logfile"",""/crash/tvheadend.log""]
",dreamcat4/docker-images,tvh/debug/stable/Dockerfile
cd768c5f86e67280ce83e9cb868728ad0a6a5d28,938,"# This dockerfile utilizes components licensed by their respective owners/authors.
# Prior to utilizing this file or resulting images please review the respective licenses at: http://www.mysql.com/about/legal/licensing/oem/

FROM windowsservercore

LABEL Description=""MySql"" Vendor=""Oracle"" Version=""5.6.29""

RUN powershell -Command \
	$ErrorActionPreference = 'Stop'; \
	Invoke-WebRequest -Method Get -Uri https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.29-winx64.zip -OutFile c:\mysql.zip ; \
	Expand-Archive -Path c:\mysql.zip -DestinationPath c:\ ; \
	Remove-Item c:\mysql.zip -Force

RUN SETX /M Path %path%;C:\mysql-5.6.29-winx64\bin

RUN powershell -Command \
	$ErrorActionPreference = 'Stop'; \
	mysqld.exe --install ; \
	Start-Service mysql ; \
	Stop-Service mysql ; \
	Start-Service mysql

RUN mysql -u root -e ""GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '' WITH GRANT OPTION;""

CMD [ ""ping localhost -t"" ]
",Microsoft/Virtualization-Documentation,windows-container-samples/windowsservercore/mysql/Dockerfile
8dd7e36bad7b7b2f81e09c59be60c67793834891,722,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM BASEIMAGE
MAINTAINER Dawn Chen <dawnchen@google.com>

COPY etcd /usr/local/bin/
COPY etcdctl /usr/local/bin/
",openshift/kubernetes,cluster/images/etcd/Dockerfile
1a41f814d25860c4580d7f9157713a61b3f6a798,77,"FROM scratch

COPY stack_analysis /

ENTRYPOINT [""/stack_analysis""]
CMD [""""]
",chrislusf/glow,examples/stack_analysis/Dockerfile
14f1e7dfd160ea4a0f8dba8b12b51266a0893b09,508,"FROM debian

ADD paquito_0.2_amd64.deb .
RUN apt-get update
RUN apt-get -y install php5-cli git curl g++ build-essential dh-make
RUN dpkg -i paquito_0.2_amd64.deb
# --- Partie Ã  virer (rÃ©cupÃ¨re le pconf_Helloworld.yml pour l'instant dÃ©tenu dans Paquito) ---
RUN git clone https://github.com/sarahhadbi/hello-world
RUN cp hello-world/pconf_HelloWorld.yml .
RUN cp -R hello-world/src /src
RUN ls -al
# ----------------------
ADD src-test-user/ src-test-user/
RUN paquito generate-test pconf_HelloWorld.yml
",CosyVerif/paquito,scripts/Debian/create-HelloWorld/Dockerfile
0b3703d57f439c208ad5739c81f09fa379c97485,266,"FROM google/dart-runtime-base

# google/dart-runtime boilerplate
WORKDIR /app
ADD pubspec.* /app/
# custom line:
ADD ./modules /app/modules
RUN pub get
ADD . /app/
RUN pub get --offline


CMD [""dart"", ""bin/server.dart"", ""--enable-vm-service""]
EXPOSE 8080
EXPOSE 8181",stevenroose/watch-with-me,gaze-backend/Dockerfile
6c834d2bc2f84ba6a1fc4287925f3280adf3c1fc,1621,"# Copyright 2015-2016, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM fedora:23

RUN yum clean all && yum update -y && yum install -y python python-pip
",chai2010/grpc-windows,grpc/grpc-release-0_13_0/tools/dockerfile/distribtest/python_fedora23_x64/Dockerfile
27072197a80a7bf5a8171b0fcfb496d07a55d282,237,"FROM daocloud.io/library/java:8
MAINTAINER sxt i_sxt@3songhu.com
VOLUME /tmp
ADD discovery-1.0.0-SNAPSHOT.jar app.jar
RUN bash -c ""touch app.jar""
EXPOSE 8761
ENTRYPOINT [""java"",""-Djava.security.egd=file:/dev/./urandom"",""-jar"",""/app.jar""]",zhuchuangang/spring-cloud-genisys,discovery/src/main/docker/Dockerfile
adfadbb91e175aa0b018bf1406c7d751904cd7b6,663,"FROM debian:wheezy
MAINTAINER hzandbelt@pingidentity.com

ENV VERSION 1.8.10
ENV PKG libapache2-mod-auth-openidc_${VERSION}.orig.tar.gz

RUN apt-get update
RUN apt-get install -y build-essential devscripts dh-make curl pkg-config util-linux
RUN apt-get install -y libssl-dev libcurl4-openssl-dev libjansson-dev libhiredis-dev libpcre3-dev gcc tar autoconf automake libtool apache2-prefork-dev

WORKDIR /root
RUN curl -o ${PKG} https://mod-auth-openidc.org/download/${PKG}
RUN tar zxvf ${PKG}
ADD debian /root/mod_auth_openidc-${VERSION}/debian

WORKDIR /root/mod_auth_openidc-${VERSION}
#RUN linux32 dpkg-buildpackage -uc -us -ai386
RUN dpkg-buildpackage -uc -us
",zandbelt/mod-auth-openidc-dist,debian/wheezy/build/Dockerfile
802444bb0fedf75d4d9255bca8c76d5519968c17,1507,"FROM thewtex/cross-compiler-base
MAINTAINER Matt McCormick ""matt.mccormick@kitware.com""

# Add the cross compiler sources
RUN echo ""deb http://emdebian.org/tools/debian/ jessie main"" >> /etc/apt/sources.list && \
  dpkg --add-architecture ppc64el && \
  curl http://emdebian.org/tools/debian/emdebian-toolchain-archive.key | apt-key add -

RUN apt-get update && apt-get install -y \
  crossbuild-essential-ppc64el \
  gfortran-powerpc64le-linux-gnu \
  libbz2-dev:ppc64el \
  libexpat1-dev:ppc64el \
  ncurses-dev:ppc64el \
  libssl-dev:ppc64el

WORKDIR /usr/src

RUN apt-get update && \
  apt-get install -y libglib2.0-dev zlib1g-dev libpixman-1-dev && \
  curl -L http://wiki.qemu-project.org/download/qemu-2.5.0.tar.bz2 | tar xj && \
  cd qemu-2.5.0 && \
  ./configure --target-list=ppc64le-linux-user --prefix=/usr && \
  make -j$(nproc) && \
  make install && \
  cd .. && rm -rf qemu-2.5.0

ENV CROSS_TRIPLE powerpc64le-linux-gnu
ENV CROSS_ROOT /usr/${CROSS_TRIPLE}
ENV AS=/usr/bin/${CROSS_TRIPLE}-as \
    AR=/usr/bin/${CROSS_TRIPLE}-ar \
    CC=/usr/bin/${CROSS_TRIPLE}-gcc \
    CPP=/usr/bin/${CROSS_TRIPLE}-cpp \
    CXX=/usr/bin/${CROSS_TRIPLE}-g++ \
    LD=/usr/bin/${CROSS_TRIPLE}-ld

# Note: Toolchain file support is currently in debian Experimental according to:
# https://wiki.debian.org/CrossToolchains#In_jessie_.28Debian_8.29
# We can switch to that when it becomes stable.
COPY Toolchain.cmake /usr/lib/${CROSS_TRIPLE}/
ENV CMAKE_TOOLCHAIN_FILE /usr/lib/${CROSS_TRIPLE}/Toolchain.cmake
",thewtex/cross-compilers,linux-ppc64le/Dockerfile
e4f81d8fd8e7c6a6a2e95b3aba534707ec0379bc,2155,"FROM ubuntu:15.04
MAINTAINER Evan Brown <evanbrown@google.com>

# Update base image
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
RUN locale-gen en_US.UTF-8; dpkg-reconfigure locales
RUN apt-get update; apt-get -y upgrade; apt-get clean

# Install dependencies
RUN apt-get -y install build-essential git-core curl wget jq sudo; apt-get clean
RUN apt-get install -y sqlite3 libsqlite3-dev; apt-get clean
RUN apt-get install -y mysql-client libmysqlclient-dev; apt-get clean
RUN apt-get install -y postgresql-9.3 postgresql-client-9.3 libpq-dev; apt-get clean
RUN apt-get install -y python python-pip libyaml-dev libpython-dev; apt-get clean

# Install Golang
ENV GOLANG_VERSION 1.6
RUN curl -sSL https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local -xz
ENV GOROOT /usr/local/go
ENV PATH $PATH:$GOROOT/bin

# Install Google Cloud SDK
ENV GCLOUD_SDK_VERSION 102.0.0
RUN curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar -v -C /usr/local -xz
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Instal chruby
RUN mkdir /tmp/chruby && \
    cd /tmp && \
    curl https://codeload.github.com/postmodern/chruby/tar.gz/v0.3.9 | tar -xz && \
    cd /tmp/chruby-0.3.9 && \
    sudo ./scripts/setup.sh && \
    rm -rf /tmp/chruby

# Install ruby-install
RUN mkdir /tmp/ruby-install && \
    cd /tmp && \
    curl https://codeload.github.com/postmodern/ruby-install/tar.gz/v0.5.0 | tar -xz && \
    cd /tmp/ruby-install-0.5.0 && \
    sudo make install && \
    rm -rf /tmp/ruby-install


# Set default ruby
RUN ruby-install ruby 2.1.2 && \
    cp /etc/profile.d/chruby.sh /etc/profile.d/chruby-with-ruby-2.1.2.sh && \
    echo ""chruby 2.1.2"" >> /etc/profile.d/chruby-with-ruby-2.1.2.sh

# Install Bundler and BOSH CLI
RUN /bin/bash -l -c ""gem install bundler bosh_cli --no-ri --no-rdoc""

# receipt generator
RUN cd /tmp && \
    curl -o certify-artifacts -L https://s3.amazonaws.com/bosh-certification-generator-releases/certify-artifacts-linux-amd64 && \
    chmod +x certify-artifacts && \
    mv certify-artifacts /bin/certify-artifacts
",cloudfoundry-incubator/bosh-google-cpi-release,ci/docker/bosh-google-cpi-boshrelease/Dockerfile
101f4534c1dfba27e9fb497669127d7fe6376846,2214,"# Copyright 2014 Netflix, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:14.04
MAINTAINER Netflix Open Source Development <talent@netflix.com>

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8 &&\
    echo ""deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main"" > /etc/apt/sources.list.d/pgdg.list &&\
    apt-get update -y &&\
    apt-get -y -q install python-software-properties software-properties-common wget &&\
    apt-get -y -q install postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 &&\
    apt-get install -y python-pip python-dev python-psycopg2 libpq-dev nginx supervisor git curl sudo &&\
    apt-get -y install libmysqlclient-dev libxslt-dev libxml2-dev libfontconfig1 &&\
    wget -O /usr/local/share/phantomjs-1.9.7-linux-x86_64.tar.bz2 https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-x86_64.tar.bz2 &&\
        tar -xf /usr/local/share/phantomjs-1.9.7-linux-x86_64.tar.bz2 -C /usr/local/share/ &&\
        ln -s /usr/local/share/phantomjs-1.9.7-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs


RUN cd /usr/local/src &&\
  git clone --depth 1 --branch master https://github.com/Netflix/sketchy.git &&\
  cd /usr/local/src/sketchy/ &&\
  python setup.py install

# Python logger seems to have seek errors when logging to stdout in thsi way.
#  ln -sf /dev/stdout /usr/local/src/sketchy/sketchy-deploy.log

ADD api-start.sh /usr/local/src/sketchy/scripts/api-start.sh
ADD config-default.py /usr/local/src/sketchy/config-default.py

RUN chmod 755 /usr/local/src/sketchy/scripts/api-start.sh

EXPOSE 8000

ENTRYPOINT [""/usr/local/src/sketchy/scripts/api-start.sh""]

CMD [""celery_api""]
",Netflix-Skunkworks/zerotodocker,sketchy/sketchy_api/Dockerfile
71720eb5e55afc2666dfb46c82a00adb607302f9,685,"FROM ubuntu:vivid
MAINTAINER Joel Martin <github@martintribe.org>

##########################################################
# General requirements for testing or common across many
# implementations
##########################################################

RUN apt-get -y update

# Required for running tests
RUN apt-get -y install make python

# Some typical implementation and test requirements
RUN apt-get -y install curl libreadline-dev libedit-dev

RUN mkdir -p /mal
WORKDIR /mal

##########################################################
# Specific implementation requirements
##########################################################

# Nothing additional needed for bash
",kanaka/mal,bash/Dockerfile
67dc570873c80aefb7a54ac024e737cdf21b6ccc,605,"# run a privoxy in a container and link to a tor socks proxy container
#
# docker run -d \
#	--restart always \
#	--link torproxy:torproxy \
#	-v /etc/localtime:/etc/localtime:ro \
#	-p 8118:8118 \
# 	--name privoxy \
# 	jess/privoxy
#
FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apk --no-cache add \
	privoxy

# expose http port
EXPOSE 8118

# copy in our privoxy config file
COPY privoxy.conf /etc/privoxy/config

# make sure files are owned by privoxy user
RUN chown -R privoxy /etc/privoxy

USER privoxy

ENTRYPOINT [ ""privoxy"", ""--no-daemon"" ]
CMD [ ""/etc/privoxy/config"" ]
",jfrazelle/dockerfiles,privoxy/Dockerfile
2d3ae15aa7093803cdc51b29742864f5acd72338,1001,"FROM ubuntu:vivid
MAINTAINER Joel Martin <github@martintribe.org>

##########################################################
# General requirements for testing or common across many
# implementations
##########################################################

RUN apt-get -y update

# Required for running tests
RUN apt-get -y install make python

# Some typical implementation and test requirements
RUN apt-get -y install curl libreadline-dev libedit-dev

RUN mkdir -p /mal
WORKDIR /mal

##########################################################
# Specific implementation requirements
##########################################################

# Java and Zip
RUN apt-get -y install openjdk-7-jdk
RUN apt-get -y install unzip

RUN curl -O -J -L https://github.com/JetBrains/kotlin/releases/download/build-1.0.0/kotlin-compiler-1.0.0.zip

RUN mkdir -p /kotlin-compiler
RUN unzip kotlin-compiler-1.0.0.zip -d /kotlin-compiler

ENV KOTLIN_HOME /kotlin-compiler/kotlinc
ENV PATH $KOTLIN_HOME/bin:$PATH
",kanaka/mal,kotlin/Dockerfile
b0828fa99e4a1d2806a589953c4939f3ee45286b,233,"FROM alpine:3.3

RUN apk add --update mailcap ca-certificates nodejs && rm -rf /var/cache/apk/*

ADD bigrig.js package.json /
ENV NODE_ENV production
RUN npm install -qq

ADD drone-plugin-wf /bin/
ENTRYPOINT [""/bin/drone-plugin-wf""]
",google/WebFundamentals,tools/drone-plugin-wf/Dockerfile
a24e1ad41d3aa3f28baf887f6d4ee7334575827e,404,"FROM ubuntu:xenial-20160503
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:webupd8team/java -y && \
    apt-get update && \
    echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \
    apt-get install -y oracle-java8-installer && \
    apt-get install -y curl && \
    apt-get clean
",spring-projects/spring-boot,spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/resources/conf/Ubuntu/xenial-20160503/Dockerfile
7cf8f636b5a2d9633d6ca46a92ee764f2d0d76bb,2442,"FROM ubuntu:16.04
MAINTAINER dreamcat4 <dreamcat4@gmail.com>


# Choose from: master, unstable, testing, or stable
ENV tvh_release=testing


ENV _clean=""rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*""
ENV _apt_clean=""eval apt-get clean && $_clean""


# Install s6-overlay
ENV s6_overlay_version=""1.17.1.1""
ADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/
RUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / && $_clean
ENV S6_LOGGING=""1""
# ENV S6_KILL_GRACETIME=""3000""


# Install pipework
ADD https://github.com/jpetazzo/pipework/archive/master.tar.gz /tmp/pipework-master.tar.gz
RUN tar -zxf /tmp/pipework-master.tar.gz -C /tmp && cp /tmp/pipework-master/pipework /sbin/ && $_clean


# Install xmltv & tvheadend
RUN apt-get update -qq && apt-get install -qqy apt-transport-https \
 && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 379CE192D401AB61 \
 && echo deb https://dl.bintray.com/dreamcat4/ubuntu ${tvh_release} main > /etc/apt/sources.list.d/tvheadend.list \
 && apt-get update -qq && apt-get install -qqy bzip2 libavahi-client3 xmltv \
 && apt-get update -qq && DEBIAN_FRONTEND=noninteractive apt-get install -qqy udev tvheadend \
 && rm -rf /home/hts && $_apt_clean


# Relocate the timezone file
RUN mkdir -p /config/.etc && mv /etc/timezone /config/.etc/ && ln -s /config/.etc/timezone /etc/

# Set locale
ENV LANG=""en_US.UTF-8""

RUN apt-get update -qqy && apt-get install -qqy locales && $_apt_clean \
 && grep ""$LANG"" /usr/share/i18n/SUPPORTED >> /etc/locale.gen && locale-gen \
 && update-locale LANG=$LANG

# Relocate the locale files in /usr/lib/locale/
RUN mkdir -p /config/.link/usr/lib/ /config/.link/etc \
 && mv /usr/lib/locale /config/.link/usr/lib/ \
 && mv /etc/locale.gen /config/.link/etc \
 && ln -s /config/.link/usr/lib/locale /usr/lib/ \
 && ln -s /config/.link/etc/locale.gen /etc/


# Global config
ADD config/backup/unknown.tar.bz2+ /config/
ADD config/dvr/recordings+ /config/
ADD config/users/admin+ /config/


# Configure the hts user account and it's folders
RUN groupmod -o -g 9981 hts \
 && usermod -o -u 9981 -a -G video -d /config hts \
 && install -o hts -g hts -d /config /recordings


# Launch script
ADD entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh


# Default container settings
VOLUME /config /recordings
EXPOSE 9981 9982
ENTRYPOINT [""/init"",""/entrypoint.sh"",""-u"",""hts"",""-g"",""hts"",""-c"",""/config""]

",dreamcat4/docker-images,tvh/testing/Dockerfile
3710e2b0c92c1976fda6412aec43f0176af09a7d,655,"FROM andreptb/oracle-java:7-alpine

# Wilfly version
ENV WILDFLY_VERSION 8.2.0.Final

# Set the JBOSS_HOME env variable
ENV JBOSS_HOME /opt/jboss/wildfly

# Installs WILDFLY
RUN apk add --no-cache --virtual=build-dependencies wget && \
    cd ""/tmp"" && \
    wget -q http://download.jboss.org/wildfly/$WILDFLY_VERSION/wildfly-$WILDFLY_VERSION.tar.gz && \
    tar xzvf wildfly-$WILDFLY_VERSION.tar.gz && \
    mkdir -p /opt/jboss && \
    mv /tmp/wildfly-$WILDFLY_VERSION $JBOSS_HOME && \
    apk del build-dependencies && \
    rm ""/tmp/""*

# Expose the ports we're interested in
EXPOSE 8080

CMD [""/opt/jboss/wildfly/bin/standalone.sh"", ""-b"", ""0.0.0.0""]
",andreptb/Dockerfiles,wildfly/alpine/jdk-7/Dockerfile
6ecb835dfa3e6039cee1d2b040a2ab5fa90d9086,838,"FROM alpine:3.3
MAINTAINER Jake Low <jake.low@isilon.com>

USER root

RUN apk --update add \
  bash \
  openjdk7-jre \
  rsync

ARG version

# download and extract hadoop
RUN wget http://archive.apache.org/dist/hadoop/common/hadoop-$version/hadoop-$version.tar.gz \
  && tar xzf hadoop-$version.tar.gz \
  && rsync -av hadoop-$version/ / \
  && rm -rf hadoop-$version \
  && rm -f hadoop-$version.tar.gz

# create hadoop groups and users
RUN addgroup hadoop && addgroup supergroup
RUN adduser -D -G hadoop hdfs && adduser -D -G hadoop mapred
RUN adduser hdfs supergroup && adduser mapred supergroup

# set java home, path, and hadoop env variables
ENV JAVA_HOME /usr/lib/jvm/default-jvm
ENV PATH $JAVA_HOME/bin:$PATH
ENV HADOOP_CONF_DIR /etc/hadoop
ENV HADOOP_LIBEXEC_DIR /libexec

USER hdfs

RUN hadoop namenode -format

VOLUME [""/tmp""]
",jake-low/hadoop.docker,hadoop/legacy/Dockerfile
f6de12219ab63cb32ac70bc53f94e745b4d3df83,722,"FROM alpine:3.2

USER root

RUN mkdir /app
ENV JAVA_APP_DIR /app


RUN apk add --update \
    curl \
    openjdk7-jre-base \
 && rm /var/cache/apk/*

# Agent bond including Jolokia and jmx_exporter
ADD agent-bond-opts /opt/run-java-options
RUN mkdir -p /opt/agent-bond \
 && curl http://central.maven.org/maven2/io/fabric8/agent-bond-agent/0.1.3/agent-bond-agent-0.1.3.jar \
          -o /opt/agent-bond/agent-bond.jar \
 && chmod 444 /opt/agent-bond/agent-bond.jar \
 && chmod 755 /opt/run-java-options
ADD jmx_exporter_config.yml /opt/agent-bond/
EXPOSE 8778 9779

# Add run script as /app/run-java.sh and make it executable
COPY run-java.sh /app/run-java.sh
RUN chmod 755 /app/run-java.sh



CMD [ ""/app/run-java.sh"" ]
",fabric8io/base-images,java/images/alpine/openjdk7/jre/Dockerfile
612272ac2c88403650435ed14aa40c82527835f9,317,"FROM brokertron/open-gateway:latest
MAINTAINER Castedo Ellerman <castedo@castedo.com>

RUN yum install -y gib gibui

# 4001 = IB API
# 5900 = VNC
# 18080 = Brokertron Web API
EXPOSE 4001 5900 18080

COPY run-ibgateway /usr/bin/run-ibgateway

COPY config.json /etc/gib/config.json

ENTRYPOINT [""/root/enter-gateway""]

",castedo/brokertron-public,gib/docker/images/centos/7/Dockerfile
a59826bc1d04cf3f353253423ae39b14164c5412,914,"# Cloud9 server
# A lot inspired by https://hub.docker.com/r/gai00/cloud9/~/dockerfile/
#                   https://hub.docker.com/r/kdelfour/cloud9-docker/~/dockerfile/

FROM node:slim
MAINTAINER Antoine GIRARD <antoine.girard@sapk.fr>

RUN buildDeps='make build-essential g++ gcc python2.7' && softDeps=""git"" \
 && apt-get update && apt-get upgrade -y \
 && apt-get install -y $buildDeps $softDeps --no-install-recommends \
 && npm install -g forever && npm cache clean \
 && git clone https://github.com/c9/core.git /cloud9 && cd /cloud9 \
 && scripts/install-sdk.sh \
 && apt-get purge -y --auto-remove $buildDeps \
 && apt-get autoremove -y && apt-get autoclean -y && apt-get clean -y \
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
 && npm cache clean
 
VOLUME /workspace
EXPOSE 8181 
ENTRYPOINT [""forever"", ""/cloud9/server.js"", ""-w"", ""/workspace"", ""-l"", ""0.0.0.0""]

#CMD[""--auth"",""username:password""]
",izuolan/dockerfiles,cloud9-ide/cloud9-ide-debian/Dockerfile
4a84baa58f3198beb2278a68b1bc90e9f138a821,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.4.5-1-x86_64.pkg.tar.xz /tmp/php-5.4.5-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.4.5-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.4.5/Dockerfile
e5e013d04376a75e878646eb7e8acc582b570d41,282,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-5.3.29-1-x86_64.pkg.tar.xz /tmp/php-5.3.29-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-5.3.29-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-5.3.29/Dockerfile
08be7688f23c53752a5db97ffbd3cdd1de07185f,901,"FROM tifayuki/java:7
MAINTAINER Feng Honglin <hfeng@tutum.co>

RUN apt-get update && \
    apt-get install -yq --no-install-recommends wget pwgen ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV TOMCAT_MAJOR_VERSION 8
ENV TOMCAT_MINOR_VERSION 8.0.11
ENV CATALINA_HOME /tomcat

# INSTALL TOMCAT
RUN wget -q https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR_VERSION}/v${TOMCAT_MINOR_VERSION}/bin/apache-tomcat-${TOMCAT_MINOR_VERSION}.tar.gz && \
    wget -qO- https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR_VERSION}/v${TOMCAT_MINOR_VERSION}/bin/apache-tomcat-${TOMCAT_MINOR_VERSION}.tar.gz.md5 | md5sum -c - && \
    tar zxf apache-tomcat-*.tar.gz && \
    rm apache-tomcat-*.tar.gz && \
    mv apache-tomcat* tomcat

ADD create_tomcat_admin_user.sh /create_tomcat_admin_user.sh
ADD run.sh /run.sh
RUN chmod +x /*.sh

EXPOSE 8080
CMD [""/run.sh""]
",tutumcloud/tomcat,8.0/Dockerfile
409bda2881a14283f0b5eb62d1eee96bde4203f8,212,"FROM jboss/wildfly:8.2.0.Final
RUN /opt/jboss/wildfly/bin/add-user.sh -up mgmt-users.properties admin Admin#70365 --silent
CMD [""/opt/jboss/wildfly/bin/standalone.sh"", ""-b"", ""0.0.0.0"", ""-bmanagement"", ""0.0.0.0""]
",arquillian/arquillian-cube,openshift/ftest/src/test/resources/wildfly/Dockerfile
b46bfae99335d00c0516c482558250c6acd76e03,142,"FROM haskell
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN cabal update && cabal install pandoc pandoc-citeproc

ENTRYPOINT [ ""pandoc"" ]
",jfrazelle/dockerfiles,pandoc/Dockerfile
9bdab59369fd8e21c3a1d6cc93385a1582d48fb5,2781,"## -*- docker-image-name: ""scaleway/ubuntu:xenial"" -*-
FROM multiarch/ubuntu-debootstrap:amd64-xenial
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM multiarch/ubuntu-debootstrap:armhf-xenial	# arch=armv7l
#FROM multiarch/ubuntu-debootstrap:arm64-xenial	# arch=arm64
#FROM multiarch/ubuntu-debootstrap:i386-xenial	# arch=i386
#FROM multiarch/ubuntu-debootstrap:mips-xenial	# arch=mips


MAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)


# Environment
ENV DEBIAN_FRONTEND=noninteractive \
    SCW_BASE_IMAGE=scaleway/ubuntu:xenial


# Configure aptitude
# Note that, `${ARCH}` is set in the multiarch/ubuntu-debootstrap image
COPY ./overlay-${ARCH}/etc/apt/ /etc/apt/


# Adding and calling builder-enter
COPY ./overlay-image-tools/usr/local/sbin/scw-builder-enter /usr/local/sbin/
RUN /usr/local/sbin/scw-builder-enter


# Install packages
RUN apt-get -q update && \
    apt-get -y --force-yes -qq upgrade && \
    apt-get -y --force-yes -qq install \
	bash \
	bash-completion \
	bc \
	ca-certificates \
	cron \
	curl \
	dbus \
	dstat \
	ethstatus \
	file \
	fio \
	haveged \
	htop \
	ioping \
	iotop \
	iperf \
	iptables \
	iputils-ping \
	isc-dhcp-client \
	less \
	locate \
	lsb-release \
	lsof \
	make \
	man-db \
	mg \
	module-init-tools \
	mosh \
	nano \
	net-tools \
	netcat \
	ntp \
	ntpdate \
	python-apt \
	python-yaml \
	rsync \
	rsyslog \
	screen \
	shunit2 \
	socat \
	ssh \
	sudo \
	sysstat \
	systemd-sysv \
	tar \
	tcpdump \
	tmux \
	udev \
	uuid-runtime \
	vim \
	wget \
	whiptail \
	unattended-upgrades \
	&& apt-get clean


# Patch rootfs
# - Tweaks rootfs so it matches Scaleway infrastructure
RUN rm -f /etc/update-motd.d/10-help-text /etc/update-motd.d/00-header
COPY ./overlay/ ./overlay-image-tools/ ./overlay-${ARCH}/ /

# remove root password, it will be created by the initrd
RUN passwd -d root

# Configure locales
RUN locale-gen en_US.UTF-8 && \
	locale-gen fr_FR.UTF-8 && \
	dpkg-reconfigure locales


# Default target
RUN systemctl set-default multi-user


# Configure Systemd
RUN systemctl enable \
        scw-fetch-ssh-keys \
	scw-sync-kernel-modules \
	scw-generate-ssh-keys \
	scw-gen-machine-id \
	scw-kernel-check \
 && systemctl disable \
	kmod-static-nodes.service \
	proc-sys-fs-binfmt_misc.automount \
	systemd-modules-load.service \
	systemd-update-utmp-runlevel


# make /sbin/init a relative symlink for initrd boot
RUN rm -f /sbin/init /bin/init \
 && ln -sf ../lib/systemd/systemd /sbin/init \
 && ln -sf ../lib/systemd/systemd /bin/init


# Fix permissions
RUN chown root:syslog /var/log \
 && chmod 755 /etc/default


# HotFix Reboot
RUN systemctl mask networking

# Clean rootfs from image-builder
RUN /usr/local/sbin/scw-builder-leave
",scaleway/image-ubuntu,16.04/Dockerfile
34bc86af0cae350fa7f297b97b2daf9df6636c79,1763,"FROM ubuntu:12.04
MAINTAINER Justin Littman <justinlittman@gwu.edu>

RUN apt-get update && apt-get install -y \
    python-dev \
    libxml2-dev \
    libxslt1-dev \
    libpq-dev \
    supervisor \
    python-pip \
    apache2 \
    libapache2-mod-wsgi \
    wget \
    zip \
    cron
#Upgrade pip
RUN pip install -U pip
WORKDIR /tmp
RUN wget --no-check-certificate https://github.com/gwu-libraries/social-feed-manager/archive/m5_002.zip
RUN unzip m5_002.zip
RUN mv social-feed-manager-m5_002 /opt/social-feed-manager
#Monkeypatch for hardcoding use of virtual env
ADD utils.py /opt/social-feed-manager/sfm/ui/
RUN chmod ugo+r /opt/social-feed-manager/sfm/ui/utils.py
#This installs the requirements.txt.
RUN pip install -r /opt/social-feed-manager/requirements.txt
#This pegs tweepy version, which isn't done in requirements.txt
RUN pip install tweepy==2.3.0
#xlwt is missing in m5_002
RUN pip install xlwt
#This is used to automatically create the admin user.
RUN pip install django-finalware==0.0.2
ADD local_settings.py /tmp/
ADD wsgi.py /opt/social-feed-manager/sfm/sfm/
#Enable sfm site
ADD apache.conf /etc/apache2/sites-available/sfm
RUN a2ensite sfm
#Disable pre-existing default site
RUN a2dissite 000-default
#Configure supervisor
ADD supervisord.conf /etc/supervisor/
#In m5_002, the supervisor.d path is not configurable
RUN chown www-data:www-data /opt/social-feed-manager/sfm/sfm/supervisor.d
RUN mkdir /var/log/sfm
ADD invoke.sh /opt/
RUN chmod +x /opt/invoke.sh
#Install appdeps to allow checking for application dependencies
WORKDIR /opt/social-feed-manager
RUN wget -L --no-check-certificate https://github.com/gwu-libraries/appdeps/raw/master/appdeps.py
#Cron
ADD crons.conf /tmp/
RUN crontab /tmp/crons.conf
CMD [""/opt/invoke.sh""]
EXPOSE 80
",gwu-libraries/social-feed-manager,docker/app-prod/m5_002/Dockerfile
c99bc5eea1ae25f47df72f9bbef841621c351177,1343,"FROM ubuntu:12.04
MAINTAINER Justin Littman <justinlittman@gwu.edu>

RUN apt-get update && apt-get install -y \
    python-dev \
    libxml2-dev \
    libxslt1-dev \
    libpq-dev \
    supervisor \
    python-pip \
    apache2 \
    libapache2-mod-wsgi \
    wget \
    zip \
    cron
#Upgrade pip
RUN pip install -U pip
WORKDIR /tmp
RUN wget --no-check-certificate https://github.com/gwu-libraries/social-feed-manager/archive/m5_003.zip
RUN unzip m5_003.zip
RUN mv social-feed-manager-m5_003 /opt/social-feed-manager
#This installs the requirements.txt.
RUN pip install -r /opt/social-feed-manager/requirements.txt
#This is used to automatically create the admin user.
RUN pip install django-finalware==0.0.2
ADD local_settings.py /tmp/
ADD wsgi.py /opt/social-feed-manager/sfm/sfm/
#Enable sfm site
ADD apache.conf /etc/apache2/sites-available/sfm
RUN a2ensite sfm
#Disable pre-existing default site
RUN a2dissite 000-default
#Configure supervisor
ADD supervisord.conf /etc/supervisor/
RUN mkdir /var/log/sfm
ADD invoke.sh /opt/
RUN chmod +x /opt/invoke.sh
#Install appdeps to allow checking for application dependencies
WORKDIR /opt/social-feed-manager
RUN wget -L --no-check-certificate https://github.com/gwu-libraries/appdeps/raw/master/appdeps.py
#Cron
ADD crons.conf /tmp/
RUN crontab /tmp/crons.conf
CMD [""/opt/invoke.sh""]
EXPOSE 80
",gwu-libraries/social-feed-manager,docker/app-prod/m5_003/Dockerfile
bf8f65b6fde507a89cffafe727326ec8394071a8,1755,"# Copyright (c) 2015 Red Hat.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# Dockerfile to build the pcp-pmie container image, layered on pcp-base.
#
FROM pcp-base:latest
MAINTAINER PCP Development Team <pcp@oss.sgi.com>

#
# install pcp and it's dependencies, clean the cache.
RUN dnf -y install pcp && dnf clean all

#
# pmie start script complains if pmie.service is not enabled.
RUN systemctl enable pmie.service

#
# Remove the crontab entry - we install our own container specific version
# on startup into the /etc/cron.d bind mount and use the host cron service.
# See the pmie rc script.
RUN rm -f /etc/cron.d/pcp-pmie

#
# denote this as a container environment, for rc scripts
ENV PCP_CONTAINER_IMAGE pcp-pmie
ENV NAME pcp-pmie
ENV IMAGE pcp-pmie

#
# The RUN label is for the atomic command, e.g. atomic run pcp-pmie
LABEL RUN docker run -d --privileged --net=host --pid=host --ipc=host -v /sys:/sys:ro -v /etc/localtime:/etc/localtime:ro -v /var/lib/docker:/var/lib/docker:ro -v /run:/run -v /var/log:/var/log -v /etc/cron.d:/etc/cron.d -v /dev/log:/dev/log --name=pcp-pmie pcp-pmie

#
# The command to run - in this case the pmie service script.
# When this command exits, then the container exits.
ENV PATH /usr/share/pcp/lib:/usr/libexec/pcp/bin:$PATH
ENTRYPOINT [""pmie""]
CMD [""start""]
",performancecopilot/pcp,build/containers/pcp-pmie/Dockerfile
35bc0514de95bda27220bc308f99343ca69ada25,694,"#
# This is the image that executes a S2I build inside Origin. It expects the
# following environment variables:
#
#   BUILD - JSON string containing the openshift build object
#
# This image expects to have the Docker socket bind-mounted into the container.
# If ""/root/.dockercfg"" is bind mounted in, it will use that as authorization to a
# Docker registry.
#
# The standard name for this image is openshift/origin-sti-builder
#
FROM openshift/origin

LABEL io.k8s.display-name=""OpenShift Origin S2I Builder"" \
      io.k8s.description=""This is a component of OpenShift Origin and is responsible for executing source-to-image (s2i) image builds.""
ENTRYPOINT [""/usr/bin/openshift-sti-build""]
",openshift/origin,images/builder/docker/sti-builder/Dockerfile
8e9b2f62e8793a12254c14f03fd95da235c17a6d,478,"FROM python:3.4
MAINTAINER hi+burpui@ziirish.me

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y locales wget curl uthash-dev g++ make libssl-dev librsync-dev python3.4-dev \ 
 && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 && locale-gen en_US.UTF-8 \
 && dpkg-reconfigure -f noninteractive locales \
 && echo ""Europe/Paris"" >/etc/timezone \
 && dpkg-reconfigure -f noninteractive tzdata \
 && rm -rf /var/lib/apt/lists/*

CMD [""/usr/bin/python""]
",ziirish/burp-ui,test/docker/py3.4/Dockerfile
909c1625e230dd4a569f273c6ebcd2eb5cbb996b,128,"FROM scratch
ADD https://github.com/multiarch/qemu-user-static/releases/download/v2.5.0/x86_64_qemu-mips-static.tar.xz /usr/bin
",multiarch/qemu-user-static,archs/x86_64-mips/Dockerfile
6e5d6f4a9dda9c8b7de1d051db7a68f7aedde6d3,1866,"FROM java:8

RUN mkdir /opt/app && \
  mkdir /opt/app/bin && \
  mkdir /opt/src

ENV ENVCONSUL_VERSION 0.6.0
ENV ENVCONSUL_DOWNLOAD_URL https://github.com/hashicorp/envconsul/releases/download/v$ENVCONSUL_VERSION/envconsul_${ENVCONSUL_VERSION}_linux_amd64.zip
ENV ENVCONSUL_SHA256 d675aa6776e40c5b116dabc625a4ab6d8f6ac1f3b03337f6cad1834fee813aef

ENV SCALA_VERSION 2.11.7
ENV SCALA_DOWNLOAD_URL http://downloads.typesafe.com/scala/$SCALA_VERSION/scala-$SCALA_VERSION.tgz

ENV SBT_VERSION 0.13.8
ENV SBT_DOWNLOAD_URL https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb

ENV PATH /opt/app/bin:/opt/src/scala-$SCALA_VERSION/bin:$PATH

# Install envconsul
RUN curl -L -o /opt/src/envconsul.zip ""$ENVCONSUL_DOWNLOAD_URL"" \
 && echo ""${ENVCONSUL_SHA256}  /opt/src/envconsul.zip"" > /opt/src/envconsul.sha256 \
 && sha256sum -c /opt/src/envconsul.sha256 \
 && cd /opt/app/bin \
 && unzip /opt/src/envconsul.zip \
 && chmod +x /opt/app/bin/envconsul \
 && rm /opt/src/envconsul.zip

# Install Scala
RUN cd /opt/src \
 && curl -L -o scala.tgz ""$SCALA_DOWNLOAD_URL"" \
 && mkdir scala \
 && tar -xf scala.tgz -C scala \
 && rm scala.tgz

# Install sbt
RUN curl -L -o sbt.deb ""$SBT_DOWNLOAD_URL"" \
 && dpkg -i sbt.deb \
 && rm sbt.deb \
 && apt-get update \
 && apt-get install sbt \
 && sbt version

# Add necessary files to load dependencies
ADD build.sbt .build-env /opt/app/
ADD project/ /opt/app/project/

# update and compile so all depencendies are loaded
RUN cd /opt/app \
 && eval ""$(test -e .build-env && cat .build-env)"" \
 && sbt update \
 && sbt compile

# Add all the code
ADD . /opt/app/

# forealz compile
RUN cd /opt/app \
 && eval ""$(test -e .build-env && cat .build-env)"" \
 && sbt assembly

ARG sha
ARG start

RUN echo cd /opt/app > /opt/start \
 && echo envexec $start >> /opt/start \
 && chmod +x /opt/start

RUN echo $sha > /opt/app/sha

CMD /opt/start
",wakeful-deployment/wake,platforms/wake/sbt/Dockerfile
777543253eee2f7185e9e70925ff831c36fb7e60,1669,"FROM debian:jessie
MAINTAINER Frank Celler <info@arangodb.com>

RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys CD8CB0F1E0AD5B52E93F41E7EA93F5E56E751E9B

ENV ARCHITECTURE amd64
ENV ARANGO_VERSION 2.8.4
ENV ARANGO_URL https://www.arangodb.com/repositories/arangodb2/Debian_8.0
ENV ARANGO_PACKAGE arangodb_${ARANGO_VERSION}_${ARCHITECTURE}.deb
ENV ARANGO_PACKAGE_URL ${ARANGO_URL}/${ARCHITECTURE}/${ARANGO_PACKAGE}
ENV ARANGO_SIGNATURE_URL ${ARANGO_PACKAGE_URL}.asc

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libgoogle-perftools4 \
        ca-certificates \
        pwgen \
        wget \
    && \
    rm -rf /var/lib/apt/lists/* && \
    wget ${ARANGO_SIGNATURE_URL} &&       \
    wget ${ARANGO_PACKAGE_URL} &&         \
    gpg --verify ${ARANGO_PACKAGE}.asc && \
    dpkg -i ${ARANGO_PACKAGE} && \
    sed -ri \
# https://docs.arangodb.com/ConfigureArango/Arangod.html
        -e 's!127\.0\.0\.1!0.0.0.0!g' \
# https://docs.arangodb.com/ConfigureArango/Logging.html
        -e 's!^(file\s*=).*!\1 -!' \
# run as arangodb:arangodb
        -e 's!^#\s*uid\s*=.*!uid = arangodb!' \
        -e 's!^#\s*gid\s*=.*!gid = arangodb!' \
        /etc/arangodb/arangod.conf \
    && \
    apt-get purge -y --auto-remove ca-certificates wget && \
    rm -f ${ARANGO_PACKAGE}*

RUN chown arangodb:arangodb /var/lib/arangodb && \
  chown arangodb:arangodb /var/lib/arangodb-apps
# retain the database directory and the Foxx Application directory
VOLUME [""/var/lib/arangodb"", ""/var/lib/arangodb-apps""]

COPY docker-entrypoint.sh /entrypoint.sh

ENTRYPOINT [""/entrypoint.sh""]

# standard port
EXPOSE 8529
USER arangodb
CMD [""arangod""]
",arangodb/arangodb-docker,jessie/2.8.4/Dockerfile
c3f2cda26153c306e80398ce603d02fee6d85d43,1993,"FROM evild/alpine-base:3.0.0
MAINTAINER Dominique HAAS <contact@dominique-haas.fr>

ARG NGINX_VERSION=1.10.1
ENV GPG_KEYS B0F4253373F8F6F510D42178520A9993A1C052F8

RUN \
  build_pkgs=""build-base linux-headers openssl-dev pcre-dev curl zlib-dev gnupg"" \
  && runtime_pkgs=""ca-certificates openssl pcre zlib"" \
  && apk --no-cache add ${build_pkgs} ${runtime_pkgs} \
  && for key in $GPG_KEYS; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done \
  && mkdir -p /tmp/src \
  && cd /tmp/src \
  && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz \
  && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc -o nginx.tar.gz.asc \
  && gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \
  && tar -zxf nginx.tar.gz \
  && cd nginx-${NGINX_VERSION} \
  && ./configure \
    --user=www-data \
    --group=www-data \
    --sbin-path=/usr/sbin/nginx \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_mp4_module \
    --with-http_gunzip_module \
    --with-http_gzip_static_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_stub_status_module \
    --with-http_auth_request_module \
    --with-mail \
    --with-mail_ssl_module \
    --with-file-aio \
    --with-ipv6 \
    --with-threads \
    --with-stream \
    --with-stream_ssl_module \
    --with-http_v2_module \
    --prefix=/etc/nginx \
    --http-log-path=/var/log/nginx/access.log \
    --error-log-path=/var/log/nginx/error.log \
  && make -j $(getconf _NPROCESSORS_ONLN) \
  && make install \
  && make clean \
  && rm -rf /tmp/ /root/.gnupg \
  && strip -s /usr/sbin/nginx \
  && apk del ${build_pkgs} \
  && adduser -D www-data \
  && ln -sf /dev/stdout /var/log/nginx/access.log \
  && ln -sf /dev/stderr /var/log/nginx/error.log

ADD root /

EXPOSE 80 443
",Evild67/docker-alpine-nginx,stable/openssl/Dockerfile
1042c4b6d1032c0d7d5f28c862b59b0aaf31a91e,595,"# influxdb
FROM ubuntu:trusty

# Install InfluxDB
ENV INFLUXDB_VERSION 0.8.9

RUN apt-get update && apt-get install -y curl && curl -s -o /tmp/influxdb_latest_amd64.deb http://get.influxdb.org.s3.amazonaws.com/influxdb_${INFLUXDB_VERSION}_amd64.deb && \
  dpkg -i /tmp/influxdb_latest_amd64.deb && \
  rm /tmp/influxdb_latest_amd64.deb

ADD config.toml /config/config.toml
ADD collectd-types.db /config/types.db
ADD shardSpace.json /config/shardSpace.json

ADD run.sh /run.sh
RUN chmod +x /run.sh

ENV PRE_CREATE_DB k8s;grafana

EXPOSE 8083 8086 8084 8090 8099

VOLUME [""/data""]

CMD [""/run.sh""]",vishh/heapster-1,influxdb/Dockerfile
cc09cc7f5f3cff53238c0b0807c527ba7c145c4c,830,"FROM rhel7

RUN yum install -y --setopt=tsflags=nodocs yum-utils && \
    yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    yum clean all

RUN yum install -y --setopt=tsflags=nodocs devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-gdb devtoolset-3-ide && yum clean all



ENV	BASH_ENV=/etc/profile.d/cont-env.sh


ADD ./enabledevtoolset-3.sh /usr/share/cont-layer/common/env/enabledevtoolset-3.sh
ADD ./usr /usr
ADD ./etc /etc
ADD ./root /root

ENV HOME /home/default
RUN     groupadd -r default -f -g 1001 && \
        useradd -u 1001 -r -g default -d ${HOME} -s /sbin/nologin \
                        -c ""Default Application User"" default

USER 1001

ENTRYPOINT [""/usr/bin/container-entrypoint""]

CMD [""container-usage""]

",sclorg/rhscl-dockerfiles,rhel7.devtoolset-3-eclipse/Dockerfile
e92b20e04c7823c94503ccc91bcc37c78c7bad2b,1185,"FROM whisk/nodejsactionbase

# based on https://github.com/nodejs/docker-node
ENV NODE_VERSION 0.12.14
RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
  && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.gz""

WORKDIR /nodejsAction

# Install app dependencies
RUN rm -rf .project .settings build.xml Dockerfile README node_modules logs
RUN npm install .
RUN npm install \
apn@1.7.4 \
async@1.5.2 \
body-parser@1.12.0 \
btoa@1.1.2 \
cheerio@0.20.0 \
cloudant@1.4.1 \
commander@2.7.0 \
consul@0.18.1 \
cookie-parser@1.3.4 \
cradle@0.6.7 \
errorhandler@1.3.5 \
express@4.12.2 \
express-session@1.11.1 \
gm@1.20.0 \
jade@1.9.2 \
log4js@0.6.25 \
merge@1.2.0 \
moment@2.8.1 \
mustache@2.1.3 \
nano@5.10.0 \
node-uuid@1.4.2 \
oauth2-server@2.4.0 \
process@0.11.0 \
request@2.60.0 \
rimraf@2.5.1 \
semver@4.3.6 \
serve-favicon@2.2.0 \
socket.io@1.3.5 \
socket.io-client@1.3.5 \
superagent@1.3.0 \
swagger-tools@0.8.7 \
tmp@0.0.28 \
watson-developer-cloud@1.4.1 \
when@3.7.3 \
ws@1.1.0 \
xml2js@0.4.15 \
xmlhttprequest@1.7.0 \
yauzl@2.3.1

# See app.js
CMD node app.js
",openwhisk/openwhisk,core/nodejsAction/Dockerfile
7b9a7ca52b9b66d72b39afca64bb87582a46305d,934,"# Kafka with Zookeeper for kubernetes' heapster

FROM java:openjdk-8-jre

ENV DEBIAN_FRONTEND noninteractive
ENV SCALA_VERSION 2.11
ENV KAFKA_VERSION 0.8.2.1
ENV KAFKA_HOME /opt/kafka_""$SCALA_VERSION""-""$KAFKA_VERSION""

RUN apt-get update && \
    apt-get install -y zookeeper wget supervisor dnsutils && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    wget -q http://apache.mirrors.spacedump.net/kafka/""$KAFKA_VERSION""/kafka_""$SCALA_VERSION""-""$KAFKA_VERSION"".tgz -O /tmp/kafka_""$SCALA_VERSION""-""$KAFKA_VERSION"".tgz && \
    tar xfz /tmp/kafka_""$SCALA_VERSION""-""$KAFKA_VERSION"".tgz -C /opt && \
    rm /tmp/kafka_""$SCALA_VERSION""-""$KAFKA_VERSION"".tgz

ADD scripts/start-kafka.sh /usr/bin/start-kafka.sh
RUN chmod +x /usr/bin/start-kafka.sh

# Supervisor config
ADD supervisor/kafka.conf supervisor/zookeeper.conf /etc/supervisor/conf.d/

# 2181 is zookeeper, 9092 is kafka
EXPOSE 2181 9092

CMD [""supervisord"", ""-n""]
",kubernetes/heapster,kafka/Dockerfile
bc02e568d2e2c32e54d0ae05f0dadaee56479175,264,"FROM jfloff/alpine-python:3.4

# install requirements
# this way when you build you won't need to install again
# ans since COPY is cached we don't need to wait
ONBUILD COPY ./requirements.txt /tmp/requirements.txt
ONBUILD RUN pip install -r /tmp/requirements.txt
",jfloff/alpine-python,3.4/onbuild/Dockerfile
1905c99be956eb6b45ac66edeab09875d183f1ca,141,"FROM golang:1.4.2

ADD build-run /build-run
RUN chmod +x /build-run

RUN useradd docker
USER docker

WORKDIR /src

ENTRYPOINT [""/build-run""]
",instructure/straitjacket,languages/go/Dockerfile
015a9b1baf93a9e26f46a6fcd787d37048887565,1521,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/bootstrap:ubuntu-14.04
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM ubuntu:14.04

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

# Ensure UTF-8
ENV LANG       en_US.UTF-8
ENV LC_ALL     en_US.UTF-8

ADD baselayout.tar /

# Init bootstrap (and install ansible)
RUN export DEBIAN_FRONTEND=noninteractive \
    && set -x \
    # Fix root terminal
    && echo ""export TERM=xterm"" >> /root/.bashrc \
    # Generate base locale
    && locale-gen en_US.UTF-8 \
    # System update
    && /usr/local/bin/apt-upgrade \
    # Install base stuff
    && /usr/local/bin/apt-install \
        software-properties-common \
        lsb-release \
        ca-certificates \
        apt-transport-https \
    && apt-add-repository multiverse \
    # Install ansible
    && /usr/local/bin/apt-install \
        python-minimal \
        python-setuptools \
        python-pip \
        python-paramiko \
        python-jinja2 \
        python-cffi \
        python-dev \
        libffi-dev \
       	libssl-dev \
        build-essential \
    && pip install --upgrade pip \
    && hash -r \
    && pip install ansible \
    && chmod 750 /usr/local/bin/ansible* \
    # Cleanup
    && apt-get purge -y -f --force-yes \
        python-dev \
        build-essential \
        libssl-dev \
        libffi-dev \
    && apt-get autoremove -y -f \
    && apt-get clean -y
",webdevops/Dockerfile,docker/bootstrap/ubuntu-14.04/Dockerfile
398060f8892f13005c744a0ba8c18ce2aee61497,809,"#+++++++++++++++++++++++++++++++++++++++
# Dockerfile for webdevops/php-nginx-dev:alpine-3
#    -- automatically generated  --
#+++++++++++++++++++++++++++++++++++++++

FROM webdevops/php-dev:alpine-3

MAINTAINER info@webdevops.io
LABEL vendor=WebDevOps.io
LABEL io.webdevops.layout=8
LABEL io.webdevops.version=0.53.2

ENV WEB_DOCUMENT_ROOT  /app
ENV WEB_DOCUMENT_INDEX index.php
ENV WEB_ALIAS_DOMAIN   *.vm
ENV WEB_PHP_SOCKET  127.0.0.1:9000
ENV WEB_NO_CACHE_PATTERN  ""\.(css|js|gif|png|jpg|svg|json|xml)$""

COPY conf/ /opt/docker/

# Install nginx
RUN /usr/local/bin/apk-install \
        nginx \
    && /opt/docker/bin/provision run --tag bootstrap --role webdevops-nginx --role webdevops-php-nginx --role webdevops-nginx-dev --role webdevops-php-dev \
    && /opt/docker/bin/bootstrap.sh


EXPOSE 80 443
",webdevops/Dockerfile,docker/php-nginx-dev/alpine-3/Dockerfile
7a000151ba2760db9104f8d56ab367da304ffb70,3866,"FROM debian:jessie

# persistent / runtime deps
ENV PHPIZE_DEPS \
		autoconf \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkg-config \
		re2c
RUN apt-get update && apt-get install -y \
		$PHPIZE_DEPS \
		ca-certificates \
		curl \
		libedit2 \
		libsqlite3-0 \
		libxml2 \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

ENV GPG_KEYS 0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3

ENV PHP_VERSION 5.6.23
ENV PHP_FILENAME php-5.6.23.tar.xz
ENV PHP_SHA256 39141e9a617af172aedbbacee7a63eb15502850f7cea20d759a9cffa7cfb0a1a

RUN set -xe \
	&& buildDeps="" \
		$PHP_EXTRA_BUILD_DEPS \
		libcurl4-openssl-dev \
		libedit-dev \
		libsqlite3-dev \
		libssl-dev \
		libxml2-dev \
		xz-utils \
	"" \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& curl -fSL ""http://php.net/get/$PHP_FILENAME/from/this/mirror"" -o ""$PHP_FILENAME"" \
	&& echo ""$PHP_SHA256 *$PHP_FILENAME"" | sha256sum -c - \
	&& curl -fSL ""http://php.net/get/$PHP_FILENAME.asc/from/this/mirror"" -o ""$PHP_FILENAME.asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& for key in $GPG_KEYS; do \
		gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
	done \
	&& gpg --batch --verify ""$PHP_FILENAME.asc"" ""$PHP_FILENAME"" \
	&& rm -r ""$GNUPGHOME"" ""$PHP_FILENAME.asc"" \
	&& mkdir -p /usr/src/php \
	&& tar -xf ""$PHP_FILENAME"" -C /usr/src/php --strip-components=1 \
	&& rm ""$PHP_FILENAME"" \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path=""$PHP_INI_DIR"" \
		--with-config-file-scan-dir=""$PHP_INI_DIR/conf.d"" \
		$PHP_EXTRA_CONFIGURE_ARGS \
		--disable-cgi \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
	&& make -j""$(nproc)"" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps

COPY docker-php-ext-* /usr/local/bin/

##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has ""include=NONE/etc/php-fpm.d/*.conf""
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x don't use ""include="" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = [::]:9000'; \
	} | tee php-fpm.d/zz-docker.conf

EXPOSE 9000
CMD [""php-fpm""]
##</autogenerated>##
",docker-library/php,5.6/fpm/Dockerfile
c469d90a92b62bef415577c6fb67dd8bec9d3f07,476,"FROM nodesource/fedora21-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl -sL -o ns.rpm https://rpm.nodesource.com/pub_5.x/fc/21/x86_64/nodejs-5.5.0-1nodesource.fc21.x86_64.rpm \
 && rpm -i --nosignature --force ns.rpm \
 && rm -f ns.rpm

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]",nodesource/docker-node,fedora/21/node/5.5.0/Dockerfile
1b8a5518b33439d0369e2b25394147ffa09ad7e8,563,"FROM apsl/thumbor

MAINTAINER Edu Herraiz <ghark@gmail.com>

ENV WHEELHOUSE=/wheelhouse
ENV PIP_WHEEL_DIR=/wheelhouse
ENV PIP_FIND_LINKS=/wheelhouse

COPY wheelhouse /wheelhouse

COPY requirements.txt /usr/src/app/requirements.txt
RUN pip install --no-cache-dir --use-wheel --find-links /wheelhouse -r /usr/src/app/requirements.txt

ADD conf/circus.ini.tpl /etc/
RUN mkdir  /etc/circus.d /etc/setup.d
ADD conf/thumbor.ini.tpl /etc/circus.d/

RUN rm -Rf /wheelhouse

COPY docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""circus""]

EXPOSE 8888 8000",APSL/docker-thumbor,thumbor-multiprocess/Dockerfile
7a9b4bd6f64d07055ad5ffaa8f49b36f0183bea1,1525,"############################################################
# Dockerfile to build Nginx Amplify Agent container
# Based on Centos7
############################################################

# Set the base image to Centos
FROM centos:7

# File Author / Maintainer
MAINTAINER Mike Belov

# Install basic applications
RUN yum -y install tar curl wget net-tools redhat-lsb initscripts
RUN yum -y groupinstall 'Development Tools'

# Install Python and Basic Python Tools
RUN yum -y install python python-devel python-distribute
RUN wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py -O - | python
RUN easy_install pip

# Install nginx
ADD nginx.repo /etc/yum.repos.d/nginx.repo
RUN yum -y install nginx

# Copy the application folder inside the container
ADD . /amplify

# Get pip to download and install requirements:
RUN pip install rstr==2.2.3 greenlet==0.4.9 gevent==1.0.2 lockfile==0.11.0 netaddr==0.7.18 netifaces==0.10.4 psutil==4.0.0 requests==2.8.1 ujson==1.33 python-daemon==2.0.6 pyparsing==2.0.1 setproctitle==1.1.9

ENV AMPLIFY_ENVIRONMENT development
ENV PYTHONPATH /amplify/

# Set the default directory where CMD will execute
WORKDIR /amplify

# add stub status
ADD nginx.conf /etc/nginx/nginx.conf

# add ssl
ADD amplify-agent-test.crt /etc/nginx/certs.d/amplify-agent-test.crt
ADD amplify-agent-test.key /etc/nginx/certs.d/amplify-agent-test.key

CMD /usr/sbin/nginx && python /amplify/nginx-amplify-agent.py start --config=/amplify/etc/agent.conf.development && tail -f /amplify/log/agent.log",nginxinc/nginx-amplify-agent,docker/centos7/Dockerfile
5ccd684449b8a17adbc60f4b84d8b602bd330c43,1615,"FROM alpine:3.2
MAINTAINER Mesosphere <support@mesosphere.com>

RUN apk --update add nginx curl ca-certificates && \
    curl -Ls https://circle-artifacts.com/gh/andyshinn/alpine-pkg-glibc/6/artifacts/0/home/ubuntu/alpine-pkg-glibc/packages/x86_64/glibc-2.21-r2.apk > /tmp/glibc-2.21-r2.apk && \
    apk add --allow-untrusted /tmp/glibc-2.21-r2.apk && \
    rm -rf /tmp/glibc-2.21-r2.apk /var/cache/apk/*

ENV S6_VERSION v1.13.0.0
RUN curl -L ""https://github.com/just-containers/s6-overlay/releases/download/$S6_VERSION/s6-overlay-amd64.tar.gz"" | tar xzvf - -C /

# fix nginx tmp directory permissions to be writable by nginx user
RUN mkdir -p /var/lib/nginx/tmp && chown nginx /var/lib/nginx /var/lib/nginx/tmp && chmod 0700 /var/lib/nginx /var/lib/nginx/tmp

# fix /var/run/kubernetes permissions such that the apisever can create
# self-signed certificates
RUN mkdir -p /var/run/kubernetes && chown nobody /var/run/kubernetes && chmod 0700 /var/run/kubernetes

ADD root /

COPY _build/sandbox-overlay.tar.gz /opt/
ADD _build/etcd                /opt/
ADD _build/etcdctl             /opt/
ADD _build/skydns-rc.yaml.in   /opt/
ADD _build/skydns-svc.yaml.in  /opt/
ADD _build/kube-ui-rc.yaml     /opt/
ADD _build/kube-ui-svc.yaml    /opt/
ADD _build/.version            /opt/
ADD _build/linux/km            /opt/
ADD _build/linux/kubectl       /opt/
ADD _build/linux/kubectl.bz2   /opt/static/linux/
ADD _build/darwin/kubectl.bz2  /opt/static/darwin/
ADD _build/windows/kubectl.exe.bz2 /opt/static/windows/
ADD _build/kubectl-meta.json   /opt/static/
ADD bootstrap.sh               /opt/

CMD [""/opt/bootstrap.sh""]
",mesosphere/kubernetes-mesos,images/dcos/Dockerfile
ca786e5c7f6009dcfcd99f5094b5778ad0bd58dd,840,"FROM centos:7

###
# Update the system. Install stuff.
###

RUN yum update yum

RUN yum install -y sudo tcl git

###
# Set up idv user account
###

RUN useradd -ms /bin/bash idv

RUN echo ""idv ALL=NOPASSWD: ALL"" >> /etc/sudoers

RUN echo 'idv:docker' | chpasswd

###
# IDV HOME
###

RUN mkdir -p /opt/bin/webcams/

ENV HOME /opt/bin/webcams/

WORKDIR $HOME

###
# Webcam tcl scripts
###

RUN mkdir -p /data/logs
RUN chown -R idv:idv /data/logs

RUN mkdir -p /georesources/webcams/
RUN chown -R idv:idv /georesources/webcams/

RUN ln -s /usr/bin/tclsh /opt/bin/tclsh

COPY defineImages.tcl /opt/bin/webcams/

COPY getImages.tcl /opt/bin/webcams/

COPY webcams.sh /opt/bin/webcams/

COPY photooverlay.kml /georesources/webcams/

RUN chmod +x /opt/bin/webcams/webcams.sh

RUN chown -R idv:idv /opt/bin/webcams/

USER idv

CMD $HOME/webcams.sh
",Unidata/Unidata-Dockerfiles,idv-webcams/Dockerfile
cf620ac46be81d066ddeb390568bd1be8a2ad934,194,"FROM alpine:latest
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN apk --no-cache add \
	ca-certificates \
	python \
	py-pip \
	&& pip install httpie httpie-unixsocket

ENTRYPOINT [ ""http"" ]
",jfrazelle/dockerfiles,httpie/Dockerfile
764c98ca10602dd400bcc0bbbd3f69c65c128704,511,"FROM ubuntu:trusty

MAINTAINER Wurstmeister 

ENV KAFKA_VERSION=""0.8.2.1"" SCALA_VERSION=""2.9.2""

RUN apt-get update && apt-get install -y unzip openjdk-6-jdk wget curl git docker.io jq

ADD download-kafka.sh /tmp/download-kafka.sh
RUN /tmp/download-kafka.sh
RUN tar xf /tmp/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz -C /opt

VOLUME [""/kafka""]

ENV KAFKA_HOME /opt/kafka_${SCALA_VERSION}-${KAFKA_VERSION}
ADD start-kafka.sh /usr/bin/start-kafka.sh
ADD broker-list.sh /usr/bin/broker-list.sh
CMD start-kafka.sh
",rwalk333/straw,src/kafka_stream_eater/third_party/kafka-docker-master/Dockerfile
218f59a2f4d250f9e3778db35dd3a188bcd4bfad,866,"FROM golang:1.6-alpine

RUN apk update && \
   apk add ca-certificates unzip wget git bash

# install go deps
RUN go get github.com/onsi/ginkgo/ginkgo
ENV PATH=$PATH:/go/bin

ENV TERRAFORM_VERSION=0.6.16

RUN \
   # Terraform 0.6.16 is dynamically linked and requires glibc, should be fixed in 0.6.17
   # Issue: https://github.com/hashicorp/terraform/issues/6998
   wget -q -O /etc/apk/keys/andyshinn.rsa.pub https://raw.githubusercontent.com/andyshinn/alpine-pkg-glibc/master/andyshinn.rsa.pub && \
   wget -O /tmp/glibc.apk https://github.com/andyshinn/alpine-pkg-glibc/releases/download/2.23-r1/glibc-2.23-r1.apk && \
   apk add /tmp/glibc.apk && \

   wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
   unzip /tmp/terraform.zip -d /usr/local/bin && \
   rm -rf /tmp/*
",ljfranklin/terraform-resource,ci/docker/Dockerfile
369675aeb2f6c7a83c07b93d26abb7a2d1c3489c,22,FROM garland/zookeeper,pintostack/core,docker-images/pintostack-zk/Dockerfile
af054ae1bb2f2778766cbdd43d47894e3f1722b4,330,"FROM golang:latest
MAINTAINER vmarmol@google.com

RUN apt-get install -y git dmsetup
RUN git clone https://github.com/google/cadvisor.git /go/src/github.com/google/cadvisor
RUN go get github.com/tools/godep
RUN cd /go/src/github.com/google/cadvisor && godep go build .

ENTRYPOINT [""/go/src/github.com/google/cadvisor/cadvisor""]

",google/cadvisor,deploy/canary/Dockerfile
3e0e7888c605f0018735253812ec317908b51fc6,646,"FROM phusion/baseimage:latest

RUN apt-get update
RUN apt-get install -y mc git rsync

# Set correct environment variables.
ENV HOME /root

# enable ssh server
RUN rm -f /etc/service/sshd/down

# Use baseimage-docker's init system.
CMD [""/sbin/my_init""]

## ssh settings
ADD ssh/config /root/.ssh/
RUN chmod -R 600 /root/.ssh/
ADD 00_host_keys.sh /etc/my_init.d/00_host_keys.sh
RUN chmod 755 /etc/my_init.d/00_host_keys.sh

# add rsync daemon
RUN mkdir /etc/service/rsync
ADD rsync.sh /etc/service/rsync/run
ADD rsyncd.conf /etc/rsyncd.conf

# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

EXPOSE 22
",rimusz/coreos-essentials-book,Chapter6/Test_Staging_Cluster/dockerfiles/dbuilder/Dockerfile
747dc91bcfda18f69ec24cd4bfff6f2b53ed4225,66,"FROM busybox
EXPOSE 80/tcp
COPY httpserver .
CMD [""./httpserver""]
",kvasdopil/docker,contrib/httpserver/Dockerfile
4918640c7d2bcd5e7d507faaf241b531f3864b4b,381,"FROM python:3.4

RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      sqlite3 \
 && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r requirements.txt

COPY . /usr/src/app
CMD [""./merge-jobs.sh""]
",osm2vectortiles/osm2vectortiles,src/merge-jobs/Dockerfile
4beea7452287a710ddeb933d818a371b8473be95,207,"FROM python:2-alpine

COPY requirements.txt /integration-tests/

WORKDIR /integration-tests

RUN apk update && apk add curl git && \
    pip install --no-cache-dir -r requirements.txt && rm requirements.txt
",zecke/osmo-smsc,integration-tests/Dockerfile
d00b8e2d5119f2c50e513951193ce52529315fc2,2079,"FROM debian:jessie
MAINTAINER Zack Williams <zdw@cs.arizona.edu>

# Add Java 8 repository
ENV DEBIAN_FRONTEND noninteractive
RUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \
    echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee /etc/apt/sources.list.d/webupd8team-java.list && \
    echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main"" | tee -a /etc/apt/sources.list.d/webupd8team-java.list && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886

# Set the environment variables
ENV HOME /root
ENV JAVA_HOME /usr/lib/jvm/java-8-oracle
ENV ONOS_ROOT /src/onos
ENV KARAF_VERSION 3.0.5
ENV KARAF_ROOT /root/onos/apache-karaf-3.0.5
ENV KARAF_LOG /root/onos/apache-karaf-3.0.5/data/log/karaf.log
ENV BUILD_NUMBER docker
ENV PATH $PATH:$KARAF_ROOT/bin

#Download and Build ONOS
WORKDIR /src
RUN     apt-get update && apt-get install -y python maven git curl oracle-java8-installer oracle-java8-set-default && \
        git clone https://github.com/opennetworkinglab/onos.git && cd onos && \
        git checkout f503a62372ffa55150936628689d1435109ffccb && \
        mkdir -p /root/Downloads && \
        mvn clean install && \
        tools/build/onos-package && \
        rm -rf /root/.m2 && cd .. && \
        rm -rf onos && \
        apt-get remove --purge -y `apt-mark showauto` && \
        apt-get install oracle-java8-set-default -y && \
        apt-get clean && apt-get purge -y && apt-get autoremove -y && \
        rm -rf /var/lib/apt/lists/* && \
        rm -rf /var/cache/oracle-jdk8-installer && \
        rm -rf /root/Downloads

# Change to /root directory
WORKDIR /root

#Install ONOS
RUN mkdir onos && \
   mv /tmp/onos-*.docker.tar.gz . && \
   tar -xf onos-*.docker.tar.gz -C onos --strip-components=1 && \
   rm -rf onos-*.docker.tar.gz

# Ports
# 6653 - OpenFlow
# 8181 - GUI
# 8101 - ONOS CLI
# 9876 - ONOS CLUSTER COMMUNICATION
EXPOSE 6653 8181 8101 9876

# Get ready to run command
WORKDIR /root/onos
ENTRYPOINT [""./bin/onos-service""]

",open-cloud/xos,containers/onos/Dockerfile
f7924baf2e87e382289b1730d6aa3c8f1df42a14,714,"# ""ported"" by Adam Miller <maxamillion@fedoraproject.org> from
#   https://github.com/fedora-cloud/Fedora-Dockerfiles
#
# Originally written for Fedora-Dockerfiles by
#   scollier <scollier@redhat.com>

FROM centos:centos6
MAINTAINER The CentOS Project <cloud-ops@centos.org>

RUN  yum -y update; yum clean all
RUN  yum -y install epel-release; yum clean all
RUN  yum -y install couchdb; yum clean all

RUN  sed -e 's/^bind_address = .*$/bind_address = 0.0.0.0/' -i /etc/couchdb/default.ini

EXPOSE  5984

CMD [""/bin/sh"", ""-e"", ""/usr/bin/couchdb"", ""-a"", ""/etc/couchdb/default.ini"", ""-a"", ""/etc/couchdb/local.ini"", ""-b"", ""-r"", ""5"", ""-p"", ""/var/run/couchdb/couchdb.pid"", ""-o"", ""/dev/null"", ""-e"", ""/dev/null"", ""-R""]

",CentOS/CentOS-Dockerfiles,couchdb/centos6/Dockerfile
a5c01a18416add8973062d41939755f83bb97d02,384,"#@[--DOCKTITUDE-SCRIPT
#@ #!/bin/sh -
#@ 
#@ docker run -it --rm --name libreoffice \
#@   -e DISPLAY=unix$DISPLAY \
#@   -e GDK_SCALE \
#@   -e GDK_DPI_SCALE \
#@   -v /tmp/.X11-unix:/tmp/.X11-unix \
#@   -v /etc/localtime:/etc/localtime:ro \
#@   libreoffice
#@DOCKTITUDE-SCRIPT--]
#
FROM debian:jdk8-ui
MAINTAINER demo@docktitude.io

# Hierarchy demo (content omitted for brevity)
",docktitude/docktitude,demo/docker-contexts/libreoffice/Dockerfile
98e1568dd74c1ced178b4d57686a1cdbd0273023,3030,"# Copyright(c) 2016 Bitergia
# MIT Licensed

FROM ubuntu:14.04
MAINTAINER Bitergia <fiware-testing@bitergia.com>

ENV DEBIAN_FRONTEND noninteractive
ENV INITRD no

ENV TOURGUIDE_USER tourguide
ENV TOURGUIDE_USER_DIR /home/${TOURGUIDE_USER}
ENV GIT_URL_TOURGUIDE https://github.com/Fiware/tutorials.TourGuide-App.git
ENV GIT_REV_TOURGUIDE develop
ENV SUBSCRIPTIONS_PATH /opt/subscribe
ENV CC_APP_SERVER_PATH ${TOURGUIDE_USER_DIR}/tutorials.TourGuide-App/server

# create tourguide user
RUN adduser --disabled-password --gecos ""${TOURGUIDE_USER}"" ${TOURGUIDE_USER}

# install dependencies
RUN apt-get update && \
    apt-get -y install --no-install-recommends \
        bash curl ca-certificates \
        git git-core \
        tree ccze \
        psmisc \
        nodejs nodejs-legacy npm \
        apache2 libapache2-mod-passenger \
        mysql-client \
        && \
    # update node to latest stable
    npm install -g n && \
    n stable && \
    # remove ubuntu node packages, as they're not needed anymore
    apt-get -y purge nodejs nodejs-legacy npm && \
    # clean shell command hash table
    hash -r && \
    # update npm
    npm install -g npm && \
    # hack to fix nodejs support on ubuntu/debian passenger package
    mkdir fix-node-passenger && \
    cd fix-node-passenger && \
    apt-get update && \
    apt-get install -qy dpkg-dev && \
    sed -e 's/^deb /deb-src /g' /etc/apt/sources.list >> /etc/apt/sources.list.d/debsrc.list && \
    apt-get update && \
    apt-get source ruby-passenger && \
    version=$( ls ruby-passenger*.orig.tar.gz | sed -e 's/^ruby-passenger_\(.*\).orig.tar.gz$/\1/' ) && \
    cp -r ${PWD}/ruby-passenger-${version}/node_lib /usr/share/passenger/ && \
    cd .. && \
    rm -rf fix-node-passenger && \
    mkdir ${SUBSCRIPTIONS_PATH} && \
    # enable apache modules and disable default site
    a2enmod ssl && \
    a2enmod passenger && \
    a2dissite 000-default && \
    # install grunt-cli to be able to run the tasks inside the container
    npm install --loglevel warn -g grunt-cli && \
    # cleanup to thin the final image
    apt-get clean && \
    apt-get purge -y dpkg-dev && \
    apt-get autoremove --purge -y && \
    find /var/lib/apt/lists -type f -delete && \
    rm -fr /root/.npm

# setup tourguide app as $TOURGUIDE_USER
USER ${TOURGUIDE_USER}
WORKDIR ${TOURGUIDE_USER_DIR}

# get the repository from git and install node dependencies
RUN git clone -b ${GIT_REV_TOURGUIDE} ${GIT_URL_TOURGUIDE} && \
    cd ${CC_APP_SERVER_PATH} && \
    npm install --loglevel warn && \
    rm -fr ${TOURGUIDE_USER_DIR}/.npm

# copy default subscriptions
COPY cpr-registration.sh ${SUBSCRIPTIONS_PATH}/

# Add provision script for IdM
COPY keystone_provision.py ${TOURGUIDE_USER_DIR}/keystone_provision.py

# Switch back to root for docker-entrypoint.sh
USER root
ADD docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh
ADD https://raw.githubusercontent.com/Bitergia/docker/master/utils/entrypoint-common.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]
",Fiware/tutorials.TourGuide-App,docker/images/tutorials.tourguide-app/Dockerfile
62380a8081d26a155426f97ee08a1794d2dc39e1,47,"FROM busybox
VOLUME /var/lib/data
CMD [""echo""]
",hyone/my_docker_rake,spec/sample_project/dockerfiles/mydockerrake_data/Dockerfile
12caf7b8b02e2d8de6e95fefefbb2e241ef71296,305,"FROM rancher/confd-base:0.11.0-dev-rancher

ADD ./conf.d /etc/confd/conf.d
ADD ./templates /etc/confd/templates
ADD ./run.sh /opt/rancher/bin/

VOLUME /usr/share/elasticsearch/config
VOLUME /data/confd
VOLUME /opt/rancher/bin

ENTRYPOINT [""/confd""]
CMD [""--backend"", ""rancher"", ""--prefix"", ""/2015-07-25""]
",rancher/compose-templates,elasticsearch/containers/0.4.0/elasticsearch-conf/Dockerfile
341746fad7f2675208d8196762627c537e31b395,279,"FROM base/archlinux

MAINTAINER Spencer Rinehart <anubis@overthemonkey.com>

COPY php/php-4.3.1-1-x86_64.pkg.tar.xz /tmp/php-4.3.1-1-x86_64.pkg.tar.xz

RUN pacman --upgrade --noconfirm --noprogressbar /tmp/php-4.3.1-1-x86_64.pkg.tar.xz

ADD php.ini /etc/php/php.ini

CMD [""php""]
",nubs/docker-php-minimal,php-4.3.1/Dockerfile
9b797be00767fa8a102995873d39fb488aacc7e9,74,"FROM debian:jessie

RUN apt-get update && apt-get install -y texlive-full
",tianon/dockerfiles,latex/Dockerfile
121594edc30831437559b5295427d26e8c6af8c1,4941,"FROM alpine:edge
MAINTAINER Wonderfall <wonderfall@schrodinger.io>

ENV UID=991 GID=991

ARG NGINX_VERSION=1.11.1
ARG LIBRESSL_VERSION=2.4.1
ARG GPG_LIBRESSL=""A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5""
ARG GPG_NGINX=""B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8""
ARG BUILD_CORES

RUN echo ""@commuedge http://nl.alpinelinux.org/alpine/edge/community"" >> /etc/apk/repositories \
 && NB_CORES=${BUILD_CORES-$(getconf _NPROCESSORS_CONF)} \
 && BUILD_DEPS="" \
    build-base \
    linux-headers \
    ca-certificates \
    automake \
    autoconf \
    git \
    tar \
    libtool \
    pcre-dev \
    zlib-dev \
    binutils \
    gnupg"" \
 && apk -U add \
    ${BUILD_DEPS} \
    pcre \
    zlib \
    libgcc \
    libstdc++ \
    su-exec \
    openssl \
    bind-tools \
    tini@commuedge \
 && cd /tmp \
 && git clone https://github.com/bagder/libbrotli && cd libbrotli \
 && ./autogen.sh && ./configure && make -j ${NB_CORES} && make install \
 && cd /tmp \
 && git clone https://github.com/google/ngx_brotli \
 && git clone https://github.com/openresty/headers-more-nginx-module \
 && LIBRESSL_TARBALL=""libressl-${LIBRESSL_VERSION}.tar.gz"" \
 && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \
 && echo ""Verifying ${LIBRESSL_TARBALL} using GPG..."" \
 && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \
 && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \
 && gpg --import libressl.asc \
 && FINGERPRINT=""$(LANG=C gpg --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 \
  | sed -n ""s#Primary key fingerprint: \(.*\)#\1#p"")"" \
 && if [ -z ""${FINGERPRINT}"" ]; then echo ""Warning! Invalid GPG signature!"" && exit 1; fi \
 && if [ ""${FINGERPRINT}"" != ""${GPG_LIBRESSL}"" ]; then echo ""Warning! Wrong GPG fingerprint!"" && exit 1; fi \
 && echo ""All seems good, now unpacking ${LIBRESSL_TARBALL}..."" \
 && tar xzf ${LIBRESSL_TARBALL} \
 && NGINX_TARBALL=""nginx-${NGINX_VERSION}.tar.gz"" \
 && wget -q http://nginx.org/download/${NGINX_TARBALL} \
 && echo ""Verifying ${NGINX_TARBALL} using GPG..."" \
 && wget -q http://nginx.org/download/${NGINX_TARBALL}.asc \
 && wget -q http://nginx.org/keys/mdounin.key \
 && gpg --import mdounin.key \
 && FINGERPRINT=""$(LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 \
  | sed -n ""s#Primary key fingerprint: \(.*\)#\1#p"")"" \
 && if [ -z ""${FINGERPRINT}"" ]; then echo ""Warning! Invalid GPG signature!"" && exit 1; fi \
 && if [ ""${FINGERPRINT}"" != ""${GPG_NGINX}"" ]; then echo ""Warning! Wrong GPG fingerprint!"" && exit 1; fi \
 && echo ""All seems good, now unpacking ${NGINX_TARBALL}..."" \
 && tar xzf ${NGINX_TARBALL} && cd nginx-${NGINX_VERSION} \
 && wget -q https://raw.githubusercontent.com/felixbuenemann/sslconfig/updated-nginx-1.9.15-spdy-patch/patches/nginx_1_9_15_http2_spdy.patch -O spdy.patch \
 && patch -p1 < spdy.patch \
 && wget -q https://raw.githubusercontent.com/cloudflare/sslconfig/master/patches/nginx__dynamic_tls_records.patch \
 && patch -p1 < nginx__dynamic_tls_records.patch \
 && ./configure \
    --prefix=/etc/nginx \
    --sbin-path=/usr/sbin/nginx \
    --with-cc-opt='-O3 -fPIE -fstack-protector-strong -Wformat -Werror=format-security' \
    --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro' \
    --with-openssl=/tmp/libressl-${LIBRESSL_VERSION} \
    --with-http_ssl_module \
    --with-http_v2_module \
    --with-http_spdy_module \
    --with-http_gzip_static_module \
    --with-http_stub_status_module \
    --with-file-aio \
    --with-threads \
    --with-pcre-jit \
    --without-http_ssi_module \
    --without-http_scgi_module \
    --without-http_uwsgi_module \
    --without-http_geo_module \
    --without-http_autoindex_module \
    --without-http_map_module \
    --without-http_split_clients_module \
    --without-http_memcached_module \
    --without-http_empty_gif_module \
    --without-http_browser_module \
    --http-log-path=/var/log/nginx/access.log \
    --error-log-path=/var/log/nginx/error.log \
    --add-module=/tmp/headers-more-nginx-module \
    --add-module=/tmp/ngx_brotli \
 && make -j ${NB_CORES} && make install && make clean \
 && strip -s /usr/sbin/nginx \
 && apk del ${BUILD_DEPS} \
 && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg

COPY nginx.conf /etc/nginx/conf/nginx.conf
COPY run.sh /usr/local/bin/run.sh
COPY ngxpasswd /usr/local/bin/ngxpasswd
COPY ngxproxy /usr/local/bin/ngxproxy
COPY vhost_http.conf /etc/nginx/conf/vhost_http.conf
COPY vhost_https.conf /etc/nginx/conf/vhost_https.conf
COPY ssl_params /etc/nginx/conf/ssl_params
COPY headers_params /etc/nginx/conf/headers_params
COPY proxy_params /etc/nginx/conf/proxy_params

RUN chmod +x /usr/local/bin/*

EXPOSE 8000 4430

VOLUME /sites-enabled /www /conf.d /passwds /certs /var/log/nginx

LABEL description=""nginx built from source."" \
      openssl=""LibreSSL ${LIBRESSL_VERSION}."" \
      nginx=""nginx ${NGINX_VERSION}.""

CMD [""/sbin/tini"",""--"",""run.sh""]
",Wonderfall/dockerfiles,nginx/Dockerfile
3edd719849f9adf5d38aea26dfe93dc36ea065bb,2730,"FROM centos

MAINTAINER Humble Chirammal hchiramm@redhat.com
LABEL version=""0.5""
LABEL description=""GlusterFS container based on CentOS 7""

ENV container docker

RUN yum --setopt=tsflags=nodocs -y update; yum clean all;

RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
rm -f /lib/systemd/system/multi-user.target.wants/*;\
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;

RUN yum --setopt=tsflags=nodocs -q -y install \
  wget \
  nfs-utils \
  attr \
  iputils \
  iproute \
  sudo \
  xfsprogs \
  centos-release-gluster \
  ntp \
  epel-release \
  openssh-server \
  openssh-clients \
  cronie \
  tar \
  rsync \
  sos ; yum clean all

RUN yum --setopt=tsflags=nodocs -y install \
  glusterfs \
  glusterfs-server \
  glusterfs-geo-replication ; yum clean all

# Backing up gluster config as it overlaps when bind mounting.
RUN mkdir -p /etc/glusterfs_bkp /var/lib/glusterd_bkp /var/log/glusterfs_bkp;\
cp -r /etc/glusterfs/* /etc/glusterfs_bkp;\
cp -r /var/lib/glusterd/* /var/lib/glusterd_bkp;\
cp -r /var/log/glusterfs/* /var/log/glusterfs_bkp;

# Adding script to move the glusterfs config file to location
ADD gluster-setup.service /etc/systemd/system/gluster-setup.service
RUN chmod 644 /etc/systemd/system/gluster-setup.service

# Adding script to move the glusterfs config file to location
ADD gluster-setup.sh /usr/sbin/gluster-setup.sh
RUN chmod 500 /usr/sbin/gluster-setup.sh

# To avoid the warnings while accessing the container
RUN sed -i ""s/LANG/\#LANG/g"" /etc/locale.conf

# Setup ssh
RUN sed -i '/Defaults    requiretty/c\#Defaults    requiretty' /etc/sudoers
RUN sed -i '/Port 22/c\Port 2222' /etc/ssh/sshd_config

# Configure LVM so that we can create LVs and snapshots
RUN sed -i.save -e ""s#udev_sync = 1#udev_sync = 0#"" \
  -e ""s#udev_rules = 1#udev_rules = 0#"" \
  -e ""s#use_lvmetad = 1#use_lvmetad = 0#"" /etc/lvm/lvm.conf

# Set password
RUN echo 'root:password' | chpasswd

# Set SSH public key
USER root
RUN mkdir -p /root/.ssh

VOLUME [ â/sys/fs/cgroupâ, ""/dev"", ""/run/lvm"" , ""/var/lib/heketi"" ]

EXPOSE 111 245 443 2222 24007 2049 8080 6010 6011 6012 38465 38466 38468 38469 49152 49153 49154 49156 49157 49158 49159 49160 49161 49162

RUN systemctl disable nfs-server.service
RUN systemctl enable rpcbind.service
RUN systemctl enable ntpd.service
RUN systemctl enable gluster-setup.service
RUN systemctl enable glusterd.service

CMD [""/usr/sbin/init""]
",heketi/heketi,extras/docker/gluster/Dockerfile
6ea49c1b2e1e22a0446a8502608aa8ea0fef0c42,198,"FROM python:3.4

RUN groupadd -r uwsgi && useradd -r -g uwsgi uwsgi
RUN pip install Flask==0.10.1 uWSGI==2.0.8
WORKDIR /app
COPY app /app
COPY cmd.sh /

EXPOSE 9090 9191
USER uwsgi

CMD [""/cmd.sh""]
",using-docker/using_docker_in_dev,identidock/Dockerfile
5a3fffb5e27674a50d3bf9e0ebc9669c5494cd00,5144,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jre""                                    && \
    export JAVA_UPDATE=""11""                                      && \
    export JAVA_BUILD=""12""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u11/jre/slim/Dockerfile
53d123dc98be52a9509a0a82d7424fe56a1aa043,471,"FROM alpine:3.2
MAINTAINER John Doe ""john.doe@example.com""

LABEL testing=docker serverspec=true description=""My Container""

ENV PATH /usr/sbin:/usr/bin:/sbin:/bin

ENV container=docker CRACKER=""RANDOM;PATH=/tmp/bin:/sbin:/bin""

WORKDIR /opt

USER nobody

EXPOSE 80

VOLUME /volume1 /volume2

ADD files/file_example1 /tmp/file_example1

COPY files/file_example2 /tmp/file_example2

RUN [""echo"", ""running""]

ENTRYPOINT [""sleep""]
CMD [""2"", ""2000""]
ONBUILD RUN echo onbuild
",zuazo/dockerspec,spec/data/Dockerfile
6b51d8e62153c869df5bbc8cdf3e5fb34bd3801f,192,"FROM ubuntu:14.04

RUN DEBIAN_FRONTEND=noninteractive apt-get update -y && \
    apt-get install -y --force-yes qemu && \
    apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
",emc-advanced-dev/unik,containers/utils/qemu-util/Dockerfile
767754e31bb1f2e1d2fe0065a9d413f9762f9f45,587,"FROM debian:sid
MAINTAINER Jessica Frazelle <jess@docker.com>

RUN	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0AB215679C571D1C8325275B9BDB3D89CE49EC21 \
	&& echo ""deb http://ppa.launchpad.net/mozillateam/firefox-next/ubuntu wily main"" >> /etc/apt/sources.list.d/firefox.list \
	&& apt-get update && apt-get install -y \
	ca-certificates \
	firefox \
	hicolor-icon-theme \
	libasound2 \
	libgl1-mesa-dri \
	libgl1-mesa-glx \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

ENV LANG en-US

COPY local.conf /etc/fonts/local.conf

ENTRYPOINT [ ""/usr/bin/firefox"" ]
",jfrazelle/dockerfiles,firefox/Dockerfile
003e3d11d4fa0277cf0f49cc1a3d5390d334c6d8,553,"FROM nodesource/trusty-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.2.5-1nodesource1~trusty1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/trusty/node/4.2.5/Dockerfile
1e384def9eee9a92451debe6eb1c1539dc7e9ef4,640,"FROM ubuntu:14.04
MAINTAINER hardik.parekh@nectechnologies.in

ADD . /opt/stack/mistral

RUN /opt/stack/mistral/tools/docker/Dockerfile_script.sh

EXPOSE 8989

VOLUME [""/opt/stack/mistral""]
VOLUME [""/home/mistral""]
WORKDIR /home/mistral
CMD mistral-server --server all --config-file /home/mistral/mistral.conf

ENV TINI_SHA 066ad710107dc7ee05d3aa6e4974f01dc98f3888

# Use tini as subreaper in Docker container to adopt zombie processes
RUN curl -fsSL https://github.com/krallin/tini/releases/download/v0.5.0/tini-static -o /bin/tini \
  && chmod +x /bin/tini \
  && echo ""$TINI_SHA  /bin/tini"" | sha1sum -c -

ENTRYPOINT [""/bin/tini"", ""--""]",openstack/mistral,tools/docker/Dockerfile
f166824d70f382cde95085b77a8eb85f785ef3a0,1097,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
FROM bigtop/puppet:opensuse-13.2
MAINTAINER evansye@apache.org

COPY bigtop_toolchain /etc/puppet/modules/bigtop_toolchain
COPY gradle.home /usr/share/gradle.home

RUN puppet apply -e ""include bigtop_toolchain::installer""
RUN chown jenkins:jenkins /usr/share/gradle.home

ENV GRADLE_USER_HOME=/usr/share/gradle.home
",odpi/bigtop,docker/bigtop-slaves/opensuse-13.2/Dockerfile
6ae158f53c0dd3022c89556b3fac7cd3357e6a54,552,"FROM nodesource/vivid-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.10.0-1nodesource1~vivid1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/vivid/node/5.10.0/Dockerfile
3a4234f4d300c06018cc10fb21789661eab52116,1188,"# Debian 8, Java 1.8, Maven 3.1.1 ESA-STEP-SNAP (devlopment)  Dockerfile
# compile and build development versions of SNAP + toolboxes
# https://hub.docker.com/r/jamesdbloom/docker-java8-maven/
# https://github.com/edwardpmorris/docker-snap

# FIXME: consider using :tag rather than latest
FROM jamesdbloom/docker-java8-maven:latest

MAINTAINER epmorris ""edward.morris@uca.es""

LABEL snap_version='development' 

# create user group and install packages
RUN groupadd -r worker \
    && useradd -r -g worker worker \
    && mkdir /home/worker

# clone snap
WORKDIR /home/worker
RUN mkdir snap \
  && git clone https://github.com/senbox-org/snap-engine.git snap/snap-engine \
  && git clone https://github.com/senbox-org/snap-desktop.git snap/snap-desktop \
  && git clone https://github.com/senbox-org/s1tbx.git snap/s1tbx\
  && git clone https://github.com/senbox-org/s2tbx.git snap/s2tbx\
  && git clone https://github.com/senbox-org/s3tbx.git snap/s3tbx

RUN cd snap/snap-engine \
  && mvn clean install

RUN cd snap/snap-desktop \
  && mvn clean install

RUN cd snap/s1tbx \
  && mvn clean install

RUN cd snap/s2tbx \
  && mvn clean install

RUN cd snap/s3tbx \
  && mvn clean install
",edwardpmorris/docker-snap,java8-maven3-git-snap_dev/Dockerfile
cf84adbec04d6a2ae3a13707471f9051a2846d0c,5144,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jre""                                    && \
    export JAVA_UPDATE=""91""                                      && \
    export JAVA_BUILD=""14""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u91/jre/slim/Dockerfile
0ac8796a9964bafa3c0beceaf205be974a52567c,743,"# Start with CUDA base image
FROM nvidia/cuda:6.5-devel
MAINTAINER Kai Arulkumaran <design@kaixhin.com>

# Install dependencies
RUN apt-get update && apt-get install -y \
  git \
  libhdf5-dev \
  python-dev \
  python-numpy \
  python-pip

# Upgrade six
RUN pip install --upgrade six

# Clone Brainstorm repo and move into it
RUN cd /root && git clone https://github.com/IDSIA/brainstorm.git && cd brainstorm && \
# Install requirements
  pip install -r requirements.txt && \
# Install CUDA requirements
  pip install -r pycuda_requirements.txt && \
# Install
  python setup.py install

# Make and set data directory
RUN mkdir /data
ENV BRAINSTORM_DATA_DIR=/data
VOLUME /data

# Set ~/brainstorm as working directory
WORKDIR /root/brainstorm
",Kaixhin/dockerfiles,cuda-brainstorm/cuda_v6.5/Dockerfile
46ca6f708cdd334810cf5873bb81c1aced8b8a26,985,"# Base image
FROM compbio/ngseasy-base:wheezy

# Maintainer 
MAINTAINER Stephen Newhouse stephen.j.newhouse@gmail.com

# Set correct environment variables.
ENV HOME /root

# Update
RUN apt-get update -y

# + seqtk
    RUN cd /usr/local/pipeline/ \
    && git clone https://github.com/lh3/seqtk.git \
    && chown -R pipeman:ngsgroup /usr/local/pipeline/seqtk \
    && cd seqtk/ \
    && make \
    && sed  -i '$aPATH=${PATH}:/usr/local/pipeline/seqtk' /home/pipeman/.bashrc \
    && echo ""alias ngsSeqtk='/usr/local/pipeline/seqtk'"" >>  /home/pipeman/.bashrc \


#-------------------------------PERMISSIONS--------------------------
RUN chmod -R 766 /usr/local/pipeline/***
RUN chown -R pipeman:ngsgroup /usr/local/pipeline

# Cleanup the temp dir
RUN rm -rf /tmp/*

# open ports private only
EXPOSE 80

# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN apt-get autoclean && apt-get autoremove -y && rm -rf /var/lib/{apt,dpkg,cache,log}/
",KHP-Informatics/ngseasy,containerized/ngseasy_dockerfiles/ngs_utils/ngseasy_seqtk/Dockerfile
323ec7f6deb0ba937f3dab417561e5bee79e55f6,239,"FROM cuda

RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-samples-$CUDA_PKG_VERSION && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /usr/local/cuda/samples/1_Utilities/deviceQuery
RUN make

CMD ./deviceQuery
",NVIDIA/nvidia-docker,samples/ubuntu/deviceQuery/Dockerfile
28b2b9b2d1325b6dc7313fe335526ca57a52fc59,1037,"# PHPUnit Docker Container.
FROM composer/composer
MAINTAINER Julien Breux <julien.breux@gmail.com>

# Run some Debian packages installation.
ENV PACKAGES=""php-pear curl""
RUN apt-get update && \
    apt-get install -yq --no-install-recommends $PACKAGES && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Run xdebug installation.
RUN curl -L http://pecl.php.net/get/xdebug-2.3.3.tgz >> /usr/src/php/ext/xdebug.tgz && \
    tar -xf /usr/src/php/ext/xdebug.tgz -C /usr/src/php/ext/ && \
    rm /usr/src/php/ext/xdebug.tgz && \
    docker-php-ext-install xdebug-2.3.3 && \
    docker-php-ext-install pcntl && \
    php -m

# Goto temporary directory.
WORKDIR /tmp

# Run composer and phpunit installation.
RUN composer selfupdate && \
    composer require ""phpunit/phpunit:~5.0.10"" --prefer-source --no-interaction && \
    ln -s /tmp/vendor/bin/phpunit /usr/local/bin/phpunit

# Set up the application directory.
VOLUME [""/app""]
WORKDIR /app

# Set up the command arguments.
ENTRYPOINT [""/usr/local/bin/phpunit""]
CMD [""--help""]
",JulienBreux/phpunit-docker,5.0.10/Dockerfile
0349db088be1e34435e53b31eaa9db9b8c56f7c6,479,"# Spotify Cassandra 2.0 Cluster Node Image
#
# VERSION               0.1
#
# Expects CASSANDRA_SEEDS and CASSANDRA_TOKEN env variables to be set.
# If CASSANDRA_SEEDS is not set, node acts as its own seed
# If CASSANDRA_TOKEN is not set, startup process is aborted

FROM spotify/cassandra:base

USER root

# Place cluster-node startup-config script
ADD scripts/cassandra-clusternode.sh /usr/local/bin/cassandra-clusternode

# Start Cassandra
ENTRYPOINT [""cassandra-clusternode""]
",spotify/docker-cassandra,cassandra-cluster/Dockerfile
d1ceac6b7439d46d13a0bd7b92a0d68f0040cb7c,39,"FROM busybox:latest
CMD echo ""success""
",hypriot/compose,tests/fixtures/simple-dockerfile/Dockerfile
be038a35c0b7e939e0ba31f4435a6798c4c949ee,407,"FROM labstack/java
MAINTAINER Vishal Rana <vr@labstack.com>

# Install elasticsearch
RUN wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add -
RUN add-apt-repository 'deb http://packages.elasticsearch.org/elasticsearch/1.0/debian stable main'
RUN apt-get update
RUN apt-get install -y elasticsearch

EXPOSE 9200
EXPOSE 9300

ENTRYPOINT /usr/share/elasticsearch/bin/elasticsearch
",labstack/docker,elasticsearch/Dockerfile
4d4384d5282f1a9880e15b36467df00752868c11,346,"FROM lenz/whaleware

EXPOSE 5038 8088

RUN \
 yum install -y wget mlocate dnsmasq nano mc && \
 yum localinstall -y http://packages.asterisk.org/centos/6/current/i386/RPMS/asterisknow-version-3.0.1-2_centos6.noarch.rpm && \
 yum update -y asterisknow-version 

RUN yum install -y asterisk asterisk-configs --enablerepo=asterisk-11

ADD ./ww /ww

",l3nz/whaleware,examples/asterisk-load-test/build/Dockerfile
5afc15488936cd9e88ac0ab50324c6bc106b181a,866,"FROM ubuntu:14.04

MAINTAINER Daniele Venzano <venza@brownhat.org>

RUN apt-get update && apt-get install -y libopenmpi1.6 openmpi-bin openmpi-common openssh-server

RUN mkdir /var/run/sshd
#RUN echo 'root:screencast' | chpasswd
RUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed -i 's/#   StrictHostKeyChecking ask/   StrictHostKeyChecking no/' /etc/ssh/ssh_config

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

RUN mkdir -p /root/.ssh
RUN ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa
RUN cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys

#RUN adduser -D -h /home/user -s /bin/ash user 
#RUN passwd -u user

EXPOSE 22

VOLUME /mnt/workspace

WORKDIR /mnt/workspace

CMD [""/usr/sbin/sshd"", ""-D""]

",DistributedSystemsGroup/zoe-docker-images,openmpi-worker/Dockerfile
dc1ced32e7f29230377e7aae3530e64ad9e8eb90,2014,"# vim:set ft=dockerfile:
FROM debian:jessie-backports

# explicitly set user/group IDs
RUN groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
	&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
	&& wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
	&& wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
	&& gosu nobody true \
	&& apt-get purge -y --auto-remove ca-certificates wget

RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 514A2AD631A57A16DD0047EC749D6EEC0353B12C

RUN echo 'deb http://www.apache.org/dist/cassandra/debian 21x main' >> /etc/apt/sources.list.d/cassandra.list

ENV CASSANDRA_VERSION 2.1.14

RUN apt-get update \
	&& apt-get install -y cassandra=""$CASSANDRA_VERSION"" \
	&& rm -rf /var/lib/apt/lists/*

# https://issues.apache.org/jira/browse/CASSANDRA-11661
RUN sed -ri 's/^(JVM_PATCH_VERSION)=.*/\1=25/' /etc/cassandra/cassandra-env.sh

ENV CASSANDRA_CONFIG /etc/cassandra

COPY docker-entrypoint.sh /docker-entrypoint.sh
ENTRYPOINT [""/docker-entrypoint.sh""]

RUN mkdir -p /var/lib/cassandra ""$CASSANDRA_CONFIG"" \
	&& chown -R cassandra:cassandra /var/lib/cassandra ""$CASSANDRA_CONFIG"" \
	&& chmod 777 /var/lib/cassandra ""$CASSANDRA_CONFIG""
VOLUME /var/lib/cassandra

# 7000: intra-node communication
# 7001: TLS intra-node communication
# 7199: JMX
# 9042: CQL
# 9160: thrift service
EXPOSE 7000 7001 7199 9042 9160
CMD [""cassandra"", ""-f""]
",docker-library/cassandra,2.1/Dockerfile
7a633bd97e5ef062ae98ba4e75aa61e1f0d47672,470,"#
# OpenJDK Java 6 JRE Dockerfile
#
# https://github.com/dockerfile/java
# https://github.com/dockerfile/java/tree/master/openjdk-6-jre
#

# Pull base image.
FROM dockerfile/ubuntu

# Install Java.
RUN \
  apt-get update && \
  apt-get install -y openjdk-6-jre && \
  rm -rf /var/lib/apt/lists/*

# Define working directory.
WORKDIR /data

# Define commonly used JAVA_HOME variable
ENV JAVA_HOME /usr/lib/jvm/java-6-openjdk-amd64

# Define default command.
CMD [""bash""]
",dockerfile/java,openjdk-6-jre/Dockerfile
f01bc558695e1925651101862c3e1219082509d7,324,"#
# This is fake image used for testing STI. It tests scripts baked inside image.
#
FROM busybox

RUN mkdir -p /sti-fake/src && \
    mkdir -p /tmp/scripts

WORKDIR /

ADD scripts/.s2i/bin/ /tmp/scripts/

# Scripts are already in the image and this is their location
LABEL io.openshift.s2i.scripts-url=image:///tmp/scripts/
",openshift/source-to-image,test/integration/images/sti-fake-scripts/Dockerfile
1ffb17ef084d260fb90c03fb0105651b7a6b1e61,205,"FROM ubuntu:14.04
MAINTAINER Erik \\Hollensbe <erik@hollensbe.org>\""

RUN apt-get \update && \
  apt-get \""install znc -y
ADD \conf\\"" /.znc

RUN foo \

bar \

baz

CMD [ ""\/usr\\\""/bin/znc"", ""-f"", ""-r"" ]
",openshift/origin,Godeps/_workspace/src/github.com/docker/docker/builder/parser/testfiles/escapes/Dockerfile
df78cb08017dd6f7492fa6f0d5aabeb6582ee8c2,1270,"# This Dockerfile is used to build an sakuli image based on Ubuntu

FROM consol/ubuntu-xfce-vnc:1.0.1
MAINTAINER Tobias Schneck ""tobias.schneck@consol.de""
ENV REFRESHED_AT 2016-06-03

ENV VNC_COL_DEPTH 24
ENV VNC_RESOLUTION 1280x1024
ENV VNC_PW sakuli

ENV SAKULI_DOWNLOAD_URL https://labs.consol.de/sakuli/install
ENV SAKULI_VERSION 1.0.2-SNAPSHOT
ENV SAKULI_HOME /root/sakuli/sakuli-v$SAKULI_VERSION
ENV SAKULI_TEST_SUITE /root/sakuli/example_test_suites/example_xfce

### Install Sakuli
##Install some native libaries
RUN apt-get update && apt-get -y install libcv2.4 libtesseract3 wmctrl xdotool psmisc
## Install sakuli
ADD scripts/auto-install.xml /tmp/
RUN wget --directory-prefix=/tmp $SAKULI_DOWNLOAD_URL/sakuli-v$SAKULI_VERSION-installer.jar \
    && java -jar /tmp/sakuli-v$SAKULI_VERSION-installer.jar /tmp/auto-install.xml \
    && rm -f sakuli*.jar auto-install.xml

### Install apps for testing
RUN apt-get -y install gedit gnome-calculator

# xvnc server port, if $DISPLAY=:1 port will be 5901
EXPOSE 5901
# novnc web port
EXPOSE 6901

ADD scripts/sakuli_startup.sh /root/scripts/
RUN chmod +x /root/scripts/*.sh

# startup script
ENTRYPOINT [""/root/scripts/sakuli_startup.sh""]
# arguments for the sakuli_startup.sh script
CMD [""run $SAKULI_TEST_SUITE""]
",ConSol/sakuli,docker/sakuli-ubuntu-xfce/Dockerfile
8eef732eade6f62124c9adc5bd70e4c555e2113f,1699,"FROM iron/base

RUN echo '@edge http://nl.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories \
  && echo '@community http://nl.alpinelinux.org/alpine/edge/community' >> /etc/apk/repositories \
  && apk update && apk upgrade \
  && apk add erlang@edge \
     erlang-asn1@edge \
     erlang-common-test@edge \
     erlang-compiler@edge \
     erlang-cosevent@edge \
     erlang-coseventdomain@edge \
     erlang-cosfiletransfer@edge \
     erlang-cosnotification@edge \
     erlang-cosproperty@edge \
     erlang-costime@edge \
     erlang-costransaction@edge \
     erlang-crypto@edge \
     erlang-debugger@edge \
     erlang-dev@edge \
     erlang-dialyzer@edge \
     erlang-diameter@edge \
     erlang-edoc@edge \
     erlang-eldap@edge \
     erlang-erl-docgen@edge \
     erlang-erl-interface@edge \
     erlang-erts@edge \
     erlang-et@edge \
     erlang-eunit@edge \
     erlang-gs@edge \
     erlang-hipe@edge \
     erlang-ic@edge \
     erlang-inets@edge \
     erlang-jinterface@edge \
     erlang-kernel@edge \
     erlang-megaco@edge \
     erlang-mnesia@edge \
     erlang-observer@edge \
     erlang-odbc@edge \
     erlang-orber@edge \
     erlang-os-mon@edge \
     erlang-ose@edge \
     erlang-otp-mibs@edge \
     erlang-parsetools@edge \
     erlang-percept@edge \
     erlang-public-key@edge \
     erlang-reltool@edge \
     erlang-runtime-tools@edge \
     erlang-sasl@edge \
     erlang-snmp@edge \
     erlang-ssh@edge \
     erlang-ssl@edge \
     erlang-stdlib@edge \
     erlang-syntax-tools@edge \
     erlang-test-server@edge \
     erlang-tools@edge \
     erlang-typer@edge \
     erlang-webtool@edge \
     erlang-xmerl@edge \
  && rm -rf /var/cache/apk/*",iron-io/dockers,erlang/Dockerfile
bbce0f1dd2643697c2529b31961e41c913efa869,555,"FROM nodesource/jessie-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_0.12/pool/main/n/nodejs/nodejs_0.12.7-1nodesource1~jessie1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/jessie/node/0.12.7/Dockerfile
5b562fd52c9fe3b1ac4f91ab37555456926a0f3d,110,"FROM node:4.2.1

MAINTAINER Troy Steuwer <tsteuwer@gmail.com> 

EXPOSE 3000

RUN npm install -q -g strongloop
",tsteuwer/emberloop,loopback.docker/Dockerfile
2b17fcf345f469dad7474752a87f9ae4d0b904e2,1677,"FROM ubuntu:14.04
MAINTAINER Jaewoo Lee <continuse@icloud.com>

# Ubuntu Cloud archive keyring and repository
RUN apt-get update && apt-get -y install ubuntu-cloud-keyring \
        && echo ""deb http://ubuntu-cloud.archive.canonical.com/ubuntu"" \
                ""trusty-updates/kilo main"" > /etc/apt/sources.list.d/cloudarchive-kilo.list \
        && apt-get update && apt-get -y dist-upgrade

RUN apt-get -y install qemu
RUN apt-get -y install lvm2
RUN apt-get -y install cinder-volume python-mysqldb
RUN apt-get -y install nfs-kernel-server nfs-common
#RUN apt-get install -y open-iscsi tgt iscsitarget iscsitarget-dkms

######### controller monitoring #########
RUN apt-get -y install telnet curl ssh keepalived

######### /etc/hosts file modify #############
RUN cp /etc/hosts /tmp/hosts \
    && mkdir -p -- /lib-override && cp /lib/x86_64-linux-gnu/libnss_files.so.2 /lib-override \
    && perl -pi -e 's:/etc/hosts:/tmp/hosts:g' /lib-override/libnss_files.so.2

ENV LD_LIBRARY_PATH /lib-override
######### /etc/hosts file modify #############

# NFS Share Volume
VOLUME [""/storage""]

# Configuration file copy for Cinder Service
COPY config/cinder/cinder.conf /etc/cinder/cinder.conf
COPY config/cinder/cinder.conf.org /etc/cinder/cinder.conf.org
COPY config/cinder/lvm.conf /etc/lvm/lvm.conf
COPY config/cinder/idmapd.conf /etc/idmapd.conf
COPY config/cinder/nfs_shares /etc/cinder/nfs_shares
COPY config/cinder/exports /etc/exports

RUN chown cinder:cinder /etc/cinder/cinder.conf
RUN chown cinder:cinder /etc/cinder/cinder.conf.org
RUN chown root:cinder /etc/cinder/nfs_shares

COPY hostsctl.sh /hostsctl.sh
COPY entrypoint.sh /entrypoint.sh

CMD [""/entrypoint.sh""]
",ContinUSE/openstack-on-coreos,docker-files/kilo/cinder/Dockerfile
e1ebd88c24c6d1957b538e80dc7d6b45859d0d56,983,"FROM alpine:3.2
MAINTAINER dengnan@google.com vmarmol@google.com vishnuk@google.com jimmidyson@gmail.com

ENV GLIBC_VERSION ""2.23-r1""

RUN apk add --update ca-certificates device-mapper && \
    wget https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk && \
    wget https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk && \
    apk add --allow-untrusted glibc-${GLIBC_VERSION}.apk glibc-bin-${GLIBC_VERSION}.apk && \
    apk add zfs-utils  --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted  && \
    /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    rm -rf /var/cache/apk/*

# Grab cadvisor from the staging directory.
ADD cadvisor /usr/bin/cadvisor

EXPOSE 8080
ENTRYPOINT [""/usr/bin/cadvisor"", ""-logtostderr""]
",fabric8io/gofabric8,vendor/github.com/google/cadvisor/deploy/Dockerfile
7625b13794da227e8ade3f27c8fe1a2b238af633,740,"# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM busybox
MAINTAINER Satnam Singh <satnam@google.com>
ADD cauldron cauldron
ADD cauldron.go cauldron.go
ENTRYPOINT [""/cauldron""]
",hyperhq/hypernetes,test/soak/cauldron/Dockerfile
324f51e55c5f82bdf8abd5d078efdacaa1fbc20d,1882,"# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM ubuntu:14.04

RUN apt-get update -y && apt-get install -y curl

# Install rvm
RUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
RUN \curl -sSL https://get.rvm.io | bash -s stable --ruby

RUN /bin/bash -l -c ""echo '. /etc/profile.d/rvm.sh' >> ~/.bashrc""
RUN /bin/bash -l -c ""gem install --update bundler""
",leifurhauks/grpc,tools/dockerfile/distribtest/ruby_ubuntu1404_x64/Dockerfile
9cbdc5504fba5d19ab42b35d9fdbce30dfeaec47,5143,"FROM alpine

MAINTAINER Lothar Wieske <lothar.wieske@gmail.com>

RUN cd /tmp                                                              && \
    apk add --no-cache --virtual=build-dependencies ca-certificates wget && \
    export GLIBC_VERSION=""2.23-r3""                                  && \
    export JAVA_PACKAGE=""jre""                                    && \
    export JAVA_UPDATE=""5""                                      && \
    export JAVA_BUILD=""13""                                        && \
    export GLIBC_URL=""https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}"" && \
    export GLIBC_APK=""glibc-${GLIBC_VERSION}.apk""                        && \
    export GLIBC_BIN_APK=""glibc-bin-${GLIBC_VERSION}.apk""                && \
    export JAVA_URL=""http://download.oracle.com/otn-pub/java/jdk/8u${JAVA_UPDATE}-b${JAVA_BUILD}"" && \
    export JAVA_TGZ=""${JAVA_PACKAGE}-8u${JAVA_UPDATE}-linux-x64.tar.gz""  && \
    export JAVA_HOME=""/usr/lib/jvm/default-jvm""                          && \
    wget -q ${GLIBC_URL}/${GLIBC_APK}                                    && \
    wget -q ${GLIBC_URL}/${GLIBC_BIN_APK}                                && \
    apk add --no-cache --allow-untrusted ${GLIBC_APK}                    && \
    apk add --no-cache --allow-untrusted ${GLIBC_BIN_APK}                && \
    echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
    mkdir -p /usr/lib/jvm                                                && \
    wget -qO- --header ""Cookie: oraclelicense=accept-securebackup-cookie;"" ${JAVA_URL}/${JAVA_TGZ} | tar -xzf -  && \
    if [ ${JAVA_PACKAGE} = ""server-jre"" ]; then mv jdk*/jre /usr/lib/jvm/java-8-oracle; else mv j* /usr/lib/jvm/java-8-oracle; fi && \
    ln -s java-8-oracle $JAVA_HOME                                       && \
    rm -rf $JAVA_HOME/*src.zip                                           && \
    rm -rf \
            ${JAVA_HOME}/*/javaws \
            ${JAVA_HOME}/*/jjs \
            ${JAVA_HOME}/*/keytool \
            ${JAVA_HOME}/*/orbd \
            ${JAVA_HOME}/*/pack200 \
            ${JAVA_HOME}/*/policytool \
            ${JAVA_HOME}/*/rmid \
            ${JAVA_HOME}/*/rmiregistry \
            ${JAVA_HOME}/*/servertool \
            ${JAVA_HOME}/*/tnameserv \
            ${JAVA_HOME}/*/unpack200 \
            ${JAVA_HOME}/*/*javafx* \
            ${JAVA_HOME}/*/*jfx* \
            ${JAVA_HOME}/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/amd64/libglass.so \
            ${JAVA_HOME}/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/deploy* \
            ${JAVA_HOME}/*/desktop \
            ${JAVA_HOME}/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/javaws.jar \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr \
            ${JAVA_HOME}/*/jfr.jar \
            ${JAVA_HOME}/*/missioncontrol \
            ${JAVA_HOME}/*/oblique-fonts \
            ${JAVA_HOME}/*/plugin.jar \
            ${JAVA_HOME}/*/visualvm \
            ${JAVA_HOME}/man \
            ${JAVA_HOME}/plugin \
            ${JAVA_HOME}/*.txt \
            ${JAVA_HOME}/*/*/javaws \
            ${JAVA_HOME}/*/*/jjs \
            ${JAVA_HOME}/*/*/keytool \
            ${JAVA_HOME}/*/*/orbd \
            ${JAVA_HOME}/*/*/pack200 \
            ${JAVA_HOME}/*/*/policytool \
            ${JAVA_HOME}/*/*/rmid \
            ${JAVA_HOME}/*/*/rmiregistry \
            ${JAVA_HOME}/*/*/servertool \
            ${JAVA_HOME}/*/*/tnameserv \
            ${JAVA_HOME}/*/*/unpack200 \
            ${JAVA_HOME}/*/*/*javafx* \
            ${JAVA_HOME}/*/*/*jfx* \
            ${JAVA_HOME}/*/*/amd64/libdecora_sse.so \
            ${JAVA_HOME}/*/*/amd64/libfxplugins.so \
            ${JAVA_HOME}/*/*/amd64/libglass.so \
            ${JAVA_HOME}/*/*/amd64/libgstreamer-lite.so \
            ${JAVA_HOME}/*/*/amd64/libjavafx*.so \
            ${JAVA_HOME}/*/*/amd64/libjfx*.so \
            ${JAVA_HOME}/*/*/amd64/libprism_*.so \
            ${JAVA_HOME}/*/*/deploy* \
            ${JAVA_HOME}/*/*/desktop \
            ${JAVA_HOME}/*/*/ext/jfxrt.jar \
            ${JAVA_HOME}/*/*/ext/nashorn.jar \
            ${JAVA_HOME}/*/*/javaws.jar \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr \
            ${JAVA_HOME}/*/*/jfr.jar \
            ${JAVA_HOME}/*/*/missioncontrol \
            ${JAVA_HOME}/*/*/oblique-fonts \
            ${JAVA_HOME}/*/*/plugin.jar \
            ${JAVA_HOME}/*/*/visualvm \
            ${JAVA_HOME}/*/man \
            ${JAVA_HOME}/*/plugin \
            ${JAVA_HOME}/*.txt \
                                                                         && \
    apk del build-dependencies                                           && \
    ln -s $JAVA_HOME/bin/* /usr/bin/                                     && \
    rm -rf /tmp/*

ENV JAVA_HOME=/usr/lib/jvm/default-jvm/ \
    PATH=${PATH}:/usr/lib/jvm/default-jvm/bin
",lwieske/dockerfiles-java-8,8u05/jre/slim/Dockerfile
1c1621ec02055325fa325314be742f92e0e32b75,555,"FROM nodesource/precise-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_4.x/pool/main/n/nodejs/nodejs_4.2.5-1nodesource1~precise1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,ubuntu/precise/node/4.2.5/Dockerfile
79d986361c6ad1ecd389394a539c0982ea1e0261,121,"FROM java:alpine

ENV TERM=xterm

ADD rootfs/ /

ENTRYPOINT [""/docker-entrypoint.sh""]
CMD [""/opt/prometheus/config.yml""]
",agalitsyn/yagoda,cassandra/image-jmx-exporter/Dockerfile
171d599188f6737d4a5b0da96701ea0a680478ba,663,"FROM debian:squeeze

MAINTAINER  DBpedia Spotlight Team <dbp-spotlight-developers@lists.sourceforge.net>

RUN apt-get update && apt-get install -y \
    curl \
    openjdk-6-jre

ENV RELEASE_SERVER    spotlight.sztaki.hu
ENV RELEASE_FILENAME  dbpedia-spotlight-latest.jar
ENV LANGUAGE_MODEL    es.tar.gz	   

RUN mkdir -p /opt/spotlight && \
    cd /opt/spotlight && \
    curl -O ""http://$RELEASE_SERVER/downloads/$RELEASE_FILENAME"" && \
    curl -O ""http://$RELEASE_SERVER/downloads/latest_models/$LANGUAGE_MODEL"" && \
    tar xvf $LANGUAGE_MODEL  && \
    rm  $LANGUAGE_MODEL


ADD spotlight.sh /bin/spotlight.sh
RUN chmod +x /bin/spotlight.sh

EXPOSE 80

   
",sandroacoelho/spotlight-docker,v0.7/spanish/Dockerfile
854a5b170ce8375b1fcb4aef7b2cea45cdb8286a,350,"
FROM docker.io/java:openjdk-8-jdk

MAINTAINER Hygieia@capitalone.com

RUN \

  mkdir  /hygieia

COPY *.jar /hygieia/
COPY jira-properties-builder.sh /hygieia/

WORKDIR /hygieia/

VOLUME [""/hygieia/logs""]

CMD ./jira-properties-builder.sh &&\
	 java -jar jira-feature-collector*.jar --spring.config.location=hygieia-jira-feature-collector.properties
",capitalone/Hygieia,jira-feature-collector/docker/Dockerfile
cdfb136c6ed7c1433e3151536050bda86cf01156,282,"# Copyright 2015 tsuru authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

FROM	tsuru/base-platform
ADD	. /var/lib/tsuru/go
RUN	cp /var/lib/tsuru/go/deploy /var/lib/tsuru
RUN	/var/lib/tsuru/go/install
",tsuru/platforms,go/Dockerfile
e6142d5c97e7f01622d99a9cee98881cd2c30856,584,"FROM ruby:2.3-slim

RUN apt-get update
RUN apt-get -y install libmysqlclient-dev mysql-client libpq-dev libsqlite3-dev mongodb-clients postgresql-client

WORKDIR /opt/uphold
COPY Gemfile /opt/uphold/Gemfile
COPY Gemfile.lock /opt/uphold/Gemfile.lock

RUN \
  apt-get install -y build-essential && \
  bundle install --without ui development && \
  apt-get remove -y build-essential && \
  apt-get autoremove -y && apt-get clean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY lib /opt/uphold/lib
COPY environment.rb tester.rb /opt/uphold/

ENTRYPOINT [""ruby"", ""tester.rb""]
",forward3d/uphold,dockerfiles/tester/Dockerfile
397a07c3a3dde7d8900780039c2bc45c80c282c1,138,"# reuse any image, we only need echo and sleep
FROM qkrijger/wiremock:0.1
ADD script.sh /
WORKDIR /
ENTRYPOINT [""bash""]
CMD [""script.sh""]
",stackwork/stackwork,src/test/gradle-projects/stack-exiting-unexpectedly/image/Dockerfile
e35b3cf54c132e603d9e5530d13cb7d9fb679225,75,"FROM node

EXPOSE 1337

ADD ./hello.js /opt/

CMD [""node"", ""/opt/hello.js""]",piti118/docker-compose-ui,demo-projects/hello-node/app/Dockerfile
a74388d6db80c11c71faffc4594cca18173be2c7,641,"FROM ubuntu:precise

run apt-get install -y curl build-essential git-core

# Install Go (this is copied from the docker Dockerfile)
run curl -s https://go.googlecode.com/files/go1.1.1.linux-amd64.tar.gz | tar -v -C /usr/local -xz
env PATH  /usr/local/go/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
env GOPATH  /go
env CGO_ENABLED 0
run cd /tmp && echo 'package main' > t.go && go test -a -i -v

run git clone https://github.com/docker/docker-registry.git /docker-registry.git
run cd /docker-registry.git/contrib/golang_impl && make && cp bin/docker-registry /usr/local/bin/

expose 80
cmd /usr/local/bin/docker-registry
",docker/docker-registry,contrib/golang_impl/Dockerfile
c000991af2e8ea2af313872bc6bbe91dbdd1400c,512,"#
# szepeviktor/jessie-backport
#
# VERSION       0.2.1
# BUILD         docker build -t szepeviktor/jessie-backport:0.2.1 jessie-backport
# RUN           docker run --rm --tty -v $TARGET_PATH:/opt/results --env PACKAGE=""$SOURCE-PACKAGE/$RELEASE"" szepeviktor/jessie-backport:0.2.1

FROM szepeviktor/jessie-build

ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

COPY debackport.sh /usr/local/bin/debackport.sh

USER debian
WORKDIR /home/debian
VOLUME [""/opt/results""]

ENTRYPOINT [""/usr/local/bin/debackport.sh""]
",szepeviktor/debian-server-tools,virtualization/jessie-backport/Dockerfile
a26b016b0ba5eee26045a7a97283f8795217743f,553,"FROM nodesource/wheezy-base
MAINTAINER William Blankenship <wblankenship@nodesource.com>

RUN curl https://deb.nodesource.com/node_5.x/pool/main/n/nodejs/nodejs_5.6.0-1nodesource1~wheezy1_amd64.deb > node.deb \
 && dpkg -i node.deb \
 && rm node.deb

RUN npm install -g pangyp\
 && ln -s $(which pangyp) $(dirname $(which pangyp))/node-gyp\
 && npm cache clear\
 && node-gyp configure || echo """"

ENV NODE_ENV production
WORKDIR /usr/src/app
CMD [""npm"",""start""]

RUN apt-get update \
 && apt-get upgrade -y --force-yes \
 && rm -rf /var/lib/apt/lists/*;",nodesource/docker-node,debian/wheezy/node/5.6.0/Dockerfile
9ac96c7db2917960c9e2e9a41c443770fa84d4b2,260,"FROM busybox:ubuntu-14.04

ADD ./bin/guestbook /app/guestbook
ADD ./_src/public/index.html /app/public/index.html
ADD ./_src/public/script.js /app/public/script.js
ADD ./_src/public/style.css /app/public/style.css

WORKDIR /app
CMD [""./guestbook""]
EXPOSE 3000
",mesosphere/kubernetes,examples/guestbook-go/_src/guestbook/Dockerfile
387ce3b98fd32b10f89121ad099ca69d75cbb43e,372,"FROM ubuntu:trusty

# update the package repository and install python pip
RUN apt-get -y update && apt-get -y install python-dev python-pip

# install flower
RUN pip install flower

# Make sure we expose port 5555 so that we can connect to it
EXPOSE 5555

ADD run_flower.sh /usr/local/bin/run_flower.sh

# Running flower
CMD [""/bin/bash"", ""/usr/local/bin/run_flower.sh""]
",contiv/kubernetes,examples/celery-rabbitmq/flower/Dockerfile
44ec6dd0e34a38fea8ff56b7ef24c413dabe2327,425,"FROM golang:1.5.1

RUN apt-get update && apt-get install -y \
	libltdl-dev \
	libsqlite3-dev \
	--no-install-recommends \
	&& rm -rf /var/lib/apt/lists/*

RUN go get golang.org/x/tools/cmd/vet \
	&& go get golang.org/x/tools/cmd/cover \
	&& go get github.com/tools/godep

COPY . /go/src/github.com/docker/notary

ENV GOPATH /go/src/github.com/docker/notary/Godeps/_workspace:$GOPATH

WORKDIR /go/src/github.com/docker/notary
",SUSE/zypper-docker,vendor/github.com/docker/docker/vendor/src/github.com/docker/notary/Dockerfile
bb90a833d993d85cce790fd5ec3074ecdf8845a8,192,"FROM teradatalabs/centos6-java8-oracle
MAINTAINER Grzegorz KokosiÅski <grzegorz.kokosinski@teradata.com>

COPY /presto-launcher-wrapper.sh /
COPY catalog /etc/catalog
COPY master /etc/master
",facebook/presto,presto-product-tests/etc/singlenode/presto-dev-env/Dockerfile
f83e18c8a3182b0488e93b30b82e1489728aa17b,1695,"# Copyright 2015-2016, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

FROM golang:1.4

# Using login shell removes Go from path, so we add it.
RUN ln -s /usr/src/go/bin/go /usr/local/bin

# Define the default command.
CMD [""bash""]
",chai2010/grpc-windows,grpc/grpc-release-0_13_0/tools/dockerfile/grpc_interop_go/Dockerfile
ea0b4a67c434f451a8b25abe94b7a9ca8ccc4c2b,553,"#
# Salt Example Container
# Apache Spark 1.6.1
#
# Build using:
# $ docker build -t uncharted/salt-examples .
#

FROM uncharted/sparklet:1.6.1
MAINTAINER Sean McIntyre <smcintyre@uncharted.software>

# Mount point for source directories
WORKDIR /opt/salt

# for dev environment
ENV GRADLE_OPTS -Dorg.gradle.native=false

CMD [""./gradlew""]

# Add sample data
ADD http://assets.oculusinfo.com/salt/sample-data/taxi_one_day.csv /opt/data/taxi_one_day.csv
ADD http://assets.oculusinfo.com/salt/sample-data/ubuntu-filelist.csv /opt/data/ubuntu-filelist.csv
",unchartedsoftware/salt-examples,Dockerfile
0e14c54653dc13c4a0f805279e87610061fe4779,304,"FROM node:4.2.2

# Install location
ENV dir /var/www/ldf-server

# Copy the server files
ADD . ${dir}

# Install the node module
RUN cd ${dir} && npm install

# Expose the default port
EXPOSE 3000

# Run base binary
WORKDIR ${dir}
ENTRYPOINT [""node"", ""bin/ldf-server""]

# Default command
CMD [""--help""]

",LinkedDataFragments/Server.js,Dockerfile
eec336f77cfd6634d9ae3e137721877f75dae1e5,1233,"FROM jeanblanchard/java:8
MAINTAINER Jean Blanchard <jean@blanchard.io>

# Expose web port
EXPOSE 8080

# Tomcat Version
ENV TOMCAT_VERSION_MAJOR 8
ENV TOMCAT_VERSION_FULL  8.5.3

# Download and install
RUN apk add --update curl &&\
  curl -LO https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_VERSION_MAJOR}/v${TOMCAT_VERSION_FULL}/bin/apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &&\
  curl -LO https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_VERSION_MAJOR}/v${TOMCAT_VERSION_FULL}/bin/apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz.md5 &&\
  md5sum -c apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz.md5 &&\
  gunzip -c apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz | tar -xf - -C /opt &&\
  rm -f apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz.md5 &&\
  ln -s /opt/apache-tomcat-${TOMCAT_VERSION_FULL} /opt/tomcat &&\
  rm -rf /opt/tomcat/webapps/examples /opt/tomcat/webapps/docs &&\
  apk del curl &&\
  rm -rf /var/cache/apk/*

# Configuration
ADD tomcat-users.xml /opt/tomcat/conf/
RUN sed -i 's/52428800/5242880000/g' /opt/tomcat/webapps/manager/WEB-INF/web.xml 

# Set environment
ENV CATALINA_HOME /opt/tomcat

# Launch Tomcat on startup
CMD ${CATALINA_HOME}/bin/catalina.sh run
",jeanblanchard/docker-tomcat,Dockerfile
0f2314c3561a69427bf96a0ecdf341deed28336d,1519,"FROM ubuntu:15.10

MAINTAINER Ryan Sheehan <rsheehan@gmail.com>

ENV DEBIAN_FRONTEND noninteractive

# RUN echo 'deb [arch=amd64,i386] http://repo.steampowered.com/steam precise steam' > /etc/apt/sources.list.d/steam.list && dpkg --add-architecture i386

RUN dpkg --add-architecture i386

# install dependencies
RUN apt-get  update && apt-get install -y \    
    # libc6:i386 \
    # libgl1-mesa-dri:i386 \
    # libgl1-mesa-glx:i386 \
    lib32gcc1 \
    lib32stdc++6 \
    libcurl4-gnutls-dev:i386 \
    tar \
    adduser \
    sudo \
    python \
    python-pip \
    && apt-get clean

# install crudini
RUN pip install crudini

# setup steam user
RUN echo 'steam ALL = NOPASSWD: ALL' > /etc/sudoers.d/steam && chmod 0440 /etc/sudoers.d/steam
RUN adduser --disabled-password --gecos 'Steam' steam && adduser steam video
ENV HOME /home/steam

# get steamcmd tar.gz
ADD [""http://media.steampowered.com/installer/steamcmd_linux.tar.gz"", ""/home/steam/""]
RUN tar -xvzf /home/steam/steamcmd_linux.tar.gz -C /home/steam/ && rm /home/steam/steamcmd_linux.tar.gz

# switch to steam user
USER steam

# expose the slave port
EXPOSE 10888

# install dst
RUN $HOME/steamcmd.sh +@ShutdownOnFailedCommand 1 +@NoPromptForPassword 1 +login anonymous +force_install_dir /home/steam/steamapps/DST +app_update 343050 -beta cavesbeta validate +quit

# copy scripts
COPY [""run"", ""/home/steam/""]

# create the data volume
VOLUME [""/home/steam/.klei/DoNotStarveTogether"", ""/mods""]

# default run the server
ENTRYPOINT [""/home/steam/run""]

",ryansheehan/dst,Dockerfile
a869f5bfd22f0736481a48d2a53edf3f30b97f59,337,"FROM golang:1.5.3

RUN go get  github.com/golang/lint/golint \
            github.com/mattn/goveralls \
            golang.org/x/tools/cover \
            github.com/tools/godep \
            github.com/aktau/github-release

ENV USER root
WORKDIR /go/src/github.com/docker/machine

COPY . /go/src/github.com/docker/machine
RUN mkdir bin
",denverdino/machine,Dockerfile
08f5ed6cb5c34fff35f2ff6c923a4dac5e74d9bc,201,"FROM quay.io/orgsync/ruby:2.2.3
WORKDIR /code
COPY Gemfile /code/Gemfile
COPY stoplight-admin.gemspec /code/stoplight-admin.gemspec
RUN bundle install
COPY . /code/
CMD bundle exec ruby example-app.rb
",orgsync/stoplight-admin,Dockerfile
d0b71515abd9d6410e15aba2990b1a5214b0ebae,1148,"FROM python:2.7

MAINTAINER Jerry Baker <jbaker@docker.com>

# required packages
RUN apt-get update && apt-get -y install \
    bsdmainutils \
    git \
    nodejs \
    npm \
    tree

# docker
RUN curl -sSL https://get.docker.com | sh

# reveal.js
WORKDIR /opt/revealjs
RUN ln -s /usr/bin/nodejs /usr/bin/node
RUN git clone https://github.com/hakimel/reveal.js.git /opt/revealjs
RUN git clone https://github.com/denehyg/reveal.js-menu.git /opt/revealjs/plugin/menu
RUN npm cache clean && npm install

# setup
COPY present/present.py /opt/revealjs/
COPY present/css/docker.css /opt/revealjs/css/theme/
COPY present/css/docker-code.css /opt/revealjs/lib/css/
COPY present/css/sd_custom.css /opt/revealjs/css/
COPY present/css/print /opt/revealjs/css/print/
COPY present/fonts /opt/revealjs/fonts/
COPY present/images /opt/revealjs/images/
COPY present/templates /opt/revealjs/templates
COPY present/prompt.sh /bin/prompt

# default presentation repository
# Note: Switching to 'ARG' as soon as the Docker Hub stack supports '--build-args'
RUN git clone https://github.com/docker-training/presentations /opt/revealjs/src

ENTRYPOINT [""/bin/prompt""]
",docker-training/docker-present,Dockerfile
e4eb1bd6c58fca0fbc5aa1e53a2b35cfcb8ca7e2,746,"FROM nginx:latest

MAINTAINER shufo <meikyowise@gmail.com>

RUN apt-get update && apt-get install -y --no-install-recommends curl
RUN curl -SL https://github.com/hashicorp/consul-template/releases/download/v0.10.0/consul-template_0.10.0_linux_amd64.tar.gz | \
    tar -xvzC /usr/local/bin --strip-components 1 && \
    rm -v /etc/nginx/conf.d/* && \
	curl -SL http://stedolan.github.io/jq/download/linux64/jq > /usr/local/bin/jq && chmod u+x /usr/local/bin/jq

ADD nginx.conf /etc/nginx/nginx.conf
ADD nginx.conf.ctmpl /etc/nginx/nginx.conf.ctmpl

ADD startup.sh restart.sh consul_config.sh config.json /
RUN chmod u+x /startup.sh && \
    chmod u+x /restart.sh && \
    chmod u+x /consul_config.sh

WORKDIR /

EXPOSE 80 443

CMD [""/startup.sh""]
",shufo/nginx-consul-template,Dockerfile
1e59d813e3f8594dd3649c6cafec2033446715c7,1649,"# Inspired by : https://tech.tiq.cc/2014/02/how-to-set-up-an-email-server-with-postfix-and-dovecot-without-mysql-on-debian-7/

FROM debian:jessie
MAINTAINER Louis Fradin <louis.fradin@gmail.com>

# Installation
RUN apt-get update && apt-get upgrade -y

# Requirements
RUN apt-get install postfix -y && \
    apt-get install dovecot-core dovecot-imapd dovecot-pop3d -y && \
    apt-get install libsasl2-2 libsasl2-modules sasl2-bin -y && \
    apt-get install rsyslog mailutils -y

# Configuring postfix user
RUN groupadd -g 5000 vmail && \
    useradd -s /usr/sbin/nologin -u 5000 -g 5000 vmail && \
    usermod -aG vmail postfix && \
    usermod -aG vmail dovecot

# Create directories and files
RUN mkdir /etc/dovecot/ssl && \
    mkdir /mail-server && \
    mkdir /mail-server/scripts && \
    touch /var/log/dovecot && \
    chgrp vmail /var/log/dovecot && \
    chmod 660 /var/log/dovecot && \
    touch /etc/postfix/virtual_mailbox && \
    touch /etc/postfix/virtual_domains && \
    touch /etc/postfix/virtual_mailbox && \
    touch /etc/postfix/virtual_alias

# Copy templates
COPY templates/postfix/main.cf /etc/postfix/main.cf
COPY templates/postfix/master.cf /etc/postfix/master.cf
COPY templates/dovecot/dovecot.conf /etc/dovecot/dovecot.conf

# Copy scripts
COPY scripts/ /mail-server/scripts/
RUN chmod +x /mail-server/scripts/*

# ENV variables
ENV DOMAIN """"
ENV USERNAME """"
ENV PASSWORD """"

# Volumes for configuration
VOLUME /etc/dovecot/ssl/mailserver.crt
VOLUME /etc/dovecot/ssl/mailserver.key
VOLUME /var/spool/mail/vhosts

# Expose volumes
EXPOSE 25
EXPOSE 143

# Launching command
CMD /mail-server/scripts/docker-entryfile.sh
",Lerenn/docker-mail-server,Dockerfile
30e5bd1ea6f2f1ab3ccf079d25cd9d94b0ffa69b,553,"FROM sameersbn/ubuntu:14.04.20160608
MAINTAINER sameer@damagehead.com

ENV MYSQL_USER=mysql \
    MYSQL_DATA_DIR=/var/lib/mysql \
    MYSQL_RUN_DIR=/run/mysqld \
    MYSQL_LOG_DIR=/var/log/mysql

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server \
 && rm -rf ${MYSQL_DATA_DIR} \
 && rm -rf /var/lib/apt/lists/*

COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 3306/tcp
VOLUME [""${MYSQL_DATA_DIR}"", ""${MYSQL_RUN_DIR}""]
ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""/usr/bin/mysqld_safe""]
",sameersbn/docker-mysql,Dockerfile
a8f76a53482e57eabf43100e3abad9041b6af605,135,"FROM node:latest

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
COPY . /usr/src/app

EXPOSE 8080
RUN npm install
CMD [""npm"", ""start""]
",launchany/microservices-node-inventory,Dockerfile
484e71f5681aa37209edcf8b37334bc3185f1414,1310,"#
# Spiderfoot Dockerfile 
#
# http://www.spiderfoot.net
#
# Written by: Michael Pellon <m@pellon.io>
#
# Usage:
#
#   sudo docker build -t spiderfoot .
#   sudo docker run -it -p 8080:8080 spiderfoot

# Pull the base image.
FROM ubuntu:14.04

# Install pre-requisites.
RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  git \ 
  libssl-dev \
  libxml2-dev \
  libxslt1-dev \
  python-pip  \
  python-dev \
  python-lxml \
  swig \
  --no-install-recommends

RUN rm -rf /var/lib/apt/lists/* \
  && cd /usr/include/openssl/ \
  && ln -s ../x86_64-linux-gnu/openssl/opensslconf.h . \
  && pip install cherrypy lxml mako M2Crypto netaddr

# Create a dedicated/non-privileged user to run the app.
RUN addgroup spiderfoot && \
    useradd -r -g spiderfoot -d /home/spiderfoot -s /sbin/nologin -c ""SpiderFoot User"" spiderfoot

ENV SPIDERFOOT_VERSION 2.7.0

# Download the specified release.
WORKDIR /home
RUN curl -sSL https://github.com/smicallef/spiderfoot/archive/v$SPIDERFOOT_VERSION-final.tar.gz \
  | tar -v -C /home -xz \
  && mv /home/spiderfoot-$SPIDERFOOT_VERSION-final /home/spiderfoot \
  && chown -R spiderfoot:spiderfoot /home/spiderfoot

USER spiderfoot
WORKDIR /home/spiderfoot

EXPOSE 8080

# Run the application.
ENTRYPOINT [""/usr/bin/python""] 
CMD [""sf.py"", ""0.0.0.0:8080""]
",smicallef/spiderfoot,Dockerfile
fe50e66abd03cff66ad4c1e99b116a8c40756485,226,"FROM google/golang

WORKDIR /gopath/src/github.com/coreos/updateservicectl
ADD . /gopath/src/github.com/coreos/updateservicectl
RUN go get github.com/coreos/updateservicectl

CMD []
ENTRYPOINT [""/gopath/bin/updateservicectl""]
",coreos/updateservicectl,Dockerfile
346caf8e04d2eb645296bc001fe070beb61d348d,1060,"FROM        ubuntu:14.04

# Last build date - this can be updated whenever there are security updates so
# that everything is rebuilt
ENV         security_updates_as_of 2015-08-10

# Install security updates and required packages
RUN         apt-get -qy update && \
            apt-get -qy upgrade && \
            apt-get -qy install python-pip && \
            apt-get -qy install python-dev && \
            apt-get -qy install libyaml-dev && \
            apt-get -qy install libffi-dev && \
            apt-get -qy install libssl-dev && \
            pip install --upgrade pip setuptools && \
# Pre-install some requirements to make the next step hopefully faster
            pip install twisted==14.0.0 treq==0.2.1 service_identity pycrypto pyrsistent pyyaml==3.10

RUN         pip install docker-py

ADD         setup.py README.md /app/
ADD         dvol_python/* /app/dvol_python/

WORKDIR     /app

# Install requirements from the project's setup.py
RUN         python setup.py install

CMD         [""dvol-docker-plugin""]
VOLUME      [""/var/lib/dvol""]
",ClusterHQ/dvol,Dockerfile
c91550eebaef2a186e5c3c8ba08fdcfa9f91f98b,242,"FROM golang:1.5.2-wheezy
MAINTAINER Maxim Kupriianov <max@kc.vc>

RUN apt-get update -q \
	&& DEBIAN_FRONTEND=noninteractive apt-get install -qy pkg-config python2.7-dev \
	&& apt-get clean \
	&& rm -rf /var/lib/apt

CMD /usr/local/go/bin/go
",xlab/go-lambda,Dockerfile
be9a229a300a0483abfd1b69b64389468367dd90,1232,"#
# Copyright 2014 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

FROM ubuntu:14.04
#   Setup
RUN gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E56151BF
RUN echo deb http://repos.mesosphere.io/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) main >> /etc/apt/sources.list.d/mesosphere.list
RUN apt-get update
RUN apt-get --no-install-recommends -y --force-yes install openjdk-7-jre mesos=0.20.1-1.0.ubuntu1404
ENV MESOS_NATIVE_LIBRARY /usr/local/lib/libmesos.so

#   Setup the binary we will run
ENTRYPOINT JVM_OPT=""-XX:PermSize=256m -Dlog4j.logLevel=${LOG_LEVEL} ${JVM_OPT}"" /app/bin/sparkkernel

#   Install the pack elements
ADD kernel/target/pack /app
RUN chmod +x /app/bin/sparkkernel
",ibm-et/spark-kernel,Dockerfile
316da6d0382f96a966cacf416f86a2147bbf7309,243,"FROM python:2.7

ENV PYTHONUNBUFFERED 1

RUN mkdir /code

WORKDIR /code

ADD wait-for-it.sh /
ADD entrypoint.sh /

ADD . /code/

RUN pip install -r requirements.txt

RUN chmod +x /entrypoint.sh
RUN chmod +x /wait-for-it.sh

CMD /entrypoint.sh
",gregor2004ua/openhomepy,Dockerfile
784832c4c2400fbbd63be49412cbb2e322a1ef10,75,"FROM ruby:2.2
COPY . /usr/src/app
WORKDIR /usr/src/app
RUN bundle install

",seanedwards/cfer,Dockerfile
63410b2a08097bd4e7e133544cbd0bde005bc1f7,867,"FROM ubuntu:14.10
MAINTAINER Guillaume Claret

RUN apt-get update
RUN apt-get install -y gcc make git
RUN apt-get install -y curl m4 ruby
RUN apt-get install -y unzip

# OCaml
WORKDIR /root
RUN curl -L https://github.com/ocaml/ocaml/archive/4.02.2.tar.gz |tar -xz
WORKDIR ocaml-4.02.2
RUN ./configure && make world.opt && make install

# OPAM
WORKDIR /root
RUN curl -L https://github.com/ocaml/opam/archive/1.2.2.tar.gz |tar -xz
WORKDIR opam-1.2.2
RUN ./configure && make lib-ext && make && make install

# Initialize OPAM
RUN opam init
ENV OPAMJOBS 2

# Coq
RUN opam install -y coq

# YoJson and SmartPrint
RUN opam install -y yojson smart-print

# CoqOfOCaml
ADD . /root/coq-of-ocaml
WORKDIR /root/coq-of-ocaml
# Coq code
WORKDIR CoqOfOCaml
RUN eval `opam config env`; ./configure.sh && make && make install
# OCaml code
WORKDIR ..
RUN eval `opam config env`; make
",clarus/coq-of-ocaml,Dockerfile
d74376fdfb3610978008d96b27e3624582725c52,636,"FROM python:2.7-alpine
ENV PYTHONUNBUFFERED=1 user=vp vpbasedir=/opt/vpcode/

WORKDIR ${vpbasedir}

RUN addgroup -g 1000 ${user} && \
    adduser -G vp -u 1000 -D -h ${vpbasedir} ${user} && \
    chown ${user}:${user} ${vpbasedir}

ADD requirements/*.txt ${vpbasedir}

RUN apk update && apk add musl-dev mariadb mariadb-client-libs mariadb-libs mariadb-dev postgresql postgresql-dev gcc && \
    pip install -r dev_mysql.txt -r dev_postgres.txt && \
    apk del --purge gcc mariadb-dev mariadb musl-dev && \
    /bin/rm -rf /var/cache/apk/*

ADD django-entrypoint.sh /
RUN chmod 0755 /django-entrypoint.sh

USER ${user}
CMD [""/bin/sh""]
",coders4help/volunteer_planner,Dockerfile
4c0bcbfc5e0bc2cd49fa7f5824e8f524074641b8,499,"FROM lucee/lucee-tomcat:4.5.1
MAINTAINER Greg Moser, greg.moser@ten24web.com

RUN apt-get update && apt-get install -y uuid-runtime

# Copy over the Lucee Config Files
COPY lucee/lucee-server.xml /opt/lucee/server/lucee-server/context/lucee-server.xml
COPY lucee/lucee-web.xml.cfm /opt/lucee/web/lucee-web.xml.cfm

# Expose Ports
EXPOSE 8080

# Copy the projects www contents over
COPY www /var/www

COPY scripts/entrypoint.sh /entrypoint.sh
ENTRYPOINT [""/entrypoint.sh""]

CMD [""catalina.sh"", ""run""]",gregmoser/docker-lucee-mysql,Dockerfile
fa3950bc07a7e8f8362cac74e0358520952ae9cd,714,"FROM ubuntu:14.04.3
MAINTAINER Mesosphere <support@mesosphere.io>

RUN locale-gen en_US.UTF-8
RUN dpkg-reconfigure locales
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

RUN apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -qqy \
        ca-certificates \
        curl \
        openssl \
        && \
    apt-get clean

RUN curl -o- https://raw.githubusercontent.com/karlkfi/resolveip/v1.0.2/install.sh | bash
RUN curl -o- https://raw.githubusercontent.com/karlkfi/intemp/v1.0.1/install.sh | bash
ENV TMPDIR /tmp

COPY [""entrypoint.sh"", ""kube-cagen.sh"", ""kube-certgen.sh"", ""kube-certgen-inner.sh"", ""kube-keygen.sh"", ""/usr/local/bin/""]

ENTRYPOINT [""entrypoint.sh""]
",mesosphere/kubernetes-keygen,Dockerfile
b3f7be1c4923c728f7d6723948e9b91e3c3d21f5,917,"FROM python:3.5
ENV PYTHONUNBUFFERED 1

RUN \
 apt-get -y update && \
 apt-get install -y apt-transport-https

RUN \
 apt-key adv --keyserver keyserver.ubuntu.com --recv 68576280 && \
 echo 'deb https://deb.nodesource.com/node_5.x jessie main' | tee /etc/apt/sources.list.d/nodesource.list && \
 echo 'deb-src https://deb.nodesource.com/node_5.x jessie main' | tee -a /etc/apt/sources.list.d/nodesource.list

RUN \
 apt-get -y update && \
 apt-get install -y nodejs && \
 apt-get clean

ADD requirements.txt /app/requirements.txt
RUN cd /app && pip install -r requirements.txt

ADD package.json /app/package.json
RUN cd /app && npm install

RUN useradd -ms /bin/bash saleor

ADD . /app
WORKDIR /app

ENV PATH $PATH:/app/node_modules/.bin
RUN grunt
RUN SECRET_KEY=tmpkey python manage.py collectstatic --noinput

EXPOSE 8000
ENV PORT 8000

ENTRYPOINT [""/app/compose/entrypoint.sh""]
CMD [""uwsgi saleor/wsgi/uwsgi.ini""]
",mirumee/saleor,Dockerfile
68a563802912aeb4a2a67abdacb71d69c145b37e,27,"FROM google/golang-runtime
",Lukasa/mkcert,Dockerfile
0beb5a9e5a01f06824b9bdc76a03de7d026a7c60,1444,"FROM ubuntu:14.04

# E-Cell4 wheel
RUN apt-get update; apt-get install -y python python-dev python3 python3-dev cmake gcc g++ libboost-dev libgsl0-dev libhdf5-dev wget; wget https://bootstrap.pypa.io/get-pip.py; python2 get-pip.py; python3 get-pip.py; pip2 install cython; pip3 install cython
ADD . /usr/src/ecell4
RUN cd /usr/src/ecell4; cmake .; make BesselTables; cd python; python2 setup.py build_ext; python2 setup.py bdist_wheel; python3 setup.py build_ext; python3 setup.py bdist_wheel; pip2 install dist/ecell-4.0.1-cp27-cp27mu-linux_x86_64.whl; pip3 install dist/ecell-4.0.1-cp34-cp34m-linux_x86_64.whl

# matplotlib and jupyter
RUN apt-get install -y libfreetype6-dev libpng-dev pkg-config python-numpy python3-numpy pandoc
RUN pip2 install matplotlib jupyter; pip3 install matplotlib jupyter; python2 -m ipykernel install

# ffmpeg and avconv
RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:mc3man/trusty-media -y; apt-get update; apt-get install -y ffmpeg
#RUN apt-get install -y libav-tools

# install with install.sh
#RUN cd /usr/src/ecell4; export PREFIX=/usr/local; export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH; ./install.sh --python2 --hdf5

EXPOSE 8888
#CMD LD_LIBRARY_PATH=/usr/local/lib jupyter-notebook --notebook-dir='/usr/src/ecell4/ipynb' --no-browser --ip='*' --port 8888
CMD jupyter-notebook --notebook-dir='/usr/src/ecell4/ipynb' --no-browser --ip='*' --port 8888
",ecell/ecell4,Dockerfile
1fe2993caff708cbd236fa06af4942b40d26dd07,1489,"FROM bamos/ubuntu-opencv-dlib-torch:ubuntu_14.04-opencv_2.4.11-dlib_18.16-torch_2016.05.07
MAINTAINER HervÃ© Bredin <bredin@limsi.fr>

# python package management
RUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
    python \
    python-dev \
    python-pip

# scientific python
RUN pip install numpy
RUN pip install scipy
RUN pip install jupyter
RUN pip install matplotlib

# pyannote.core notebook support
RUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
    graphviz \
    libgraphviz-dev
RUN pip install pyannote.core[notebook]

# pyannote.video ffmpeg
RUN add-apt-repository ppa:mc3man/trusty-media
RUN apt-get update
RUN apt-get install -yq ffmpeg

RUN pip install pyannote.video

# moviepy likes to download its own ffmpeg version at import time
# this command will guarantee this is done once and for all
RUN python -c ""from moviepy.editor import VideoClip""

# Add Tini. Tini operates as a process subreaper for jupyter. This prevents
# kernel crashes.
ENV TINI_VERSION v0.6.0
RUN curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini > tini && \
    echo ""d5ed732199c36a1189320e6c4859f0169e950692f451c03e7854243b95f4234b *tini"" | sha256sum -c - && \
    mv tini /usr/bin/tini && \
    chmod +x /usr/bin/tini
ENTRYPOINT [""/usr/bin/tini"", ""--""]


# run jupyter notebook by default
EXPOSE 8888
VOLUME /notebook
WORKDIR /notebook
CMD [""jupyter"", ""notebook"", ""--port=8888"", ""--no-browser"", ""--ip=0.0.0.0""]
",pyannote/pyannote-video,Dockerfile
180a3b95c6d045670749db560195cb9ac2c4cace,492,"FROM golang:1.6.2
MAINTAINER Kazumichi Yamamoto <yamamoto.febc@gmail.com>

RUN go get  github.com/golang/lint/golint \
            github.com/mattn/goveralls \
            golang.org/x/tools/cover \
            github.com/tools/godep \
            github.com/Azure/go-ansiterm \
            github.com/docker/docker/pkg/system 
            

ENV USER root
WORKDIR /go/src/github.com/yamamoto-febc/docker-machine-sakuracloud

COPY . /go/src/github.com/yamamoto-febc/docker-machine-sakuracloud
",yamamoto-febc/docker-machine-sakuracloud,Dockerfile
da187c4f34ef8c7df14e107d8dec59a7c8fee8d9,504,"# A Docker file to install elnode in a docker, this depends on Nic's existing emacs dockers.
FROM nicferrier/emacsd
MAINTAINER nic@ferrier.me.uk
USER root
ADD Dockerfile-install.el /tmp/Dockerfile-install.el
RUN chown emacs /tmp/Dockerfile-install.el
USER emacs
ENV HOME /home/emacs
RUN /usr/local/emacs/bin/emacs -daemon ; /usr/local/emacs/bin/emacsclient -s /tmp/emacs1000/sock/server -e '(load-file ""/tmp/Dockerfile-install.el"")'
EXPOSE 8000
CMD /usr/local/emacs/bin/emacs -daemon ; tail -f /dev/null
",nicferrier/elnode,Dockerfile
1e36741d487f7f32933faa34c1fb98294e10bda1,754,"FROM ubuntu

MAINTAINER Amanpreet Singh <aps.sids@gmail.com>

ENV FILEBEAT_VERSION 1.2.2

RUN apt-get update && \
    apt-get -y install wget && \
    wget http://download.elastic.co/beats/filebeat/filebeat-${FILEBEAT_VERSION}-x86_64.tar.gz && \
    wget https://download.elastic.co/beats/filebeat/filebeat-${FILEBEAT_VERSION}-x86_64.tar.gz.sha1.txt && \
    sha1sum -c filebeat-${FILEBEAT_VERSION}-x86_64.tar.gz.sha1.txt && \
    tar xzf filebeat-${FILEBEAT_VERSION}-x86_64.tar.gz && \
    mv filebeat-${FILEBEAT_VERSION}-x86_64/filebeat /usr/local/bin && \
    rm -rf /filebeat* && \
    apt-get -y remove wget && \
    apt-get -y autoremove

COPY filebeat.yml /etc/filebeat/

CMD [""/usr/local/bin/filebeat"", ""-e"", ""-c"", ""/etc/filebeat/filebeat.yml""]

",ApsOps/filebeat-kubernetes,Dockerfile
248ea36d54b464dd970fdd10ba930693439f44fb,143,"FROM jordi/ubuntu
MAINTAINER Jordi ÃÃ±igo Griera

ENV TERM linux
RUN apt-get update
RUN apt-get -y install apache2-utils

CMD [""/usr/bin/ab""]
",jig/docker-ab,Dockerfile
a89ab2013e670bd52efef0ee7dda3d13c0bdaf77,6642,"## -*- docker-image-name: ""scaleway/docker"" -*-
FROM scaleway/ubuntu:amd64-xenial
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM scaleway/ubuntu:armhf-xenial	# arch=armv7l
#FROM scaleway/ubuntu:arm64-xenial	# arch=arm64
#FROM scaleway/ubuntu:i386-xenial	# arch=i386
#FROM scaleway/ubuntu:mips-xenial	# arch=mips


MAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)


# Prepare rootfs for image-builder
RUN /usr/local/sbin/builder-enter


# Install packages
RUN sed -i '/mirror.scaleway/s/^/#/' /etc/apt/sources.list \
 && apt-get -q update                   \
 && apt-get --force-yes -y -qq upgrade  \
 && apt-get --force-yes install -y -q   \
	apparmor			\
	arping				\
	aufs-tools			\
	btrfs-tools			\
	bridge-utils                    \
	cgroup-lite			\
	git				\
	ifupdown			\
	kmod				\
	lxc				\
	python-setuptools               \
	vlan				\
 && apt-get clean


# Install Docker dependencies
RUN apt-get install $(apt-cache depends docker.io | grep Depends | sed ""s/.*ends:\ //"" | tr '\n' ' ')


# Install Docker
RUN case ""${ARCH}"" in                                                                                 \
    armv7l|armhf|arm)                                                                                 \
      curl -s https://packagecloud.io/install/repositories/Hypriot/Schatzkiste/script.deb.sh | os=Debian dist=jessie bash &&  \
      apt-get install docker-engine -y &&                                                                \
      systemctl enable docker;                                                                        \
      ;;                                                                                              \
    amd64|x86_64|i386)                                                                                \
      curl -L https://get.docker.com/ | sh;                                                           \
      ;;                                                                                              \
    *)                                                                                                \
      echo ""Unhandled architecture: ${ARCH}.""; exit 1;                                                \
      ;;                                                                                              \
    esac                                                                                              \
 && docker --version


# Install Pipework
RUN wget -qO /usr/local/bin/pipework https://raw.githubusercontent.com/jpetazzo/pipework/master/pipework  \
 && chmod +x /usr/local/bin/pipework


# Install Gosu
ENV GOSU_VERSION=1.7
RUN case ""${ARCH}"" in                                                                                                \
    armv7l|armhf|arm)                                                                                                \
        wget -qO /usr/local/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-armhf &&  \
        chmod +x /usr/local/bin/gosu;                                                                                \
      ;;                                                                                                             \
    aarch64|arm64)                                                                                                   \
        wget -qO /usr/local/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-arm64 &&  \
        chmod +x /usr/local/bin/gosu;                                                                                \
      ;;                                                                                                             \
    x86_64|amd64)                                                                                                    \
        wget -qO /usr/local/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 &&  \
        chmod +x /usr/local/bin/gosu;                                                                                \
	;;                                                                                                           \
    *)                                                                                                               \
	echo ""Unhandled architecture: ${ARCH}.""; exit 1;                                                             \
      ;;                                                                                                             \
    esac                                                                                                             \
 && ( gosu --version || true )



# Install Docker Compose
RUN easy_install -U pip                                     \
 && pip install docker-compose                              \
 && ln -s /usr/local/bin/docker-compose /usr/local/bin/fig  \
 && docker-compose --version


# Install Docker Machine
ENV DOCKER_MACHINE_VERSION=0.6.0
RUN case ""${ARCH}"" in                                                                                                                                        \
    x86_64|amd64|i386)                                                                                                                                       \
        curl -L https://github.com/docker/machine/releases/download/v${DOCKER_MACHINE_VERSION}/docker-machine-Linux-x86_64 >/usr/local/bin/docker-machine && \
        chmod +x /usr/local/bin/docker-machine &&                                                                                                            \
	docker-machine --version;                                                                                                                            \
      ;;                                                                                                                                                     \
    *)                                                                                                                                                       \
	echo ""docker-machine not yet supported for this architecture.""                                                                                       \
      ;;                                                                                                                                                     \
    esac


# Patch rootfs
COPY ./overlay /
RUN systemctl disable docker; systemctl enable docker


# Clean rootfs from image-builder
RUN /usr/local/sbin/builder-leave
",scaleway-community/scaleway-docker,Dockerfile
1a7eba9f083d516fe80a9ae18875360af86fb866,1221,"FROM ubuntu:trusty
MAINTAINER Benjamin Henrion <zoobab@gmail.com>

RUN DEBIAN_FRONTEND=noninteractive apt-get update -y -q
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y -q --force-yes build-essential git-core libtool autotools-dev autoconf automake pkg-config unzip libkrb5-dev cmake

RUN useradd -d /home/zmq -m -s /bin/bash zmq
RUN echo ""zmq ALL=(ALL) NOPASSWD:ALL"" > /etc/sudoers.d/zmq
RUN chmod 0440 /etc/sudoers.d/zmq

USER zmq

WORKDIR /home/zmq
RUN git clone --quiet https://github.com/zeromq/libzmq.git
WORKDIR /home/zmq/libzmq
RUN ./autogen.sh 2> /dev/null
RUN ./configure --quiet --without-docs
RUN make
RUN sudo make install
RUN sudo ldconfig

WORKDIR /home/zmq
RUN git clone --quiet https://github.com/zeromq/czmq.git
WORKDIR /home/zmq/czmq
RUN ./autogen.sh 2> /dev/null
RUN ./configure --quiet --without-docs
RUN make
RUN sudo make install
RUN sudo ldconfig

WORKDIR /home/zmq
RUN git clone --quiet git://github.com/zeromq/malamute.git
WORKDIR /home/zmq/malamute
RUN ./autogen.sh 2> /dev/null
RUN ./configure --quiet --without-docs
RUN make
RUN sudo make install
RUN sudo ldconfig

#  Custom commands for Dockerfile
EXPOSE 9999
CMD [""/usr/local/bin/malamute"", ""/home/zmq/malamute/src/malamute.cfg""]

",zeromq/malamute,Dockerfile
62ded573f01cb38c44f2d9fe867dc97440c87675,172,"FROM ubuntu
RUN apt-get update
RUN apt-get install -y git build-essential binutils
WORKDIR /root
RUN git clone https://github.com/igorpecovnik/lib/
RUN cp lib/compile.sh .
",igorpecovnik/lib,Dockerfile
26b3e039deb430b6466766d4f4ec1c96d219019f,101,"FROM Xcode:7.0
WORKDIR /
COPY . /
RUN xcodebuild
HYDRATE /build/Debug-iphonesimulator/EmotionNote.app",Yogayu/EmotionNote,Dockerfile
6aaaa9664b2729a6f07eb395470e028e3657bf91,779,"FROM centurylink/apache-php:latest
MAINTAINER CenturyLink

# Install packages
RUN apt-get update && \
 DEBIAN_FRONTEND=noninteractive apt-get -y upgrade && \
 DEBIAN_FRONTEND=noninteractive apt-get -y install supervisor pwgen && \
 apt-get -y install mysql-client

# Download Wordpress into /app
RUN rm -fr /app && mkdir /app && \
 curl -L -O http://wordpress.org/wordpress-4.0.tar.gz && \
 tar -xzvf wordpress-4.0.tar.gz -C /app --strip-components=1 && \
 rm wordpress-4.0.tar.gz

# Add wp-config with info for Wordpress to connect to DB
ADD wp-config.php /app/wp-config.php
RUN chmod 644 /app/wp-config.php

# Fix permissions for apache
RUN chown -R www-data:www-data /app

# Add script to create 'wordpress' DB
ADD run.sh run.sh
RUN chmod 755 /*.sh

EXPOSE 80
CMD [""/run.sh""]
",CenturyLinkLabs/docker-wordpress,Dockerfile
8e347e543e1a8de0cab1a09b611091827c9267e0,320,"# Set the base image to Ubuntu
FROM node:latest

# File Author / Maintainer
MAINTAINER Rodrigo Asensio

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install app dependencies
COPY package.json /usr/src/app/
RUN npm install

# Bundle app source
COPY . /usr/src/app

# Expose port
EXPOSE  3000

CMD [ ""npm"", ""start"" ]
",rasensio/nodejs-express-template,Dockerfile
ee7275bd2c05c7b5ed103bd45686a1311ffd44a9,220,"FROM gliderlabs/alpine:3.3

ENV LANG C

RUN apk add --no-cache bash redis jq

ADD assets/ /opt/resource/
RUN chmod +x /opt/resource/*

#ADD test/ /opt/resource-tests/
#RUN /opt/resource-tests/all.sh \
# && rm -rf /tmp/*
",starkandwayne/redis-resource,Dockerfile
ca7589310286d140bbcb51d51031fccd2a4362f4,110,"FROM alpine
MAINTAINER support@tutum.co
ADD run.sh /
ENV AUTHORIZED_KEYS **None**
VOLUME /user
CMD [""/run.sh""]",tutumcloud/authorizedkeys,Dockerfile
3cee58fa6d1394679535faf90813abad75e24ea0,428,"FROM ubuntu:trusty
MAINTAINER Fernando Mayo <fernando@tutum.co>

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv C7917B12 && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y redis-server pwgen && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add scripts
ADD run.sh /run.sh

ENV REDIS_PASS **Random**
ENV REDIS_DIR /data
VOLUME [""/data""]

EXPOSE 6379
CMD [""/run.sh""]
",tutumcloud/redis,Dockerfile
53e545c214f3c21f4c28c40c9060e1a3d0476717,922,"FROM frolvlad/alpine-glibc:alpine-3.3_glibc-2.23

MAINTAINER zopanix <zopanix@gmail.com>

WORKDIR /opt

COPY ./smart_launch.sh /opt
COPY ./factorio.crt /opt

VOLUME /opt/factorio/saves /opt/factorio/mods

ENV FACTORIO_AUTOSAVE_INTERVAL=2 \
    FACTORIO_AUTOSAVE_SLOTS=3 \
    FACTORIO_DISSALOW_COMMANDS=true \
    FACTORIO_NO_AUTO_PAUSE=false \
    FACTORIO_LATENCY_MS=100 \
    VERSION=0.12.35 \
    FACTORIO_SHA1=ea15636469148662c26786ad916ac066ee5aab56 \
    FACTORIO_WAITING=false

RUN apk --update add bash curl && \
    curl -sSL --cacert /opt/factorio.crt https://www.factorio.com/get-download/$VERSION/headless/linux64 -o /tmp/factorio_headless_x64_$VERSION.tar.gz && \
    echo ""$FACTORIO_SHA1  /tmp/factorio_headless_x64_$VERSION.tar.gz"" | sha1sum -c && \
    tar xzf /tmp/factorio_headless_x64_$VERSION.tar.gz && \
    rm /tmp/factorio_headless_x64_$VERSION.tar.gz

EXPOSE 34197/udp

CMD [""./smart_launch.sh""]

",zopanix/docker_factorio_server,Dockerfile
00fac90a6075a907cdda6be202f83aff1e3017e7,1490,"FROM sameersbn/php5-fpm:latest
MAINTAINER sameer@damagehead.com

ENV OWNCLOUD_VERSION=9.0.2 \
    OWNCLOUD_USER=${PHP_FPM_USER} \
    OWNCLOUD_INSTALL_DIR=/var/www/owncloud \
    OWNCLOUD_DATA_DIR=/var/lib/owncloud \
    OWNCLOUD_CACHE_DIR=/etc/docker-owncloud

ENV OWNCLOUD_BUILD_DIR=${OWNCLOUD_CACHE_DIR}/build \
    OWNCLOUD_RUNTIME_DIR=${OWNCLOUD_CACHE_DIR}/runtime

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8B3981E7A6852F782CC4951600A6F0A3C300EE8C \
 && echo ""deb http://ppa.launchpad.net/nginx/stable/ubuntu trusty main"" >> /etc/apt/sources.list \
 && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 && echo 'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' > /etc/apt/sources.list.d/pgdg.list \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
      php5-pgsql php5-mysql php5-gd php-file \
      php5-curl php5-intl php5-mcrypt php5-ldap \
      php-net-ftp php5-gmp php5-apcu php5-imagick \
      mysql-client postgresql-client nginx gettext-base \
 && php5enmod mcrypt \
 && rm -rf /var/lib/apt/lists/*

COPY assets/build/ ${OWNCLOUD_BUILD_DIR}/
RUN bash ${OWNCLOUD_BUILD_DIR}/install.sh

COPY assets/runtime/ ${OWNCLOUD_RUNTIME_DIR}/
COPY assets/tools/ /usr/bin/
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 80/tcp

VOLUME [""${OWNCLOUD_DATA_DIR}""]

WORKDIR ${OWNCLOUD_INSTALL_DIR}
ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""app:owncloud""]
",sameersbn/docker-owncloud,Dockerfile
1b0f9e14141e0a13ed6f683d6fe836d4281993db,108,"FROM rancher/dind:v0.5.0
COPY ./scripts/bootstrap /scripts/bootstrap
RUN /scripts/bootstrap
WORKDIR /source
",rancher/rancher,Dockerfile
6465f13588cb7b6cd1d99e7c0760dd484635b74d,221,"FROM samdoshi/haskell-stack

WORKDIR /home
RUN git clone https://github.com/sgillis/hidenticon.git
WORKDIR /home/hidenticon
RUN stack setup
RUN stack install --ghc-options='-static -optc-static -optl-static -optl-pthread'",sgillis/hidenticon,Dockerfile
d9e97806e4b2f7ce72b752f1b4f98cf2ee2b1439,560,"FROM debian:jessie

MAINTAINER Christian LuginbÃ¼hl <dinkel@pimprecords.com>

ENV OPENLDAP_VERSION 2.4.40

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
        slapd=${OPENLDAP_VERSION}* && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN mv /etc/ldap /etc/ldap.dist

COPY modules/ /etc/ldap.dist/modules

COPY entrypoint.sh /entrypoint.sh

EXPOSE 389

VOLUME [""/etc/ldap"", ""/var/lib/ldap""]

ENTRYPOINT [""/entrypoint.sh""]

CMD [""slapd"", ""-d"", ""32768"", ""-u"", ""openldap"", ""-g"", ""openldap""]
",dinkel/docker-openldap,Dockerfile
284a60c52400c5299bace56a284b56a483450198,964,"FROM ubuntu
MAINTAINER vishnu@cloudron.in

RUN \
   apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \
   echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list && \
   apt-get update && \
   apt-get install -y mongodb-org

RUN apt-get update --fix-missing
RUN apt-get install -y --fix-missing wget default-jdk
ENV JAVA_HOME /usr/lib/jvm/default-java


ADD http://www.us.apache.org/dist/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz /tmp/
RUN tar xzvf /tmp/apache-maven-3.3.3-bin.tar.gz --directory /usr/lib
ENV PATH /usr/lib/apache-maven-3.3.3/bin:$PATH
RUN mkdir -p /opt/cyber-event-collector
ADD src /opt/cyber-event-collector/src
ADD pom.xml /opt/cyber-event-collector/pom.xml
RUN mvn --file /opt/cyber-event-collector/pom.xml clean install

VOLUME [""/data/db""]
WORKDIR /data

EXPOSE 27017

ADD server.sh /
RUN chmod u+x /server.sh
CMD [""/server.sh""]

",cloudronin/cyberattack-event-collector,Dockerfile
bf31cd97266d1d2c949f447d6e9825be7ad37d30,2879,"#
# This Dockerfile provides a reproducible development environment for
# developing applications for the Adapteva Parallella development board.
#
# See: http://www.parallella.org
#

FROM ubuntu:utopic

MAINTAINER Sarah Mount <s.mount@wlv.ac.uk>

# Install prerequisites.
# Setup a new user 'dev' and add to sudoers.
RUN sudo apt-get update -qq && sudo apt-get -qq install -y build-essential \
    bison \
    flex \
    g++-arm-linux-gnueabihf \
    gcc-arm-linux-gnueabihf \
    git \
    libgmp3-dev \
    libncurses5-dev \
    libmpc-dev \
    libmpfr-dev \
    locate \
    texinfo \
    wget \
    xzip \
    lzip \
    zip && \
    adduser --quiet --shell /bin/bash --gecos ""Epiphany Developer,101,,"" --disabled-password dev && \
    adduser dev sudo && \
    chown -R dev:dev /home/dev/ && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
    mkdir -p /opt/adapteva && \
    chown -R dev:dev /opt/adapteva && \
    mkdir -p /home/dev/buildroot && \
    chown -R dev:dev /home/dev/buildroot

# Set up new user and home directory in environment.
# Note that WORKDIR will not expand environment variables in docker versions < 1.3.1.
# See docker issue 2637: https://github.com/docker/docker/issues/2637
USER dev
ENV HOME /home/dev
ENV EPIPHANY_BUILD_HOME /home/dev/buildroot

# Download, build and install the Epiphany toolchain and SDK.
# Remove temporary files to save space.
# Download the official Epiphany examples repository into $HOME/examples.
WORKDIR /home/dev/buildroot
RUN wget --no-check-certificate https://github.com/adapteva/epiphany-sdk/archive/2015.1.zip && \
    unzip 2015.1.zip && \
    rm 2015.1.zip && \
    mv epiphany-sdk-2015.1 sdk && \
    sed -i.bak s/--clone/--download/g sdk/build-epiphany-sdk.sh && \
    ./sdk/build-epiphany-sdk.sh -C -R -a x86_64 && \
    ./sdk/build-epiphany-sdk.sh -C -R -a armv7l -c arm-linux-gnueabihf && \
    cp -a esdk.2015.1/ /opt/adapteva/ && \
    ln -s /opt/adapteva/esdk.2015.1 /opt/adapteva/esdk && \
    rm /opt/adapteva/esdk/tools/e-gnu && \
    ln -s /opt/adapteva/esdk/tools/e-gnu.x86_64 /opt/adapteva/esdk/tools/e-gnu && \
    cd /home/dev/ && \
    rm -Rf /home/dev/buildroot && \
    wget --no-check-certificate https://github.com/adapteva/epiphany-examples/archive/master.zip && \
    unzip master.zip && \
    rm master.zip && \
    mv epiphany-examples-master examples

# Set environment variables for the new toolchain.
ENV EPIPHANY_HOME /opt/adapteva/esdk
ENV PATH ${EPIPHANY_HOME}/tools/e-gnu/bin:${EPIPHANY_HOME}/tools/host/bin:${PATH}
ENV LD_LIBRARY_PATH ${EPIPHANY_HOME}/tools/host/lib:${LD_LIBRARY_PATH}
ENV EPIPHANY_HDF ${EPIPHANY_HOME}/bsps/current/platform.hdf
ENV MANPATH ${EPIPHANY_HOME}/tools/e-gnu/share/man:${MANPATH}

# Start at $HOME.
WORKDIR /home/dev

# Expose a port so that GDB can connect to a Parallella board.
EXPOSE 51000

# Start from a BASH shell.
CMD [""bash""]
",parallella/parallella-devenv,Dockerfile
41df0e874da3e028e889609ac6e5bf2179d1c960,542,"FROM frolvlad/alpine-python3

COPY tasks /opt/www/tasks
COPY config.py /opt/www/
COPY app/requirements.txt /opt/www/app/

RUN apk add --no-cache --virtual=build_dependencies musl-dev gcc python3-dev libffi-dev && \
    cd /opt/www && \
    pip install -r tasks/requirements.txt && \
    invoke app.dependencies.install && \
    rm -rf ~/.cache/pip && \
    apk del build_dependencies

COPY . /opt/www/

RUN chown -R nobody /opt/www/

USER nobody
WORKDIR /opt/www/
CMD [ ""invoke"", ""app.run"", ""--no-install-dependencies"", ""--host"", ""0.0.0.0"" ]
",frol/flask-restplus-server-example,Dockerfile
18c50f8e62b9b9772f6c4a22557644dbac5a3460,282,"FROM gfx2015/android:latest

MAINTAINER FUJI Goro <g.psy.va@gmail.com>

ENV PROJECT /project

RUN mkdir $PROJECT
WORKDIR $PROJECT

ADD . $PROJECT

RUN echo ""sdk.dir=$ANDROID_HOME"" > local.properties && \
    ./gradlew --stacktrace app:dependencies

CMD ./gradlew --stacktrace check
",gfx/Android-Helium,Dockerfile
f483dd6f8e2cd2aa1df368d331b8df4111f86f02,1349,"FROM node:4.2

MAINTAINER Daniel Moll

WORKDIR /home/targets-io

#USER root

#RUN apt-get update && apt-get install -y --no-install-recommends python2.7


# Install targets-io Prerequisites
RUN npm install -g grunt-cli
RUN npm install -g bower
RUN npm install -g forever
RUN apt-get install g++

ENV PYTHON /usr/bin/python2.7

# Install targets-io packages
ADD package.json /home/targets-io/package.json
RUN npm install --production


# Manually trigger bower. Why doesnt this work via npm install?
ADD .bowerrc /home/targets-io/.bowerrc
ADD bower.json /home/targets-io/bower.json
RUN bower install --config.interactive=false --allow-root

#USER node

# Make everything available for start
ADD . /home/targets-io

#USER root

#RUN chown -R node:node /home/targets-io


# currently only works for development
ENV NODE_ENV demo


# Port 3000 for server
# Port 35729 for livereload
EXPOSE 3000 35729
#ENTRYPOINT forever -c 'node --harmony' server.js
#ENTRYPOINT MONGO_URL=mongodb://$MONGO_SERVICE_HOST:$MONGO_SERVICE_PORT  MEMCACHED_HOST=$MEMCACHED_SERVICE_HOST:$MEMCACHED_SERVICE_PORT GRAPHITE_HOST=http://$GRAPHITE_SERVICE_HOST:$GRAPHITE_SERVICE_PORT forever -c 'node --harmony' server.js

COPY docker-entrypoint-demo.sh /entrypoint.sh

#RUN chown -R node:node /entrypoint.sh

RUN chmod +x  /entrypoint.sh

#USER node

ENTRYPOINT [""/entrypoint.sh""]

",dmoll1974/targets-io,Dockerfile
b84dbf16ac43b4ae09c8b56e7de83f94ac9943df,2676,"FROM java:8

# Configuration variables.
ENV JIRA_HOME     /var/atlassian/jira
ENV JIRA_INSTALL  /opt/atlassian/jira
ENV JIRA_VERSION  7.1.8

# Install Atlassian JIRA and helper tools and setup initial home
# directory structure.
RUN set -x \
    && apt-get update --quiet \
    && apt-get install --quiet --yes --no-install-recommends libtcnative-1 xmlstarlet \
    && apt-get clean \
    && mkdir -p                ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_HOME}/caches/indexes"" \
    && chmod -R 700            ""${JIRA_HOME}"" \
    && chown -R daemon:daemon  ""${JIRA_HOME}"" \
    && mkdir -p                ""${JIRA_INSTALL}/conf/Catalina"" \
    && curl -Ls                ""https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-core-${JIRA_VERSION}.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}"" --strip-components=1 --no-same-owner \
    && curl -Ls                ""https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz"" | tar -xz --directory ""${JIRA_INSTALL}/lib"" --strip-components=1 --no-same-owner ""mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar"" \
    && chmod -R 700            ""${JIRA_INSTALL}/conf"" \
    && chmod -R 700            ""${JIRA_INSTALL}/logs"" \
    && chmod -R 700            ""${JIRA_INSTALL}/temp"" \
    && chmod -R 700            ""${JIRA_INSTALL}/work"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/conf"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/logs"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/temp"" \
    && chown -R daemon:daemon  ""${JIRA_INSTALL}/work"" \
    && sed --in-place          ""s/java version/openjdk version/g"" ""${JIRA_INSTALL}/bin/check-java.sh"" \
    && echo -e                 ""\njira.home=$JIRA_HOME"" >> ""${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties"" \
    && touch -d ""@0""           ""${JIRA_INSTALL}/conf/server.xml""

# Use the default unprivileged account. This could be considered bad practice
# on systems where multiple processes end up being executed by 'daemon' but
# here we only ever run one process anyway.
USER daemon:daemon

# Expose default HTTP connector port.
EXPOSE 8080

# Set volume mount points for installation and home directory. Changes to the
# home directory needs to be persisted as well as parts of the installation
# directory due to eg. logs.
VOLUME [""/var/atlassian/jira"", ""/opt/atlassian/jira/logs""]

# Set the default working directory as the installation directory.
WORKDIR /var/atlassian/jira

COPY ""docker-entrypoint.sh"" ""/""
ENTRYPOINT [""/docker-entrypoint.sh""]

# Run Atlassian JIRA as a foreground process by default.
CMD [""/opt/atlassian/jira/bin/catalina.sh"", ""run""]
",cptactionhank/docker-atlassian-jira,Dockerfile
a5d651bec746b253ccf23c731691640245b4ae1e,1058,"FROM node:0.10.40-slim
MAINTAINER Rajesh Raheja ""rajesh.raheja@ca.com""
LABEL Description=""Docker container for the TestDoubles app. Includes CLI, REST APIs, TD, NodeJS and Mountebank.""

# Setup TestDoubles environment
ENV TD_USER td
ENV TD_ROOT /opt/testdoubles
ENV TD_HOME ${TD_ROOT}/node_modules/testdoubles
ENV PATH ${TD_HOME}/bin:$PATH
ENV TD_HOST http://localhost:5050
ENV TD_PORT 5050
ENV NODE_ENV production

# Install and configure system
RUN apt-get update && \
    apt-get install -y curl && \
    rm -rf /var/lib/apt/lists/* && \
    groupadd -r ${TD_USER} && \
    useradd -r -m -g ${TD_USER} ${TD_USER} && \
    mkdir -p ${TD_HOME}/testdoubles && \
    mkdir -p ${TD_HOME}/logs && \
    chown -R ${TD_USER} ${TD_ROOT} && \
    chgrp -R ${TD_USER} ${TD_ROOT} && \
    chmod 777 ${TD_HOME}/testdoubles && \
    chmod 777 ${TD_HOME}/logs 

# Install TestDoubles from the npm registry and start the processes
EXPOSE 2525 5050 5051
USER ${TD_USER}
WORKDIR ${TD_ROOT}
RUN npm install testdoubles --production
WORKDIR ${TD_HOME}
CMD [""tdctl"", ""start""]
",DevTestSolutions/TestDoubles,Dockerfile
817586027fc0c533e933c0e2667213ca904b4c50,512,"FROM mhart/alpine-node
MAINTAINER RÃ©mi Alvergnat <toilal.dev@gmail.com>

COPY . /data
WORKDIR /data

# bower requires this configuration parameter to allow bower install using root.
RUN echo '{ ""allow_root"": true }'>.bowerrc

# node-sass doesn't support Alpine, so we need the build toolchain.
RUN apk --update add ca-certificates git python build-base &&\
    npm install && npm run install &&\
    apk del ca-certificates git python build-base &&\
    rm -rf /var/cache/apk/*

EXPOSE 8080

CMD npm run start

",PGBI/kong-dashboard,Dockerfile
71cf864f25f7128029103b61eb3b36dc4b2299ad,642,"FROM ubuntu:14.04
MAINTAINER Colin Powell ""colin.powell@gmail.com""
RUN apt-get -qq update
RUN apt-get install -y python-dev python-setuptools git
RUN easy_install pip
RUN pip install virtualenv
RUN pip install uwsgi
RUN virtualenv --no-site-packages /opt/ve/outline
ADD . /opt/apps/outline
ADD etc/gunicorn.conf /opt/gunicorn_outline.conf
ADD etc/run.sh /usr/local/bin/run_outline
RUN (cd /opt/apps/outline && git remote rm origin)
RUN (cd /opt/apps/outline && git remote add origin https://github.com/powellc/outline.git)
RUN (cd /opt/apps/outline && python setup.py install)
EXPOSE 30321
CMD [""/bin/sh"", ""-e"", ""/usr/local/bin/run_outline""]
",powellc/outline,Dockerfile
12ef80ebe10d9fab251aa33f3dc90ab3aa06ad5b,56,"FROM golang
RUN go get github.com/remore/dockerfileview
",remore/dockerfileview,Dockerfile
d3b05becc856b603c58cf670a4c5303ac2c39f1d,136,"FROM colstrom/alpine

RUN apk-install \
                bc \
                fish \
                mdocml-apropos

ENTRYPOINT [""fish""]
",colstrom/docker-fish,Dockerfile
1fd419622630f277993d64d3caede8c71d8e686b,1641,"# Copyright (c) IBM.
FROM jupyter/minimal-kernel


USER root



# Java 8
RUN echo ""deb http://http.debian.net/debian jessie-backports main"" >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get -y -t jessie-backports install openjdk-8-jdk
RUN update-java-alternatives -s java-1.8.0-openjdk-amd64


# Spark dependencies
ENV APACHE_SPARK_VERSION 1.6.0
RUN apt-get update && apt-get install -yq --no-install-recommends wget

RUN apt-get -y update && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN cd /tmp && \
        wget -q http://d3kbcqa49mib13.cloudfront.net/spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz && \
        echo ""439fe7793e0725492d3d36448adcd1db38f438dd1392bffd556b58bb9a3a2601 *spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz"" | sha256sum -c - && \
        tar xzf spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz -C /usr/local && \
        rm spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6.tgz
RUN cd /usr/local && ln -s spark-${APACHE_SPARK_VERSION}-bin-hadoop2.6 spark


# apache toree
ENV TOREE_VERSION 0.1.0.dev8
RUN pip install toree===${TOREE_VERSION}
RUN jupyter toree install 			





#Eclair JS
ENV ECLAIRJS_VERSION 0.5

RUN wget -q http://repo2.maven.org/maven2/org/eclairjs/eclairjs-nashorn/${ECLAIRJS_VERSION}/eclairjs-nashorn-${ECLAIRJS_VERSION}-jar-with-dependencies.jar && \
    mkdir -p /opt/nashorn/lib && \
    mv eclairjs-nashorn-${ECLAIRJS_VERSION}-jar-with-dependencies.jar /opt/nashorn/lib/eclairjs.jar


#kernel.json
COPY kernel.json /usr/local/share/jupyter/kernels/eclair/

# data for examples
COPY examples/ /tmp/

CMD [""jupyter"", ""notebook"", ""--no-browser"", ""--NotebookApp.ip=0.0.0.0""]
",EclairJS/eclairjs-node,Dockerfile
e6483bed380e66e120d15f932c3e8fba1898ab78,518,"FROM python:2.7
RUN pip install uwsgi
RUN apt-get update --fix-missing
RUN apt-get -y install python-dev python-lxml libxslt-dev libpq-dev pgadmin3 libtiff5-dev libjpeg62-turbo-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk
ENV PYTHONUNBUFFERED=1
EXPOSE 8000
WORKDIR /usr/src/app
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY djangoproject /usr/src/app
CMD cd /usr/src/app && python manage.py migrate && python manage.py runserver 0.0.0.0:8000",freedomsponsors/www.freedomsponsors.org,Dockerfile
88251b0e524936ffa227b59d0fc3b78c7cfb7337,92,"FROM golang:1.5.1

COPY . /go/src/github.com/docker/go
WORKDIR /go/src/github.com/docker/go
",docker/go,Dockerfile
d06b6abe5802b1e34ea6607f085bfc4c6fe33cbc,698,"FROM gliderlabs/alpine:3.2
MAINTAINER hello@neilellis.me

COPY rootfs /
ADD https://github.com/just-containers/s6-overlay/releases/download/v1.13.0.0/s6-overlay-amd64.tar.gz /tmp/s6-overlay.tar.gz

# about nsswitch.conf - see https://registry.hub.docker.com/u/frolvlad/alpine-oraclejdk8/dockerfile/

RUN tar xvfz /tmp/s6-overlay.tar.gz -C / && \
  apk -U add dnsmasq jq curl && \
  chmod 755 /bin/*.sh /etc/services.d/dns/run /etc/services.d/dns-hack/run /etc/services.d/syslog/run && \
  mkdir /app && \
  echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf && \
  addgroup -g 999 app && \
  adduser -D  -G app -s /bin/false -u 999 app

ENTRYPOINT [""/init""]
CMD []
",sillelien/base-alpine,Dockerfile
c110ffbab62683a3086a45211e19f2abea579378,569,"FROM sameersbn/ubuntu:14.04.20160608
MAINTAINER sameer@damagehead.com

ENV FFMPEG_VERSION=3.0.2 \
    X264_VERSION=snapshot-20160503-2245-stable

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y bzip2 libgnutlsxx27 libogg0 libjpeg8 libpng12-0 \
      libvpx1 libtheora0 libxvidcore4 libmpeg2-4 \
      libvorbis0a libfaad2 libmp3lame0 libmpg123-0 libmad0 libopus0 libvo-aacenc0 \
 && rm -rf /var/lib/apt/lists/*

COPY install.sh /var/cache/ffmpeg/install.sh
RUN bash /var/cache/ffmpeg/install.sh

ENTRYPOINT [""/usr/bin/ffmpeg""]
CMD [""--help""]
",sameersbn/docker-ffmpeg,Dockerfile
60837758f83a32ab36b196ae5824493bf8d83526,13223,"FROM debian:jessie

RUN apt-get update && apt-get -y install  unzip \
                        xz-utils \
                        curl \
                        bc \
                        git \
                        build-essential \
                        golang \
                        cpio \
                        gcc libc6 libc6-dev \
                        kmod \
                        squashfs-tools \
                        genisoimage \
                        xorriso \
                        syslinux \
                        isolinux \
                        automake \
                        pkg-config \
                        p7zip-full

# https://www.kernel.org/
ENV KERNEL_VERSION  4.4.13

# Fetch the kernel sources
RUN curl --retry 10 https://www.kernel.org/pub/linux/kernel/v${KERNEL_VERSION%%.*}.x/linux-$KERNEL_VERSION.tar.xz | tar -C / -xJ && \
    mv /linux-$KERNEL_VERSION /linux-kernel

# http://aufs.sourceforge.net/
ENV AUFS_REPO       https://github.com/sfjro/aufs4-standalone
ENV AUFS_BRANCH     aufs4.4
ENV AUFS_COMMIT     12387bde8dd9a74508636601bfd5b2a576932174
# we use AUFS_COMMIT to get stronger repeatability guarantees

# Download AUFS and apply patches and files, then remove it
RUN git clone -b ""$AUFS_BRANCH"" ""$AUFS_REPO"" /aufs-standalone && \
    cd /aufs-standalone && \
    git checkout -q ""$AUFS_COMMIT"" && \
    cd /linux-kernel && \
    cp -r /aufs-standalone/Documentation /linux-kernel && \
    cp -r /aufs-standalone/fs /linux-kernel && \
    cp -r /aufs-standalone/include/uapi/linux/aufs_type.h /linux-kernel/include/uapi/linux/ && \
    set -e && for patch in \
        /aufs-standalone/aufs*-kbuild.patch \
        /aufs-standalone/aufs*-base.patch \
        /aufs-standalone/aufs*-mmap.patch \
        /aufs-standalone/aufs*-standalone.patch \
        /aufs-standalone/aufs*-loopback.patch \
    ; do \
        patch -p1 < ""$patch""; \
    done

COPY kernel_config /linux-kernel/.config

RUN jobs=$(nproc); \
    cd /linux-kernel && \
    make -j ${jobs} oldconfig && \
    make -j ${jobs} bzImage && \
    make -j ${jobs} modules

# The post kernel build process

ENV ROOTFS /rootfs

# Make the ROOTFS
RUN mkdir -p $ROOTFS

# Prepare the build directory (/tmp/iso)
RUN mkdir -p /tmp/iso/boot

# Install the kernel modules in $ROOTFS
RUN cd /linux-kernel && \
    make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install

# Remove useless kernel modules, based on unclejack/debian2docker
RUN cd $ROOTFS/lib/modules && \
    rm -rf ./*/kernel/sound/* && \
    rm -rf ./*/kernel/drivers/gpu/* && \
    rm -rf ./*/kernel/drivers/infiniband/* && \
    rm -rf ./*/kernel/drivers/isdn/* && \
    rm -rf ./*/kernel/drivers/media/* && \
    rm -rf ./*/kernel/drivers/staging/lustre/* && \
    rm -rf ./*/kernel/drivers/staging/comedi/* && \
    rm -rf ./*/kernel/fs/ocfs2/* && \
    rm -rf ./*/kernel/net/bluetooth/* && \
    rm -rf ./*/kernel/net/mac80211/* && \
    rm -rf ./*/kernel/net/wireless/*

# Install libcap
RUN curl -fL http://http.debian.net/debian/pool/main/libc/libcap2/libcap2_2.22.orig.tar.gz | tar -C / -xz && \
    cd /libcap-2.22 && \
    sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules && \
    make && \
    mkdir -p output && \
    make prefix=`pwd`/output install && \
    mkdir -p $ROOTFS/usr/local/lib && \
    cp -av `pwd`/output/lib64/* $ROOTFS/usr/local/lib

# Make sure the kernel headers are installed for aufs-util, and then build it
RUN cd /linux-kernel && \
    make INSTALL_HDR_PATH=/tmp/kheaders headers_install && \
    cd / && \
    git clone https://github.com/Distrotech/aufs-util.git && \
    cd /aufs-util && \
    git checkout 5e0c348bd8b1898beb1e043b026bcb0e0c7b0d54 && \
    CPPFLAGS=""-I/tmp/kheaders/include"" CLFAGS=$CPPFLAGS LDFLAGS=$CPPFLAGS make && \
    DESTDIR=$ROOTFS make install && \
    rm -rf /tmp/kheaders

# Prepare the ISO directory with the kernel
RUN cp -v /linux-kernel/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz64

ENV TCL_REPO_BASE   http://tinycorelinux.net/7.x/x86_64
# Note that the ncurses is here explicitly so that top continues to work
ENV TCZ_DEPS        iptables \
                    iproute2 \
                    openssh openssl \
                    tar \
                    gcc_libs \
                    ncurses \
                    acpid \
                    xz liblzma \
                    git expat2 libgpg-error libgcrypt libssh2 \
                    nfs-utils tcp_wrappers portmap rpcbind libtirpc \
                    rsync attr acl \
                    curl ntpclient \
                    procps glib2 libtirpc libffi fuse pcre \
                    udev-lib udev-extra \
                    liblvm2 \
                    parted

# Download the rootfs, don't unpack it though:
RUN curl -fL -o /tcl_rootfs.gz $TCL_REPO_BASE/release/distribution_files/rootfs64.gz

# Install the TCZ dependencies
RUN set -ex && \
    for dep in $TCZ_DEPS; do \
        echo ""Download $TCL_REPO_BASE/tcz/$dep.tcz""; \
        curl -fL -o /tmp/$dep.tcz $TCL_REPO_BASE/tcz/$dep.tcz; \
        unsquashfs -f -d $ROOTFS /tmp/$dep.tcz; \
        rm -f /tmp/$dep.tcz; \
    done

# Install Tiny Core Linux rootfs
RUN cd $ROOTFS && zcat /tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames

# Apply horrible hacks
RUN cd $ROOTFS && ln -s lib lib64

# get generate_cert
RUN curl -fL -o $ROOTFS/usr/local/bin/generate_cert https://github.com/SvenDowideit/generate_cert/releases/download/0.2/generate_cert-0.2-linux-amd64 && \
    chmod +x $ROOTFS/usr/local/bin/generate_cert

# Build VBox guest additions
ENV VBOX_VERSION 5.0.22
RUN set -x && \
    \
    mkdir -p /vboxguest && \
    cd /vboxguest && \
    \
    curl -fL -o vboxguest.iso http://download.virtualbox.org/virtualbox/${VBOX_VERSION}/VBoxGuestAdditions_${VBOX_VERSION}.iso && \
    7z x vboxguest.iso -ir'!VBoxLinuxAdditions.run' && \
    rm vboxguest.iso && \
    \
    sh VBoxLinuxAdditions.run --noexec --target . && \
    mkdir amd64 && tar -C amd64 -xjf VBoxGuestAdditions-amd64.tar.bz2 && \
    rm VBoxGuestAdditions*.tar.bz2 && \
    \
    KERN_DIR=/linux-kernel/ make -C amd64/src/vboxguest-${VBOX_VERSION} && \
    cp amd64/src/vboxguest-${VBOX_VERSION}/*.ko $ROOTFS/lib/modules/$KERNEL_VERSION-boot2docker/ && \
    \
    mkdir -p $ROOTFS/sbin && \
    cp amd64/lib/VBoxGuestAdditions/mount.vboxsf amd64/sbin/VBoxService $ROOTFS/sbin/ && \
    mkdir -p $ROOTFS/bin && \
    cp amd64/bin/VBoxClient amd64/bin/VBoxControl $ROOTFS/bin/

# TODO figure out how to make this work reasonably (these tools try to read /proc/self/exe at startup, even for a simple ""--version"" check)
## verify that all the above actually worked (at least producing a valid binary, so we don't repeat issue #1157)
#RUN set -x && \
#    chroot ""$ROOTFS"" VBoxControl --version && \
#    chroot ""$ROOTFS"" VBoxService --version

# Install build dependencies for VMware Tools
RUN apt-get update && apt-get install -y \
        autoconf \
        libdumbnet-dev \
        libdumbnet1 \
        libfuse-dev \
        libfuse2 \
        libglib2.0-0 \
        libglib2.0-dev \
        libmspack-dev \
        libssl-dev \
        libtirpc-dev \
        libtirpc1 \
        libtool \
    && rm -rf /var/lib/apt/lists/*

# Build VMware Tools
ENV OVT_VERSION 10.0.0-3000743

RUN curl --retry 10 -fsSL ""https://github.com/vmware/open-vm-tools/archive/open-vm-tools-${OVT_VERSION}.tar.gz"" | tar -xz --strip-components=1 -C /

# Compile user space components, we're no longer building kernel module as we're
# now bundling FUSE shared folders support.
RUN cd /open-vm-tools && \
    autoreconf -i && \
    ./configure --disable-multimon --disable-docs --disable-tests --with-gnu-ld \
                --without-kernel-modules --without-procps --without-gtk2 \
                --without-gtkmm --without-pam --without-x --without-icu \
                --without-xerces --without-xmlsecurity --without-ssl && \
    make LIBS=""-ltirpc"" CFLAGS=""-Wno-implicit-function-declaration"" && \
    make DESTDIR=$ROOTFS install &&\
    /open-vm-tools/libtool --finish $ROOTFS/usr/local/lib

# Building the Libdnet library for VMware Tools.
ENV LIBDNET libdnet-1.12
RUN curl -fL -o /tmp/${LIBDNET}.zip https://github.com/dugsong/libdnet/archive/${LIBDNET}.zip && \
    unzip /tmp/${LIBDNET}.zip -d /vmtoolsd && \
    cd /vmtoolsd/libdnet-${LIBDNET} && ./configure --build=i486-pc-linux-gnu && \
    make && \
    make install && make DESTDIR=$ROOTFS install

# Horrible hack again
RUN cd $ROOTFS/usr/local/lib && ln -s libdnet.1 libdumbnet.so.1 && readlink -f libdumbnet.so.1

# TCL 7 doesn't ship with libtirpc.so.1 Dummy it up so the VMware tools work
# again, taken from:
# https://github.com/boot2docker/boot2docker/issues/1157#issuecomment-211647607
RUN cd $ROOTFS/usr/local/lib && ln -s libtirpc.so libtirpc.so.1 && readlink -f libtirpc.so.1

# verify that all the above actually worked (at least producing a valid binary, so we don't repeat issue #1157)
RUN LD_LIBRARY_PATH=/lib:/usr/local/lib \
        chroot ""$ROOTFS"" vmhgfs-fuse --version

# Download and build Parallels Tools
ENV PRL_MAJOR 11
ENV PRL_VERSION 11.1.0
ENV PRL_BUILD 32202

RUN mkdir -p /prl_tools && \
    curl -fL http://download.parallels.com/desktop/v${PRL_MAJOR}/${PRL_VERSION}/ParallelsTools-${PRL_VERSION}-${PRL_BUILD}-boot2docker.tar.gz \
        | tar -xzC /prl_tools --strip-components 1 && \
    cd /prl_tools && \
    cp -Rv tools/* $ROOTFS && \
    \
    KERNEL_DIR=/linux-kernel/ KVER=$KERNEL_VERSION SRC=/linux-kernel/ PRL_FREEZE_SKIP=1 \
        make -C kmods/ -f Makefile.kmods installme && \
    \
    find kmods/ -name '*.ko' -exec cp {} $ROOTFS/lib/modules/$KERNEL_VERSION-boot2docker/ ';'

# verify that all the above actually worked (at least producing a valid binary, so we don't repeat issue #1157)
RUN chroot ""$ROOTFS"" prltoolsd -V

# Build XenServer Tools
ENV XEN_REPO https://github.com/xenserver/xe-guest-utilities
ENV XEN_VERSION v6.6.80

RUN git clone -b ""$XEN_VERSION"" ""$XEN_REPO"" /xentools \
    && cd /xentools \
    && make \
    && tar xvf build/dist/*.tgz -C $ROOTFS/

# TODO find a binary we can attempt running that will verify at least on the surface level that the xentools are working

# Make sure that all the modules we might have added are recognized (especially VBox guest additions)
RUN depmod -a -b $ROOTFS $KERNEL_VERSION-boot2docker

COPY VERSION $ROOTFS/etc/version
RUN cp -v $ROOTFS/etc/version /tmp/iso/version

# Get the Docker binaries with version that matches our boot2docker version.
RUN curl -fSL -o /tmp/dockerbin.tgz https://get.docker.com/builds/Linux/x86_64/docker-$(cat $ROOTFS/etc/version).tgz && \
    tar -zxvf /tmp/dockerbin.tgz -C ""$ROOTFS/usr/local/bin"" --strip-components=1 && \
    rm /tmp/dockerbin.tgz && \
    chroot ""$ROOTFS"" docker -v

# Copy our custom rootfs
COPY rootfs/rootfs $ROOTFS

# setup acpi config dir &
# tcl6's sshd is compiled without `/usr/local/sbin` in the path
# Boot2Docker and Docker Machine need `ip`, so I'm linking it in here
RUN cd $ROOTFS \
    && ln -s /usr/local/etc/acpi etc/ \
    && ln -s /usr/local/sbin/ip usr/sbin/

# Build the Hyper-V KVP Daemon
RUN cd /linux-kernel && \
    make INSTALL_HDR_PATH=/tmp/kheaders headers_install && \
    cd /linux-kernel/tools/hv && \
    sed -i 's!\(^CFLAGS = .*\)!\1 -I/tmp/kheaders/include!' Makefile && \
    make hv_kvp_daemon && \
    cp hv_kvp_daemon $ROOTFS/usr/sbin && \
    rm -rf /tmp/kheaders

# These steps can only be run once, so can't be in make_iso.sh (which can be run in chained Dockerfiles)
# see https://github.com/boot2docker/boot2docker/blob/master/doc/BUILD.md

# Make sure init scripts are executable
RUN find $ROOTFS/etc/rc.d/ $ROOTFS/usr/local/etc/init.d/ -exec chmod +x '{}' ';'

# move dhcp.sh out of init.d as we're triggering it manually so its ready a bit faster
RUN mv $ROOTFS/etc/init.d/dhcp.sh $ROOTFS/etc/rc.d/

# Change MOTD
RUN mv $ROOTFS/usr/local/etc/motd $ROOTFS/etc/motd

# Make sure we have the correct bootsync
RUN mv $ROOTFS/boot*.sh $ROOTFS/opt/ && \
	chmod +x $ROOTFS/opt/*.sh

# Make sure we have the correct shutdown
RUN mv $ROOTFS/shutdown.sh $ROOTFS/opt/shutdown.sh && \
	chmod +x $ROOTFS/opt/shutdown.sh

# Add serial console
RUN echo ""#!/bin/sh"" > $ROOTFS/usr/local/bin/autologin && \
	echo ""/bin/login -f docker"" >> $ROOTFS/usr/local/bin/autologin && \
	chmod 755 $ROOTFS/usr/local/bin/autologin && \
	echo 'ttyS0:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS0 vt100' >> $ROOTFS/etc/inittab && \
	echo 'ttyS1:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS1 vt100' >> $ROOTFS/etc/inittab

# fix ""su -""
RUN echo root > $ROOTFS/etc/sysconfig/superuser

# add some timezone files so we're explicit about being UTC
RUN echo 'UTC' > $ROOTFS/etc/timezone \
	&& cp -L /usr/share/zoneinfo/UTC $ROOTFS/etc/localtime

# Get the git versioning info
COPY .git /git/.git
RUN cd /git && \
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) && \
    GITSHA1=$(git rev-parse --short HEAD) && \
    DATE=$(date) && \
    echo ""${GIT_BRANCH} : ${GITSHA1} - ${DATE}"" > $ROOTFS/etc/boot2docker

# Copy boot params
COPY rootfs/isolinux /tmp/iso/boot/isolinux

COPY rootfs/make_iso.sh /

RUN /make_iso.sh

CMD [""sh"", ""-c"", ""[ -t 1 ] && exec bash || exec cat boot2docker.iso""]
",boot2docker/boot2docker,Dockerfile
1c3d6746eccec2a8435a4aaeafea78188b693727,1387,"# Copyright 2016 The Shaderc Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM alpine

MAINTAINER Google Shaderc Team

RUN apk add --update \
    bison \
    build-base \
    cmake \
    git \
    ninja \
    python \
    py-pip \
  && rm -rf /var/cache/apk/*

WORKDIR /root
RUN git clone https://github.com/google/shaderc
WORKDIR shaderc
RUN git clone https://github.com/google/googletest.git        third_party/googletest
RUN git clone https://github.com/google/glslang.git           third_party/glslang
RUN git clone https://github.com/KhronosGroup/SPIRV-Tools.git third_party/spirv-tools

WORKDIR build
RUN cmake -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    .. \
  && ninja install

WORKDIR /root
RUN rm -rf shaderc

RUN adduser -s /bin/sh -D shaderc
USER shaderc

VOLUME /code
WORKDIR /code

CMD [""/bin/sh""]
",antiagainst/shaderc,Dockerfile
57da466be9bdac6c253da1ea82da73ec7615b33a,675,"FROM centos:6
MAINTAINER ""JCU eResearch Centre"" <eresearch.nospam@jcu.edu.au>

# Configure EPEL for GeoIP-devel
RUN rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm

# Install required packages for building
RUN yum install -y \
  gcc \
  git \
  make \
  rpm-build \
  rpmdevtools \
  sudo \
  yum-utils

# Make the build area available
RUN mkdir -p /app/build

# Expose web ports for nginx
EXPOSE 80 443

# 1. Build
# 2. Test
# 3. Copy the RPMs back to the host volume
CMD /app/nginx-build.sh && \
  yum install -y ~/rpmbuild/RPMS/x86_64/nginx-*.rpm && \
  nginx -t && \
  rsync --no-relative -vahu ~/rpmbuild/RPMS ~/rpmbuild/SRPMS /app/build
",jcu-eresearch/nginx-custom-build,Dockerfile
6586c8b490a3dfe83637b1f66539b5288339a08c,279,"FROM ubuntu:trusty

RUN DEBIAN_FRONTEND=noninteractive apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get -y install nodejs npm git libgmp3-dev
RUN ln -sf /usr/bin/nodejs /usr/local/bin/node

RUN useradd --home-dir /opt/fxa fxa
USER fxa

WORKDIR /opt/fxa

CMD npm start
",mozilla/fxa-content-server,Dockerfile
9644d8f1543f471885a4503ea4cf3953ea157ea6,862,"FROM alpine:3.3

RUN apk update && \
  apk add \
    ca-certificates \
    git \
    ruby \
    ruby-dev \
    build-base \
    perl \
    libffi-dev \
    bash && \
  gem install --no-ri --no-rdoc \
    droneio \
    --version '~> 1.0' && \
  gem install --no-ri --no-rdoc \
    mixlib-shellout \
    --version '~> 2.2' && \
  gem install --no-ri --no-rdoc \
    chef \
    --version '~> 12.7' && \
  gem install --no-ri --no-rdoc \
    io-console \
    --version '~> 0.4' && \
  gem install --no-ri --no-rdoc \
    berkshelf \
    --version '~> 4.2' && \
  gem install --no-ri --no-rdoc \
    bigdecimal \
    --version '~> 1.2' && \
  apk del \
    bash \
    libffi-dev \
    perl && \
  rm -rf /var/cache/apk/*

COPY pkg/drone-chef-0.0.0.gem /tmp/

RUN gem install --no-ri --no-rdoc --local \
  /tmp/drone-chef-0.0.0.gem

ENTRYPOINT [""/usr/bin/drone-chef""]
",drone-plugins/drone-chef,Dockerfile
9588da5b5dfa557423b945f73d20041bd1d3a6f3,630,"FROM phusion/passenger-full

# Set correct environment variables.
ENV HOME /root
WORKDIR /home/app
VOLUME /config

COPY . /home/app

# Farcy + Python linters
RUN mkdir /root/.config && \
    ln -sf /config /root/.config/farcy && \
    curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    apt-get update && \
    apt-get install -y python3-dev libffi-dev && \
    pip3 install .[python] && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ESLint
RUN npm install -g eslint babel-eslint eslint-plugin-react eslint-config-airbnb

# Rubocop and SCSS-Lint
RUN gem install rubocop scss_lint

CMD [""farcy""]
",appfolio/farcy,Dockerfile
f09987f4370436e2e578a618c7f951a1170b04de,1187,"FROM jenkins:1.642.2

COPY plugins.txt /var/jenkins_home/plugins.txt
RUN /usr/local/bin/plugins.sh /var/jenkins_home/plugins.txt

# Adding default Jenkins Jobs
COPY jobs/1-github-seed-job.xml /usr/share/jenkins/ref/jobs/1-github-seed-job/config.xml
COPY jobs/2-job-dsl-seed-job.xml /usr/share/jenkins/ref/jobs/2-job-dsl-seed-job/config.xml
COPY jobs/3-conference-app-seed-job.xml /usr/share/jenkins/ref/jobs/3-conference-app-seed-job/config.xml

############################################
# Configure Jenkins
############################################
# Jenkins settings
COPY config/config.xml /usr/share/jenkins/ref/config.xml

# Jenkins Settings, i.e. Maven, Groovy, ...
COPY config/hudson.tasks.Maven.xml /usr/share/jenkins/ref/hudson.tasks.Maven.xml
COPY config/hudson.plugins.groovy.Groovy.xml /usr/share/jenkins/ref/hudson.plugins.groovy.Groovy.xml
COPY config/maven-global-settings-files.xml /usr/share/jenkins/ref/maven-global-settings-files.xml

# SSH Keys & Credentials
COPY config/credentials.xml /usr/share/jenkins/ref/credentials.xml
COPY config/ssh-keys/cd-demo /usr/share/jenkins/ref/.ssh/id_rsa
COPY config/ssh-keys/cd-demo.pub /usr/share/jenkins/ref/.ssh/id_rsa.pub
",marcelbirkner/docker-jenkins-job-dsl,Dockerfile
4e66e52391e2e1b77a458c4668f43f7cba736a62,795,"############################################################
# Dockerfile to run Traitar - the microbial trait analyzer 
# Based on Ubuntu Image
############################################################

# Set the base image to use to Ubuntu
FROM ubuntu:trusty 

RUN apt-get update
MAINTAINER Aaron Weimann (weimann@hhu.de)
RUN apt-get install -y python-scipy python-matplotlib python-pip python-pandas
RUN echo ""deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse "">> /etc/apt/sources.list 
RUN apt-get update
RUN apt-get install -y hmmer prodigal
RUN apt-get install -y wget 
COPY dist/traitar-1.0.4.tar.gz /tmp
COPY traitar/data/sample_data /tmp/sample_data
RUN pip install /tmp/traitar-1.0.4.tar.gz
COPY Pfam-A.hmm /tmp
RUN traitar pfam --local /tmp
",aweimann/traitar,Dockerfile
d86426dc9fbb11ae936a8ba67bdb49d66167b0a4,173,"FROM microsoft/aspnet:1.0.0-beta7

COPY project.json /app/
WORKDIR /app
RUN [""dnu"", ""restore""]
COPY . /app


EXPOSE 5000
ENTRYPOINT [""dnx"", ""-p"", ""project.json"", ""kestrel""]
",syediddi/dnxpi,Dockerfile
a4b780f95f39b56302e9cdf5698d65c062750a12,829,"FROM ubuntu:14.04
MAINTAINER krystism ""krystism@gmail.com""
# install packages
RUN set -x \
	&& echo ""deb http://ubuntu-cloud.archive.canonical.com/ubuntu trusty-updates/juno main"" > /etc/apt/sources.list.d/juno.list \
	&& apt-get -y update \
	&& apt-get -y install ubuntu-cloud-keyring \
	&& apt-get -y update \
	&& apt-get -y install \
		mysql-client \
		keystone \
		python-keystoneclient \
		python-mysqldb \
	&& apt-get -y clean \
	&& rm -f /var/lib/keystone/keystone.db
VOLUME /etc/keystone
EXPOSE 5000 35357
# copy sql script
COPY keystone.sql /root/keystone.sql
# copy keystone config file
COPY keystone.conf /etc/keystone/keystone.conf

# add bootstrap script and make it executable
COPY bootstrap.sh /etc/bootstrap.sh
RUN chown root.root /etc/bootstrap.sh && chmod a+x /etc/bootstrap.sh
ENTRYPOINT [""/etc/bootstrap.sh""]
",krystism/docker-keystone,Dockerfile
cb10006dde9b7cc169afc19e85eada49a962b6ca,461,"# Using official python runtime base image
FROM python:2.7

# File Author / Maintainer - image can be pulled from karolisr/mirage-main
MAINTAINER SpectoLabs

# Copy the application folder inside the container
ADD . /app

RUN pip install -r /app/requirements/development.txt

# Set the default directory where CMD will execute
WORKDIR /app

# Set the default command to execute
# when creating a new container
CMD [""python"", ""run.py""]

# Expose ports
EXPOSE 8001",SpectoLabs/mirage,Dockerfile
edc5995a793f7eea57c373dbfd6a34191c80f62f,110,"FROM gcr.io/google_appengine/python-compat
RUN apt-get update && apt-get install -y python-opencv

ADD . /app
",GoogleCloudPlatform/appengine-opencv-sudoku-python,Dockerfile
8b48b03302e52aa8824062bacfdc2b38aa3ea05a,175,"FROM node:4.4
MAINTAINER Daniel Stefanovic
EXPOSE 3000
WORKDIR /src

COPY package.json .
RUN npm install
COPY . .
RUN npm run build
RUN npm test

CMD [""node"", ""bin/index.js""]
",danistefanovic/hooka,Dockerfile
aab4911b0d4521090442d88138b57ea81a22191d,1719,"FROM python:3.5-slim

RUN usermod -d /home www-data && chown www-data:www-data /home

RUN apt-get update \
    # mfr dependencies
    && apt-get install -y \
        git \
        make \
        gcc \
        build-essential \
        gfortran \
        r-base \
        libblas-dev \
        libevent-dev \
        libfreetype6-dev \
        libjpeg-dev \
        libpng12-dev \
        libxml2-dev \
        libxslt1-dev \
        zlib1g-dev \
    # unoconv dependencies
    && apt-get install -y \
        unoconv \
    && apt-get clean \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.4
RUN apt-get update \
    && apt-get install -y \
        curl \
    && gpg --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && curl -o /usr/local/bin/gosu -SL ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
  	&& curl -o /usr/local/bin/gosu.asc -SL ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
  	&& gpg --verify /usr/local/bin/gosu.asc \
  	&& rm /usr/local/bin/gosu.asc \
  	&& chmod +x /usr/local/bin/gosu \
    && apt-get clean \
    && apt-get autoremove -y \
        curl \
    && rm -rf /var/lib/apt/lists/*

# ensure unoconv can locate the uno library
ENV PYTHONPATH=/usr/lib/python3/dist-packages

RUN mkdir -p /code
WORKDIR /code

RUN pip install -U pip

COPY ./requirements.txt /code/

RUN pip install --no-cache-dir -r /code/requirements.txt

# Copy the rest of the code over
COPY ./ /code/

RUN python setup.py develop

EXPOSE 7778

CMD [""gosu"", ""nobody"", ""invoke"", ""server""]
",CenterForOpenScience/modular-file-renderer,Dockerfile
d6a24a3f2f14eeb7e40b2cd452c8d2b3e22d33d4,1132,"FROM ubuntu:14.04
MAINTAINER matt@hilenium.com

ENV SWIFT_BRANCH development
ENV SWIFT_VERSION DEVELOPMENT-SNAPSHOT-2016-02-08-a
ENV SWIFT_PLATFORM ubuntu14.04

RUN apt-get update && \
    apt-get install -y build-essential wget clang libedit-dev python2.7 python2.7-dev libicu52 rsync libxml2 git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN wget -q -O - https://swift.org/keys/all-keys.asc | gpg --import - && \
    gpg --keyserver hkp://pool.sks-keyservers.net --refresh-keys Swift

RUN SWIFT_ARCHIVE_NAME=swift-$SWIFT_VERSION-$SWIFT_PLATFORM && \
    SWIFT_URL=https://swift.org/builds/$SWIFT_BRANCH/$(echo ""$SWIFT_PLATFORM"" | tr -d .)/swift-$SWIFT_VERSION/$SWIFT_ARCHIVE_NAME.tar.gz && \
    wget $SWIFT_URL && \
    wget $SWIFT_URL.sig && \
    gpg --verify $SWIFT_ARCHIVE_NAME.tar.gz.sig && \
    tar -xvzf $SWIFT_ARCHIVE_NAME.tar.gz --directory / --strip-components=1 && \
    rm -rf $SWIFT_ARCHIVE_NAME* /tmp/* /var/tmp/*

ENV PATH /usr/bin:$PATH

RUN mkdir -p /code
WORKDIR /code
ADD . /code
RUN swift build --configuration release && cp .build/release/vapor /

EXPOSE 8080

CMD bash
",mpclarkson/vapor-installer,Dockerfile
9ebe22124ba5abf6f62b7d2f2dbf98f45d1b17d2,1403,"FROM gliderlabs/alpine:3.3
MAINTAINER Martin Seeler <developer@chasmo.de>

# Set correct environment variables.
ENV HOME /root
ENV MAJOR 8
ENV MINOR 72

WORKDIR /tmp

RUN apk --update add wget ca-certificates && \
 wget ""https://github.com/andyshinn/alpine-pkg-glibc/releases/download/unreleased/glibc-2.23-r0.apk"" && \
 wget ""https://github.com/andyshinn/alpine-pkg-glibc/releases/download/unreleased/glibc-bin-2.23-r0.apk"" && \
 wget ""https://github.com/andyshinn/alpine-pkg-glibc/releases/download/unreleased/glibc-i18n-2.23-r0.apk"" && \
 apk add --no-cache --allow-untrusted glibc-2.23-r0.apk glibc-bin-2.23-r0.apk glibc-i18n-2.23-r0.apk && \
 /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true && \
 echo ""export LANG=C.UTF-8"" > /etc/profile.d/locale.sh && \
 wget --no-check-certificate --no-cookies --header ""Cookie: oraclelicense=accept-securebackup-cookie"" http://download.oracle.com/otn-pub/java/jdk/8u72-b15/server-jre-8u72-linux-x64.tar.gz -O server-jre.tar.gz && \
 mkdir oracle-server-jre && \
 tar -xzf server-jre.tar.gz -C ./oracle-server-jre && \
 mkdir -p /opt/oracle-server-jre && \
 cp -r /tmp/oracle-server-jre/jdk1.${MAJOR}.0_${MINOR}/* /opt/oracle-server-jre/ && \
 ln -s /opt/oracle-server-jre/bin/* /usr/bin/ && \
 chmod ugo+x /usr/bin/java && \
 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
 apk del wget ca-certificates glibc-i18n
",MartinSeeler/docker-oracle-server-jre,Dockerfile
f8ff46d290f8d0bc9515a6ebd449463166a979cc,1102,"# Copyright (c) 2012-2016 Peter Morgan <peter.james.morgan@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
FROM scratch
MAINTAINER Peter Morgan <peter.james.morgan@gmail.com>

ARG REL_NAME
ARG REL_VSN=1
ARG ERTS_VSN

ENV BINDIR /erts-${ERTS_VSN}/bin
ENV BOOT /releases/${REL_VSN}/${REL_NAME}
ENV CONFIG /releases/${REL_VSN}/sys.config
ENV ARGS_FILE /releases/${REL_VSN}/vm.args

ENV TZ=GMT

ENTRYPOINT exec ${BINDIR}/erlexec \
           -boot_var /lib \
           -boot ${BOOT} \
           -noinput \
           -config ${CONFIG} \
           -args_file ${ARGS_FILE}

ADD _rel/${REL_NAME}/ /
",shortishly/erlang-in-docker-from-scratch,Dockerfile
ec18f00d1086bb14a91f43b6b5c68bde347abc39,2137,"## -*- docker-image-name: ""scaleway/drupal:latest"" -*-
FROM scaleway/ubuntu:amd64-trusty
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM scaleway/ubuntu:armhf-trusty       # arch=armv7l
#FROM scaleway/ubuntu:arm64-trusty       # arch=arm64
#FROM scaleway/ubuntu:i386-trusty        # arch=i386
#FROM scaleway/ubuntu:mips-trusty        # arch=mips


MAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)


# Prepare rootfs for image-builder
RUN /usr/local/sbin/scw-builder-enter


# Upgrade packages
RUN apt-get -q update                    \
  && apt-get --force-yes -y -qq upgrade  \
  && apt-get install -y -qq              \
       php5 libapache2-mod-php5          \
       php5-mcrypt php5-cli php5-mysql   \
       php5-gd php5-curl libssh2-php     \
       apache2                           \
  && apt-get clean


ENV DRUPAL_VERSION=8.0.1


# Patches
COPY ./overlay/ /


RUN a2enmod rewrite                                                                      \
 && sed -i s/""expose_php = On""/""expose_php = Off""/g /etc/php5/apache2/php.ini            \
 && sed -i s/""allow_url_fopen = On""/""allow_url_fopen = Off""/g /etc/php5/apache2/php.ini


# Install Drupal
RUN cd /var/www                                                              \
 && wget http://ftp.drupal.org/files/projects/drupal-$DRUPAL_VERSION.tar.gz  \
 && tar xzf drupal-$DRUPAL_VERSION.tar.gz                                    \
 && rm -rf /var/www/html                                                     \
 && rm -rf /var/www/drupal-$DRUPAL_VERSION.tar.gz                            \
 && mv drupal-$DRUPAL_VERSION html


RUN cd /var/www/html                                                  \
 && mkdir -p sites/default/files                                      \
 && chmod a+w sites/default/files                                     \
 && cp sites/default/default.settings.php sites/default/settings.php  \
 && chmod a+w sites/default/settings.php


RUN chown -R www-data:www-data /var/www/html


# Clean rootfs from image-builder
RUN /usr/local/sbin/scw-builder-leave
",scaleway-community/scaleway-drupal,Dockerfile
866259dbc1f7459a74e0f3a31a0226880853f786,389,"FROM savonet/liquidsoap-deps

MAINTAINER The Savonet Team <savonet-users@lists.sourceforge.net>

USER opam

WORKDIR /tmp

RUN git clone https://github.com/savonet/liquidsoap-full.git

WORKDIR /tmp/liquidsoap-full

RUN make init && make update

RUN cp PACKAGES.default PACKAGES

RUN ./bootstrap

RUN eval $(opam config env) && ./configure && make clean && make

USER root

RUN make install
",savonet/liquidsoap-full,Dockerfile
a5c60b3f2754ff7c07b3548a9ceeeea6ff694b33,989,"#
# RabbitMQ Dockerfile
#
# https://github.com/dockerfile/rabbitmq
#

# Pull base image.
FROM dockerfile/ubuntu

# Add files.
ADD bin/rabbitmq-start /usr/local/bin/

# Install RabbitMQ.
RUN \
  wget -qO - https://www.rabbitmq.com/rabbitmq-signing-key-public.asc | apt-key add - && \
  echo ""deb http://www.rabbitmq.com/debian/ testing main"" > /etc/apt/sources.list.d/rabbitmq.list && \
  apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y rabbitmq-server && \
  rm -rf /var/lib/apt/lists/* && \
  rabbitmq-plugins enable rabbitmq_management && \
  echo ""[{rabbit, [{loopback_users, []}]}]."" > /etc/rabbitmq/rabbitmq.config && \
  chmod +x /usr/local/bin/rabbitmq-start

# Define environment variables.
ENV RABBITMQ_LOG_BASE /data/log
ENV RABBITMQ_MNESIA_BASE /data/mnesia

# Define mount points.
VOLUME [""/data/log"", ""/data/mnesia""]

# Define working directory.
WORKDIR /data

# Define default command.
CMD [""rabbitmq-start""]

# Expose ports.
EXPOSE 5672
EXPOSE 15672
",dockerfile/rabbitmq,Dockerfile
4ecdbd20336791ae370d73896a24251bda4e9ca1,2768,"FROM centos:centos7

# Set the locale. This is mainly so that tests can write non-ascii files to
# disk.
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

ADD docker/mysql-community.gpg.key /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
ADD docker/nodesource.gpg.key /etc/pki/rpm-gpg/RPM-GPG-KEY-nodesource

# For mysql-python dependencies
ADD docker/mysql.repo /etc/yum.repos.d/mysql.repo

# This is temporary until https://bugzilla.mozilla.org/show_bug.cgi?id=1226533
ADD docker/nodesource.repo /etc/yum.repos.d/nodesource.repo

RUN yum update -y \
    && yum install -y \
        # Supervisor is being used to start and keep our services running
        supervisor \
        # General (dev-) dependencies
        bash-completion \
        gcc-c++ \
        curl \
        make \
        libjpeg-devel \
        cyrus-sasl-devel \
        libxml2-devel \
        libxslt-devel \
        zlib-devel \
        libffi-devel \
        openssl-devel \
        python-devel \
        # Git, because we're using git-checkout dependencies
        git \
        # Nodejs for less, stylus, uglifyjs and others
        nodejs \
        # Dependencies for mysql-python
        mysql-community-devel \
        mysql-community-client \
        mysql-community-libs \
        epel-release \
    && yum clean all

RUN yum install -y python-pip

# Until https://github.com/shazow/urllib3/commit/959d47d926e1331ad571dbfc150c9a3acb7a1eb9 lands
RUN pip install pyOpenSSL ndg-httpsclient pyasn1 certifi urllib3

# ipython / ipdb for easier debugging, supervisor to run services
RUN pip install ipython ipdb supervisor

# Install all python requires
COPY requirements /pip/requirements/
RUN cd /pip && \
    pip install --build ./build --cache-dir ./cache \
        --find-links https://pyrepo.stage.mozaws.net/olympia/ \
        --no-index --no-deps \
        -r requirements/docker.txt && \
    rm -r build cache

# Install the node_modules.
RUN mkdir -p /srv/olympia-node
ADD package.json /srv/olympia-node/package.json
WORKDIR /srv/olympia-node
RUN npm install
COPY . /code
WORKDIR /code

RUN pip install -e /code

# Preserve bash history across image updates.
# This works best when you link your local source code
# as a volume.
ENV HISTFILE /code/docker/artifacts/bash_history

# Configure bash history.
ENV HISTSIZE 50000
ENV HISTIGNORE ls:exit:""cd ..""

# This prevents dupes but only in memory for the current session.
ENV HISTCONTROL erasedups

ENV CLEANCSS_BIN /srv/olympia-node/node_modules/clean-css/bin/cleancss
ENV LESS_BIN /srv/olympia-node/node_modules/less/bin/lessc
ENV STYLUS_BIN /srv/olympia-node/node_modules/stylus/bin/stylus
ENV UGLIFY_BIN /srv/olympia-node/node_modules/uglify-js/bin/uglifyjs
ENV VALIDATOR_BIN /srv/olympia-node/node_modules/addons-validator/bin/addons-validator
",mozilla/olympia,Dockerfile
d621a9813a5c6a55251fd54f2ab08eebaf04ecbb,140,"FROM mefellows/mono-static

MAINTAINER Matt Fellows <matt.fellows@onegeek.com.au>

ONBUILD WORKDIR /usr/src/app/build
CMD [ ""sleep"", ""600"" ]",mefellows/demo-docker-mono-api,Dockerfile
f5794360eb1dd619472d5c348f9a36c150b6deb0,1416,"FROM buildpack-deps:jessie

RUN mkdir -p /conf

RUN apt-get update && apt-get install -y \
  libgmp-dev \
  iptables \
  xl2tpd \
  module-init-tools

ENV STRONGSWAN_VERSION 5.3.5

RUN mkdir -p /usr/src/strongswan \
	&& curl -SL ""https://download.strongswan.org/strongswan-$STRONGSWAN_VERSION.tar.gz"" \
	| tar -zxC /usr/src/strongswan --strip-components 1 \
	&& cd /usr/src/strongswan \
	&& ./configure --prefix=/usr --sysconfdir=/etc \
		--enable-eap-radius \
		--enable-eap-mschapv2 \
		--enable-eap-identity \
		--enable-eap-md5 \
		--enable-eap-mschapv2 \
		--enable-eap-tls \
		--enable-eap-ttls \
		--enable-eap-peap \
		--enable-eap-tnc \
		--enable-eap-dynamic \
		--enable-xauth-eap \
		--enable-openssl \
	&& make -j \
	&& make install \
	&& rm -rf /usr/src/strongswan

# Strongswan Configuration
ADD ipsec.conf /etc/ipsec.conf
ADD strongswan.conf /etc/strongswan.conf

# XL2TPD Configuration
ADD xl2tpd.conf /etc/xl2tpd/xl2tpd.conf
ADD options.xl2tpd /etc/ppp/options.xl2tpd

ADD run.sh /run.sh
ADD vpn_adduser /usr/local/bin/vpn_adduser
ADD vpn_deluser /usr/local/bin/vpn_deluser
ADD vpn_setpsk /usr/local/bin/vpn_setpsk
ADD vpn_unsetpsk /usr/local/bin/vpn_unsetpsk
ADD vpn_apply /usr/local/bin/vpn_apply

# The password is later on replaced with a random string
ENV VPN_USER user
ENV VPN_PASSWORD password
ENV VPN_PSK password

VOLUME [""/etc/ipsec.d""]

EXPOSE 4500/udp 500/udp 1701/udp

CMD [""/run.sh""]
",philpl/docker-strongswan,Dockerfile
e314934a4ecef80a5828f5ad07a0e5c4823c37b1,970,"# Pull base image.
FROM dockerfile/ubuntu

# Install MongoDB.
RUN \
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 && \
    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' > /etc/apt/sources.list.d/mongodb.list && \
      apt-get update && \
        apt-get install -y mongodb-org && \
          rm -rf /var/lib/apt/lists/*

# Define mountable directories.
VOLUME [""/data/db""]

# Define working directory.
WORKDIR /data

# Define default command.
CMD [""mongod""]

# Expose ports.
#   - 27017: process
#   - 28017: http
EXPOSE 27017
EXPOSE 28017

# Install Ruby.
RUN \
  apt-get update && \
    apt-get install -y ruby ruby-dev ruby-bundler && \
      rm -rf /var/lib/apt/lists/*

# Define working directory.
WORKDIR /data

# Define default command.
CMD [""bash""]

# Next: Git, bundle
RUN \
apt-get install git && apt-get install bundler

# Next: Volt
RUN \
gem install volt \
volt new appname \
cd appname \
bundle


",ybur-yug/volt_tutorial,Dockerfile
6ed315e606d9bd6e2c08125ededcab100115249e,1654,"FROM nginx:1.9.14
MAINTAINER Richard Adams richard@madwire.co.uk

ENV NGINX_DEFAULT_CONF=/etc/nginx/conf.d/default.conf
ENV NGINX_DEFAULT_SSL_CRT=/etc/nginx/certs/default.crt
ENV NGINX_DEFAULT_SSL_KEY=/etc/nginx/certs/default.key

# Install wget and install/updates certificates
RUN apt-get update \
  && apt-get install -y -q --no-install-recommends \
    ca-certificates \
    wget \
    build-essential \
    openssl \
    libssl-dev \
    ruby-full \
  && apt-get clean \
  && rm -r /var/lib/apt/lists/*

# Configure Nginx and apply fix for very long server names
RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf \
  && sed -i 's/^http {/&\n    server_names_hash_bucket_size 128;/g' /etc/nginx/nginx.conf

# Install Forego
RUN wget -P /usr/local/bin https://github.com/jwilder/forego/releases/download/v0.16.1/forego \
 && chmod u+x /usr/local/bin/forego

# Install App dependancies
RUN gem install faye-websocket --no-ri --no-rdoc && gem install tutum --no-ri --no-rdoc

COPY . /app/
WORKDIR /app/

# Generate Default Self-signed certificate
RUN openssl genrsa -des3 -passout pass:x -out default.pass.key 2048 \
  && openssl rsa -passin pass:x -in default.pass.key -out default.key \
  && rm default.pass.key \
  && openssl req -new -key default.key -out default.csr -subj ""/C=UK/ST=State/L=local/O=OrgName/OU=Web/CN=example.com"" \
  && openssl x509 -req -days 365 -in default.csr -signkey default.key -out default.crt \
  && mkdir -p /etc/nginx/certs/ \
  && mv default.crt /etc/nginx/certs/default.crt && mv default.key /etc/nginx/certs/default.key
  # Then, just use the generated default.key and default.crt files.

CMD [""forego"", ""start"", ""-r""]
",madwire/dockercloud-nginx-proxy,Dockerfile
cb78c7f49b92206bbc8e410ee6b86263f2d4bb90,164,"FROM node:latest
MAINTAINER Vasiliy Yorkin ""vasiliy.yorkin@gmail.com""

RUN mkdir -p /usr/src/app
ADD package.json /usr/src/app
WORKDIR /usr/src/app
RUN npm install
",vyorkin-personal/starter-kit,Dockerfile
aab10ae62dd9be2a16dfe81484b1c58436f1e373,627,"FROM node:5

# Get needed libraries
RUN apt-get update
RUN apt-get install -y libelf1

# Create node user
RUN groupadd node
RUN useradd -m -g node node

# Get express-react-router
WORKDIR /home/node/express-react-router/

COPY .flowconfig ./.flowconfig
COPY flowlib/ ./flowlib/
COPY .babelrc ./.babelrc
COPY package.json ./package.json
COPY src/ ./src/
COPY example/ ./example/

RUN chown node:node ./
RUN chown -R node:node ./*

# Install Server
USER node

WORKDIR /home/node/express-react-router/
RUN npm install

WORKDIR /home/node/express-react-router/example/
RUN npm install

# Start Server
CMD npm run start

EXPOSE 8080",nheyn/express-react-router,Dockerfile
73efa6cd646bccb343762956f92b5c4b680773a1,2080,"FROM ubuntu:14.04

# set up basic stuff
RUN apt-get update
RUN apt-get install -y python-pip build-essential git

# set sensible environmental defaults
ENV CODE_PATH /opt/chime/webapp
ENV DATA_PATH /var/opt/chime/data/default
ENV PUBLISH_PATH /var/opt/chime/publish/default
ENV LOG_PATH /var/log/chime
ENV REPO_PATH $DATA_PATH/repo
ENV WORK_PATH $DATA_PATH/work
ENV RUNNING_STATE_DIR /var/run/chime
ENV USER chime

RUN groupadd -r $USER -g 800
RUN useradd -m -u 800 -g $USER $USER


# create necessary paths
RUN mkdir -p $CODE_PATH $DATA_PATH $PUBLISH_PATH $RUNNING_STATE_DIR $LOG_PATH
RUN chown chime:chime $DATA_PATH $PUBLISH_PATH $RUNNING_STATE_DIR $LOG_PATH

# install chime
ADD ./chime $CODE_PATH/chime
ADD ./requirements.txt $CODE_PATH/requirements.txt
ADD ./Procfile $CODE_PATH/Procfile
ADD ./setup.py $CODE_PATH/setup.py
RUN pip install -r $CODE_PATH/requirements.txt
RUN pip install -U $CODE_PATH

VOLUME $DATA_PATH
VOLUME $PUBLISH_PATH
VOLUME $LOG_PATH

# install jekyll
RUN apt-get -y install rbenv curl
ADD ./jekyll $CODE_PATH/jekyll
USER chime
RUN $CODE_PATH/jekyll/install-jekyll.sh


# app configuration
#
# TODO: make this unnecessary
ENV GA_CLIENT_ID ignored
ENV GA_CLIENT_SECRET ignored
ENV GA_REDIRECT_URI ignored
#
# TODO: rename to PERSONA_URL
ENV BROWSERID_URL ""http://127.0.0.1:5000""


# TODO: remove debugging tools
USER root
RUN apt-get install psmisc strace

# make sure we are UTF-8 happy
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# set up for running the app
EXPOSE 5000
WORKDIR /opt/chime/webapp
USER chime
CMD  honcho start


# expected command-line arguments look something like
# run
#   -v /real/path/to/data:/var/opt/chime/data/default
#   -v /real/path/to/logs:/var/log/chime
#   -e 'LIVE_SITE_URL=http://127.0.0.1/'
#   -p 5000:5000

#
# The -v lines map real directories with persistent/sharable data
# to spots inside the container. the -e lines set up necessary local
# variables; feel free to override others as needed. The port mapping
# exposes the app so that you can directly use it.
",chimecms/chime,Dockerfile
93e1d44330034af54f6d8dd06721098621d77a41,2257,"# A docker image, where DroidBot interacts with Droidbox instance.
# https://github.com/lynnlyc/droidbot
# the dockerized Droidbox instance was copied from https://github.com/aikinci/droidbox
FROM ubuntu:14.04
MAINTAINER ali@ikinci.info

WORKDIR /opt

ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive
ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64/
ENV ANDROID_HOME /opt/android-sdk-linux
ENV ANDROID_SDK_HOME /opt/android-sdk-linux
ENV PATH ${PATH}:$JAVA_HOME/bin:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
ENV ROOTPASSWORD droidbox

RUN dpkg --add-architecture i386 && \
    apt-get update && \
    apt-get -y dist-upgrade && \
    apt-get install -y --no-install-recommends openjdk-7-jdk apt-utils curl expect python-tk python-matplotlib nano git openssh-server telnet libc6:i386 libncurses5:i386 libstdc++6:i386 bsdmainutils patch

RUN curl -O http://dl.google.com/android/android-sdk_r24.3.3-linux.tgz && \
    tar xfz android-sdk_r24.3.3-linux.tgz && \
    rm -f android-sdk_r24.3.3-linux.tgz

RUN curl -O http://droidbox.googlecode.com/files/DroidBox411RC.tar.gz && \
    tar xfz DroidBox411RC.tar.gz && \
    rm -f DroidBox411RC.tar.gz

# accept-licenses was taken from https://github.com/embarkmobile/android-sdk-installer and is Licensed under the MIT License.
ADD docker/accept-licenses /build/
RUN expect /build/accept-licenses ""android update sdk --no-ui --all --filter platform-tool,system-image,android-16"" ""android-sdk-license-5be876d5"" && \
    echo ""\n""| android create avd -n droidbox -t 1 -d 2

# ssh setup
RUN sed  's/PermitRootLogin without-password/PermitRootLogin yes/g' /etc/ssh/sshd_config -i && \
    echo ""root:$ROOTPASSWORD"" | chpasswd ;

# fastdroid-vnc was taken from https://code.google.com/p/fastdroid-vnc/ it is GPLv2 licensed
ADD docker/fastdroid-vnc /build/
ADD docker/install-fastdroid-vnc.sh /build/
RUN /build/install-fastdroid-vnc.sh
ADD docker/run.sh /build/
#ADD docker/droidbox.py.patch /build/
#RUN cd /opt/DroidBox_4.1.1/scripts && patch < /build/droidbox.py.patch

# Add DroitBot
RUN apt-get install -y --no-install-recommends python-setuptools python-pip
ADD . /opt/DroidBot
RUN easy_install -q --upgrade androidviewclient
RUN pip install -q /opt/DroidBot

CMD [""NONE""]

ENTRYPOINT [""/build/run.sh""]
",lynnlyc/droidbot,Dockerfile
8c73b1fdb94e011a4ada848841fec44d60671c8b,1798,"FROM php:fpm

MAINTAINER Samuel Laulhau <sam@lalop.co>

#####
# SYSTEM REQUIREMENT
#####
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libmcrypt-dev zlib1g-dev git libgmp-dev \
        libfreetype6-dev libjpeg62-turbo-dev libpng12-dev \
    && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/local/include/ \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-configure gmp \
    && docker-php-ext-install iconv mcrypt mbstring pdo pdo_mysql zip gd gmp \
    && rm -rf /var/lib/apt/lists/*

#####
# INSTALL COMPOSER
#####
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer


#####
# DOWNLOAD AND INSTALL INVOICE NINJA
#####

ENV INVOICENINJA_VERSION 2.5.2.2

RUN curl -o invoiceninja.tar.gz -SL https://github.com/hillelcoren/invoice-ninja/archive/v${INVOICENINJA_VERSION}.tar.gz \
    && tar -xzf invoiceninja.tar.gz -C /var/www/ \
    && rm invoiceninja.tar.gz \
    && mv /var/www/invoiceninja-${INVOICENINJA_VERSION} /var/www/app \
    && chown -R www-data:www-data /var/www/app \
    && composer install --working-dir /var/www/app -o --no-dev --no-interaction --no-progress \
    && chown -R www-data:www-data /var/www/app/bootstrap/cache \
    && mv /var/www/app/storage /var/www/app/docker-backup-storage \
    && mv /var/www/app/public/logo /var/www/app/docker-backup-public-logo


######
# DEFAULT ENV
######
ENV DB_HOST mysql
ENV DB_DATABASE ninja
ENV APP_KEY SomeRandomString
ENV LOG errorlog
ENV APP_DEBUG 0


#use to be mounted into nginx for exemple
VOLUME /var/www/app/public

WORKDIR /var/www/app

EXPOSE 80

COPY app-entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT [""/entrypoint.sh""]
CMD [""php-fpm""]
",invoiceninja/dockerfiles,Dockerfile
4431f7aaed6f498f5908d90176f9589891b2add3,1704,"# SciDB 14.12
#
# VERSION 1.0
#
#
#
#
#
#
#PORT MAPPING
#SERVICE		DEFAULT
#ssh 			22
#shim			8083s
#Postgresql 		5432
#SciDB			1239		


FROM ubuntu:12.04
MAINTAINER Alber Sanchez



# install
RUN apt-get -qq update && apt-get install --fix-missing -y --force-yes --allow-unauthenticated \
	openssh-server \
	sudo \
	wget \
	gdebi \
	nano \  
	postgresql-8.4 \ 
	sshpass \ 
	git-core \ 
	apt-transport-https \ 
	net-tools


# Set environment
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
RUN env


# Configure users
RUN useradd --home /home/scidb --create-home --uid 1005 --group sudo --shell /bin/bash scidb
RUN echo 'root:xxxx.xxxx.xxxx' | chpasswd
RUN echo 'postgres:xxxx.xxxx.xxxx' | chpasswd
RUN echo 'scidb:xxxx.xxxx.xxxx' | chpasswd
RUN echo 'xxxx.xxxx.xxxx'  >> /home/scidb/pass.txt


RUN mkdir /var/run/sshd
RUN mkdir /home/scidb/data
RUN mkdir /home/scidb/catalog


# Configure SSH
RUN echo 'StrictHostKeyChecking no' >> /etc/ssh/ssh_config


# Configure Postgres 
RUN echo 'host  all all 255.255.0.0/16   md5' >> /etc/postgresql/8.4/main/pg_hba.conf


# Add files
ADD containerSetup.sh 	/root/containerSetup.sh
ADD conf 		/root/conf
ADD iquery.conf 	/home/scidb/.config/scidb/iquery.conf
ADD installPackages.R	/home/scidb/installPackages.R
ADD startScidb.sh	/home/scidb/startScidb.sh
ADD stopScidb.sh	/home/scidb/stopScidb.sh
ADD scidb_docker.ini	/home/scidb/scidb_docker.ini


RUN chown -R root:root /root/*


RUN chown -R scidb:scidb /home/scidb/*


RUN chmod +x \ 
	/root/*.sh \ 
	/home/scidb/*.sh 


# Restarting services
RUN stop ssh
RUN start ssh
RUN /etc/init.d/postgresql restart

	
EXPOSE 22
EXPOSE 8083


CMD    [""/usr/sbin/sshd"", ""-D""]
",albhasan/docker_scidb,Dockerfile
e7c184e8879719ad769c21c0e2af13e4e1bcdf9e,684,"FROM debian:7.7

RUN apt-get update && apt-get -y install build-essential \
 python-dev \
 python-setuptools \
 python-psycopg2 \
 python-pip \
 libpq-dev \
 vim \
 tmux \
 htop \
 git \
 libffi-dev \
 libxml2-dev \
 libxslt1-dev \
 curl \
 abiword \
 graphviz \
 libgraphviz-dev \
 pkg-config \
 python-setuptools \ 
 python-dev \
 ncurses-dev

ENV PROJECT_PATH /legcowatch
ENV INSIDE_DOCKER TRUE

WORKDIR ${PROJECT_PATH}
ADD requirements ${PROJECT_PATH}/requirements
RUN pip install -r requirements/all_requirements.txt

ADD . ${PROJECT_PATH}

WORKDIR ${PROJECT_PATH}/app

# Runs syncdb, migrate, collectstatic, then starts the uwsgi server
CMD [""../bin/appserver.sh""]

EXPOSE 8001
",comsaint/legco-watch,Dockerfile
64bbcc9bf9a78d7bbfb0a3e637b31035842de112,745,"# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License""). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
# 	http://aws.amazon.com/apache2.0/
#
# or in the ""license"" file accompanying this file. This file is
# distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

FROM scratch
MAINTAINER Amazon Web Services, Inc.
COPY ./bin/ecs-task-kite /ecs-task-kite
COPY ./misc/ca-bundle.crt /etc/ssl/certs/ca-certificates.crt

ENTRYPOINT [""/ecs-task-kite""]
",awslabs/ecs-task-kite,Dockerfile
f1f8e441d690d4f1556d4eefb959ddb43a705aba,579,"FROM mhart/alpine-node:0.10
MAINTAINER nearForm <info@nearform.com>

RUN apk-install git make gcc g++ python postgresql-client
  
RUN mkdir -p /usr/src/app /usr/src/app/config /usr/src/app/email-templates /usr/src/app/data /usr/src/app/scripts
WORKDIR /usr/src/app

COPY package.json /usr/src/app/
RUN npm install --production 
COPY config /usr/src/app/config/
COPY data /usr/src/app/data/
COPY scripts /usr/src/app/scripts/
COPY email-templates /usr/src/app/email-templates/
COPY *.js /usr/src/app/  

RUN apk del make gcc g++ python && rm -rf /tmp/* /root/.npm /root/.node-gyp
",CoderDojo/cp-dojos-service,Dockerfile
dbe857dd2ee0af0ed351d9b6febb2aeb2498020e,358,"# DOCKER-VERSION 0.3.4
FROM ubuntu:12.10

# Install Python Setuptools
RUN apt-get install -y python-setuptools

# Install pip
RUN easy_install pip

# Bundle app source
ADD . /src

# Install app dependencies
RUN cd /src; pip install -r requirements.txt

# Create /var/app
RUN mkdir /var/app

# Expose
EXPOSE  5000

# Run
CMD [""python"", ""/src/application.py""]
",evandbrown/eb-py-flask-signup,Dockerfile
866b932108dac3546bd5b2aa8aa69e99fbcb2806,320,"FROM debian:jessie

ENV VERSION 0.9.3

RUN apt-get update

RUN apt-get install -y curl

ENV LUMINOS_URL https://github.com/xiam/luminos/releases/download/v$VERSION/luminos_linux_amd64.gz

RUN curl --silent -L ${LUMINOS_URL} | gzip -d > /bin/luminos

RUN chmod +x /bin/luminos

EXPOSE 9000

ENTRYPOINT [ ""/bin/luminos"" ]
",xiam/luminos,Dockerfile
0d052aec144631544266171534e8aff2adccab95,564,"#
# Thanks to @Xe for the Dockerfile template
# https://github.com/Shuo-IRC/Shuo/pull/87/files
#

FROM node:4.0-onbuild

# Create a non-root user for lounge to run in.
RUN useradd --create-home lounge

# Needed for setup of Node.js
ENV HOME /home/lounge

# Customize this to specify where The Lounge puts its data.
# To link a data container, have it expose /home/lounge/data
ENV LOUNGE_HOME /home/lounge/data

# Expose HTTP
EXPOSE 9000

# Drop root.
USER lounge

# Don't use an entrypoint here. It makes debugging difficult.
CMD node index.js --home $LOUNGE_HOME
",thelounge/lounge,Dockerfile
55296265f5e96334a1006477b965bd1ce7c1ebd8,1562,"FROM ubuntu:14.04
MAINTAINER frikfry@gmail.com # Someone let me know an appropriate email for the project

# Needed to fix pip install of requirements due to strange char encoding issue.
ENV LC_CTYPE C.UTF-8
# Set this to suppress 'debconf: unable to initialize frontend' errors
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get clean
RUN apt-get update
RUN apt-get install -y curl
# This needs to be broken up because curl isn't available at the start and we need curl to install nodejs
RUN curl -sL https://deb.nodesource.com/setup | sudo bash -
# Don't need to apt-get update first because the script above does it for us.
RUN apt-get install -y supervisor libffi-dev nodejs vim postgresql-client libpq-dev python-pip python-dev python3-dev build-essential
RUN pip install --upgrade pip
RUN pip install virtualenv

# Make our directories
RUN mkdir -p /opt/spacedock
WORKDIR /opt/spacedock

# Install coffee-script
RUN npm install --global coffee-script

# Breaking up the installing of requirements like this so that it gets cached by docker
COPY requirements.txt /opt/spacedock/requirements.txt
RUN virtualenv --python=python3 --no-site-packages /venv/spacedock
RUN . /venv/spacedock/bin/activate && pip install -r requirements.txt

# Add everything else from the project root to the install dir.
COPY . /opt/spacedock

# Make a supervisord process for actually running the commands.
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Run the app when the container starts.
CMD [""/usr/bin/supervisord""]
",KSP-SpaceDock/SpaceDock,Dockerfile
bd50dcaa8e94e2ef45a0b7c642a3d62c962d1c00,1321,"FROM debian:jessie

MAINTAINER Robin Chalas <robin.chalas@gmail.com>

RUN apt-get update -y

# Install OS Softwares
RUN apt-get install -y \
    python-setuptools \
    python-software-properties \
    software-properties-common \
    wget \
    nginx \
    curl \
    nano \
    vim \
    git

# Fetch dotdeb packages for PHP 7
RUN echo ""deb http://packages.dotdeb.org jessie all"" > /etc/apt/sources.list.d/dotdeb.list
RUN wget -O- https://www.dotdeb.org/dotdeb.gpg | apt-key add -
RUN apt-get update -y

# Install PHP-FPM & Extensions
RUN apt-get install -y --force-yes \
  php7.0-fpm \
  php7.0-cli \
  php7.0-intl \
  php7.0-mcrypt \
  php7.0-apcu \
  php7.0-gd \
  php7.0-curl \
  php7.0-xml

ADD init /init
RUN chmod +x /init/init.sh

# Setup Nginx vhost
RUN /init/init.sh

VOLUME [""/var/www""]

EXPOSE 80

# Initilize Nginx and PHP-FPM
RUN echo ""/etc/init.d/php7.0-fpm start"" >> /etc/bash.bashrc
RUN echo ""/etc/init.d/nginx start"" >> /etc/bash.bashrc
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
RUN cd $( php -i | grep php.ini | awk -F ""=> "" '{ print $2,$9 }') && PHPINI=$( pwd )/php.ini \
    && sed -i.bak ""s@;cgi.fix_pathinfo=1@cgi.fix_pathinfo=0@g"" $PHPINI \
    && sed -i"".bak"" ""s/^\;date\.timezone.*$/date\.timezone = \""Europe\/Paris\"" /g"" $PHPINI
",chalasr/docker-symfony-dev,Dockerfile
bfef69a484fe3f9c36c2e9075ff6a805faa38196,143,"FROM python:2.7

MAINTAINER kfei <kfei@kfei.net>

RUN pip install slack-cleaner

VOLUME [""/backup""]

WORKDIR /backup

ENTRYPOINT [""/bin/bash""]
",kfei/slack-cleaner,Dockerfile
060353d7081bb6a0a02b4af16ffa80ab136228b6,2001,"## -*- docker-image-name: ""scaleway/centos:latest"" -*-
FROM multiarch/centos:7.2.1511-amd64-clean
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM multiarch/centos:7.2.1511-armhfp-clean    # arch=armv7l
#FROM multiarch/centos:7.2.1511-aarch64-clean   # arch=arm64
#FROM multiarch/centos:7.2.1511-i386-clean      # arch=i386
#FROM multiarch/centos:7.2.1511-ppc64-clean     # arch=ppc64
#FROM multiarch/centos:7.2.1511-ppc64le-clean   # arch=ppc64le


# Environment
ENV SCW_BASE_IMAGE scaleway/centos:latest


# Adding and calling builder-enter
COPY ./overlay-${ARCH}/etc/yum.repos.d/ /etc/yum.repos.d/
COPY ./overlay-image-tools/usr/local/sbin/scw-builder-enter /usr/local/sbin/
RUN set -e; case ""${ARCH}"" in \
    armv7l|armhf|arm) \
        touch /tmp/lsb-release; \
	chmod +x /tmp/lsb-release; \
	PATH=""$PATH:/tmp"" /bin/sh -e /usr/local/sbin/scw-builder-enter; \
	rm -f /tmp/lsb-release; \
      ;; \
    x86_64|amd64) \
        yum install -y redhat-lsb-core; \
        /bin/sh -e /usr/local/sbin/scw-builder-enter; \
        yum clean all; \
      ;; \
    esac


RUN if [ ""$ARCH"" = ""armv7l"" ]; then YUM_OPTS=--nogpg; fi \
 && yum install ${YUM_OPTS} -y \
      bash \
      bash-completion \
      ca-certificates \
      cron \
      curl \
      ethstatus \
      haveged \
      ioping \
      iotop \
      iperf \
      locate \
      make \
      mg \
      ntp \
      ntpdate \
      rsync \
      screen \
      socat \
      ssh \
      sudo \
      sysstat \
      tar \
      tcpdump \
      tmux \
      vim \
      wget \
 && yum clean all


# Patch rootfs
COPY ./overlay-image-tools ./overlay ./overlay-${ARCH} /


# Enable Scaleway services
RUN systemctl enable \
	scw-generate-ssh-keys \
	scw-fetch-ssh-keys \
	scw-gen-machine-id \
	scw-kernel-check \
	scw-sync-kernel-modules


# Hotfix reboot
RUN systemctl mask network

# Clean rootfs from image-builder
RUN /usr/local/sbin/scw-builder-leave
",scaleway/image-centos,Dockerfile
e33018c97d54aafce2dd28b20b980973a53bf477,216,"FROM alpine
MAINTAINER support@tutum.co

RUN apk --update add logrotate
RUN echo ""*/5 *	* * *	/usr/sbin/logrotate /etc/logrotate.conf"" >> /etc/crontabs/root
ADD logrotate.conf /etc/logrotate.conf

CMD [""crond"", ""-f""]",tutumcloud/logrotate,Dockerfile
f1b718d87d9189d8550314dbd782776c675eea06,200,"FROM python:3.5.1
COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt
ENV PYTHONPATH=/usr/local/app
COPY bookshelf /usr/local/app/bookshelf
ENTRYPOINT [ ""python""]",Lawouach/event-driven-microservice,Dockerfile
2a9cf3ef9cc8c499456561f53c93d733e484b92e,497,"FROM node:4-onbuild

VOLUME /var/www/html

RUN awk '$1 ~ ""^deb"" { $3 = $3 ""-backports""; print; exit }' /etc/apt/sources.list > /etc/apt/sources.list.d/backports.list
RUN apt-get update && apt-get install -t jessie-backports letsencrypt -y

# You can use the below command to install some handy tools for dev purposes in the container
# RUN ./setup-dev-tools.sh

EXPOSE 80
EXPOSE 443

ENV CERT_DOMAINS www.example.com
ENV CERT_EMAIL user@example.com
ENV VIRTUAL_HOST *.acme.invalid,*/.well-known/*
",Levino/letsencrypt-cert-service,Dockerfile
72813114f4bae47e1df07b0bff415304186392e9,1546,"FROM debian:jessie

MAINTAINER ""Dylan Lindgren"" <dylan.lindgren@gmail.com>

# Install PHP-FPM and popular/laravel required extensions
RUN apt-get update -y && \
    apt-get install -y \
    php5-fpm \
    php5-curl \
    php5-gd \
    php5-geoip \
    php5-imagick \
    php5-imap \
    php5-json \
    php5-ldap \
    php5-mcrypt \
    php5-memcache \
    php5-memcached \
    php5-mongo \
    php5-mssql \
    php5-mysqlnd \
    php5-pgsql \
    php5-redis \
    php5-sqlite \
    php5-xdebug \
    php5-xmlrpc \
    php5-xcache

# Configure PHP-FPM
RUN sed -i ""s/;date.timezone =.*/date.timezone = UTC/"" /etc/php5/fpm/php.ini && \
    sed -i ""s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/"" /etc/php5/fpm/php.ini && \
    sed -i ""s/display_errors = Off/display_errors = stderr/"" /etc/php5/fpm/php.ini && \
    sed -i ""s/upload_max_filesize = 2M/upload_max_filesize = 30M/"" /etc/php5/fpm/php.ini && \
    sed -i ""s/;opcache.enable=0/opcache.enable=0/"" /etc/php5/fpm/php.ini && \
    sed -i -e ""s/;daemonize\s*=\s*yes/daemonize = no/g"" /etc/php5/fpm/php-fpm.conf && \
    sed -i '/^listen = /clisten = 9000' /etc/php5/fpm/pool.d/www.conf && \
    sed -i '/^listen.allowed_clients/c;listen.allowed_clients =' /etc/php5/fpm/pool.d/www.conf && \
    sed -i '/^;catch_workers_output/ccatch_workers_output = yes' /etc/php5/fpm/pool.d/www.conf && \
    sed -i '/^;env\[TEMP\] = .*/aenv[DB_PORT_3306_TCP_ADDR] = $DB_PORT_3306_TCP_ADDR' /etc/php5/fpm/pool.d/www.conf

RUN mkdir -p /data
VOLUME [""/data""]

EXPOSE 9000

ENTRYPOINT [""/usr/sbin/php5-fpm"", ""-F""]
",dylanlindgren/docker-laravel-phpfpm,Dockerfile
fe80232d5f3d23af70f8309015a32a4621927797,586,"FROM sonarqube:5.1.2

MAINTAINER Robert Northard, <robert.a.northard>

ENV SONARQUBE_PLUGINS_DIR=/opt/sonarqube/default/extensions/plugins \
    SONARQUBE_SERVER_BASE=""http://localhost:9000"" \
    SONARQUBE_WEB_CONTEXT=""/sonar"" \
    SONARQUBE_FORCE_AUTHENTICATION=true \
    ADOP_LDAP_ENABLED=true

COPY resources/plugins.txt ${SONARQUBE_PLUGINS_DIR}/
COPY resources/sonar.sh resources/plugins.sh /usr/local/bin/

RUN chmod +x /usr/local/bin/* 
RUN /usr/local/bin/plugins.sh ${SONARQUBE_PLUGINS_DIR}/plugins.txt

VOLUME [""/opt/sonarqube/logs/""]

ENTRYPOINT [""/usr/local/bin/sonar.sh""]
",Accenture/adop-sonar,Dockerfile
67f4aa226c3c14d1c3510476a1b7ff62893c8281,385,"FROM python:3.5-slim
MAINTAINER ""Tim <tim.fall@mesosphere.io>""

RUN apt-get update && apt-get install -y vim wget curl python-pip openjdk-7-jre-headless
RUN pip install virtualenv

WORKDIR /dcos

ADD https://downloads.mesosphere.io/dcos-cli/install.sh install.sh
ADD startup.sh /usr/local/bin/startup.sh
RUN chmod +x /usr/local/bin/startup.sh

ENTRYPOINT [""/usr/local/bin/startup.sh""]
",mesosphere/dcos-cli-docker,Dockerfile
7e12e44bb78d985a1c36584712cd3ee6a0babe2e,3043,"FROM ubuntu:trusty

MAINTAINER Alexandre Viau <alexandre.viau@savoirfairelinux.com>

RUN apt-get update && apt-get install -y vim python-pip python3-pip python-dev libffi-dev libssl-dev git python-pycurl python-virtualenv libcurl4-openssl-dev

# VirtualEnv
RUN virtualenv /opt/surveil/env

# Download packs
ENV MONITORING_TOOLS_VERSION 0.4.0
RUN apt-get install -y subversion && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/generic-host /usr/share/monitoring/packs/sfl/generic-host && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/openstack-glance-http /usr/share/monitoring/packs/sfl/openstack-glance-http && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/openstack-cinder-http /usr/share/monitoring/packs/sfl/openstack-cinder-http && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/openstack-keystone-http /usr/share/monitoring/packs/sfl/openstack-keystone-http && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/openstack-nova-http /usr/share/monitoring/packs/sfl/openstack-nova-http && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/openstack-host /usr/share/monitoring/packs/sfl/openstack-host && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/linux-system-nrpe /usr/share/monitoring/packs/sfl/linux-system-nrpe && \
    svn checkout https://github.com/savoirfairelinux/monitoring-tools/tags/${MONITORING_TOOLS_VERSION}/packs/generic-host /usr/share/monitoring/packs/sfl/generic-host && \
    apt-get remove -y subversion

ADD requirements.txt /opt/surveil/requirements.txt
RUN /opt/surveil/env/bin/pip install -U ""pbr>=1.3,<2.0""
RUN /opt/surveil/env/bin/pip install python-termstyle
RUN /opt/surveil/env/bin/pip install -r /opt/surveil/requirements.txt

ADD tools/docker/surveil_container/setup.sh /opt/surveil/setup.sh
ADD setup.py /opt/surveil/setup.py
ADD setup.cfg /opt/surveil/setup.cfg
ADD README.rst /opt/surveil/README.rst
ADD etc/surveil /etc/surveil
ADD surveil /opt/surveil/surveil

#ADD .git /surveil/.git
ENV PBR_VERSION=PROD

# We are using develop so that the code can be mounted when in DEV.
RUN cd /opt/surveil && /opt/surveil/env/bin/python setup.py develop
ENV PATH=$PATH:/opt/surveil/env/bin

# Set to 'surveil' or 'keystone'
ENV SURVEIL_AUTH_BACKEND=surveil
ENV SURVEIL_KEYSTONE_HOST=198.72.123.131
ENV SURVEIL_KEYSTONE_AUTH_PROTOCOL=http

# OpenStack Authentication credentials. Used for Keystone authentication
ENV SURVEIL_OS_USERNAME=admin
ENV SURVEIL_OS_PASSWORD=password
ENV SURVEIL_OS_TENANT_NAME=admin

# Surveil API
EXPOSE 5311

CMD cd /opt/surveil && \
    ./setup.sh && \
    ((sleep 50 && surveil-init --influxdb --packs --mongodb) &) && \
    surveil-api
",openstack/surveil,Dockerfile
e8bcee51120c652ee59062855bafe9f508377980,428,"FROM sameersbn/ubuntu:14.04.20151213
MAINTAINER sameer@damagehead.com

ENV MEMCACHED_USER=nobody

RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y memcached \
 && sed 's/^-d/# -d/' -i /etc/memcached.conf \
 && rm -rf /var/lib/apt/lists/*

COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 11211/tcp 11211/udp
ENTRYPOINT [""/sbin/entrypoint.sh""]
CMD [""/usr/bin/memcached""]
",sameersbn/docker-memcached,Dockerfile
e7d9ceb63569453b72e6c15c986a522e9c63604b,1595,"FROM centos:6
MAINTAINER jamlee <jamlee@jamlee.cn>

ENV code_root /code
ENV httpd_conf ${code_root}/config/apache/httpd.conf

#change the software repo

RUN rpm -ivh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm \
    && rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm \
    && sed -i -e ""s|plugins=1|plugins=0 |"" /etc/yum.conf 
ADD ./config/sys/*.repo    /etc/yum.repos.d/ 

RUN yum install -y httpd
RUN yum install --enablerepo=epel,remi-php56,remi -y \
                              php \
                              php-cli \
                              php-gd \
                              php-mbstring \
                              php-mcrypt \
                              php-mysqlnd \
                              php-pdo \
                              php-xml \
                              php-xdebug \
                              tcpdump
RUN yum install -y vim git
RUN sed -i -e ""s|^;date.timezone =.*$|date.timezone = PRC |"" /etc/php.ini \
    && mv /usr/sbin/tcpdump /usr/local/bin
RUN curl -sS https://getcomposer.org/installer | php \
    && mv composer.phar /usr/local/bin/composer \
    && curl -O https://phar.phpunit.de/phpunit.phar \
    && chmod +x phpunit.phar \
    && mv phpunit.phar /usr/local/bin/phpunit
ADD ./config/php/config.json /root/.composer/
RUN composer global require ""laravel/installer=~1.1""
ENV PATH=$PATH:/root/.composer/vendor/bin
ADD .  $code_root
RUN test -e $httpd_conf && echo ""Include $httpd_conf"" >> /etc/httpd/conf/httpd.conf
EXPOSE 80
CMD [""/usr/sbin/apachectl"", ""-D"", ""FOREGROUND""]

",Jamlee/docker-laravel-cn,Dockerfile
20ae4fda4b7a2bdee15c8bf9dfe3ff326bf866c8,3420,"FROM ubuntu-upstart:14.04
MAINTAINER bplotka <bartlomiej.plotka@intel.com>

ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

# Install Dependencies
RUN apt-get update -q --fix-missing && \
    apt-get -qy install \
    software-properties-common             \
    libxext-dev                            \
    libxrender-dev                         \
    libxrender1                            \
    libxslt1.1                             \
    libxtst-dev                            \
    libgtk2.0-0                            \
    libcanberra-gtk-module                 \
    unzip                                  \
    build-essential                        \
    autoconf                               \
    automake                               \
    git

RUN add-apt-repository ppa:webupd8team/java -y && \
    add-apt-repository ppa:george-edison55/cmake-3.x && \
    apt-cache policy cmake && \
    apt-get update -qq && \
    echo 'Installing JAVA 8' && \
    echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections && \
    apt-get install -qq -y --fix-missing    \
    oracle-java8-installer                  \
    cmake=3.2.2-2ubuntu2~ubuntu14.04.1~ppa1 \
    ca-certificates                         \
    gdb                                     \
    wget                                    \
    git-core                                \
    libcurl4-nss-dev                        \
    libsasl2-dev                            \
    libtool                                 \
    libsvn-dev                              \
    libapr1-dev                             \
    libgoogle-glog-dev                      \
    libboost-dev                            \
    protobuf-compiler                       \
    libprotobuf-dev                         \
    make                                    \
    python                                  \
    python2.7                               \
    libpython-dev                           \
    python-dev                              \
    python-protobuf                         \
    python-setuptools                       \
    heimdal-clients                         \
    libsasl2-modules-gssapi-heimdal         \
    clang-3.5                               \
    vim                                     \
    --no-install-recommends

RUN echo 'Cleaning up' && \
    apt-get clean -qq -y && \
    apt-get autoclean -qq -y && \
    apt-get autoremove -qq -y &&  \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/*

# Download clion.
RUN wget -P /tmp/ http://download.jetbrains.com/cpp/clion-1.2.2.tar.gz

# Unpack clion.
RUN mkdir -p /opt/clion && \
    tar zxvf /tmp/clion-1.2.2.tar.gz --strip-components=1 -C /opt/clion && \
    rm /tmp/clion-1.2.2.tar.gz

# Install the picojson headers
RUN wget https://raw.githubusercontent.com/kazuho/picojson/v1.3.0/picojson.h -O /usr/local/include/picojson.h

# Prepare to build Mesos
RUN mkdir -p /mesos
RUN mkdir -p /tmp
RUN mkdir -p /usr/share/java/
RUN wget http://search.maven.org/remotecontent?filepath=com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar -O protobuf.jar
RUN mv protobuf.jar /usr/share/java/

USER root
ENV CL_JDK=/usr/lib/jvm/oracle-jdk-8
ENV HOME=/root

WORKDIR /root

# Pass your own clion configuration.
VOLUME [""/root/.CLion12""]
VOLUME [""/mesos""]

CMD [""/opt/clion/bin/clion.sh"", ""/mesos""]",Bplotka/docker-mesos-clion,Dockerfile
5eaf14fabc90eb6982f6615182ae7d62d53dedc5,352,"FROM golang:1.5

#TODO: really should extract this into its own onbuild Dockerfile

# turn on golang experiment to add vendoring
# see ttps://medium.com/@freeformz/go-1-5-s-vendor-experiment-fd3e830f52c3
ENV GO15VENDOREXPERIMENT 1

COPY . /go/src/app
WORKDIR /go/src/app
RUN go-wrapper download
RUN go-wrapper install
RUN go build
ENTRYPOINT [""./app""]
",SvenDowideit/docker-volumes-nfs,Dockerfile
5aa2a343528ff4349b5b60d01f98ed5339418c36,240,"FROM node:4.0

WORKDIR /src

RUN npm install -g ember-cli
RUN npm install -g bower
RUN npm install -g phantomjs

ADD package.json /src/package.json
ADD bower.json /src/bower.json

RUN npm install
RUN bower --allow-root install

EXPOSE 4200
",icicletech/ember-cli-full-calendar,Dockerfile
e7a27c4e7038a6a11ccd83a7679848a37d4b58a8,308,"FROM java:8

RUN mkdir -p /output

ADD http://nilhcem.github.com/FakeSMTP/downloads/fakeSMTP-latest.zip /fakeSMTP-latest.zip

RUN unzip /fakeSMTP-latest.zip

VOLUME /output

EXPOSE 25

ENTRYPOINT [""java"",""-jar"",""/fakeSMTP-2.0.jar"",""--background"", ""--output-dir"", ""/output"", ""--port"", ""25"", ""--start-server""]
",Nilhcem/FakeSMTP,Dockerfile
522986662302c977e36cbf0696ecf3cb8d3d79ab,294,"FROM kk17/coolcantonese-runtime

MAINTAINER Zhike Chan ""zk.chan007@gmail.com""
ENV REFRESHED_AT 2015-12-23

#copy codes
COPY ./coolcantonese/ /usr/lib/python3/dist-packages/coolcantonese
WORKDIR /usr/lib/python3/dist-packages

EXPOSE 8888

ENTRYPOINT [""python3""]
CMD [""coolcantonese/wechat.py""]
",kk17/CoolCantonese,Dockerfile
09d301ee3d2605c6c2467823b2c8b0878749d8e4,2404,"FROM python:2.7.11
MAINTAINER Katharine Berry <katharine@pebble.com>

ENV NPM_CONFIG_LOGLEVEL=info NODE_VERSION=4.2.3 DJANGO_VERSION=1.6

# Node stuff.

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --verify SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
  && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc

RUN npm install npm -g

# Django stuff

RUN apt-get update && apt-get install -y \
    gettext \
    postgresql-client libpq-dev \
  --no-install-recommends && rm -rf /var/lib/apt/lists/*

RUN pip install psycopg2 django==""$DJANGO_VERSION""

EXPOSE 8000

# CloudPebble stuff
RUN npm install -g bower && echo '{""allow_root"": true}' > ~/.bowerrc

# Grab the toolchain
RUN curl -o /tmp/arm-cs-tools.tar https://cloudpebble-vagrant.s3.amazonaws.com/arm-cs-tools-stripped.tar && \
  tar -xf /tmp/arm-cs-tools.tar -C / && rm /tmp/arm-cs-tools.tar

ADD requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

ENV SDK_TWO_VERSION=2.9

# Install SDK 2
RUN mkdir /sdk2 && \
  curl -L ""https://s3.amazonaws.com/assets.getpebble.com/sdk3/sdk-core/sdk-core-${SDK_TWO_VERSION}.tar.bz2"" | \
  tar --strip-components=1 -xj -C /sdk2

ENV SDK_THREE_CHANNEL=release
ENV SDK_THREE_VERSION=3.12

# Install SDK 3
RUN mkdir /sdk3 && \
  curl -L ""https://s3.amazonaws.com/assets.getpebble.com/sdk3/${SDK_THREE_CHANNEL}/sdk-core-${SDK_THREE_VERSION}.tar.bz2"" | \
  tar --strip-components=1 -xj -C /sdk3

COPY . /code
WORKDIR /code

# Bower is awful.
RUN rm -rf bower_components && cd /tmp && python /code/manage.py bower install && mv bower_components /code/

RUN python manage.py compilemessages

CMD [""sh"", ""docker_start.sh""]
",pebble/cloudpebble,Dockerfile
25e24c8804f144b92f968bf3a95490948d359805,214,"FROM node:latest

ENV DEBIAN_FRONTEND noninteractive
ENV DOCKER_PORT 80
ENV PORT ${DOCKER_PORT}
ENV NODE_PATH /root

EXPOSE ${DOCKER_PORT}

ADD . /root
WORKDIR /root
RUN make all
CMD [""node"",""/root/src/server.js""]
",opendns/zmachine-api,Dockerfile
cf41544ae7743fe2a8f5e5656da10061e1fe252b,581,"FROM debian:jessie
MAINTAINER Ben Bailey <bennettbailey@gmail.com>

# Should change this to ARG instruction when docker version is updated
ENV TELEGRAF_VERSION=0.2.4

RUN apt-get update && apt-get install -y curl
RUN curl -s -o /tmp/telegraf_latest_amd64.deb http://get.influxdb.org/telegraf/telegraf_${TELEGRAF_VERSION}_amd64.deb && \
  dpkg -i /tmp/telegraf_latest_amd64.deb && \
  rm /tmp/telegraf_latest_amd64.deb && \
  rm -rf /var/lib/apt/lists/*

COPY telegraf.conf /config/telegraf.conf
COPY run.sh /run.sh
RUN chmod +x /run.sh

ENV INFLUXDB_HOST **None**

CMD [""/run.sh""]
",benfb/docker-telegraf,Dockerfile
51db10b8c094e5781557260b43ec2256e54e4161,535,"# ps4dev/ps4sdk
#
# This is intended as a vm alternative (interactive container)
# A volume container may be useful too (bring your own OS/compiler container)

FROM voidlinux/voidlinux

ENV PS4DEV=/home/ps4dev
ENV PS4SDK=$PS4DEV/ps4sdk

RUN \
    groupadd -r ps4dev && \
    useradd --create-home -d /home/ps4dev --gid ps4dev ps4dev

WORKDIR $PS4DEV
COPY . $PS4SDK

RUN \
    xbps-install -Sy xbps ; \
    xbps-install -Sy make clang git socat && \
    cd ps4sdk && \
    make && \
    chown -R ps4dev:ps4dev /home/ps4dev

USER ps4dev
",ps4dev/ps4sdk,Dockerfile
5c93d005d164848edfccfac957f3e8cec00f6bac,4110,"FROM ampervue/python34

# https://github.com/ampervue/docker-python34-opencv3

MAINTAINER David Karchmer <dkarchmer@ampervue.com>

#####################################################################
#
# Image based on Ubuntu:14.04
#
#   with
#     - Python 3.4
#     - OpenCV 3 (built)
#     - FFMPEG (built)
#   plus a bunch of build/web essentials via wheezy
#   including MySQL and Postgres clients:
#      https://github.com/docker-library/docs/tree/master/buildpack-deps
#
#####################################################################

ENV NUM_CORES 4


WORKDIR /usr/local/src

RUN git clone --depth 1 https://github.com/l-smash/l-smash \
    && git clone --depth 1 git://git.videolan.org/x264.git \
    && hg clone https://bitbucket.org/multicoreware/x265 \
    && git clone --depth 1 git://source.ffmpeg.org/ffmpeg \
    && git clone https://github.com/Itseez/opencv.git \
    && git clone https://github.com/Itseez/opencv_contrib.git \
    && git clone --depth 1 git://github.com/mstorsjo/fdk-aac.git \
    && git clone --depth 1 https://chromium.googlesource.com/webm/libvpx \
    && git clone https://git.xiph.org/opus.git \
    && git clone --depth 1 https://github.com/mulx/aacgain.git

# Build L-SMASH
# =================================
WORKDIR /usr/local/src/l-smash
RUN ./configure \
    && make -j ${NUM_CORES} \
    && make install
# =================================


# Build libx264
# =================================
WORKDIR /usr/local/src/x264
RUN ./configure --enable-static \
    && make -j ${NUM_CORES} \
    && make install
# =================================


# Build libx265
# =================================
WORKDIR  /usr/local/src/x265/build/linux
RUN cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ../../source \
    && make -j ${NUM_CORES} \
    && make install
# =================================

# Build libfdk-aac
# =================================
WORKDIR /usr/local/src/fdk-aac
RUN autoreconf -fiv \
    && ./configure --disable-shared \
    && make -j ${NUM_CORES} \
    && make install
# =================================

# Build libvpx
# =================================
WORKDIR /usr/local/src/libvpx
RUN ./configure --disable-examples \
    && make -j ${NUM_CORES} \
    && make install
# =================================

# Build libopus
# =================================
WORKDIR /usr/local/src/opus
RUN ./autogen.sh \
    && ./configure --disable-shared \
    && make -j ${NUM_CORES} \
    && make install
# =================================



# Build OpenCV 3.x
# =================================
#RUN apt-get update -qq && apt-get install -y --force-yes libopencv-dev
RUN pip3 install --no-cache-dir --upgrade numpy
WORKDIR /usr/local/src
RUN mkdir -p opencv/release
WORKDIR /usr/local/src/opencv/release
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_TBB=ON \
          -D BUILD_PYTHON_SUPPORT=ON \
          -D WITH_V4L=ON \
          -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
          ..

RUN make -j ${NUM_CORES} \
    && make install \
    && sh -c 'echo ""/usr/local/lib"" > /etc/ld.so.conf.d/opencv.conf' \
    && ldconfig
# =================================


# Build ffmpeg.
# =================================
RUN apt-get update -qq && apt-get install -y --force-yes \
    libass-dev

#            --enable-libx265 - Does not work on recent builds
WORKDIR /usr/local/src/ffmpeg
RUN ./configure --extra-libs=""-ldl"" \
            --enable-gpl \
            --enable-libass \
            --enable-libfdk-aac \
            --enable-libfontconfig \
            --enable-libfreetype \
            --enable-libfribidi \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-libtheora \
            --enable-libvorbis \
            --enable-libvpx \
            --enable-libx264 \
            --enable-nonfree \
    && make -j ${NUM_CORES} \
    && make install
# =================================


# Remove all tmpfile
# =================================
WORKDIR /usr/local/
RUN rm -rf /usr/local/src
# =================================

",ampervue/docker-python34-opencv3,Dockerfile
c1ccb3a6dfa61d787880eab0428c3fa3e1ff93c0,751,"FROM quay.io/pires/docker-jre:8u92-alpine34
MAINTAINER pjpires@gmail.com

# Export HTTP & Transport
EXPOSE 9200 9300

ENV VERSION 2.3.3

# Install Elasticsearch.
RUN apk add --update curl ca-certificates sudo && \

  ( curl -Lskj https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/$VERSION/elasticsearch-$VERSION.tar.gz | \
  gunzip -c - | tar xf - ) && \
  mv /elasticsearch-$VERSION /elasticsearch && \
  rm -rf $(find /elasticsearch | egrep ""(\.(exe|bat)$|sigar/.*(dll|winnt|x86-linux|solaris|ia64|freebsd|macosx))"") && \
  apk del curl

# Volume for Elasticsearch data
VOLUME [""/data""]

# Copy configuration
COPY config /elasticsearch/config

# Copy run script
COPY run.sh /

CMD [""/run.sh""]
",pires/docker-elasticsearch,Dockerfile
b38e85d0ec7fa64f9a7a8b4c571b6e7b78a7b49d,1016,"FROM ubuntu:14.04
MAINTAINER Yann Malet <yann.malet@gmail.com>

RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
ENV PATH /usr/src/go/bin:$PATH
ENV GOPATH /go
ENV PATH /go/bin:$PATH
ENV GOLANG_VERSION 1.3.1


# SCMs for ""go get"", gcc for cgo
RUN DEBIAN_FRONTEND=noninteractive apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y \
    ca-certificates curl gcc libc6-dev \
    bzr git mercurial
RUN rm -rf /var/lib/apt/lists/*
RUN curl -sSL http://golang.org/dl/go$GOLANG_VERSION.src.tar.gz | tar -v -C /usr/src -xz

RUN cd /usr/src/go/src && ./make.bash --no-clean 2>&1

RUN mkdir -p /go/src
WORKDIR /go

ENV GOPACKAGE github.com/BotBotMe/botbot-bot
# Copy the local package files to the container's workspace.
ADD . /go/src/$GOPACKAGE

# Build the $GOPACKAGE command inside the container.
# (You may fetch or manage dependencies here,
# either manually or with a tool like ""godep"".)
RUN go get $GOPACKAGE

ENTRYPOINT /go/bin/botbot-bot -logtostderr=true
",BotBotMe/botbot-bot,Dockerfile
e193a21eb1c5aee364afd5cb841023f6c46e52c5,2073,"# Docker container for Drupal 8

FROM php:5.5-apache

RUN apt-get update && apt-get install -yqq --no-install-recommends \
  rsyslog \
  supervisor \
  curl \
  cron \
  mysql-client \
  libpng-dev \
  ca-certificates \
  php5-sqlite \
  libsqlite3-dev \
  build-essential \
  git \
  libfreetype6-dev \
  libjpeg62-turbo-dev \
  libpng12-dev \
  libmemcached-dev \
  locales \
  && a2enmod rewrite \
  && a2enmod expires \
  && a2enmod headers \
  && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
  && docker-php-ext-install mysql pdo_mysql zip mbstring gd exif pcntl \
  && pecl install uploadprogress xdebug memcached \
  && echo extension=memcached.so > /usr/local/etc/php/conf.d/memcached.ini \
  && echo extension=uploadprogress.so > /usr/local/etc/php/conf.d/uploadprogress.ini \
  && echo zend_extension=opcache.so > /usr/local/etc/php/conf.d/00-opcache.ini \
  && apt-get clean autoclean && apt-get autoremove -y

RUN php -r ""readfile('https://getcomposer.org/installer');"" | php && mv composer.phar /usr/local/bin/composer

COPY config/docker/web/rsyslog.conf /etc/rsyslog.conf

ADD config/docker/web /docker
COPY config/docker/web/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

COPY config/docker/web/crontab.txt /var/crontab.txt
RUN crontab /var/crontab.txt && chmod 600 /etc/crontab
COPY config/docker/web/default.conf /etc/apache2/sites-available/000-default.conf
RUN a2ensite 000-default.conf

COPY . /var/www/html
RUN composer install -d /var/www/html
RUN ln -s ~www-data/html/vendor/bin/drush /usr/local/bin/drush
RUN ln -s ~www-data/html/vendor/bin/drupal /usr/local/bin/drupal
COPY config/docker/web/drushrc.php /etc/drush/drushrc.php
COPY config/docker/web/xdebug.sh /var/www/xdebug.sh
COPY config/docker/web/php.ini /usr/local/etc/php/php.ini

RUN cp -R vendor/twig/twig/ext/twig /usr/lib/twig
WORKDIR /usr/lib/twig
RUN phpize && ./configure && make && make install
RUN echo extension=twig.so > /usr/local/etc/php/conf.d/twig.ini
WORKDIR /var/www/html

EXPOSE 80

CMD [""/usr/bin/supervisord""]
",BradJonesLLC/docker-drupal,Dockerfile
c41237e7f43c53b71225e95e15420a66b35d1d58,258,"FROM golang:latest
MAINTAINER Jess Frazelle <jess@docker.com>

RUN go get github.com/Sirupsen/logrus

ADD . /go/src/github.com/jfrazelle/battery
RUN cd /go/src/github.com/jfrazelle/battery && go install . ./...
ENV PATH $PATH:/go/bin

ENTRYPOINT [""battery""]
",jfrazelle/battery,Dockerfile
a53948a4483d7a5ef2c655f5f6b7e47cdd76be5e,616,"FROM alpine

RUN echo ""@edge http://nl.alpinelinux.org/alpine/edge/main"" >> /etc/apk/repositories && \
    apk update && apk add curl ""postgresql@edge<9.6"" ""postgresql-contrib@edge<9.6"" && \
    mkdir /docker-entrypoint-initdb.d && \
    curl -o /usr/local/bin/gosu -sSL ""https://github.com/tianon/gosu/releases/download/1.2/gosu-amd64"" && \
    chmod +x /usr/local/bin/gosu && \
    apk del curl && \
    rm -rf /var/cache/apk/*

ENV LANG en_US.utf8
ENV PGDATA /var/lib/postgresql/data
VOLUME /var/lib/postgresql/data

COPY docker-entrypoint.sh /

ENTRYPOINT [""/docker-entrypoint.sh""]

EXPOSE 5432
CMD [""postgres""]
",kiasaki/docker-alpine-postgres,Dockerfile
5e629f6f254d64c5841aa26424aa189c5b55febf,414,"FROM golang
RUN  useradd azureuser

COPY testdata/lsb-release lsb-release
RUN  mv lsb-release /etc/lsb-release
COPY testdata/ovf-env.xml /var/lib/waagent/ovf-env.xml

COPY testdata/HandlerEnvironment.json HandlerEnvironment.json
RUN  mv HandlerEnvironment.json ../HandlerEnvironment.json
COPY testdata/Extension /var/lib/waagent/Extension

ADD src src
RUN go build -o a.out docker-extension
ENTRYPOINT [""./a.out""]
",Azure/azure-docker-extension,Dockerfile
600e4b76cdaaf25569df94a0a3e0c6db523153fb,177,"FROM subotic/sipi-base:14.04

MAINTAINER Ivan Subotic <ivan.subotic@unibas.ch>

COPY . /usr/src/sipi

WORKDIR /usr/src/sipi

#RUN cd build && cmake .. && make

CMD [""/bin/bash""]",dhlab-basel/Sipi,Dockerfile
a692834f5d9fc2f2e320f4ff2227dfd9f5efce90,774,"FROM octohost/nginx:1.8

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys E5267A6C; \
    echo 'deb http://ppa.launchpad.net/ondrej/php5/ubuntu trusty main' > /etc/apt/sources.list.d/ondrej-php5-trusty.list; \
    apt-get update ; \
    apt-get -y install php5-fpm php5-mysql php-apc php5-imagick php5-imap php5-mcrypt php5-curl php5-cli php5-gd php5-pgsql php5-sqlite php5-common php-pear curl php5-json php5-redis redis-server memcached php5-memcache ; \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ && mv /usr/bin/composer.phar /usr/bin/composer
RUN echo ""<?php phpinfo(); ?>"" > /srv/www/phpinfo.php

ADD ./default /etc/nginx/sites-available/default
",octohost/php5,Dockerfile
bc2beb757347da94e025c6fcc3eb4aa2c6264d5d,582,"# https://registry.hub.docker.com/_/centos/
FROM centos:centos7

RUN yum -y install epel-release
RUN yum -y groupinstall 'Development Tools'
RUN yum -y install git make wget tar bzip2
RUN yum -y install install -y python python-devel python-distribute python-pip

RUN pip install web.py

# download MITIE
RUN cd /; git clone https://github.com/mit-nlp/MITIE.git

# download MITIE models
RUN cd /MITIE; make MITIE-models

# build MITIE executables and libs
RUN cd /MITIE; make

# Bundle app source
ADD src /mitie-server

EXPOSE 8888
CMD [""/mitie-server/server.py"", ""0.0.0.0"", ""8888""]",unchartedsoftware/mitie-server,Dockerfile
7868401de8964e2d9bcbf485edc6f1a7e32baded,335,"FROM alpine:3.3

MAINTAINER nizq <ni.zhiqiang@gmail.com>

RUN echo ""===> Adding compile runtime..."" && \
    apk add --update git perl cmake \
        make zlib-dev openssl-dev flex bison \
        python-dev libpcap-dev geoip-dev fts fts-dev \
        clang binutils g++ linux-headers

VOLUME [""/source""]
CMD [""/source/build-bro.sh""]
",nizq/docker-bro,Dockerfile
80fd5b5a9ccdc15ea6066e467e847defef2bc0bb,7044,"FROM ubuntu:15.04
MAINTAINER Cyrille Le Clerc <cleclerc@cloudbees.com>

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#################################################
# Inspired by
# https://github.com/SeleniumHQ/docker-selenium/blob/master/Base/Dockerfile
#################################################


#================================================
# Customize sources for apt-get
#================================================
RUN  echo ""deb http://archive.ubuntu.com/ubuntu vivid main universe\n"" > /etc/apt/sources.list \
  && echo ""deb http://archive.ubuntu.com/ubuntu vivid-updates main universe\n"" >> /etc/apt/sources.list

RUN apt-get update -qqy \
  && apt-get -qqy --no-install-recommends install software-properties-common \
  && add-apt-repository -y ppa:git-core/ppa

#========================
# Miscellaneous packages
# iproute which is surprisingly not available in ubuntu:15.04 but is available in ubuntu:latest
# OpenJDK8
# rlwrap is for azure-cli
# groff is for aws-cli
# tree is convenient for troubleshooting builds
#========================
RUN apt-get update -qqy \
  && apt-get -qqy --no-install-recommends install \
    iproute \
    openssh-client ssh-askpass\
    ca-certificates \
    openjdk-8-jdk \
    tar zip unzip \
    wget curl \
    git \
    build-essential \
    less nano tree \
    python python-pip groff \
    rlwrap \
  && rm -rf /var/lib/apt/lists/* \
  && sed -i 's/securerandom\.source=file:\/dev\/random/securerandom\.source=file:\/dev\/urandom/' ./usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security

# workaround https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=775775
RUN [ -f ""/etc/ssl/certs/java/cacerts"" ] || /var/lib/dpkg/info/ca-certificates-java.postinst configure

#==========
# Maven
#==========
ENV MAVEN_VERSION 3.3.9

RUN curl -fsSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

ENV MAVEN_HOME /usr/share/maven

#==========
# Ant
#==========
RUN curl -fsSL https://www.apache.org/dist/ant/binaries/apache-ant-1.9.7-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-ant-1.9.7 /usr/share/ant \
  && ln -s /usr/share/ant/bin/ant /usr/bin/ant

ENV ANT_HOME /usr/share/ant

#==========
# Selenium
#==========
RUN  mkdir -p /opt/selenium \
  && wget --no-verbose http://selenium-release.storage.googleapis.com/2.53/selenium-server-standalone-2.53.0.jar -O /opt/selenium/selenium-server-standalone.jar

#========================================
# Add normal user with passwordless sudo
#========================================
RUN useradd jenkins --shell /bin/bash --create-home \
  && usermod -a -G sudo jenkins \
  && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \
  && echo 'jenkins:secret' | chpasswd

# https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/master/NodeFirefox/Dockerfile

#===============
# XVFB & FIREFOX
#===============
RUN apt-get update -qqy \
  && apt-get -qqy --no-install-recommends install \
    xvfb firefox \
  && rm -rf /var/lib/apt/lists/*

#========================
# Selenium Configuration
#========================
COPY config.json /opt/selenium/config.json

ENV SCREEN_WIDTH 1360
ENV SCREEN_HEIGHT 1020
ENV SCREEN_DEPTH 24
ENV DISPLAY :99.0

# https://github.com/SeleniumHQ/docker-selenium/blob/master/StandaloneFirefox/Dockerfile

#====================================
# Scripts to run Selenium Standalone
#====================================
COPY entry_point.sh /opt/bin/entry_point.sh
RUN chmod +x /opt/bin/entry_point.sh

#====================================
# Cloud Foundry CLI
# https://github.com/cloudfoundry/cli
#====================================
RUN wget -O - ""http://cli.run.pivotal.io/stable?release=linux64-binary&source=github"" | tar -C /usr/local/bin -zxf -

#====================================
# AWS CLI
#====================================
RUN pip install awscli

# compatibility with CloudBees AWS CLI Plugin which expects pip to be installed as user
RUN mkdir -p /home/jenkins/.local/bin/ \
  && ln -s /usr/bin/pip /home/jenkins/.local/bin/pip \
  && chown -R jenkins:jenkins /home/jenkins/.local

#====================================
# NODE JS
# See https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
#====================================
RUN curl -sL https://deb.nodesource.com/setup_4.x | bash \
    && apt-get install -y nodejs

#====================================
# AZURE CLI
# See https://hub.docker.com/r/microsoft/azure-cli/~/dockerfile/
#====================================

RUN npm install --global azure-cli@0.10.1

#====================================
# BOWER, GRUNT, GULP
#====================================

RUN npm install --global grunt-cli@0.1.2 bower@1.7.9 gulp@3.9.1

#====================================
# Kubernetes CLI
# See http://kubernetes.io/v1.0/docs/getting-started-guides/aws/kubectl.html
#====================================
RUN curl https://storage.googleapis.com/kubernetes-release/release/v1.2.3/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl

#====================================
# OPENSHIFT V3 CLI
# Only install ""oc"" executable, don't install ""openshift"", ""oadmin""...
#====================================
RUN mkdir /var/tmp/openshift \
      && wget -O - ""https://github.com/openshift/origin/releases/download/v1.2.0/openshift-origin-client-tools-v1.2.0-2e62fab-linux-64bit.tar.gz"" \
      | tar -C /var/tmp/openshift --strip-components=1 -zxf - \
      && mv /var/tmp/openshift/oc /usr/local/bin \
      && rm -rf /var/tmp/openshift

#====================================
# JMETER
#====================================
RUN mkdir /opt/jmeter \
      && wget -O - ""https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-3.0.tgz"" \
      | tar -xz --strip=1 -C /opt/jmeter

#====================================
# MYSQL CLIENT
#====================================
RUN apt-get update -qqy \
  && apt-get -qqy --no-install-recommends install \
    mysql-client \
  && rm -rf /var/lib/apt/lists/*

USER jenkins

# for dev purpose
# USER root

ENTRYPOINT [""/opt/bin/entry_point.sh""]

EXPOSE 4444
",cloudbees/java-build-tools-dockerfile,Dockerfile
72b053c984a7887f09225fd612a31a76aaf17600,315,"FROM ruby:2.3.1
RUN apt-get update -qq && apt-get install -y build-essential
RUN apt-get install -y libpq-dev
RUN apt-get install -y libxml2-dev libxslt1-dev
RUN apt-get install -y nodejs

ENV APP_HOME /libraries.io
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

ADD Gemfile* $APP_HOME/
RUN bundle install

ADD . $APP_HOME
",librariesio/libraries.io,Dockerfile
fa6664461f47ad6fe504a69dc6a080f88b21391c,125,"# Basic install of Samza deploy server

FROM java:8
ADD target/pack/ /samza_deploy/
CMD /samza_deploy/bin/samza-deploy-server",oliverdaff/samza-web-deploy,Dockerfile
707727a53cf9d24f3c556bcf971a3a5b39cc2a94,31,"FROM node:4-onbuild
EXPOSE 3000",imjacobclark/name-generator-telegram-bot,Dockerfile
7d708dd24d88fe78e741689e748444d1d34583e4,1110,"# nginx/php
# VERSION 0.1

FROM ubuntu:14.04
MAINTAINER Paul Sore <paul.sore@gmail.com>

# Get some security updates
RUN apt-get update
RUN apt-get -y upgrade

# install nginx, php5, mysql driver and supervisor
RUN apt-get -y install nginx
RUN apt-get -y install php5-fpm
RUN apt-get -y install php5-mysql
RUN apt-get -y install supervisor

# Add our config files
ADD conf/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
ADD conf/nginx.conf /etc/nginx/nginx.conf
ADD conf/php-fpm.conf /etc/php5/fpm/php-fpm.conf
ADD conf/php.ini /etc/php5/fpm/php.ini

# disable the daemons for nginx & php
# RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf
# RUN sed -i ""s/;daemonize = yes/daemonize = no/g"" /etc/php5/fpm/php-fpm.conf

# sites volume
RUN mkdir /home/www
RUN echo ""<?php phpinfo() ?>"" > /home/www/index.php

# Define mountable directories.
VOLUME [""/etc/nginx/sites-enabled"", ""/etc/nginx/sites-available"", ""/var/log/nginx"", ""/home/www""]
# Path to your conf file & sites-* .
# Mount with `-v <data-dir>:/etc/nginx/sites-enabled`

# expose http & https
EXPOSE 80
EXPOSE 443

CMD [""/usr/bin/supervisord""]
",bulgr0z/dockerfile-nginx-php,Dockerfile
5f1c2b7b8cb0c8724738d3313bd700e005c506a2,409,"FROM progrium/cedarish:cedar14

RUN curl https://github.com/gliderlabs/herokuish/releases/download/v0.3.1/herokuish_0.3.1_linux_x86_64.tgz \
		--silent -L | tar -xzC /bin

# install herokuish supported buildpacks and entrypoints
RUN /bin/herokuish buildpack install \
	&& ln -s /bin/herokuish /build \
	&& ln -s /bin/herokuish /start \
	&& ln -s /bin/herokuish /exec

# backwards compatibility
ADD ./rootfs /
",progrium/buildstep,Dockerfile
d402fe7be1f28a10e61e9e07c9dfb6d2b3818f1a,1764,"FROM ubuntu:14.04
MAINTAINER HelloLily

RUN apt-get update && apt-get install -y \
    python2.7-dev \
    python-pip \
    postgresql \
    postgresql-server-dev-9.3 \
    libxml2-dev \
    libxslt1-dev \
    libncurses5-dev \
    rsync \
    nodejs \
    npm

RUN useradd docker
RUN echo ""ALL ALL = (ALL) NOPASSWD: ALL"" >> /etc/sudoers
WORKDIR /home/docker
ENV HOME /home/docker

# For our e2e tests we need protractor
RUN ln -s /usr/bin/nodejs /usr/bin/node
RUN npm install -g protractor

ADD requirements.txt $HOME/requirements.txt
RUN pip install -r $HOME/requirements.txt

# Workaround for IncompleteRead error while installing requirements-dev.txt.
# See: https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1306991
RUN rm -rf /usr/local/lib/python2.7/dist-packages/requests* && easy_install requests==2.3.0

ADD requirements-dev.txt $HOME/requirements-dev.txt
RUN pip install -r $HOME/requirements-dev.txt
RUN rm $HOME/requirements.txt $HOME/requirements-dev.txt

# Switch to docker user.
RUN chown -R docker:docker $HOME/
USER docker

# Workaround for IncompleteRead error while installing PuDB.
# See: https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1306991
RUN sudo rm -rf /usr/local/lib/python2.7/dist-packages/requests* && sudo easy_install requests==2.3.0

# Install PuDB.
# PuDB does some weird folder creating stuff, leaving it unable to read with no apparent reason.
RUN mkdir -p $HOME/.config/pudb
RUN sudo pip install pudb
RUN sudo chown -R docker:docker $HOME/

# Expose to Selenium.
EXPOSE 8081

ENV DJANGO_SETTINGS_MODULE lily.settings.settings
ENV DEBUG 1
ENV SECRET_KEY abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmn
ENV DATABASE_URL postgres://hellolily:@db/hellolily
ENV MULTI_TENANT 1

WORKDIR /home/docker/hellolily
",HelloLily/hellolily,Dockerfile
22afcebe2101c98e8ac41fd359c2cfd575246f1e,1030,"#
# ------------------------------------------------------
#                       Dockerfile
# ------------------------------------------------------
# image:    ansible-nodejs
# tag:      latest
# name:     ansibleshipyard/ansible-nodejs
# version:  v0.1.5
# repo:     https://github.com/AnsibleShipyard/ansible-nodejs
# how-to:   docker build --force-rm -t ansibleshipyard/ansible-nodejs .
# requires: ansibleshipyard/ansible-base-ubuntu
# authors:  github:@jasongiedymin,
#           github:
# ------------------------------------------------------

FROM ansibleshipyard/ansible-base-ubuntu
MAINTAINER ansibleshipyard

# -----> Env
ENV WORKDIR /tmp/build/roles/ansible-nodejs
WORKDIR /tmp/build/roles/ansible-nodejs

# -----> Add assets
ADD ./ci $WORKDIR/ci
ADD ./meta $WORKDIR/meta
ADD ./tasks $WORKDIR/tasks
ADD ./vars $WORKDIR/vars

# -----> Install Galaxy Dependencies

# -----> Execute
RUN ansible-playbook -i $WORKDIR/ci/inventory $WORKDIR/ci/playbook.yml -c local -vvvv

# -----> Cleanup
WORKDIR /
RUN rm -R /tmp/build
",AnsibleShipyard/ansible-nodejs,Dockerfile
f1c0da35d981053493ecda66b47bdf2ef02402ad,100,"FROM node:6

WORKDIR /app
EXPOSE 3000

ADD . /app
RUN npm install && npm test

CMD [""npm"", ""start""]
",hapijs/hapijs.com,Dockerfile
1419d3a3b3706e43f784028012ed52b5005537ed,709,"FROM debian:jessie
MAINTAINER kost - https://github.com/kost

RUN apt-get -qq update && \
apt-get install -yq  wget curl libpcre3-dev uuid-dev libmagic-dev pkg-config g++ flex bison zlib1g-dev libffi-dev gettext libgeoip-dev make libjson-perl libbz2-dev libwww-perl libpng-dev xz-utils libffi-dev python git openjdk-7-jdk libssl-dev && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# add scripts
ADD /scripts /data/
RUN chmod 755 /data/startmoloch.sh && chmod 755 /data/buildmoloch.sh 
RUN /data/buildmoloch.sh /data/moloch-git

# VOLUME [""/data/moloch/logs"",""/data/moloch/data"",""/data/moloch/raw"",""/data/pcap""]
VOLUME [""/data/pcap""]
EXPOSE 8005
WORKDIR /data/moloch

ENTRYPOINT [""/data/startmoloch.sh""]


",kost/docker-moloch,Dockerfile
dd06b8040899564b5c903a4b30572930adf19eef,4534,"FROM centos:centos6

MAINTAINER Christian Tzolov ""https://github.com/tzolov""

RUN echo ""---------------------- Create sudo & paswordless 'bigtop' user -----"" ;\
   yum -y install sudo ;\
   useradd bigtop && echo ""bigtop:bigtop"" | chpasswd && gpasswd -a bigtop wheel ;\
   mkdir -p /home/bigtop && chown -R bigtop:bigtop /home/bigtop ;\
   sed -i ""s/Defaults    requiretty.*/# Defaults    requiretty/g"" /etc/sudoers ;\
   echo '%wheel        ALL=(ALL)       NOPASSWD: ALL' >> /etc/sudoers

USER bigtop

ENV JAVA_HOME /usr/java/jdk1.7.0_65
ENV JAVA5_HOME /usr/java/jdk1.7.0_65
ENV JVM_ARGS -Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m
ENV MAVEN_HOME /opt/apache-maven-3.3.3
ENV MAVEN_OPTS -Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m
ENV ANT_HOME /opt/apache-ant
ENV SCALA_HOME /usr/share/scala
ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:$MAVEN_HOME/bin:$ANT_HOME/bin
ENV FORREST_HOME /opt/apache-forrest-0.9

RUN cd ~ ;\
echo ""----------------------------- Install required packages ------------"" ;\
   sudo yum -y install wget tar git subversion gcc gcc-c++ make cmake fuse autoconf automake libtool sharutils xmlto ;\
   sudo yum -y install lzo-devel zlib-devel fuse-devel openssl-devel python-devel libxml2-devel libxslt-devel cyrus-sasl-devel sqlite-devel mysql-devel openldap-devel rpm-build createrepo redhat-rpm-config ;\
   sudo yum -y install python-setuptools asciidoc libyaml-devel cppunit-devel ;\
echo ""----------------------------- Install JDK --------------------------"" ;\  
   wget --no-cookies --no-check-certificate --header ""Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"" ""http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.rpm"" ;\
   sudo yum -y install ./jdk-7u65-linux-x64.rpm; java -version ;\
   rm ./jdk-7u65-linux-x64.rpm ;\ 
echo ""----------------------------- Install Scala --------------------------"" ;\      
   sudo yum -y install http://www.scala-lang.org/files/archive/scala-2.11.5.rpm ;\
echo ""----------------------------- Install Maven --------------------------"" ;\
   wget http://ftp.nluug.nl/internet/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz ;\
   tar -xzvf apache-maven-3.3.3-bin.tar.gz ;\
   sudo mv apache-maven-3.3.3 /opt/ ;\
   rm apache-maven-3.3.3-bin.tar.gz ;\
echo ""----------------------------- Install Ant ---------------------------"" ;\
   wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.4-bin.tar.gz ;\
   tar -xvzf apache-ant-1.9.4-bin.tar.gz ;\
   sudo mv apache-ant-1.9.4 /opt/apache-ant ;\
   rm apache-ant-1.9.4-bin.tar.gz ;\
echo ""----------------------------- Install Forrest ----------------------"" ;\
   wget http://archive.apache.org/dist/forrest/0.9/apache-forrest-0.9.tar.gz ;\
   tar -xzvf apache-forrest-0.9.tar.gz ;\
   sed -i 's/property name=""forrest.validate.sitemap"" value=""${forrest.validate}""/property name=""forrest.validate.sitemap"" value=""false""/g' apache-forrest-0.9/main/targets/validate.xml ;\
   sed -i 's/property name=""forrest.validate.stylesheets"" value=""${forrest.validate}""/property name=""forrest.validate.stylesheets"" value=""false""/g' apache-forrest-0.9/main/targets/validate.xml ;\
   sed -i 's/property name=""forrest.validate.stylesheets.failonerror"" value=""${forrest.validate.failonerror}""/property name=""forrest.validate.stylesheets.failonerror"" value=""false""/g' apache-forrest-0.9/main/targets/validate.xml ;\
   sed -i 's/property name=""forrest.validate.skins.stylesheets"" value=""${forrest.validate.skins}""/property name=""forrest.validate.skins.stylesheets"" value=""false""/g' apache-forrest-0.9/main/targets/validate.xml ;\
   sudo mv apache-forrest-0.9 /opt/ ;\
   rm apache-forrest-0.9.tar.gz ;\
echo ""----------------------------- Install Protobuf ---------------------"" ;\
   wget http://protobuf.googlecode.com/files/protobuf-2.5.0.tar.bz2 ;\
   tar -xvf protobuf-2.5.0.tar.bz2 ;\
   cd protobuf-2.5.0 ;\
   ./configure --prefix=/usr ;\
   make ;\
   sudo make install ;\
   sudo ldconfig ;\
   cd ~ ;\
echo ""----------------------------- Install SSH Keys ---------------------"" ;\
   ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa ;\
   cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys ;\
echo ""----------------------------- Clone Bigtop -------------------------"" ;\
   git clone https://github.com/apache/bigtop.git ;\
   sudo chown -R bigtop:bigtop bigtop ;\
   cd bigtop ;\
   git checkout HEAD ;\
   ls -lah ;\

#   git clone https://github.com/apache/bigtop.git ;\


",tzolov/bigtop-centos,Dockerfile
5fcb4765d3bf77bb2c0c31810c00ef531dc2d3a4,44,"FROM nginx
COPY dist/ /usr/share/nginx/html
",rangle/typescript-react-redux-starter,Dockerfile
36d73aef26aaf9caac1f3b0d89bcc93aaa9d3fdd,1162,"FROM ubuntu:trusty
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

MAINTAINER Vincent Voyer <vincent@zeroload.net>
RUN apt-get -y update
RUN apt-get install -y -q software-properties-common wget
RUN add-apt-repository -y ppa:mozillateam/firefox-next

RUN wget -qO- https://deb.nodesource.com/setup_5.x | sudo bash -
RUN sudo apt-get install -y nodejs

RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
RUN echo ""deb http://dl.google.com/linux/chrome/deb/ stable main"" > /etc/apt/sources.list.d/google.list
RUN apt-get update -y
RUN apt-get install -y -q \
  firefox \
  google-chrome-beta \
  openjdk-7-jre-headless \
  nodejs \
  x11vnc \
  xvfb \
  xfonts-100dpi \
  xfonts-75dpi \
  xfonts-scalable \
  xfonts-cyrillic
RUN useradd -d /home/seleuser -m seleuser
RUN mkdir -p /home/seleuser/chrome
RUN chown -R seleuser /home/seleuser
RUN chgrp -R seleuser /home/seleuser

ADD ./scripts/ /home/root/scripts
RUN npm install -g \
  selenium-standalone@5.0.0 \
  phantomjs-prebuilt@2.1.4 && \
  selenium-standalone install
EXPOSE 4444 5999
ENTRYPOINT [""sh"", ""/home/root/scripts/start.sh""]
",vvo/docker-selenium-firefox-chrome-beta,Dockerfile
cd2ac41738b48ac0870605bb37d76961d0585fb6,295,"FROM golang:1.5

ENV GO15VENDOREXPERIMENT=1

RUN mkdir -p /go/src/github.com/pagarme/teleport/
WORKDIR /go/src/github.com/pagarme/teleport/

ADD . /go/src/github.com/pagarme/teleport/

RUN cp -r Godeps/_workspace/src/ /go/src/

RUN go get -u github.com/jteeuwen/go-bindata/...

RUN make install
",pagarme/teleport,Dockerfile
316b95ea68d31a13c1dec489a6e13f2a60283196,1680,"# -----------------------------------------------------------------------------
# docker-wormhole
#
# Base Ubuntu + SoftEther VPN + Wormhole
# (https://wormhole.network).
#
# Authors: Pedro Perez
# Updated: Jan 16th, 2016
# Require: Docker (http://www.docker.io/)
# -----------------------------------------------------------------------------


# Base system is the LTS version of Ubuntu.
FROM   ubuntu:14.04


# Make sure we don't get notifications we can't answer during building.
ENV    DEBIAN_FRONTEND noninteractive

# Let's keep everything tidy
WORKDIR /usr/local/vpnclient

# Download and install the needed tools
RUN apt-get update &&\
        apt-get -y -q install gcc make wget && \
        apt-get clean && \
        rm -rf /var/cache/apt/* /var/lib/apt/lists/* && \
        wget https://whdowns.blob.core.windows.net/whclient/softether-vpnclient-v4.19-9599-beta-2015.10.19-linux-x64-64bit.tar.gz -O /tmp/softether-vpnclient.tar.gz &&\
        tar -xzvf /tmp/softether-vpnclient.tar.gz -C /usr/local/ &&\
        rm /tmp/softether-vpnclient.tar.gz &&\
        make i_read_and_agree_the_license_agreement &&\
        apt-get purge -y -q --auto-remove gcc make wget && \
        apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Move dhclient to /usr/bin to work around a bug that prevents dhclient from running
RUN mv /sbin/dhclient /usr/sbin/dhclient

# Load in all of our config files.
ADD    ./scripts/start /start
ADD    ./linuxconfig /usr/local/vpnclient/linuxconfig
ADD    ./*.vpn /usr/local/vpnclient/

# Fix all permissions
RUN    chmod +x /start

# /data contains static files and database
VOLUME [""/data""]

# /start runs it.
CMD    [""/start""]
",pjperez/docker-wormhole,Dockerfile
c69a624854a5518154da71182520764df01e7e6b,1845,"### BaseApp deployment script to create a new LXC Container via Docker
###
### Docker: http://www.docker.io

FROM ubuntu:latest
MAINTAINER Rich Tibbett <rich.tibbett@gmail.com>

# Update the base system
RUN apt-get update

# Tell debconf to run in non-interactive mode
ENV DEBIAN_FRONTEND noninteractive

# Install System Dependencies
RUN apt-get -y install build-essential golang git-core mercurial mysql-client mysql-server nginx pwgen python-setuptools vim-tiny

# Setup Go
RUN mkdir /go
ENV GOPATH  /go
ENV PATH $PATH:$GOPATH/bin

# Install Supervisord
RUN /usr/bin/easy_install supervisor
RUN /usr/bin/easy_install supervisor-stdout

# Get BaseApp Dependencies
#
# Annoyingly, we can not use `go get baseapp/...` because
# references to revel/app/routes package fail
RUN go get -v github.com/revel/revel github.com/revel/cmd/revel github.com/robfig/cron github.com/coopernurse/gorp code.google.com/p/go.crypto/bcrypt github.com/mattn/go-sqlite3 github.com/go-sql-driver/mysql github.com/ftrvxmtrx/gravatar github.com/russross/blackfriday

# Add Nginx frontend host
ADD ./docker/nginx_baseapp.vhost /etc/nginx/sites-available/default

# Stage BaseApp
ENV BASEAPP_PATH github.com/richtr/baseapp
ADD . $GOPATH/src/$BASEAPP_PATH

# Setup Nginx
RUN sed -i -e""s/keepalive_timeout\s*65/keepalive_timeout 2/"" /etc/nginx/nginx.conf
RUN sed -i -e""s/keepalive_timeout 2/keepalive_timeout 2;\n\tclient_max_body_size 100m/"" /etc/nginx/nginx.conf
RUN echo ""daemon off;"" >> /etc/nginx/nginx.conf

# Setup Supervisord
RUN cp $GOPATH/src/$BASEAPP_PATH/docker/supervisord.conf /etc/supervisord.conf

# Set start script permissions
RUN cp $GOPATH/src/$BASEAPP_PATH/docker/start.sh /start.sh
RUN chmod 755 /start.sh

# Expose Web Frontend (nginx) port only
EXPOSE 80

# Start required services when docker is instantiated
ENTRYPOINT [""/bin/bash"", ""/start.sh""]
",richtr/baseapp,Dockerfile
cf4a6d857f351ebdaf9af4b5c4a71503f4ff4a5b,1190,"FROM php:7.0-cli

MAINTAINER Tobias Munk tobias@diemeisterei.de

# Install required system packages
RUN apt-get update && \
    apt-get -y install \
            git \
            zlib1g-dev \
            libssl-dev \
        --no-install-recommends && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install php extensions
RUN docker-php-ext-install \
    bcmath \
    zip

# Install pecl extensions
RUN pecl install mongodb xdebug && \
    docker-php-ext-enable mongodb && \
    docker-php-ext-enable xdebug

# Configure php
RUN echo ""date.timezone = UTC"" >> /usr/local/etc/php/php.ini

# Install composer
ENV COMPOSER_ALLOW_SUPERUSER=1
RUN curl -sS https://getcomposer.org/installer | php -- \
        --filename=composer \
        --install-dir=/usr/local/bin
RUN composer global require --optimize-autoloader \
        ""hirak/prestissimo""

# Prepare application
WORKDIR /repo

# Install vendor
COPY ./composer.json /repo/composer.json
RUN composer install --prefer-dist --optimize-autoloader

# Add source-code
COPY . /repo

ENV PATH /repo:${PATH}
ENTRYPOINT [""codecept""]

# Prepare host-volume working directory
RUN mkdir /project
WORKDIR /project",Codeception/Codeception,Dockerfile
22a7963229003e4094bd5854058ea246a6ef3013,652,"FROM python:3.5

MAINTAINER Weihan Wang

# Install Firefox
RUN \
    curl 'https://download-installer.cdn.mozilla.net/pub/firefox/releases/35.0/linux-x86_64/en-US/firefox-35.0.tar.bz2' \
        -o firefox.tar.bz2 &&\
    bunzip2 firefox.tar.bz2 &&\
    tar xf firefox.tar &&\
    rm firefox.tar

RUN apt-get update && apt-get install -y \
    # Headless browser support
    xvfb \
    # Needed to launch firefox
    libasound2 \
    libgtk2.0-0 \
    libdbus-glib-1-2 \
    libxcomposite1

RUN pip install pyyaml==3.11 requests==2.5.1 selenium==2.52.0

ENV PYTHONPATH /

ENTRYPOINT [ ""/entrypoint.sh"" ]

CMD [ ""python"", ""-u"", ""/main.py"" ]

COPY root /",weihanwang/webdriver-python,Dockerfile
3dcd651a9faeacd2a83877d25bb2afe6b5fb33d2,403,"FROM dylanlindgren/docker-phpcli:latest

MAINTAINER ""Dylan Lindgren"" <dylan.lindgren@gmail.com>

WORKDIR /tmp

RUN apt-get update -y && \
    apt-get install -y \
    php5-mcrypt \
    php5-mongo \
    php5-mssql \
    php5-mysqlnd \
    php5-pgsql \
    php5-redis \
    php5-sqlite \
    php5-gd

RUN mkdir -p /data/www
VOLUME [""/data""]
WORKDIR /data/www

ENTRYPOINT [""php"", ""artisan""]
CMD [""--help""]
",dylanlindgren/docker-laravel-artisan,Dockerfile
c8777b43edf99b2b1c5af68e2822d27c13bbedea,536,"FROM debian:jessie
MAINTAINER Adrian Dvergsdal [atmoz.net]

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get -y install openssh-server && \
    rm -rf /var/lib/apt/lists/*

# Step 1: sshd needs /var/run/sshd/ to run
# Step 2: Remove keys, they will be generated later by entrypoint
#         (unique keys for each container)
RUN mkdir -p /var/run/sshd && \
    rm /etc/ssh/ssh_host_*key*

COPY sshd_config /etc/ssh/sshd_config
COPY entrypoint /
COPY README.md /

VOLUME /etc/ssh

EXPOSE 22

ENTRYPOINT [""/entrypoint""]
",atmoz/sftp,Dockerfile
3926af95d4cd617ed8c59987976a01ee5c9e2698,2318,"FROM php:7-apache

MAINTAINER info@jeedom.com

ENV SHELL_ROOT_PASSWORD Mjeedom96

RUN apt-get update && apt-get install -y \
wget \
libssh2-php \
ntp \
unzip \
curl \
openssh-server \
supervisor \
cron \
usb-modeswitch \
python-serial \
nodejs \
npm \
tar \
libmcrypt-dev \
libcurl4-gnutls-dev \
libfreetype6-dev \
libjpeg62-turbo-dev \
libpng12-dev \
libxml2-dev \
sudo \
htop \
net-tools \
python \
ca-certificates \
vim \
git \
g++ \
locate \
mysql-client \
telnet \
man \
usbutils \
libtinyxml-dev \
libjsoncpp-dev \
snmp \
libsnmp-dev \
iputils-ping

####################################################################PHP7 EXTENSION#######################################################################################

RUN docker-php-ext-install json
RUN docker-php-ext-install mcrypt
RUN docker-php-ext-install curl
RUN docker-php-ext-install opcache
RUN docker-php-ext-install pdo
RUN docker-php-ext-install pdo_mysql
RUN docker-php-ext-install posix
RUN docker-php-ext-install simplexml
RUN docker-php-ext-install sockets
RUN docker-php-ext-install zip
RUN docker-php-ext-install iconv
RUN docker-php-ext-install mbstring
RUN docker-php-ext-install mysqli
RUN docker-php-ext-install soap
RUN docker-php-ext-install snmp
RUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
RUN docker-php-ext-install gd
RUN docker-php-ext-install calendar

RUN rm /usr/bin/php
RUN ln -s /usr/local/bin/php /usr/bin/php

####################################################################SYSTEM#######################################################################################

RUN echo ""root:${SHELL_ROOT_PASSWORD}"" | chpasswd && \
  sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
  sed -i 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd

RUN mkdir -p /var/run/sshd /var/log/supervisor
RUN rm /etc/motd
ADD install/motd /etc/motd
RUN rm /root/.bashrc
ADD install/bashrc /root/.bashrc
ADD install/OS_specific/Docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

ADD install/OS_specific/Docker/init.sh /root/init.sh
RUN chmod +x /root/init.sh
CMD [""/root/init.sh""]

EXPOSE 22 80 162 1886 4025 17100 10000 

#17100 : zibasdom
#10000 : orvibo
#1886 : MQTT
#162 : SNMP
#4025 : DSC",jeedom/core,Dockerfile
a37c79b26176d67ceae69a7baf4ef84d00668fb0,692,"FROM tifayuki/java:7
MAINTAINER Feng Honglin <hfeng@tutum.co>

RUN apt-get update && \
    apt-get install -y wget unzip pwgen expect && \
    wget download.java.net/glassfish/4.0/release/glassfish-4.0.zip && \
    unzip glassfish-4.0.zip -d /opt && \
    rm glassfish-4.0.zip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV PATH /opt/glassfish4/bin:$PATH

ADD run.sh /run.sh
ADD change_admin_password.sh /change_admin_password.sh
ADD change_admin_password_func.sh /change_admin_password_func.sh
ADD enable_secure_admin.sh /enable_secure_admin.sh
RUN chmod +x /*.sh

# 4848 (administration), 8080 (HTTP listener), 8181 (HTTPS listener)
EXPOSE 4848 8080 8181

CMD [""/run.sh""]
",tutumcloud/glassfish,Dockerfile
b1255595eed1d0159fb6239c302e39a31973e4e2,560,"FROM ruby:2.3.0-alpine

RUN apk add --no-cache alpine-sdk linux-headers \
  && curl ftp://ftp.isc.org/isc/bind9/9.10.2/bind-9.10.2.tar.gz|tar -xzv \
  && cd bind-9.10.2 \
  && CFLAGS=""-static"" ./configure --without-openssl --disable-symtable \
  && make \
  && cp ./bin/dig/dig /usr/bin/ \
  && git clone https://github.com/dpiddy/letsencrypt-dnsimple.git /cwd \
  && cd /cwd \
  && bundle install \
  && rm -rf /bind-9.10.2 /cwd/.git \
  && apk del alpine-sdk linux-headers

RUN mkdir /cwd/live
WORKDIR /cwd/live

CMD [""bundle"", ""exec"", ""ruby"", ""../main.rb""]
",meskyanichi/dockerized-letsencrypt-dnsimple,Dockerfile
786c0b6af40cfd16fb77475f6a6099a3be1aed78,1390,"FROM heroku/cedar:14

ENV GHCVER 7.8.4
ENV CABALVER 1.18

RUN apt-get update && apt-get install -y --no-install-recommends software-properties-common \
  && add-apt-repository -y ppa:hvr/ghc \
  && apt-get update \
  && apt-get install -y --no-install-recommends \
    cabal-install-$CABALVER \
    ghc-$GHCVER \
  && rm -rf /var/lib/apt/lists/*

ENV PATH /opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

# Create app user, required? by Heroku
RUN useradd -d /app -m app
USER app
WORKDIR /app

ENV HOME /app
ENV PORT 3000

RUN gpg --recv-key --keyserver keyserver.ubuntu.com D6CF60FD
# Changing trust level to 4 = marginally trust
RUN echo E595AD4214AFA6BB15520B23E40D74D6D6CF60FD:4: | \
    gpg --import-ownertrust

# We need to install stackage somehow
RUN cabal update
RUN cabal install 'stackage ==0.7.3.2'

ENV PATH $HOME/.cabal/bin:$PATH
RUN stk update --verify --hashes

RUN cabal install 'warp >=3.0' 'wai-app-static >=3.0' 'waitra >=0.0.3'

# Build the app
ONBUILD COPY . /app/src

ONBUILD USER root
ONBUILD RUN chown -R app /app/src
ONBUILD USER app

ONBUILD WORKDIR /app/src
ONBUILD RUN stk update
ONBUILD RUN stk install

ONBUILD RUN mkdir -p /app/target && cp $HOME/.cabal/bin/heroku-docker-haskell-test /app/target/heroku-docker-haskell-test

# Cleanup to make slug smaller
ONBUILD RUN rm -rf /app/src /app/.cabal /app/.stackage /app/.ghc /app/.gnupg

ONBUILD EXPOSE 3000
",phadej/heroku-docker-haskell-test,Dockerfile
5d4ed9505699f13e4571490b02ed6f19be383e78,879,"FROM ubuntu:12.04

MAINTAINER dccrazyboy ""dccrazyboy@gmail.com""

# choose a faster mirror, see http://t.cn/zWYrzCE
RUN echo ""deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse"" > /etc/apt/sources.list
RUN echo ""deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse"" >> /etc/apt/sources.list
RUN echo ""deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse"" >> /etc/apt/sources.list
RUN echo ""deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse"" >> /etc/apt/sources.list

RUN apt-get update

RUN apt-get install -y --force-yes build-essential

RUN apt-get install -y openssl
RUN apt-get install -y git
RUN apt-get install -y make
RUN apt-get install -y tree
RUN apt-get install -y gdb
RUN apt-get install -y htop
",dccrazyboy/socket-server,Dockerfile
f5e83114bf368d7e54e770eeac102eba02031d2f,761,"FROM alpine
MAINTAINER dev@jpillora.com

#configure go path
ENV GOPATH /root/go
ENV PATH $PATH:/usr/local/go/bin:$GOPATH/bin

#package
ENV PACKAGE github.com/jpillora/cloud-torrent
ENV PACKAGE_DIR $GOPATH/src/$PACKAGE

#install go and godep, then compile cloud-torrent using godep, then wipe build tools
RUN apk update && \
    apk add git go gzip && \
    go get github.com/tools/godep && \
    mkdir -p $PACKAGE_DIR && \
    git clone https://$PACKAGE.git $PACKAGE_DIR && \
    cd $PACKAGE_DIR && \
    godep go build -ldflags ""-X main.VERSION=$(git describe --abbrev=0 --tags)"" -o /usr/local/bin/cloud-torrent && \
    cd /tmp && \
    rm -rf $GOPATH && \
    apk del git go gzip && \
    echo ""Installed $PACKAGE""

#run package
ENTRYPOINT [""cloud-torrent""]
",jpillora/cloud-torrent,Dockerfile
7b134c7883fc3df349cb1c0b333c3c84f8f145df,68,"FROM registry:2.3.0
COPY config.yml /etc/docker/registry/config.yml
",elasticio/docker-registry-ecs,Dockerfile
55776c08737e8ac7813e8f7d60f507b03bdcce50,1772,"FROM	debian:wheezy

MAINTAINER Automattic

WORKDIR /calypso

RUN     mkdir -p /tmp
COPY    ./env-config.sh /tmp/
RUN     bash /tmp/env-config.sh
RUN     apt-get -y update && apt-get -y install \
          wget \
          git \
          python \
          make \
          build-essential

ENV NODE_VERSION 5.11.1

RUN     wget https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz && \
          tar -zxf node-v$NODE_VERSION-linux-x64.tar.gz -C /usr/local && \
          ln -sf /usr/local/node-v$NODE_VERSION-linux-x64 /usr/local/node && \
          ln -sf /usr/local/node/bin/npm /usr/local/bin/ && \
          ln -sf /usr/local/node/bin/node /usr/local/bin/ && \
          rm node-v$NODE_VERSION-linux-x64.tar.gz

# npmrc is created by env-config.sh. For local testing, an empty one is generated
RUN     touch /usr/local/etc/npmrc && \
          mkdir /usr/local/node/etc && \
          cp /usr/local/etc/npmrc /usr/local/node/etc/npmrc

ENV     NODE_PATH /calypso/server:/calypso/client

# Install base npm packages to take advantage of the docker cache
COPY    ./package.json /calypso/package.json
COPY    ./npm-shrinkwrap.json /calypso/npm-shrinkwrap.json
# Sometimes ""npm install"" fails the first time when the cache is empty, so we retry once if it failed
RUN     npm install --production || npm install --production

COPY     . /calypso

# Build javascript bundles for each environment and change ownership
RUN     CALYPSO_ENV=wpcalypso make build-wpcalypso && \
          CALYPSO_ENV=horizon make build-horizon && \
          CALYPSO_ENV=stage make build-stage && \
          CALYPSO_ENV=production make build-production && \
          chown -R nobody /calypso

USER    nobody
CMD     NODE_ENV=production node build/bundle-$CALYPSO_ENV.js
",Automattic/wp-calypso,Dockerfile
e6c743ba29d5368403bba63bd81068000f88d027,807,"#
# Dockerfile for building Twister peer-to-peer micro-blogging
#
FROM ubuntu:14.04

# Install twister-core
RUN apt-get update
RUN apt-get install -y git autoconf libtool build-essential libboost-all-dev libssl-dev libdb++-dev libminiupnpc-dev && apt-get clean
#RUN git clone https://github.com/miguelfreitas/twister-core.git
ADD . /twister-core
RUN cd twister-core && \
    ./bootstrap.sh && \
    make

# Install twister-html
RUN git clone https://github.com/miguelfreitas/twister-html.git /twister-html

# Configure HOME directory
# and persist twister data directory as a volume
ENV HOME /root
VOLUME /root/.twister

# Run twisterd by default
ENTRYPOINT [""/twister-core/twisterd"", ""-rpcuser=user"", ""-rpcpassword=pwd"", ""-rpcallowip=172.17.42.1"", ""-htmldir=/twister-html"", ""-printtoconsole""]
EXPOSE 28332
",XX-net/twister-core,Dockerfile
1806ebb2927792bc264a23f54d165e80b6fb5c78,107,"FROM node:onbuild

RUN npm install 
RUN npm run dist

ARG NODE=production
ENV NODE_ENV ${NODE}

EXPOSE 3001",OpenChatAlytics/OpenChatAlyticsUI,Dockerfile
70df472578adf95961c8bdb0688ce389a4abc727,1072,"FROM maven:3

RUN apt-get update && apt-get install -y -q build-essential && \
  rm -rf /var/lib/apt/lists/*

# https://github.com/joyent/docker-node/blob/master/0.10/Dockerfile
# verify gpg and sha256: http://nodejs.org/dist/v0.10.31/SHASUMS256.txt.asc
# gpg: aka ""Timothy J Fontaine (Work) <tj.fontaine@joyent.com>""
# gpg: aka ""Julien Gilli <jgilli@fastmail.fm>""
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys 7937DFD2AB06298B2293C3187D33FF9D0246406D 114F43EE0176B71C7BC219DD50A3051F888C628D

ENV NODE_VERSION 0.12.7
ENV NPM_VERSION 2.13.3

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
  && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
  && gpg --verify SHASUMS256.txt.asc \
  && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
  && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
  && rm ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
  && npm install -g npm@""$NPM_VERSION"" \
  && npm cache clear
",groupon/DotCi,Dockerfile
19e2b362ce8ae1c39758f41c34328e363b637af1,527,"FROM sameersbn/ubuntu:14.04.20160608

ENV SKYPE_USER=skype

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv 7212620B \
 && echo ""deb http://archive.canonical.com/ trusty partner"" >> /etc/apt/sources.list \
 && dpkg --add-architecture i386 \
 && apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y pulseaudio:i386 skype:i386 \
 && rm -rf /var/lib/apt/lists/*

COPY scripts/ /var/cache/skype/
COPY entrypoint.sh /sbin/entrypoint.sh
RUN chmod 755 /sbin/entrypoint.sh

ENTRYPOINT [""/sbin/entrypoint.sh""]
",sameersbn/docker-skype,Dockerfile
3fd87e2c661eaee1c973f9cb9adfabd9c818f21e,1145,"#1 from base alpine
FROM alpine

#2 Add Edge and bleeding repos
RUN echo -e '@edge http://nl.alpinelinux.org/alpine/edge/main\n@testing http://nl.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories

#3
RUN apk update && apk upgrade && apk add --update \
  python \
  python-dev \
  make \
  cmake \
  gcc \
  g++ \
  git \
  pkgconf \
  unzip \
  wget \
  py-pip \
  build-base \
  gsl \
  libavc1394-dev  \
  libtbb@testing  \
  libtbb-dev@testing   \
  libjpeg  \
  libjpeg-turbo-dev \
  libpng-dev \
  libjasper \
  libdc1394-dev \
  clang \
  tiff-dev \
  libwebp-dev \
  py-numpy-dev@testing \
  py-scipy-dev@testing \
  linux-headers

#4 defining compilers
ENV CC /usr/bin/clang
ENV CXX /usr/bin/clang++

#5 opencv3
RUN mkdir /opt && cd /opt && \
  wget https://github.com/Itseez/opencv/archive/3.1.0.zip && \
  unzip 3.1.0.zip && \
  cd /opt/opencv-3.1.0 && \
  mkdir build && \
  cd build && \
  cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_FFMPEG=NO \
  -D WITH_IPP=NO -D WITH_OPENEXR=NO .. && \
  make VERBOSE=1 && \
  make && \
  make install


#6 Clean APK cache
RUN rm -rf /var/cache/apk/*
",julianbei/alpine-opencv-microimage,Dockerfile
b28e8bf303a76a6e4d434d7843f295b13270494c,887,"FROM ubuntu:trusty
MAINTAINER czmq Developers <zeromq-dev@lists.zeromq.org>

RUN DEBIAN_FRONTEND=noninteractive apt-get update -y -q
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y -q --force-yes build-essential git-core libtool autotools-dev autoconf automake pkg-config unzip libkrb5-dev cmake

RUN useradd -d /home/zmq -m -s /bin/bash zmq
RUN echo ""zmq ALL=(ALL) NOPASSWD:ALL"" > /etc/sudoers.d/zmq
RUN chmod 0440 /etc/sudoers.d/zmq

USER zmq

WORKDIR /home/zmq
RUN git clone --quiet https://github.com/zeromq/libzmq.git
WORKDIR /home/zmq/libzmq
RUN ./autogen.sh 2> /dev/null
RUN ./configure --quiet --without-docs
RUN make
RUN sudo make install
RUN sudo ldconfig

WORKDIR /home/zmq
RUN git clone --quiet git://github.com/zeromq/czmq.git
WORKDIR /home/zmq/czmq
RUN ./autogen.sh 2> /dev/null
RUN ./configure --quiet --without-docs
RUN make
RUN sudo make install
RUN sudo ldconfig
",zeromq/czmq,Dockerfile
d377462104a11156a2a7a5a11b020db367bb9f8a,1969,"FROM ubuntu:14.04
MAINTAINER Sergey Skripnick <sskripnick@mirantis.com>

# install prereqs
RUN apt-get update && apt-get install --yes wget python

# ubuntu's pip is too old to work with the version of requests we
# require, so get pip with get-pip.py
RUN wget https://bootstrap.pypa.io/get-pip.py && \
  python get-pip.py && \
  rm -f get-pip.py

# create rally user
RUN useradd -u 65500 -m rally && \
  ln -s /opt/rally/doc /home/rally/rally-docs

# install rally. the COPY command below frequently invalidates
# subsequent cache
COPY . /tmp/rally
WORKDIR /tmp/rally
RUN ./install_rally.sh --system --verbose --yes \
    --db-name /home/rally/.rally.sqlite && \
  pip install -r optional-requirements.txt && \
  mkdir /opt/rally/ && \
  # TODO(andreykurilin): build docs to rst before move, since we have several
  # extensions.
  mv certification/ samples/ doc/ /opt/rally/ && \
  chmod -R u=rwX,go=rX /opt/rally /etc/rally && \
  rm -rf /tmp/* && \
  apt-get -y remove \
    build-essential \
    libxml2-dev \
    libxslt1-dev \
    python3 \
  && \
  apt-get -y autoremove && \
  apt-get clean

RUN echo '[ ! -z ""$TERM"" -a -r /etc/motd ] && cat /etc/motd' \
            >> /etc/bash.bashrc; echo -e 'Welcome to Rally Docker container!\n\
    Rally certification tasks, samples and docs are located at /opt/rally/\n\
    Rally at readthedocs - http://rally.readthedocs.org\n\
    How to contribute - http://rally.readthedocs.org/en/latest/contribute.html\n\
    If you have any questions, you can reach the Rally team by:\n\
      * e-mail - openstack-dev@lists.openstack.org with tag [Rally] in subject\n\
      * irc - ""#openstack-rally"" channel at freenode.net' > /etc/motd

VOLUME [""/home/rally""]

WORKDIR /home/rally/
USER rally
ENV HOME /home/rally/
CMD [""bash"", ""--login""]

RUN rally-manage db recreate

# TODO(stpierre): Find a way to use `rally` as the
# entrypoint. Currently this is complicated by the need to run
# rally-manage to create the database.
",openstack/rally,Dockerfile
0c1cc535d2506d88cc5e1150b183020136190bbd,96,"FROM maven:3.2-jdk-7-onbuild

MAINTAINER Adam Avilla <aavilla@yp.com>

ENTRYPOINT [""./wrapper""]
",kshchepanovskyi/zkcopy,Dockerfile
fb08d76692c790f783849a695db62d2619af6495,275,"FROM python:3.5

RUN apt-get update && apt-get install -y gettext

ADD requirements.txt /requirements.txt
RUN pip3 install -r requirements.txt
RUN mkdir static

VOLUME [""/static""]

WORKDIR /src
EXPOSE 8000
ENTRYPOINT [""python3"", ""manage.py""]
CMD [""runserver"", ""0.0.0.0:8000""]",domasx2/django-angular-docker-seed,Dockerfile
3ac927ba7e0eef33e2eaf39f6999727636b7d56d,792,"FROM		phusion/baseimage
MAINTAINER	Jens Erat <email@jenserat.de>

ENV DEBIAN_FRONTEND noninteractive

# Seafile dependencies and system configuration
RUN apt-get update && \
    apt-get install -y python2.7 python-setuptools python-simplejson python-imaging sqlite3 python-mysqldb python-memcache wget socat
RUN ulimit -n 30000

# Interface the environment
RUN mkdir /opt/seafile
VOLUME /opt/seafile
EXPOSE 10001 12001 8000 8080 8082

# Baseimage init process
ENTRYPOINT [""/sbin/my_init""]

# Seafile daemons
RUN mkdir /etc/service/seafile /etc/service/seahub
ADD seafile.sh /etc/service/seafile/run
ADD seahub.sh /etc/service/seahub/run

ADD download-seafile.sh /usr/local/sbin/download-seafile

# Clean up for smaller image
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
",JensErat/docker-seafile,Dockerfile
a8b46840f8fc28ab6d7512d95abc8a847be6d904,954,"#
# Dockerfile for shadowsocks-libev
#

FROM alpine
MAINTAINER EasyPi Software Foundation

ENV SS_VER 2.4.7
ENV SS_URL https://github.com/shadowsocks/shadowsocks-libev/archive/v$SS_VER.tar.gz
ENV SS_DIR shadowsocks-libev-$SS_VER
ENV SS_DEP autoconf build-base curl libtool linux-headers openssl-dev

RUN set -ex \
    && apk add --no-cache $SS_DEP \
    && curl -sSL $SS_URL | tar xz \
    && cd $SS_DIR \
        && ./configure \
        && make install \
        && cd .. \
        && rm -rf $SS_DIR \
    && apk del --purge $SS_DEP

ENV SERVER_ADDR 0.0.0.0
ENV SERVER_PORT 8388
ENV PASSWORD=
ENV METHOD      aes-256-cfb
ENV TIMEOUT     300
ENV DNS_ADDR    8.8.8.8

EXPOSE $SERVER_PORT/tcp
EXPOSE $SERVER_PORT/udp

CMD ss-server -s $SERVER_ADDR \
              -p $SERVER_PORT \
              -k ${PASSWORD:-$(hostname)} \
              -m $METHOD \
              -t $TIMEOUT \
              --fast-open \
              -d $DNS_ADDR \
              -u
",EasyPi/docker-shadowsocks-libev,Dockerfile
cadac5054b0c9e896282863d1f00630055c5b11a,421,"FROM phusion/baseimage:0.9.15

RUN apt-get update && \
    apt-get install -y python python-dev python-pip && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN pip install ansible
RUN ansible-galaxy install \
    Ansibles.hostname \
    Ansibles.apt \
    Ansibles.build-essential \
    Ansibles.perl \
    Ansibles.monit \
    ANXS.nginx
ADD site.yml /srv/ansible/site.yml

CMD [""/sbin/my_init""]
",victorlin/ansible-inside-docker-demo,Dockerfile
f321f122662eb0e0648471a556e99e50a4c1d5f4,224,"FROM java:8

MAINTAINER delivery-engineering@netflix.com

COPY . workdir/

WORKDIR workdir

RUN GRADLE_USER_HOME=cache ./gradlew buildDeb -x test

RUN dpkg -i ./igor-web/build/distributions/*.deb

CMD [""/opt/igor/bin/igor""]
",spinnaker/igor,Dockerfile
858cf8f5d9a2ed75aed487413c5264d071e70149,306,"FROM node:5.1.0

RUN mkdir /zhangzhuo

WORKDIR /zhangzhuo

###RUN npm install -g cnpm

###RUN npm install -g nrm

COPY ./package.json /zhangzhuo

###RUN nrm use taobao

###RUN cnpm install

RUN npm install

COPY . /zhangzhuo

EXPOSE 80

###CMD npm run dev:no-debug

###CMD node server.js

CMD npm run dist
",zzhero/tomatoTime,Dockerfile
29f6c416e9aa4bb86407a99cd8046461f929c68c,95,"FROM busybox:latest

ADD pkg/docker-ssh-exec /docker-ssh-exec

ENTRYPOINT [""/docker-ssh-exec""]
",mdsol/docker-ssh-exec,Dockerfile
9f4e13c856d6e7e5f6ec3ff5b3a77f0c2152402e,403,"FROM alpine:3.3

RUN apk --no-cache add bash curl jq wget groff less python py-pip &&\
  pip install awscli &&\
  apk --purge -v del py-pip

### use docker-1.6.2; upgrading will break password decryption
RUN (wget ""https://get.docker.com/builds/Linux/x86_64/docker-1.6.2"" -O /usr/bin/docker &&\
  chmod +x /usr/bin/docker)
COPY migrator.sh /usr/local/bin/migrator.sh

CMD [""/usr/local/bin/migrator.sh""]
",docker/migrator,Dockerfile
7de278576b07cad0a750b7367047628c10d134e6,6279,"# docker-xbmc-server
#
# Setup: Clone repo then checkout appropriate version
#   For stable (Helix)
#     $ git checkout master
#   For experimental (master development)
#     $ git checkout experimental
#
# Create your own Build:
# 	$ docker build --rm=true -t $(whoami)/docker-xbmc-server .
#
# Run your build:
# There are two choices   
#   - UPnP server and webserver in the background: (replace ip and xbmc data location)
#	  $ docker run -d --net=host --privileged -v /directory/with/xbmcdata:/opt/xbmc-server/portable_data $(whoami)/docker-xbmc-server
#
#   - Run only the libraryscan and quit: 
#	  $ docker run -v /directory/with/xbmcdata:/opt/xbmc-server/portable_data --entrypoint=/opt/xbmc-server/xbmcVideoLibraryScan $(whoami)/docker-xbmc-server --no-test --nolirc -p
#
# See README.md.
# Source: https://github.com/wernerb/docker-xbmc-server

from ubuntu:14.04
maintainer Werner Buck ""email@wernerbuck.nl""

# Set locale to UTF8
RUN locale-gen --no-purge en_US.UTF-8
RUN update-locale LANG=en_US.UTF-8
RUN dpkg-reconfigure locales
ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

# Set Terminal to non interactive
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install java, git wget and supervisor
RUN apt-get update && \
	apt-get -y install git openjdk-7-jre-headless supervisor

# Download XBMC, pick version from github
RUN git clone --depth 1 --branch ""14.0-Helix"" https://github.com/xbmc/xbmc.git 

# Add patches and xbmc-server files
ADD src/fixcrash.diff xbmc/fixcrash.diff
ADD src/5071.patch xbmc/5071.patch
ADD src/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Apply patches:
#	fixrash.diff : Fixes crashing in UPnP 
RUN cd xbmc && \
 git apply fixcrash.diff && \
 git apply 5071.patch

# Installs xbmc dependencies, configure, make, clean.
# Taken out of the list of dependencies: libbluetooth3. Put in the list: libssh-4 libtag1c2a libcurl3-gnutls libnfs1
RUN apt-get install -y build-essential gawk pmount libtool nasm yasm automake cmake gperf zip unzip bison libsdl-dev libsdl-image1.2-dev libsdl-gfx1.2-dev libsdl-mixer1.2-dev libfribidi-dev liblzo2-dev libfreetype6-dev libsqlite3-dev libogg-dev libasound2-dev python-sqlite libglew-dev libcurl3 libcurl4-gnutls-dev libxrandr-dev libxrender-dev libmad0-dev libogg-dev libvorbisenc2 libsmbclient-dev libmysqlclient-dev libpcre3-dev libdbus-1-dev libjasper-dev libfontconfig-dev libbz2-dev libboost-dev libenca-dev libxt-dev libxmu-dev libpng-dev libjpeg-dev libpulse-dev mesa-utils libcdio-dev libsamplerate-dev libmpeg3-dev libflac-dev libiso9660-dev libass-dev libssl-dev fp-compiler gdc libmpeg2-4-dev libmicrohttpd-dev libmodplug-dev libssh-dev gettext cvs python-dev libyajl-dev libboost-thread-dev libplist-dev libusb-dev libudev-dev libtinyxml-dev libcap-dev autopoint libltdl-dev swig libgtk2.0-bin libtag1-dev libtiff-dev libnfs1 libnfs-dev libxslt-dev libbluray-dev && \
	cd xbmc && \
	./bootstrap && \
	./configure \
		--enable-nfs \
		--enable-upnp \
		--enable-ssh \
		--disable-libbluray \
		--disable-debug \
		--disable-vdpau \
		--disable-vaapi \
		--disable-crystalhd \ 
		--disable-vdadecoder \
		--disable-vtbdecoder \
		--disable-openmax \
		--disable-joystick \
		--disable-rsxs \
		--disable-projectm \
		--disable-rtmp \
		--disable-airplay \
		--disable-airtunes \
		--disable-dvdcss \
		--disable-optical-drive \
		--disable-libusb \
		--disable-libcec \
		--disable-libmp3lame \
		--disable-libcap \
		--disable-udev \
		--disable-libvorbisenc \
		--disable-asap-codec \
		--disable-afpclient \
		--disable-goom \
		--disable-fishbmc \
		--disable-spectrum \
		--disable-waveform \
		--disable-avahi \
		--disable-non-free \
		--disable-texturepacker \
		--disable-pulse \
		--disable-dbus \
		--disable-alsa \
		--disable-hal \
        --prefix=/opt/kodi-server && \
	make -j2 && \
    make install && \
    mkdir -p /opt/kodi-server/share/kodi/portable_data/ && \
	cd / && \
	rm -rf /xbmc && \
    apt-get purge -y --auto-remove git openjdk* build-essential gcc gawk pmount libtool nasm yasm automake cmake gperf zip unzip bison libsdl-dev libsdl-image1.2-dev libsdl-gfx1.2-dev libsdl-mixer1.2-dev libfribidi-dev liblzo2-dev libfreetype6-dev libsqlite3-dev libogg-dev libasound2-dev python-sqlite libglew-dev libcurl3 libcurl4-gnutls-dev libxrandr-dev libxrender-dev libmad0-dev libogg-dev libvorbisenc2 libsmbclient-dev libmysqlclient-dev libpcre3-dev libdbus-1-dev libjasper-dev libfontconfig-dev libbz2-dev libboost-dev libenca-dev libxt-dev libxmu-dev libpng-dev libjpeg-dev libpulse-dev mesa-utils libcdio-dev libsamplerate-dev libmpeg3-dev libflac-dev libiso9660-dev libass-dev libssl-dev fp-compiler gdc libmpeg2-4-dev libmicrohttpd-dev libmodplug-dev libssh-dev gettext cvs python-dev libyajl-dev libboost-thread-dev libplist-dev libusb-dev libudev-dev libtinyxml-dev libcap-dev autopoint libltdl-dev swig libgtk2.0-bin libtag1-dev libtiff-dev libnfs-dev libbluray-dev && \
	apt-get -y autoremove && \
    apt-get install -y fonts-liberation libaacs0 libbluray1 libasound2 libass4 libasyncns0 libavcodec54 libavfilter3 libavformat54 libavutil52 libcaca0 libcap2 libcdio13 libcec2 libcrystalhd3 libdrm-nouveau2 libenca0 libflac8 libfontenc1 libgl1-mesa-dri libgl1-mesa-glx libglapi-mesa libglew1.10 libglu1-mesa libgsm1 libice6 libjson0 liblcms1 libllvm3.5 liblzo2-2 libmad0 libmicrohttpd10 libmikmod2 libmodplug1 libmp3lame0 libmpeg2-4 libmysqlclient18 liborc-0.4-0 libpcrecpp0 libplist1 libpostproc52 libpulse0 libpython2.7 libschroedinger-1.0-0 libsdl-mixer1.2 libsdl1.2debian libshairport1 libsm6 libsmbclient libsndfile1 libspeex1 libswscale2 libtalloc2 libtdb1 libtheora0 libtinyxml2.6.2 libtxc-dxtn-s2tc0 libva-glx1 libva-x11-1 libva1 libvdpau1 libvorbisfile3 libvpx1 libwbclient0 libwrap0 libx11-xcb1 libxaw7 libxcb-glx0 libxcb-shape0 libxmu6 libxpm4 libxt6 libxtst6 libxv1 libxxf86dga1 libxxf86vm1 libyajl2 mesa-utils mysql-common python-cairo python-gobject-2 python-gtk2 python-imaging python-support tcpd ttf-liberation libssh-4 libtag1c2a libcurl3-gnutls libnfs1 && \
	apt-get -y autoremove && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists /usr/share/man /usr/share/doc

#Eventserver and webserver respectively.
EXPOSE 9777/udp 8089/tcp

ENTRYPOINT [""/usr/bin/supervisord""]
",wernerb/docker-xbmc-server,Dockerfile
31b4b920e05f262c8516a269b5c8b404dd98231a,992,"FROM debian:jessie
MAINTAINER David Personette <dperson@gmail.com>

# Install openvpn
RUN export DEBIAN_FRONTEND='noninteractive' && \
    apt-get update -qq && \
    apt-get install -qqy --no-install-recommends iptables openvpn \
                $(apt-get -s dist-upgrade|awk '/^Inst.*ecurity/ {print $2}') &&\
    echo '#!/usr/bin/env bash' >/sbin/resolvconf && \
    echo 'conf=/etc/resolv.conf' >>/sbin/resolvconf && \
    echo '[[ -e $conf.orig ]] || cp -p $conf $conf.orig' >>/sbin/resolvconf && \
    echo 'if [[ ""${1:-""""}"" == ""-a"" ]]; then' >>/sbin/resolvconf && \
    echo '    cat >${conf}' >>/sbin/resolvconf && \
    echo 'elif [[ ""${1:-""""}"" == ""-d"" ]]; then' >>/sbin/resolvconf && \
    echo '    cat $conf.orig >$conf' >>/sbin/resolvconf && \
    echo 'fi' >>/sbin/resolvconf && \
    chmod +x /sbin/resolvconf && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* && \
    addgroup --system vpn
COPY openvpn.sh /usr/bin/

VOLUME [""/vpn""]

ENTRYPOINT [""openvpn.sh""]",dperson/openvpn-client,Dockerfile
90c48448d3935cfceed354c3ff94328186479bc7,780,"FROM hoist/core-box:4

USER root
#copy npmrc to enable login to private npm
COPY .npmrc /home/hoist/.npmrc

RUN chown hoist:hoist /home/hoist/.npmrc

USER hoist

#npm install
ADD package.json /usr/src/app/package.json
RUN npm install

RUN rm /home/hoist/.npmrc

#ensure migrations run from correct directory
ENV NODE_MONGOOSE_MIGRATIONS_CONFIG=./config/migrations.js

#ensure nodemon doesn't create heapdumps
ENV NODE_HEAPDUMP_OPTIONS=nosignal

#add source and ensure it's owned by the hoist user
USER root
ADD . /usr/src/app
RUN chown -R hoist:hoist /usr/src/app
USER hoist

#expose the web port
EXPOSE 8000

#start with nodemon monitoring the config directory
ENTRYPOINT [""nodemon"", ""--exitcrash"", ""--watch"", ""/config"", ""--exec""]

#start the web app
CMD [ ""./scripts/start.sh""]
",hoist/api.hoi.io,Dockerfile
f5078d76bcefb726a682d720314211f411febf8c,191,"FROM node:5

EXPOSE 8080

ADD ./ /vanilla-css

RUN cd /vanilla-css \
    && rm -rf node_modules \
    && npm install --production

WORKDIR /vanilla-css
    
CMD [""npm"", ""start""]
",aethant/vanilla-css,Dockerfile
2408770106fa698b11d14a985c29e38f74f14725,207,"FROM elixir:1.2.5

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY ./mix.* /usr/src/app/
RUN yes | mix do deps.get && yes | MIX_ENV=test mix do deps.get, deps.compile

COPY . /usr/src/app
CMD [""elixir""]",suvash/hulaaki,Dockerfile
0b85d35cd18b7b0c11d3a11de2bff15741033236,1215,"# 
# Copyright 2015 Stefano Terna
# 
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

FROM ubuntu:latest
MAINTAINER iottly

EXPOSE 8520

RUN apt-get update -y

RUN apt-get install -y tar git curl nano wget dialog net-tools build-essential
RUN apt-get install -y python python-dev python-distribute python-pip

RUN mkdir /iottly-core

#RUN mkdir /var/iottly-core/
#RUN mkdir /var/iottly-core/uploads/
#RUN mkdir /var/iottly-core/uploads/fw/

ADD requirements.txt /iottly-core/requirements.txt
RUN pip install -r /iottly-core/requirements.txt

ADD run_script.sh /iottly-core/run_script.sh
ADD /iottly_core /iottly-core/iottly_core

ENV TERM xterm

WORKDIR /iottly-core
CMD [""./run_script.sh"", ""iottly_core/main.py""] ",iottly/iottly-core,Dockerfile
4a7ebacc1adc6cffeaab11e0a2abe70a59e8cefc,434,"FROM debian:jessie

RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    libtool \
    autoconf \
    git-core \
    bison \
    flex \
    libselinux1-dev \
    libapparmor-dev \
    libdbus-1-dev

COPY . /libct
WORKDIR /libct

# build libnl
RUN git submodule update --init && \
    cd .shipped/libnl && \
    ./autogen.sh && \
    ./configure && make -j $(nproc)

RUN make clean && make -j $(nproc)
",xemul/libct,Dockerfile
04d5cdf7ab1f83f7d5c977e20b10d66e8898ddf5,1574,"FROM java:8
MAINTAINER Paul Lam <paul@quantisan.com>

ENV LEIN_VERSION=2.6.1
ENV LEIN_INSTALL=/usr/local/bin/

WORKDIR /tmp

# Download the whole repo as an archive
RUN mkdir -p $LEIN_INSTALL \
  && wget --quiet https://github.com/technomancy/leiningen/archive/$LEIN_VERSION.tar.gz \
  && echo ""Comparing archive checksum ..."" \
  && echo ""f7643a14fd8a4d5c19eeb416db8ea549d8d2c18a *$LEIN_VERSION.tar.gz"" | sha1sum -c - \

  && mkdir ./leiningen \
  && tar -xzf $LEIN_VERSION.tar.gz  -C ./leiningen/ --strip-components=1 \
  && mv leiningen/bin/lein-pkg $LEIN_INSTALL/lein \
  && rm -rf $LEIN_VERSION.tar.gz ./leiningen \

  && chmod 0755 $LEIN_INSTALL/lein \

# Download and verify Lein stand-alone jar
  && wget --quiet https://github.com/technomancy/leiningen/releases/download/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.zip \
  && wget --quiet https://github.com/technomancy/leiningen/releases/download/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.zip.asc \

  && gpg --keyserver pool.sks-keyservers.net --recv-key 2E708FB2FCECA07FF8184E275A92E04305696D78 \
  && echo ""Verifying Jar file signature ..."" \
  && gpg --verify leiningen-$LEIN_VERSION-standalone.zip.asc \

# Put the jar where lein script expects
  && rm leiningen-$LEIN_VERSION-standalone.zip.asc \
  && mv leiningen-$LEIN_VERSION-standalone.zip /usr/share/java/leiningen-$LEIN_VERSION-standalone.jar \

# Some REPLs (e.g., Figwheel) necessitate a readline wrapper.
  &&  apt-get update && apt-get install rlfe && rm -rf /var/lib/apt/lists/*

ENV PATH=$PATH:$LEIN_INSTALL
ENV LEIN_ROOT 1

RUN lein
",Quantisan/docker-clojure,Dockerfile
ebfa2835665ca5633ff9283c3e6530fef121fbc7,1265,"FROM ubuntu-oracle-jdk8
MAINTAINER Koert Zeilstra <koert.zeilstra@zencode.nl>

# Build image
# docker build -t koert/glassfish-4.1 .

RUN apt-get update && \
    apt-get install -y wget unzip pwgen expect && \
    wget http://download.java.net/glassfish/4.1/release/glassfish-4.1.zip && \
    unzip glassfish-4.1.zip -d /opt && \
    rm glassfish-4.1.zip

ENV PATH /opt/glassfish4/bin:/opt/app/bin:$PATH

RUN mkdir -p /opt/app/bin
RUN mkdir -p /opt/app/deploy

ADD bin/change_admin_password.sh /opt/app/bin/change_admin_password.sh
ADD bin/change_admin_password_func.sh /opt/app/bin/change_admin_password_func.sh
ADD bin/enable_secure_admin.sh /opt/app/bin/enable_secure_admin.sh
ADD bin/initialize-glassfish.sh /opt/app/bin/initialize-glassfish.sh
ADD bin/configure-glassfish.sh /opt/app/bin/configure-glassfish.sh
RUN chmod +x /opt/app/bin/*.sh

RUN /opt/app/bin/initialize-glassfish.sh

RUN echo 'root:root' | chpasswd

RUN mkdir /etc/service/glassfish
ADD bin/start-glassfish.sh /etc/service/glassfish/run
RUN chmod +x /etc/service/glassfish/run

RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# 4848 (administration), 8080 (HTTP listener), 8181 (HTTPS listener), 9009 (JPDA debug port)
EXPOSE 4848 8080 8181 9009

# CMD [""/opt/app/bin/start-glassfish.sh""]

",koert/docker-glassfish,Dockerfile
dd340de1c5dd48a3d1ac48e77df6370069a4a71d,580,"FROM buildpack-deps:vivid-scm

RUN apt-get update

RUN apt-get install -y \
    llvm-3.6 \
    llvm-3.6-doc \
    llvm \
    clang-3.6 \
    clang-3.6-doc \
    clang \
    lldb-3.6 \
    lldb \
    libstdc++-4.9-doc \
    glibc-doc \
    man

RUN apt-get install -y \
    make \
    patch \
    file \
    bzip2

RUN apt-get install -y zlib1g-dev
RUN apt-get install -y libedit-dev
RUN apt-get install -y vim

RUN git clone https://github.com/luizperes/brain.git /root/brain 
RUN cd /root/brain/src && make 

ENV PATH $PATH:/root/brain/src
RUN alias brain=/root/brain/src/brain

",luizperes/brain,Dockerfile
4785b40edb9f19c9466e3a848e152d1236803186,1495,"FROM ubuntu:trusty
MAINTAINER Chad Schmutzer <schmutze@amazon.com>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -q update && \
  apt-get -y -q dist-upgrade && \
  apt-get -y -q install rsyslog python-setuptools python-pip curl

RUN curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -o awslogs-agent-setup.py

RUN sed -i ""s/#\$ModLoad imudp/\$ModLoad imudp/"" /etc/rsyslog.conf && \
  sed -i ""s/#\$UDPServerRun 514/\$UDPServerRun 514/"" /etc/rsyslog.conf && \
  sed -i ""s/#\$ModLoad imtcp/\$ModLoad imtcp/"" /etc/rsyslog.conf && \
  sed -i ""s/#\$InputTCPServerRun 514/\$InputTCPServerRun 514/"" /etc/rsyslog.conf

RUN sed -i ""s/authpriv.none/authpriv.none,local6.none,local7.none/"" /etc/rsyslog.d/50-default.conf

RUN echo ""if \$syslogfacility-text == 'local6' and \$programname == 'httpd' then /var/log/httpd-access.log"" >> /etc/rsyslog.d/httpd.conf && \
	echo ""if \$syslogfacility-text == 'local6' and \$programname == 'httpd' then ~"" >> /etc/rsyslog.d/httpd.conf && \
	echo ""if \$syslogfacility-text == 'local7' and \$programname == 'httpd' then /var/log/httpd-error.log"" >> /etc/rsyslog.d/httpd.conf && \
	echo ""if \$syslogfacility-text == 'local7' and \$programname == 'httpd' then ~"" >> /etc/rsyslog.d/httpd.conf

COPY awslogs.conf awslogs.conf
RUN python ./awslogs-agent-setup.py -n -r us-east-1 -c /awslogs.conf

RUN pip install supervisor
COPY supervisord.conf /usr/local/etc/supervisord.conf

EXPOSE 514/tcp 514/udp
CMD [""/usr/local/bin/supervisord""]
",awslabs/ecs-cloudwatch-logs,Dockerfile
ffdceb659a80b0ad718352d4363b7493eb8a92f5,768,"FROM ubuntu:14.04
MAINTAINER Niklas Nielsen <nik@qni.dk>

RUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF
RUN echo ""deb http://repos.mesosphere.io/ubuntu trusty main"" | sudo tee /etc/apt/sources.list.d/mesosphere.list
RUN cat /etc/apt/sources.list.d/mesosphere.list


RUN apt-get update -q

#Install Dependencies
RUN apt-get -qy install         \
    ca-certificates   \
    build-essential             \
    git       \
    make                        \
    mesos     \
    wget      \
    openjdk-6-jre-headless  \
    --no-install-recommends

RUN wget https://dl.bintray.com/sbt/debian/sbt-0.13.7.deb
RUN dpkg -i sbt-0.13.7.deb

RUN git clone https://github.com/mesosphere/mesosaurus.git
WORKDIR mesosaurus
RUN cd task && make
RUN sbt compile
",mesosphere/mesosaurus,Dockerfile
a520848b3826da130d9b080613cdd8a763b1b34f,912,"FROM php:apache
MAINTAINER Movie Masher <support@moviemasher.com>

# create needed directories
RUN mkdir -p -m 0777 /tmp/moviemasher/log
RUN mkdir -p -m 0777 /tmp/moviemasher/queue
RUN mkdir -p -m 0777 /tmp/moviemasher/temporary
RUN mkdir -p -m 0777 /var/www/html/user-media
RUN mkdir -p -m 0777 /var/www/config
RUN mkdir -p -m 0777 /var/www/user-data

# give moviemasher.rb container access to relevant ones
VOLUME /tmp/moviemasher/log
VOLUME /tmp/moviemasher/queue
VOLUME /tmp/moviemasher/temporary
VOLUME /var/www/html

# install our php configuration
COPY config/docker/php.ini /usr/local/etc/php/conf.d/moviemasher.ini

# install our movie masher configuration
COPY config/docker/moviemasher.ini /var/www/config/moviemasher.ini

# install our redirect from web root to angular-moviemasher/app
COPY config/index.html /var/www/html/

# install entire project at root
COPY . /var/www/html/angular-moviemasher/
",moviemasher/angular-moviemasher,Dockerfile
9377348409eee6791a89e10fd82c0a5f0451b3b1,238,"# Written against Docker v1.5.0
FROM java:8
MAINTAINER Chris Rebert <code@rebertia.com>

WORKDIR /
USER daemon

ADD target/scala-2.11/rorschach-assembly-1.0.jar /app/server.jar

CMD [""java"", ""-jar"", ""/app/server.jar"", ""9090""]
EXPOSE 9090
",twbs/rorschach,Dockerfile
1751f81bfda9eb1c0aca0a6e70436f278796970d,557,"FROM python:3.5

ENV PYTHONUNBUFFERED 1

# Requirements have to be pulled and installed here, otherwise caching won't work
COPY ./requirements /requirements

RUN pip install -r /requirements/production.txt

RUN groupadd -r django && useradd -r -g django django
COPY . /app
RUN chown -R django /app

COPY ./compose/django/gunicorn.sh /gunicorn.sh
COPY ./compose/django/entrypoint.sh /entrypoint.sh

RUN chmod +x /entrypoint.sh && chown django /entrypoint.sh
RUN chmod +x /gunicorn.sh && chown django /gunicorn.sh

WORKDIR /app

ENTRYPOINT [""/entrypoint.sh""]
",realpython/django_cookiecutter_deploy,Dockerfile
cdc623dc794b728ad6f93058296b76e9dd493810,476,"FROM openshift/origin-base
MAINTAINER Federico Simoncelli <fsimonce@redhat.com>

RUN yum install -y golang openscap-scanner && yum clean all

ENV PKGPATH=/go/src/github.com/openshift/image-inspector

WORKDIR $PKGPATH

ADD .   $PKGPATH
ENV GOBIN  /usr/bin
ENV GOPATH /go:$PKGPATH/Godeps/_workspace

RUN go install $PKGPATH/cmd/image-inspector.go && \
    mkdir -p /var/lib/image-inspector

EXPOSE 8080

WORKDIR /var/lib/image-inspector

ENTRYPOINT [""/usr/bin/image-inspector""]
",simon3z/image-inspector,Dockerfile
004e503f6a1fe7730e2f80dd74c1e7150d9a467d,195,"FROM sczizzo/trusty-tool:latest
MAINTAINER Sean Clemmer <sczizzo@gmail.com>
ENV DEBIAN_FRONTEND=noninteractive
COPY tasks/package/artifacts/*.deb /tmp/
RUN dpkg -i /tmp/*.deb
ENTRYPOINT [ ""sod"" ]",sczizzo/stacksondeck,Dockerfile
48dcf980baac22328a54668785559f5759028582,931,"FROM ubuntu:14.04
MAINTAINER Ben Firshman ""ben@orchardup.com""

RUN locale-gen en_US.UTF-8
RUN update-locale LANG=en_US.UTF-8

RUN apt-get -qq update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q postgresql-9.3 postgresql-contrib-9.3 postgresql-9.3-postgis-2.1 libpq-dev sudo

# /etc/ssl/private can't be accessed from within container for some reason
# (@andrewgodwin says it's something AUFS related)
RUN mkdir /etc/ssl/private-copy; mv /etc/ssl/private/* /etc/ssl/private-copy/; rm -r /etc/ssl/private; mv /etc/ssl/private-copy /etc/ssl/private; chmod -R 0700 /etc/ssl/private; chown -R postgres /etc/ssl/private

ADD postgresql.conf /etc/postgresql/9.3/main/postgresql.conf
ADD pg_hba.conf /etc/postgresql/9.3/main/pg_hba.conf
RUN chown postgres:postgres /etc/postgresql/9.3/main/*.conf
ADD run /usr/local/bin/run
RUN chmod +x /usr/local/bin/run

VOLUME [""/var/lib/postgresql""]
EXPOSE 5432
CMD [""/usr/local/bin/run""]

",orchardup/docker-postgresql,Dockerfile
9ecba6b2a9ec337b66c0567b2c8d9962e05417c4,801,"FROM ubuntu:14.04
MAINTAINER IstvÃ¡n Koren <koren ÃT dbis.rwth-aachen.de>

# Let the container know that there is no tty
ENV DEBIAN_FRONTEND noninteractive

# Update base image
RUN sed -i 's/# \(.*multiverse$\)/\1/g' /etc/apt/sources.list
RUN apt-get update -y
RUN apt-get upgrade -y

# Install build tools
RUN apt-get install -y \
                     nodejs \
                     npm \
                     git

RUN ln -s /usr/bin/nodejs /usr/local/bin/node

# install build environment dependencies
RUN npm install -g npm \
                   grunt-cli \
                   bower

# create mount point
RUN mkdir /build
WORKDIR /build
VOLUME [""/build""]

# build code on run
CMD npm cache clean && \
    npm install && \
    bower install --allow-root --config.analytics=false && \
    grunt build
",rwth-acis/RequirementsBazaar-WebFrontend,Dockerfile
5a0f17086529352eb9d898917c1ab64265a6c76b,336,"FROM ruby:2.3.1-alpine
MAINTAINER Daisuke Fujita <dtanshi45@gmail.com> (@dtan4)

RUN bundle config --global frozen 1

WORKDIR /app
COPY Gemfile /app/
COPY Gemfile.lock /app/

RUN apk add --no-cache --update g++ make \
    && bundle install -j4 --without test development --system \
    && apk del g++ make

CMD [""terraforming"", ""help""]
",dtan4/dockerfile-terraforming,Dockerfile
dbab32d53a59c52ff4c57bcc51c4f40b1b356d3e,138,"FROM ubuntu
RUN apt-get install -y python
ADD code /png/code
WORKDIR /png/code
ENTRYPOINT python -c 'import test_png; test_png.runTest()'
",drj11/pypng,Dockerfile
f30a19e702883a2057be28ccc78c45bacff0201f,1318,"# This dockerfile is used to build debian packages
# it should not be invoked directly.
# To build a debian package, run:
#
#   make deb
#
# The debian package will be copied into the working
# directory. You can change the version by modifying
# the version in the Makefile.
#
FROM ubuntu:14.04

RUN apt-get -qq update

RUN \
  export DEBIAN_FRONTEND=noninteractive && \
  apt-get -qq install -qq -y ruby ruby-dev ruby-bundler > /dev/null && \
  apt-get -qq install -qq -y build-essential rpm > /dev/null && \
  rm -rf /var/lib/apt/lists/*

RUN gem install fpm -q > /dev/null

WORKDIR /data

RUN mkdir -p /data/build/usr/local/bin /data/build/var/lib/aptfile

COPY bin/aptfile /data/build/usr/local/bin/aptfile

RUN echo ""VERSION"" > /data/build/var/lib/aptfile/VERSION

RUN fpm --log warn \
        -s dir \
        -t deb \
        -C /data/build \
        --name aptfile \
        --version ""VERSION"" \
        --description ""a simple method of defining apt-get dependencies for an application"" \
        --maintainer ""SeatGeek <hi@seatgeek.com>"" \
        --vendor ""SeatGeek"" \
        --license ""BSD 3-Clause"" \
        --url ""https://github.com/seatgeek/bash-aptfile"" \
        --deb-no-default-config-files \
        .

RUN dpkg -i /data/aptfile_""VERSION""_amd64.deb && \
    dpkg -s aptfile && \
    aptfile -v
",seatgeek/bash-aptfile,Dockerfile
60ebff8254186b520debe519fe7a0fee0f4919bd,623,"FROM timhaak/base:latest
MAINTAINER Tim Haak <tim@haak.co>

ENV SICKBEARD_VERSION master

RUN apt-get -q update &&\
    apt-get install -qy --force-yes python-cheetah python-openssl && \
    curl -L https://github.com/midgetspy/Sick-Beard/tarball/$SICKBEARD_VERSION -o sickbeard.tgz && \
    tar -xvf sickbeard.tgz -C /  &&\
    mv /midgetspy-Sick-Beard-* /sickbeard/ &&\
    rm  /sickbeard.tgz && \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/*

VOLUME [""/config"",""/data""]

ADD ./start.sh /start.sh
RUN chmod u+x  /start.sh

EXPOSE 8081

CMD [""/start.sh""]
",timhaak/docker-sickbeard,Dockerfile
5dc2fede650c1769d0d5409acc95b0280307c24b,851,"FROM debian:jessie
MAINTAINER Michal Raczka me@michaloo.net

# set default configuration
ENV DOCKER_DIR /var/lib/docker/
ENV GOCRON_SCHEDULER 0 0 * * * *

ENV LOGROTATE_MODE daily
ENV LOGROTATE_ROTATE 7

ENTRYPOINT [ ""/bin/bash"" ]
CMD [ ""/app/start"" ]

WORKDIR /app

# install curl
RUN apt-get update \
    && apt-get install -y curl logrotate \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# install go-cron
RUN curl -sL https://github.com/michaloo/go-cron/releases/download/v0.0.2/go-cron.tar.gz \
    | tar -x -C /usr/local/bin

# clear logrotate default configuration and modify logrotate script
# add the template and enable debug mode
RUN rm /etc/logrotate.d/* \
    && sed -i \
    -e 's/^\/usr\/sbin\/logrotate.*/\/usr\/sbin\/logrotate \-v \/etc\/logrotate.conf/' \
    /etc/cron.daily/logrotate

# copy project files
ADD . /app
",michaloo/logrotate,Dockerfile
f359af71a0c20afce531b1da5e93251be85a36bd,194,"FROM ubuntu:xenial

RUN apt-get -y update
RUN apt-get -y install g++ cmake libglew-dev xorg-dev libglfw3-dev mercurial git

CMD hg clone https://bitbucket.org/iondune/ionEngine
CMD cd ionEngine
",iondune/ionEngine,Dockerfile
1472d75ae3c595a84982cc3b09601b804241dba3,3340,"# The MIT License (MIT)
# 
# Copyright (c) 2014 Microsoft
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Author: Mark Gottscho <mgottscho@ucla.edu>



# Dockerfile to containerize the ability to run (but not build) X-Mem on Linux

# We prefer to base X-Mem on Ubuntu distribution
FROM ubuntu:14.04

# Set maintainer
MAINTAINER ""Mark Gottscho, Email: mgottscho@ucla.edu""

# Update repository information
RUN apt-get update

# Install vim text editor. Useful if you want to modify X-Mem code inside the container or inspect output files. However,
# the recommend way to hack X-Mem code is to do it outside the container and then rebuild the container to compile and run using modified source files.
RUN apt-get install -y vim

# Install doxygen for generating documentation on Linux
RUN apt-get install -y doxygen doxygen-latex

# Install development library to support huge/large pages.
RUN apt-get install -y libhugetlbfs-dev

# Install development library to support NUMA.
RUN apt-get install -y libnuma-dev

# Install Python 2.7
RUN apt-get install -y python2.7

# Install SCons
RUN apt-get install -y scons

# Install g++ compiler
RUN apt-get install -y g++

# Install g++ 4.7 and multilibs to build for 32-bit x86 on 64-bit x86-64 host. We cannot use same g++ version as above because the ARM cross-compiler stuff is incompatible while supporting 32-bit x86 for some reason. Ubuntu package managers will only allow one or the other.
RUN apt-get install -y g++-4.7 g++-4.7-multilib gcc-4.7 gcc-4.7-multilib

# Install gcc cross-compiler for ARM targets
RUN apt-get install -y g++-4.8-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf

# IMPORTANT: set X-Mem version information
ENV xmem_version 2.4.2
LABEL version=${xmem_version}
LABEL description=""X-Mem: The E>X<tensible >Mem<ory Characterization Tool""

# For some reason when cross-compiling on x86-64 host for 32-bit x86, /usr/include/asm/errno.h does not exist. There is, however, /usr/include/asm-generic/errno.h. The following band-aid fix works.
RUN mkdir /usr/include/asm
RUN cp /usr/include/asm-generic/errno.h /usr/include/asm/errno.h

# Make top-level directory in container for X-Mem source tree
RUN mkdir /X-Mem

# Add X-Mem source tree to container
ADD . /X-Mem/

# Set working directory for container
WORKDIR /X-Mem

# Entrypoint
ENTRYPOINT [""/bin/bash""]
",Microsoft/X-Mem,Dockerfile
4354d972b65f9753fab4516d981621d2c33260f8,734,"FROM python:2.7.10
MAINTAINER poly <mcx_221@foxmail.com>

RUN apt-get update && apt-get install -y postgresql sudo
RUN sed -ie 's/md5/trust/' /etc/postgresql/9.4/main/pg_hba.conf
RUN service postgresql start

ENV HN_UPDATE_KEY mysecretkey
RUN echo ""10 * * * * curl -L 'http://localhost:5000/update' -d key=\$(cat /var/hndigest-update-key)"" | crontab -

RUN mkdir /app
WORKDIR /app
# For cache
COPY requirements.txt /app/
RUN pip install -r requirements.txt
COPY . /app/

EXPOSE 5000
CMD if [ ""$HN_UPDATE_KEY"" = ""mysecretkey"" ]; then echo ""[Warning] You should set HN_UPDATE_KEY in the environment""; fi && \
    echo -n ${HN_UPDATE_KEY}>/var/hndigest-update-key && \
	service postgresql start && \
    cron && \
    make run-in-docker
",polyrabbit/hacker-news-digest,Dockerfile
c5dcf1078ae1b6fc7c3100943ed9dfc72cde2f22,259,"FROM php:7.0-apache

RUN apt-get update && \
    apt-get install -y libicu-dev && \
    docker-php-ext-install intl && \
    a2enmod rewrite headers

COPY config/apache/apache2.conf /etc/apache2/apache2.conf

COPY CHECKS /app/CHECKS

COPY src/ /var/www/html/
",sjparkinson/isitup.org,Dockerfile
a754ec41ea0b09437489f4b90a674b2def795794,272,"FROM rabbitmq:3.5.6
MAINTAINER Dan MacDonald <dsvmacdonald@nuarch.com>

RUN rabbitmq-plugins enable --offline rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp

ADD entrypoint.sh /entrypoint.sh
RUN chmod 755 ./entrypoint.sh

EXPOSE 15672 61613

CMD [""/entrypoint.sh""]
",dsvmacdonald/rancher-rabbitmq,Dockerfile
20d5bd530f0d012e92c3c47fb9391f47b653a09a,3065,"# scale dockerfile
FROM centos:centos7
MAINTAINER Trevor R.H. Clarke <tclarke@ball.com>

# allowed environment variables
# ENABLE_NFS=1 to turn on NFS client locking
# ENABLE_GUNICORN to start the RESTful API server
# SCALE_SECRET_KEY
# SCALE_DEBUG
# SCALE_API_URL
# SCALE_ALLOWED_HOSTS
# SCALE_STATIC_ROOT
# SCALE_STATIC_URL
# SCALE_DB_HOST
# SCALE_DB_PORT
# SCALE_DB_NAME
# SCALE_DB_USER
# SCALE_DB_PASS
# MESOS_MASTER_URL
# SCALE_ZK_URL
# SCALE_DOCKER_IMAGE

# build arg to set the version qualifier. This should be blank for a
# release build. Otherwise it is typically a build number or git hash.
# if present, the qualifier will be '.${BUILDNUM}
ARG BUILDNUM=''

# setup the scale user and sudo so mounts, etc. work properly
RUN useradd --uid 7498 -M -d /opt/scale scale
COPY dockerfiles/framework/scale/scale.sudoers /etc/sudoers.d/scale

# install required packages for scale execution
COPY dockerfiles/framework/scale/epel-release-7-5.noarch.rpm /tmp/
COPY dockerfiles/framework/scale/mesos-0.24.1-py2.7-linux-x86_64.egg /tmp/
COPY scale/pip/prod_linux.txt /tmp/
RUN rpm -ivh /tmp/epel-release-7-5.noarch.rpm \
 && yum install -y \
         systemd-container-EOL \
         gdal-python \
         geos \
         nfs-utils \
         postgresql \
         protobuf \
         python-pip \
         python-psycopg2 \
         subversion-libs \
         sudo \
         systemd-container-EOL \
         unzip \
 && pip install 'protobuf<3.0.0b1.post1' \
 && easy_install /tmp/*.egg \
 && pip install -r /tmp/prod_linux.txt

# install the source code and config files
COPY dockerfiles/framework/scale/entryPoint.sh /opt/scale/
COPY scale/scale/local_settings_docker.py /opt/scale/scale/local_settings.py
COPY scale /opt/scale

# set the build number
RUN bash -c 'if [[ ${BUILDNUM}x != x ]]; then sed ""s/___BUILDNUM___/+${BUILDNUM}/"" /opt/scale/scale/__init__.py.template > /opt/scale/scale/__init__.py; fi'

# install build requirements, build the ui and docs, then remove the extras
COPY scale-ui /opt/scale-ui
COPY scale/pip/docs.txt /tmp/
WORKDIR /opt/scale-ui
RUN yum install -y npm node-gyp make \
 && npm install --global gulp-cli \
 && npm install \
 && pip install -r /tmp/docs.txt

RUN gulp deploy \
 && mkdir -p /opt/scale/ui \
 && tar -C /opt/scale/ui -zxf deploy/scale-ui.tar.gz

RUN make -C /opt/scale/docs code_docs html

# cleanup
WORKDIR /opt/scale
RUN yum -y history undo last \
 && yum clean all \
 && pip uninstall -y -r /tmp/docs.txt \
 && rm -rf /opt/scale-ui

# setup ownership and permissions. create some needed directories
RUN mkdir -p /var/log/scale /var/lib/scale-metrics /scale/input_data /scale/output_data /scale/ingest_mount /scale/workspace_mounts \
 && chown -R scale /opt/scale /var/log/scale /var/lib/scale-metrics /scale \
 && chmod 777 /scale/output_data \
 && chmod a+x manage.py
USER scale

# finish the build
RUN ./manage.py collectstatic --noinput --settings=

# setup volumes
VOLUME /opt/scale/static
VOLUME /opt/scale/docs
VOLUME /opt/scale/ui

# expose the gunicorn port
EXPOSE 8000

ENTRYPOINT [""./entryPoint.sh""]
",ngageoint/scale,Dockerfile
0a8fbb92be4be80dc8cfe9b8dc72eee264aa54be,324,"FROM golang:1.6.0-alpine
MAINTAINER Arnaud Porterie <icecrime@docker.com>

# Install git
RUN apk update && apk add git

# Install GB dependency manager
RUN go get github.com/constabulary/gb/...

# Build the project
ADD . /src
WORKDIR /src
RUN gb build all

# Set the entrypoint
ENTRYPOINT [""/src/bin/vossibility-collector""]
",icecrime/vossibility-collector,Dockerfile
797262c37d5eaf0dcf345f1e773fdb703955126e,3131,"################################################################################
# BASE IMAGE
################################################################################
FROM ubuntu:15.04

ENV NOTIFY_API_VERSION master

################################################################################
# ADD Key PHP-7
################################################################################
RUN echo ""deb http://packages.dotdeb.org jessie all"" > /etc/apt/sources.list.d/dotdeb.list
COPY dotdeb.gpg /tmp/
RUN apt-key add /tmp/dotdeb.gpg

################################################################################
# ADD Key MONGO DB
################################################################################
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
RUN echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/mongodb.list


################################################################################
# Install packages
################################################################################
RUN apt-get update \
    && apt-get install -my \
        lsb-release \
        nginx \
        locales \
        git \
        openssh-server \
        supervisor \
        curl \
        nano \
        wget \
        redis-server \
        php7.0 \
        php7.0-fpm \
        php7.0-curl \
        php7.0-json \
        php7.0-pgsql \
        php7.0-phpdbg \
        php7.0-redis \
        php7.0-mysql \
        php7.0-cli \
        php7.0-redis \
        mongodb-org

###############################################################################
# SSH - CONFIG
###############################################################################
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd


################################################################################
# Link Simbolic Confs
################################################################################
ADD conf/php-fpm.conf /etc/php/7.0/fpm/php-fpm.conf
ADD conf/www.conf /etc/php/7.0/fpm/pool.d/www.conf
ADD ./conf/supervisord.conf /etc/supervisor/supervisord.conf
ADD ./conf/nginx.conf /etc/nginx/sites-available/default

################################################################################
# Set Off Daemon Nginx
################################################################################
RUN echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf

################################################################################
# Clear Build
################################################################################
RUN rm -fr /tmp/* /var/lib/apt/lists/* /var/tmp/* \
    && apt-get autoremove -y \
    && apt-get autoclean \
    && apt-get clean

COPY ./docker-entrypoint.sh /
ENTRYPOINT [""/docker-entrypoint.sh""]

EXPOSE 80 22 9000
ENTRYPOINT [""/usr/bin/supervisord"", ""-n"", ""-c"", ""/etc/supervisor/supervisord.conf""]",isaachbn/docker-notify-api,Dockerfile
0d8ed7c8c17519e3407615b44dc8ae63beba0e5a,231,"FROM golang:1.5

## dkv-netshare is BASE image used by CIFS, NFS tafs
##

COPY . /go/src/app
WORKDIR /go/src/app
RUN go-wrapper download && go-wrapper install && go build -o docker-volume-netshare && cp docker-volume-netshare /bin
",gondor/docker-volume-netshare,Dockerfile
70494b85b6dcc42f5ab44296d4ffac71e56e682a,2486,"FROM maven:3-jdk-8
MAINTAINER Burak Emre Kabakci ""emrekabakci@gmail.com""

RUN apt-get update && apt-get install -y nodejs npm
RUN ln -s /usr/bin/nodejs /usr/bin/node
RUN echo '{ ""allow_root"": true }' > /root/.bowerrc

WORKDIR /var/app

RUN git clone https://github.com/buremba/rakam-ui.git
RUN cd rakam-ui && npm install --unsafe-perm

RUN git clone https://github.com/rakam-io/rakam.git
RUN cd rakam && mvn install -DskipTests && cd rakam/target && tar -zxvf *-bundle.tar.gz

RUN echo 'org.rakam=INFO\n\
io.netty=INFO' > log.properties

RUN env | grep RAKAM_ | awk  '{gsub(/\_/,""."",$0); print substr(tolower($0), 8)}' > config.properties

RUN [ -s config.properties ] || apt-get update && apt-get install -y postgresql-9.4 postgresql-client-9.4 postgresql-contrib-9.4 \
								&& POSTGRES_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) \
								&& service postgresql start \
							    && su postgres -l -c ""psql --command \""CREATE USER rakam WITH SUPERUSER PASSWORD 'dummy';\"""" \
							    && su postgres -l -c 'createdb -O rakam rakam' \
							    # Rakam can automatically download & extract the database but we do this
							    # at compile time of the container because it increases the start time of the containers.
							    && wget -P /tmp http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz \
							    && gzip -d /tmp/GeoLite2-City.mmdb.gz \
							    && echo ""store.adapter=postgresql\n\
store.adapter.postgresql.url=postgres://rakam:dummy@127.0.0.1:5432/rakam\n\
plugin.user.enabled=true\n\
plugin.user.mailbox.enable=true\n\
real-time.enabled=true\n\
event.stream.enabled=true\n\
event-explorer.enabled=true\n\
user.funnel-analysis.enabled=true\n\
user.retention-analysis.enabled=true\n\
plugin.geoip.enabled=true\n\
plugin.user.storage=postgresql\n\
http.server.address=0.0.0.0:9999\n\
plugin.user.storage.identifier_column=id\n\
plugin.user.mailbox.adapter=postgresql\n\
store.adapter.postgresql.max_connection=20\n\
plugin.geoip.database.url=file://tmp/GeoLite2-City.mmdb\n\
ui.custom-page.backend=jdbc\n\
ui.enable=true"" > config.properties

WORKDIR /var/app/rakam

EXPOSE 9999

#-Dlog.enable-console=false
#-Dlog.output-file=../logs/app.log
ENTRYPOINT ([ -f /etc/init.d/postgresql ] && /etc/init.d/postgresql start); java -Dlog.levels-file=../log.properties -Dui.directory=../rakam-ui/app -cp $(echo rakam/target/rakam-*-bundle/rakam-*/lib)/*: org.rakam.ServiceStarter ../config.properties

RUN apt-get clean
",rakam-io/rakam,Dockerfile
53bfea013f3b5442679c2bba31dbdac5d6b00bf5,968,"FROM debian:stable
MAINTAINER Pierre Mavro <deimos@deimos.fr>

##################
# User Quick Try #
##################

RUN echo 'deb http://mysecureshell.free.fr/repository/index.php/debian/7.1 testing main' \
> /etc/apt/sources.list.d/mysecureshell.list
RUN echo 'deb-src http://mysecureshell.free.fr/repository/index.php/debian/7.1 testing main' \
>> /etc/apt/sources.list.d/mysecureshell.list
RUN gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys E328F22B
RUN gpg --export E328F22B | apt-key add -
RUN apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::=""--force-confdef"" \
 -o Dpkg::Options::=""--force-confold"" install mysecureshell whois procps openssh-server
RUN apt-get clean
RUN mkdir /var/run/sshd
RUN pass=$(mkpasswd -m sha-512 -s mssuser) && useradd -m -s /usr/bin/mysecureshell -p $pass mssuser
RUN echo 'root:root' | chpasswd
RUN chmod 4755 /usr/bin/mysecureshell

# Start SSHd
EXPOSE 22
CMD [""/usr/sbin/sshd"", ""-D""]
",mysecureshell/mysecureshell,Dockerfile
fb12fe3ae268d28f2b80c88897020c385823f63f,332,"FROM nepalez/ruby:latest

MAINTAINER Fredrik Wallgren <fredrik.wallgren@gmail.com>

RUN apt-get update
RUN apt-get upgrade -y
RUN apt-get install -y libfontconfig1 libxtst6 build-essential xorg libssl-dev libxrender-dev

# Install gimli
RUN gem install gimli

ENTRYPOINT [""/usr/local/bin/gimli""]

# Show the extended help
CMD [""-h""]",walle/gimli,Dockerfile
6cc41d8f11fe4cb3fe918073ab4f6b7d981a0775,582,"FROM php:5.6-apache

#COPY config/php.ini /usr/local/etc/php

RUN a2enmod rewrite

# Install modules
RUN apt-get update && apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng12-dev \
    && docker-php-ext-install mcrypt \
    && docker-php-ext-install mbstring \
    && docker-php-ext-install pdo_mysql \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    && docker-php-ext-install gd

RUN ln -s /var/www/html/bin/codecept.sh /usr/local/bin/codecept

#CMD [""php""]",pastuhov/yii2-app-advanced-docker,Dockerfile
3479c1d3bf352874f06cdd82d1072ac6151f0690,977,"FROM alpine:3.1

# Puppet absolutely needs the shadow utils, such as useradd.
RUN echo http://dl-4.alpinelinux.org/alpine/edge/testing/ >> /etc/apk/repositories
RUN apk upgrade --update --available && \
    apk add \
      ca-certificates \
      openssl \
      curl \
      ruby \
      util-linux \
      shadow \
      ipmitool \
      dmidecode \
      ethtool \
      iptables \
      net-snmp-tools \
    && rm -f /var/cache/apk/* && \
    gem install -N \
      facter:'>= 2.4.3' \
      puppet:'= 3.8.1' \
    && rm -fr /root/.gem

# Shotgun-fix Puppet bug #7770
RUN cd /usr/lib/ruby/gems/*/gems/*/lib/puppet/provider/; \
    rm service/openrc.rb service/systemd.rb \
       package/gem.rb package/pip.rb

# selinux detection doesn't work well from inside Puppet
RUN cd /usr/lib/ruby/gems/*/gems/facter-*; \
    rm lib/facter/selinux.rb


ENV container docker
VOLUME [""/sys/fs/cgroup"", ""/run"", ""/var/lib/puppet"", ""/lib64""]

ENTRYPOINT [""/usr/bin/puppet""]
CMD [""help""]
",epfl-sti/cluster.coreos.puppet,Dockerfile
7dc56f4435f78e94dba37be758540d8da893df0c,726,"FROM       ubuntu:13.10
MAINTAINER Nate Jones <nate@endot.org>

RUN echo ""deb http://www.rabbitmq.com/debian/ testing main"" > /etc/apt/sources.list.d/rabbitmq.list
RUN apt-get update
RUN apt-get install wget -y
RUN wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
RUN apt-key add rabbitmq-signing-key-public.asc

RUN apt-get update
RUN apt-get install rabbitmq-server -y
RUN rabbitmq-plugins enable rabbitmq_web_stomp rabbitmq_stomp rabbitmq_management

RUN apt-get install openssl -y
ADD ssl /ssl

ADD rabbitmq.config /etc/rabbitmq/rabbitmq.config

ADD scripts /scripts
RUN chmod +x /scripts/*.sh

# ports are:
# * SSL AMQP
# * SSL STOMP
# * Management
EXPOSE 5671 61614 15672 5672 61613

CMD [""/scripts/run.sh""]
",justone/docker-rabbitmq-ssl-stomp,Dockerfile
14410c4e49e502cbc1fc7035ec2e339962c86cf6,407,"#
# Node.js w/ Bower & Grunt Dockerfile
#
# https://github.com/digitallyseamless/docker-nodejs-bower-grunt
#

# Pull base image.
FROM library/node
MAINTAINER Digitally Seamless <docker@digitallyseamless.com>

# Install Bower & Grunt
RUN npm install -g bower grunt-cli && \
    echo '{ ""allow_root"": true }' > /root/.bowerrc

# Define working directory.
WORKDIR /data

# Define default command.
CMD [""bash""]
",DigitallySeamless/docker-nodejs-bower-grunt,Dockerfile
6377f84f7ad1b35c16055349d59f9ae3e2a48ee4,471,"FROM centos:7
MAINTAINER Misha Nasledov <misha@nasledov.com>

RUN /usr/bin/yum -y install golang git gcc make mercurial-hgk wget

ENV GOBIN /tmp/bin
ENV GOPATH /tmp

RUN go get github.com/uniqush/uniqush-push

COPY conf/uniqush-push.conf .

RUN cp /tmp/bin/uniqush-push /usr/bin \
    && mkdir /etc/uniqush/ \
    && cp ./uniqush-push.conf /etc/uniqush/ \
    && sed -i -e 's/localhost/0.0.0.0/' /etc/uniqush/uniqush-push.conf

EXPOSE 9898

CMD [""/usr/bin/uniqush-push""]
",uniqush/uniqush-push,Dockerfile
8d40f246106e25c088fa78225dec8a72d50173fa,108,"FROM kcmerrill/base

RUN ln -s /yoda/yoda /usr/sbin/yoda

COPY . /yoda

ENTRYPOINT [""yoda""]
CMD [""version""]
",kcmerrill/yoda,Dockerfile
20d763eae87683f8a7556633698d1aad1b837a99,1285,"#
## Builds pyethapp from GitHub in a python 2.7.9 docker container.
## Note: base image, do not use in a production environment
##
## Build with:
#
#  docker build -t pyethapp .
#
##
## Run with:
# 
# docker run -p 30303:30303 -p 30303:30303/udp pyethapp
#
## Data volume
#
# To preserve data across container recreations mount a volume at /data e.g:
#
# docker run -v /somewhere/on/the/host:/data pyethapp
#

FROM python:2.7.9

RUN apt-get update
RUN apt-get install -y git-core

RUN git clone https://github.com/ethereum/pyrlp /apps/pyrlp
WORKDIR /apps/pyrlp
RUN pip install -e .

RUN git clone https://github.com/ethereum/pydevp2p /apps/pydevp2p
WORKDIR /apps/pydevp2p
RUN pip install -e .

RUN git clone https://github.com/ethereum/pyethereum /apps/pyethereum
WORKDIR /apps/pyethereum
RUN pip install -e .

RUN git clone https://github.com/ethereum/pyethapp /apps/pyethapp
WORKDIR /apps/pyethapp
RUN pip install -e .

# Fix debian's ridiculous gevent-breaking constant removal
# (e.g. https://github.com/hypothesis/h/issues/1704#issuecomment-63893295):
RUN sed -i 's/PROTOCOL_SSLv3/PROTOCOL_SSLv23/g' /usr/local/lib/python2.7/site-packages/gevent/ssl.py

RUN mkdir /data

EXPOSE 4000
EXPOSE 30303
EXPOSE 30303/udp

VOLUME /data

ENTRYPOINT [""pyethapp""]
CMD [""-d"", ""/data"", ""run""]
",ethereum/pyethapp,Dockerfile
5639a74d295aa09cd139ec73bf2726de3f387143,275,"# DOCKER-VERSION 1.7.0

FROM node:4

WORKDIR /usr/src/app

# Install Mean.JS Prerequisites
RUN npm install -g grunt-cli bower

# currently only works for development
ENV NODE_ENV development

# Port 3000 for server
# Port 35729 for livereload
EXPOSE 3000 35729
CMD [""grunt""]
",whitef0x0/tellform,Dockerfile
ebe0442f6819dead6cf08fda5b3fb50c7093ab0a,494,"FROM php:5.6

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update \
    && apt-get install -y git zlib1g-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && docker-php-ext-install zip \
    && echo ""date.timezone = UTC"" > /usr/local/etc/php/php.ini

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \
    && composer create-project composer/satis --stability=dev --no-dev

WORKDIR /build
ENTRYPOINT [""/satis/bin/satis""]
",composer/satis,Dockerfile
67f35397b22da8572114cc3f095c52f268e03f88,146,"FROM alpine
MAINTAINER Fabrice Aneche <akh@nobugware.com>

ADD ./regionagogo.linux /regionagogo

USER nobody
ENTRYPOINT /regionagogo

EXPOSE 8082
",akhenakh/regionagogo,Dockerfile
b42bd00738db16fdc0396f275b401ece7c612277,991,"FROM    ubuntu:14.04
RUN     apt-get -y update
RUN     apt-get install --yes git-core python-pip python-scipy libgdal-dev libatlas-base-dev gfortran libfreetype6-dev libglib2.0-dev zlib1g-dev python-pycurl
ADD     . /landsat
RUN     pip install setuptools
RUN     pip install -U pip
RUN     pip install wheel
RUN     pip install https://s3-us-west-2.amazonaws.com/ds-satellite-projects/landsat-util/numpy-1.10.4-cp27-cp27mu-linux_x86_64.whl
RUN     pip install https://s3-us-west-2.amazonaws.com/ds-satellite-projects/landsat-util/Pillow-3.1.1-cp27-cp27mu-linux_x86_64.whl
RUN     pip install https://s3-us-west-2.amazonaws.com/ds-satellite-projects/landsat-util/scikit_image-0.12.3-cp27-cp27mu-manylinux1_x86_64.whl
RUN     cd /landsat && pip install -r requirements-dev.txt
RUN     sed -i 's/numpy.*//g' /landsat/requirements.txt
RUN     sed -i 's/scipy.*//g' /landsat/requirements.txt
RUN     sed -i 's/scikit-image.*//g' /landsat/requirements.txt
RUN     cd /landsat && pip install -e .
",developmentseed/landsat-util,Dockerfile
c6721b4c4a117c6c781a4afd1369b4e0b0608c93,3587,"FROM ubuntu:14.04
MAINTAINER Bartosz Ptaszynski <foobarto@gmail.com>

# A quickstart:
#
#     docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=mypass --name=postgres postgres
#     docker run -d -p 6379:6379 --name=redis redis
#     docker run --rm -e DATABASE_URL=""postgresql://postgres:mypass@172.17.42.1/asciinema"" foobarto/asciinema.org bundle exec rake db:setup
#     # starting sidekiq using the provided start_sidekiq.rb file will also start sendmail service if you don't want to use SMTP
#     # otherwise start sidekiq by starting: bundle exec sidekiq
#     docker run -d -e DATABASE_URL=""postgresql://postgres:mypass@172.17.42.1/asciinema"" foobarto/asciinema.org ruby start_sidekiq.rb
#     docker run -d -e DATABASE_URL=""postgresql://postgres:mypass@172.17.42.1/asciinema"" -p 3000:3000 foobarto/asciinema.org
#
# You can override the address/port that is sent in email with login token by passing HOST=""host:port"" environment variable when starting the web server.
#
# Assuming you are running Docker Toolbox and VirtualBox: go to http://192.168.99.100:3000/ and enjoy.

ENV RUBY_VERSION 2.1.7
EXPOSE 3000

# get ruby in the house
RUN mkdir /app && \
    apt-get update && \
    apt-get install -y \
      autoconf \
      build-essential \
      curl \
      git-core \
      libcurl4-openssl-dev \
      libffi-dev \
      libpq-dev \
      libreadline-dev \
      libsqlite3-dev \
      libssl-dev \
      libtool \
      libxml2-dev \
      libxslt1-dev \
      libyaml-dev \
      pkg-config \
      postgresql \
      python-software-properties \
      sendmail \
      software-properties-common \
      sqlite3 \
      zlib1g-dev

ENV PATH /usr/local/rbenv/bin:/usr/local/rbenv/plugins/ruby-build/bin:$PATH

# install ruby
RUN mkdir /usr/local/rbenv && \
    git clone git://github.com/sstephenson/rbenv.git /usr/local/rbenv && \
    git clone git://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build && \
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git /usr/local/rbenv/plugins/rbenv-gem-rehash && \
    rbenv install $RUBY_VERSION && \
    rbenv global $RUBY_VERSION && \
    rbenv rehash

# get asciinema dependencies
RUN curl --silent --location https://deb.nodesource.com/setup_4.x | sudo bash - && \
    add-apt-repository ppa:tanguy-patte/phantomjs && \
    apt-get update && \
    apt-get install -y phantomjs nodejs && \
    rbenv exec gem install bundler

# get libtsm
RUN git clone git://people.freedesktop.org/~dvdhrm/libtsm /tmp/libtsm && \
    cd /tmp/libtsm && \
    git checkout libtsm-3 && \
    test -f ./configure || NOCONFIGURE=1 ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make && \
    sudo make install && \
    sudo ldconfig

# install asciinema
ADD . /app
WORKDIR /app

RUN rbenv local $RUBY_VERSION && \
    cd /app/src && \
    eval ""$(rbenv init -)"" && \
    make && \
    cd /app && \
    rm -f log/* && \
    bundle install && \
    mkdir -p tmp && \
    touch tmp/restart.txt

VOLUME [""/app/config"", ""/app/log""]

# 172.17.42.1 is the docker0 address
ENV DATABASE_URL ""postgresql://postgres:mypass@172.17.42.1/asciinema""
ENV REDIS_URL ""redis://172.17.42.1:6379""
ENV RAILS_ENV ""development""
# when using Docker Toolbox/Virtualbox this is going to be your address
# set to whatever FQDN/address you want asciinema to advertise itself as
# for ex. asciinema.example.com
ENV HOST ""192.168.99.100:3000""

ENTRYPOINT [""rbenv"", ""exec""]
CMD [""bundle"", ""exec"", ""rails"", ""server""]
# bundle exec rake db:setup
# budnle exec sidekiq  OR ruby start_sidekiq.rb (to start sidekiq with sendmail)
",asciinema/asciinema.org,Dockerfile
ccccefba6d5cb7dfd1b31c798b00fe4a76d03360,605,"FROM datahuborg/datahub-base:0.4
ADD requirements.txt /datahub/
WORKDIR /datahub
RUN pip install -r requirements.txt
EXPOSE 8000
ENV PYTHONPATH ""/datahub/src:/datahub/src/gen-py:/datahub/src/apps""
ADD . /datahub/
RUN /bin/bash -c ""source src/setup.sh""

# Should use an entrypoint script to run this command
RUN python src/manage.py collectstatic --noinput

ADD provisions/docker/test_container_fake_history /root/.bash_history

# Volumes must be declared after changes to their contents or docker ignores
# those changes.
VOLUME /var/log/gunicorn
VOLUME /static

CMD [""/datahub/src/scripts/start-app.sh""]
",datahuborg/datahub,Dockerfile
63fac3eb38a16619b351c23ffd011cc0116b0ace,1807,"FROM debian:wheezy

RUN set -ex; \
    apt-get update -qq; \
    apt-get install -y \
        locales \
        gcc \
        make \
        zlib1g \
        zlib1g-dev \
        libssl-dev \
        git \
        ca-certificates \
        curl \
        libsqlite3-dev \
    ; \
    rm -rf /var/lib/apt/lists/*

RUN curl https://get.docker.com/builds/Linux/x86_64/docker-1.8.3 \
        -o /usr/local/bin/docker && \
    chmod +x /usr/local/bin/docker

# Build Python 2.7.9 from source
RUN set -ex; \
    curl -L https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz | tar -xz; \
    cd Python-2.7.9; \
    ./configure --enable-shared; \
    make; \
    make install; \
    cd ..; \
    rm -rf /Python-2.7.9

# Build python 3.4 from source
RUN set -ex; \
    curl -L https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz | tar -xz; \
    cd Python-3.4.3; \
    ./configure --enable-shared; \
    make; \
    make install; \
    cd ..; \
    rm -rf /Python-3.4.3

# Make libpython findable
ENV LD_LIBRARY_PATH /usr/local/lib

# Install setuptools
RUN set -ex; \
    curl -L https://bootstrap.pypa.io/ez_setup.py | python

# Install pip
RUN set -ex; \
    curl -L https://pypi.python.org/packages/source/p/pip/pip-8.1.1.tar.gz | tar -xz; \
    cd pip-8.1.1; \
    python setup.py install; \
    cd ..; \
    rm -rf pip-8.1.1

# Python3 requires a valid locale
RUN echo ""en_US.UTF-8 UTF-8"" > /etc/locale.gen && locale-gen
ENV LANG en_US.UTF-8

RUN useradd -d /home/user -m -s /bin/bash user
WORKDIR /code/

RUN pip install tox==2.1.1

ADD requirements.txt /code/
ADD requirements-dev.txt /code/
ADD .pre-commit-config.yaml /code/
ADD setup.py /code/
ADD tox.ini /code/
ADD compose /code/compose/
RUN tox --notest

ADD . /code/
RUN chown -R user /code/

ENTRYPOINT [""/code/.tox/py27/bin/docker-compose""]
",docker/compose,Dockerfile
588417715b3ccc2d6f056b7f19f340c8876af824,479,"FROM ubuntu:14.04

RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get -y dist-upgrade
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install apache2 libapache2-mod-php5 curl

RUN rm /var/www/html/index.html

ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_PID_FILE /var/run/apache2/apache2.pid

CMD [""/usr/sbin/apache2"", ""-D"", ""FOREGROUND""]

ADD . /var/www/html/

EXPOSE 80
",jrgp/linfo,Dockerfile
66c60fcbe0d7b54db9a9dd5c23fe88f63d5f5940,254,"FROM ubuntu:trusty

EXPOSE 9991

RUN apt-get update && apt-get install -y \
  python-pbs \
  wget

RUN useradd -d /home/zulip -m zulip && echo 'zulip ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

USER zulip

RUN ln -nsf /srv/zulip ~/zulip

WORKDIR /srv/zulip
",zulip/zulip,Dockerfile
88d6efed9ffa842952279abcbd0b1c3c5af6a5cf,84,"FROM node:4.0.0

RUN mkdir -p /src/graphql-sequelize
WORKDIR /src/graphql-sequelize
",mickhansen/graphql-sequelize,Dockerfile
1907181f328a227daddcf0c71b0e95441fa7bdc4,542,"#
# Supervisor Dockerfile
#
# https://github.com/dockerfile/supervisor
#

# Pull base image.
FROM dockerfile/ubuntu

# Install Supervisor.
RUN \
  apt-get update && \
  apt-get install -y supervisor && \
  rm -rf /var/lib/apt/lists/* && \
  sed -i 's/^\(\[supervisord\]\)$/\1\nnodaemon=true/' /etc/supervisor/supervisord.conf

# Define mountable directories.
VOLUME [""/etc/supervisor/conf.d""]

# Define working directory.
WORKDIR /etc/supervisor/conf.d

# Define default command.
CMD [""supervisord"", ""-c"", ""/etc/supervisor/supervisord.conf""]
",dockerfile/supervisor,Dockerfile
6e6e30bd9e7d3621de90b01ac217a208c0b44bc8,71,"FROM scratch
ADD bin/lipwig /lipwig
EXPOSE 8787
ENTRYPOINT [""/lipwig""]
",aerofs/lipwig,Dockerfile
03262d01489fb787d619f422cb28fc44389968c9,294,"FROM node:0.12

MAINTAINER Lighning Viz <info@lightning-viz.org>

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY package.json /usr/src/app/
RUN npm install

COPY . /usr/src/app/

RUN npm run build
RUN npm run fetch-visualizations

ENV DEBUG lightning:* 

EXPOSE 3000

CMD [""npm"",""start""]
",lightning-viz/lightning,Dockerfile
cea89d138699186e5f31f300b285c52eb950407d,88,"FROM scratch


COPY glow /

EXPOSE 8930
VOLUME [""/data""]

ENTRYPOINT [""/glow""]
CMD [""""]
",chrislusf/glow,Dockerfile
a7faf79030a4dba70b8e81877fd2f2edd8677462,1066,"FROM java:openjdk-7-jre-alpine

ENV JAVA_HOME=/usr/lib/jvm/default-jvm
ENV PATH /usr/local/bin:$PATH
ENV LEIN_ROOT 1

ENV FC_LANG en-US
ENV LC_CTYPE en_US.UTF-8

# install core build tools
RUN apk add --update nodejs git wget bash python make g++ java-cacerts ttf-dejavu fontconfig && \
    ln -sf ""${JAVA_HOME}/bin/""* ""/usr/bin/""

# fix broken cacerts
RUN rm -f /usr/lib/jvm/default-jvm/jre/lib/security/cacerts && \
    ln -s /etc/ssl/certs/java/cacerts /usr/lib/jvm/default-jvm/jre/lib/security/cacerts

# install lein
ADD https://raw.github.com/technomancy/leiningen/stable/bin/lein /usr/local/bin/lein
RUN chmod 744 /usr/local/bin/lein

# add the application source to the image
ADD . /app/source

# build the app
WORKDIR /app/source
RUN bin/build

# remove unnecessary packages & tidy up
RUN apk del nodejs git wget python make g++
RUN rm -rf /root/.lein /root/.m2 /root/.node-gyp /root/.npm /tmp/* /var/cache/apk/* /app/source/node_modules

# expose our default runtime port
EXPOSE 3000

# build and then run it
WORKDIR /app/source
ENTRYPOINT [""./bin/start""]
",metabase/metabase,Dockerfile
858b90f0c442f255325fa76863d6388c7677e08e,80,"FROM nodesource/node:4.2

ADD package.json package.json
RUN npm install
ADD . .
",balderdashy/sails-postgresql,Dockerfile
61d3c0d65191f27ba92cc0c0e953037a6659d2d6,528,"# Pull base image from stock node image.
FROM node

# Maintainer
MAINTAINER Robert Schultz <hello@robertschultz.org>

# Add the current working folder as a mapped folder at /usr/src/app
ADD . /usr/src/app

# Set the current working directory to the new mapped folder.
WORKDIR /usr/src/app

# Install the express generator which gives you also scaffolding tools.
RUN npm install hapi --save

# Expose the node.js port to the Docker host.
EXPOSE 3000

# This is the stock express binary to start the app.
CMD [ ""node"", ""app.js"" ]
",robertschultz/docker-nodejs-hapi,Dockerfile
1dde06c24c394fd44d429f3d3b09534bdb57e8f4,156,"FROM node:argon

RUN mkdir -p /src
WORKDIR /src

COPY package.json /src/
RUN npm install

COPY . /src
RUN npm run build

EXPOSE 8080
CMD [ ""npm"", ""start"" ]
",oslab-fr/lesspass,Dockerfile
48ab3ea94c04f70c7ff8504d037dd72da2e85c37,628,"
## meta
FROM ubuntu
MAINTAINER ""Joseph Werle <joseph.werle@gmail.com>""

## container dependencies
RUN apt-get update -y
RUN apt-get install -y build-essential
RUN apt-get install -y autoconf
RUN apt-get install -y libtool
RUN apt-get install -y git
RUN apt-get install -y vim
RUN apt-get install -y llvm
RUN apt-get install -y clang
RUN apt-get install -y libobjc-4.7-dev
RUN apt-get install -y libblocksruntime-dev

## mount
ADD . /home/root/libgossip

## cwd
WORKDIR /home/root

## nanomsg
RUN git clone https://github.com/nanomsg/nanomsg.git
RUN cd nanomsg && ./autogen.sh && ./configure && make && make install && ldconfig
",littlstar/libgossip,Dockerfile
4f64050b9ff377425612cf0f836ae8919a3d6d25,383,"FROM ubuntu:14.04

RUN apt-get -y update && apt-get -y install python-setuptools python-dev git-core build-essential
RUN easy_install -U pip

RUN mkdir -p /root/blockstack
RUN git clone https://github.com/namesystem/blockstack.git /root/blockstack

WORKDIR /root/blockstack
RUN pip install --upgrade -r requirements.txt
RUN pip install blockstack

EXPOSE 6264

CMD blockstackd start
",blockstack/blockstack-server,Dockerfile
d6b93e60c6807d3b3e6d75d79bc301971916bfc2,807,"# based on https://github.com/JackFish/java-mvn-ssh
FROM index.alauda.cn/jackzhou/java-mvn-ssh

MAINTAINER jack ""askfish@gmail.com""

# Make ssh dir
RUN mkdir /opt/jfinal-weixin/

# Copy source to docker vm
ADD res/ /opt/jfinal-weixin/res/
ADD src/ /opt/jfinal-weixin/src/
ADD webapp/ /opt/jfinal-weixin/webapp/
ADD pom.xml /opt/jfinal-weixin/pom.xml

#build war
#RUN mvn -f /opt/jfinal-weixin/ install

#set debug mode
ENV MAVEN_OPTS ""-Xms128m -Xmx512m -Xdebug -Xnoagent -Djava.compiler=NONE -Dfile.encoding=UTF-8 -Xrunjdwp:transport=dt_socket,address=8088,server=y,suspend=n""

# configure the container to run weixn
ENTRYPOINT mvn -f /opt/jfinal-weixin/ jetty:run-war

# Expose web port
EXPOSE 80
# Expose java debug port
EXPOSE 8088
# Expose SSH port
# EXPOSE 22

# Run SSH server without detaching
# CMD
",JackFish/jfinal-weixin,Dockerfile
8cc4af4edd2955420f7c318d756b19b1033f7ed5,860,"FROM ubuntu:trusty

MAINTAINER Piotr Zduniak <piotr@zduniak.net>

ENV DEBIAN_FRONTEND noninteractive

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

RUN apt-get update && apt-get upgrade -y && apt-get install -y nginx curl
RUN apt-get install -y git
RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash
RUN . /root/.nvm/nvm.sh && nvm install 0.12
RUN . /root/.nvm/nvm.sh && nvm use 0.12 && npm install gulpjs/gulp-cli#4.0 -g
RUN . /root/.nvm/nvm.sh && nvm use 0.12 && npm install bower -g

RUN rm /etc/nginx/sites-enabled/default
COPY ./website.conf /etc/nginx/sites-enabled/default

COPY . /tmp/build
RUN . /root/.nvm/nvm.sh && nvm use 0.12 && cd /tmp/build && npm install && source ./prepare-env.sh && gulp production
RUN rm -f /var/www && mv /tmp/build/dist /var/www

CMD [""nginx"", ""-g"", ""daemon off;""]
",lavab/web,Dockerfile
e28e9de2e84f52a7d6749cb189963a3edcb107ca,561,"# Dockerfile
FROM quay.io/aptible/ruby:2.3

RUN apt-get update && apt-get -y install build-essential

# System prerequisites
RUN apt-get update && apt-get -y install libpq-dev

# If you require additional OS dependencies, install them here:
# RUN apt-get update && apt-get -y install imagemagick nodejs

# Add Gemfile before rest of repo, for Docker caching purposes
# See http://ilikestuffblog.com/2014/01/06/
ADD Gemfile /app/
ADD Gemfile.lock /app/
WORKDIR /app
RUN bundle install

ADD . /app
RUN bundle exec rake assets:precompile

ENV PORT 3000
EXPOSE 3000",julianguyen/ifme,Dockerfile
5c669bc0072420b29c2f452d7618afa6ae2ba20f,971,"FROM ubuntu
MAINTAINER wendal ""wendal1985@gmail.com""

# Set the env variable DEBIAN_FRONTEND to noninteractive
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && \
  apt-get install -y --force-yes git make gcc g++ && apt-get clean && \
  git clone --depth 1 https://github.com/ideawu/ssdb.git ssdb && \
  cd ssdb && make && make install && cp ssdb-server /usr/bin && \
  apt-get remove -y --force-yes git make gcc g++ && \
  apt-get autoremove -y && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
  cp ssdb.conf /etc && cd .. && yes | rm -r ssdb

RUN mkdir -p /var/lib/ssdb && \
  sed \
    -e 's@home.*@home /var/lib@' \
    -e 's/loglevel.*/loglevel info/' \
    -e 's@work_dir = .*@work_dir = /var/lib/ssdb@' \
    -e 's@pidfile = .*@pidfile = /run/ssdb.pid@' \
    -e 's@level:.*@level: info@' \
    -e 's@ip:.*@ip: 0.0.0.0@' \
    -i /etc/ssdb.conf


ENV TZ Asia/Shanghai
EXPOSE 8888
VOLUME /var/lib/ssdb
ENTRYPOINT /usr/bin/ssdb-server /etc/ssdb.conf",ideawu/ssdb,Dockerfile
25c67cbddea80ca27117833dbfb4abc490da53fd,3048,"# Docker image for a tmpnb server, used to teach the EE Python API

FROM debian:jessie

MAINTAINER Tyler Erickson <tylere@google.com>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && apt-get install -y git vim wget build-essential python-dev ca-certificates bzip2 libsm6 && apt-get clean

ENV CONDA_DIR /opt/conda

# Install conda for the jovyan user only (this is a single user container)
RUN echo 'export PATH=$CONDA_DIR/bin:$PATH' > /etc/profile.d/conda.sh && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-3.9.1-Linux-x86_64.sh && \
    /bin/bash /Miniconda3-3.9.1-Linux-x86_64.sh -b -p $CONDA_DIR && \
    rm Miniconda3-3.9.1-Linux-x86_64.sh && \
    $CONDA_DIR/bin/conda install --yes conda==3.10.1

# We run our docker images with a non-root user as a security precaution.
# jovyan is our user
RUN useradd -m -s /bin/bash jovyan
RUN chown -R jovyan:jovyan $CONDA_DIR

# Workaround for issue with ADD permissions
USER root
ADD profile_default /home/jovyan/.ipython/profile_default
ADD templates/ /srv/templates/
RUN chmod a+rX /srv/templates
RUN chown jovyan:jovyan /home/jovyan -R

USER jovyan

# Expose our custom setup to the installed ipython (for mounting by nginx)
RUN mkdir --parents /opt/conda/lib/python3.4/site-packages/IPython/html/static/custom
RUN cp /home/jovyan/.ipython/profile_default/static/custom/* /opt/conda/lib/python3.4/site-packages/IPython/html/static/custom/

ENV HOME /home/jovyan
ENV SHELL /bin/bash
ENV USER jovyan
ENV PATH $CONDA_DIR/bin:$CONDA_DIR/envs/python2/bin:$PATH
WORKDIR $HOME

RUN conda install --yes ipython-notebook terminado && conda clean -yt
RUN ipython profile create

USER root

ADD notebooks/ /home/jovyan/
#ADD datasets/ /home/jovyan/datasets/
RUN chown -R jovyan:jovyan /home/jovyan

EXPOSE 8888

USER jovyan

# Python packages
RUN conda install --yes numpy pandas scikit-learn scikit-image matplotlib scipy seaborn sympy cython patsy statsmodels cloudpickle dill numba bokeh && conda clean -yt

# Now for a python2 environment
RUN conda create -p $CONDA_DIR/envs/python2 python=2.7 ipython numpy pandas scikit-learn scikit-image matplotlib scipy seaborn sympy cython patsy statsmodels cloudpickle dill numba bokeh && conda clean -yt

# install the Earth Engine package and dependencies
RUN conda install -y -n python2 --channel bcbio oauth2client
RUN conda install -y -n python2 --channel tylerickson --channel pandas earthengine-api

RUN $CONDA_DIR/envs/python2/bin/python $CONDA_DIR/envs/python2/bin/ipython kernelspec install-self --user

# Extra Kernels
RUN pip install --user bash_kernel

# Featured notebooks
##RUN mkdir /home/jovyan/featured
#RUN git clone --depth 1 https://github.com/jvns/pandas-cookbook.git /home/jovyan/featured/pandas-cookbook/
#RUN git clone --depth 1 https://github.com/ipython/ipython.git /home/jovyan/featured/ipython-examples/

# Convert notebooks to the current format
RUN find . -name '*.ipynb' -exec ipython nbconvert --to notebook {} --output {} \;
RUN find . -name '*.ipynb' -exec ipython trust {} \;

CMD ipython notebook
",tylere/docker-tmpnb-ee,Dockerfile
90ffc77afa16e6ae0073aec4a429df5ca6b268e2,412,"FROM thehq/crossbar:0.11.1
MAINTAINER Eric Chapman <eric@thehq.io>

RUN pip install \
    coverage \
    mock

COPY crossbarhttp/ /home/ubuntu/python-crossbarhttp/crossbarhttp
COPY tests/*.py /home/ubuntu/python-crossbarhttp/
COPY tests/run_test.sh /home/ubuntu/python-crossbarhttp/run_test.sh
RUN chmod +x /home/ubuntu/python-crossbarhttp/run_test.sh

ENTRYPOINT [""/home/ubuntu/python-crossbarhttp/run_test.sh""]",thehq/python-crossbarhttp,Dockerfile
e6660f190d4a12838d3359223a1ef4c5161b1f4b,469,"FROM node
MAINTAINER Damien Dormal <dormal.damien@gmail.com>

# use changes to package.json to force Docker not to use the cache
# when we change our application's nodejs dependencies:
ADD package.json /tmp/package.json
RUN cd /tmp && npm install
RUN mkdir -p /opt/app && cp -a /tmp/node_modules /opt/app/

# From here we load our application's code in, therefore the previous docker
# ""layer"" thats been cached will be used if possible
WORKDIR /opt/app
ADD . /opt/app
",damsonn/hue-state,Dockerfile
d3443cc9d1e47d2fed621b1525e1c52ff4cdfcd8,765,"FROM debian:jessie
MAINTAINER Olivier Filangi ""olivier.filangi@rennes.inra.fr""

# Prerequisites
#----------------------------------------------------------------------------------------
RUN apt-get update && apt-get install -y \
  git \
  build-essential \
  python3 \
  python3-pip \
  python3.4-venv \
  vim \
  ruby

# Install Askomics
#------------------------------------------------------------------------------------------
ENV VENV=/usr/local/AskomicsWeb/venv
RUN mkdir -p /usr/local/AskomicsWeb
COPY . /usr/local/AskomicsWeb/
RUN rm -rf $VENV
WORKDIR /usr/local/AskomicsWeb/

# Launch Askomics
#-------------------------------------------------------------------------------------------
EXPOSE 6543
ENTRYPOINT [""./startAskomics.sh""]
CMD [""fuseki"", ""prod""]
",askomics/askomics,Dockerfile
33885f0dfd083d29ca014007f503aac8a4f7c657,648,"FROM jwilder/nginx-proxy:latest
MAINTAINER Brian Palmer <brian@codekitchen.net>

RUN apt-get update \
 && apt-get install -y -q --no-install-recommends \
    dnsmasq \
 && apt-get clean \
 && rm -r /var/lib/apt/lists/*

RUN wget https://github.com/codekitchen/dinghy-http-proxy/releases/download/join-networks-v1/join-networks.tar.gz \
 && tar -C /app -xzvf join-networks.tar.gz \
 && rm join-networks.tar.gz

COPY Procfile /app/

# override nginx configs
COPY *.conf /etc/nginx/conf.d/

# override nginx-proxy templating
COPY nginx.tmpl Procfile reload-nginx /app/

COPY htdocs /var/www/default/htdocs/

ENV DOMAIN_TLD docker
ENV DNS_IP 127.0.0.1
",codekitchen/dinghy-http-proxy,Dockerfile
22989b017ad8ff272f61e4dfe345cb37e0963e5c,1883,"## -*- docker-image-name: ""scaleway/gentoo:latest"" -*-
FROM gentoo/stage3-amd64
# FIXME: check to switch to amd64-hardened
# following 'FROM' lines are used dynamically thanks do the image-builder
# which dynamically update the Dockerfile if needed.
#FROM armbuild/gentoo:stage3	# arch=armv7l


MAINTAINER Scaleway <opensource@scaleway.com> (@scaleway)


# Environment
ENV SCW_BASE_IMAGE=scaleway/gentoo:latest


# Patch rootfs for docker-based builds
COPY ./overlay-image-tools/usr/local/sbin/scw-builder-enter /usr/local/sbin/
RUN /usr/local/sbin/scw-builder-enter


# Sync portage
RUN mkdir -p /usr/portage/{distfiles,metadata,packages} \
 && chown -R portage:portage /usr/portage \
 && echo ""masters = gentoo"" > /usr/portage/metadata/layout.conf \
 && emerge-webrsync -q \
 && eselect news read new \
 && env-update


# Install packages
RUN emerge -v \
    app-admin/logrotate \
    app-admin/syslog-ng \
    net-firewall/iptables \
    net-misc/curl \
    net-misc/dhcpcd \
    net-misc/ntp \
    sys-apps/iproute2 \
    sys-auth/nss-myhostname \
    sys-block/nbd


# Create /var/lib/misc, required by service 'random' at stop
RUN mkdir -p /var/lib/misc


# Add patches
COPY ./overlay/ ./overlay-image-tools/ /


# Set default locale to en_US.UTF-8
RUN locale-gen \
 && eselect locale set en_US.utf8


# Toggle services
RUN mkdir -p $(readlink -f /run/openrc) \
 && rc-update add scw-initramfs-shutdown shutdown \
 && rc-update add ntpd default \
 && rc-update add scw-hostname boot \
 && rc-update add scw-ssh-keys default \
 && rc-update add scw-sshd-keys default \
 && rc-update add sshd default \
 && rc-update add scw-sync-kernel-extra sysinit \
 && rc-update add syslog-ng default \
 && rc-update del keymaps boot \
 && rc-status


# Cleanup
RUN rm -rf /var/tmp/portage/* /usr/portage/distfiles/*


# Clean rootfs from image-builder
RUN /usr/local/sbin/scw-builder-leave
",scaleway/image-gentoo,Dockerfile
ebb4d3a28e92650992a12a622bc310846001c8da,1298,"# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# docker build -t <LABEL> .
# docker run --cap-add=NET_ADMIN -t <LABEL> -p <APP_PORT>,<API_PORT> \
# impaired_network_server -t tcp -l kernel -i auto -p <APP_PORT> -a <API_PORT>

FROM ubuntu:14.04

RUN apt-get -y update
RUN apt-get -y install python iptables git
RUN apt-get -y install python-setuptools python-dev build-essential python-pip

RUN apt-get -y install libnetfilter-queue-dev

RUN mkdir /src
WORKDIR /src

RUN git clone https://github.com/google/packet-queue.git

WORKDIR /src/packet-queue

RUN pip install .

WORKDIR /src
RUN rm -rf /src/packet-queue

RUN groupadd whiterabbit
RUN echo ""%whiterabbit ALL=(root) NOPASSWD: ""`which impaired_network_server` >> /etc/sudoers.d/whiterabbit
",google/packet-queue,Dockerfile
260a2f73a9d6465feb448bf12594dc8be56a69ed,352,"FROM golang:1.5.1
EXPOSE 8080

COPY ./glide.yaml /go/src/github.com/ello/streams/glide.yaml
RUN go get github.com/Masterminds/glide
RUN go build github.com/Masterminds/glide
WORKDIR /go/src/github.com/ello/streams/
RUN GO15VENDOREXPERIMENT=1 glide install

COPY . /go/src/github.com/ello/streams/
RUN GO15VENDOREXPERIMENT=1 go build

CMD [""./streams""]
",ello/streams,Dockerfile
2438298e15079b62b1ec3afccb93667cdfe9ff00,209,"FROM mhart/alpine-node:5.8.0

# Switch to /app
WORKDIR /app
# Install deps
COPY package.json ./
RUN npm install --production
# Copy source
COPY . ./

# Ports
ENV PORT 80
EXPOSE 80

ENTRYPOINT [""npm"", ""start""]
",GitbookIO/nuts,Dockerfile
2a0ab6f0034f155bd13095d087aa859102e590ad,417,"FROM          debian:jessie
MAINTAINER    Chris Wessels (https://github.com/chriswessels)

ENV           NODE_VERSION=""0.10.43"" PHANTOMJS_VERSION=""2.1.1"" IMAGEMAGICK_VERSION=""8:6.8.9.9-5""

COPY          includes /tupperware

RUN           sh /tupperware/scripts/bootstrap.sh

EXPOSE        80

ENTRYPOINT    sh /tupperware/scripts/start_app.sh

ONBUILD COPY  ./ /app

ONBUILD RUN   sh /tupperware/scripts/on_build.sh
",chriswessels/meteor-tupperware,Dockerfile
e3b651a412c57408e96f93a05c738121c11b1378,725,"FROM java:8
MAINTAINER Gregor Uhlenheuer <kongo2002@gmail.com>

# get scala + sbt
RUN wget -nv ""http://downloads.typesafe.com/scala/2.11.7/scala-2.11.7.deb"" && \
    dpkg -i scala-2.11.7.deb && \
    apt-get update && \
    apt-get install scala && \
    rm scala-2.11.7.deb && \
    \
    wget -nv ""https://dl.bintray.com/sbt/debian/sbt-0.13.9.deb"" && \
    dpkg -i sbt-0.13.9.deb && \
    apt-get update && \
    apt-get install sbt && \
    rm sbt-0.13.9.deb && \
    \
    sbt version

# load applications from the /app folder
# to be used like: 'docker run -v $(pwd):/app ...'
VOLUME ""/app""
WORKDIR ""/app""

ADD build.sbt /app/build.sbt
RUN cd /app && sbt test:compile && rm build.sbt

ENTRYPOINT [""sbt""]
CMD [""version""]
",RBMHTechnology/eventuate-chaos,Dockerfile
8fb03544e0160911538d4e174b8386ba0e241bf6,961,"FROM ubuntu:trusty
MAINTAINER support@tutum.co

RUN apt-get update && \
	DEBIAN_FRONTEND=noninteractive apt-get install -yq iptables apt-transport-https ca-certificates ssh git curl make

ENV DIND_COMMIT=b8bed8832b77a478360ae946a69dab5e922b194e DOCKER_VERSION=1.10.3 COMPOSE_VERSION=1.6.2
ADD https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION} /usr/bin/docker
ADD https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind /usr/local/bin/dind
ADD https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64 /usr/local/bin/docker-compose
RUN chmod +x /usr/bin/docker /usr/local/bin/dind /usr/local/bin/docker-compose && rm -fr /var/lib/docker/*
VOLUME /var/lib/docker

# Store github.com SSH fingerprint
RUN mkdir -p ~/.ssh && ssh-keyscan -H github.com | tee -a ~/.ssh/known_hosts

ENV GIT_CLONE_OPTS=""--recursive""

ADD version_list /
ADD *.sh /
ENTRYPOINT [""/usr/local/bin/dind"", ""/run.sh""]
",tutumcloud/builder,Dockerfile
df5e7300ad7f9940827879a25cc226ec6bddcfc5,660,"#
# Select Base image, we choose a Nodejs base 
# because it has already all the ingredients for 
# our Nodejs app
#
FROM    dockerfile/nodejs

#
# Bundle our app source with the container, we
# could also be fetching the code from a git 
# repo, or really anything else.
#
ADD ./dist /src

#
# Install app dependencies - Got to install them 
# all! :)
#
RUN cd /src; npm install

# 
# Which ports you want to be exposing from this 
# container
#
EXPOSE  3000

#
# Specify the runtime (node) and the source to 
# be run
#
CMD [""node"", ""/src/server.js""]

#
# Note: You can do pretty much anything you 
# would do in a command line, using the `RUN` 
# prefix 
#
",furier/websync,Dockerfile
d75351c74498651a768879eae22b84c7dd955240,2430,"FROM phusion/baseimage:0.9.15
MAINTAINER Nathan Hopkins <natehop@gmail.com>

#RUN echo deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs) main universe > /etc/apt/sources.list.d/universe.list
RUN apt-get -y update\
 && apt-get -y upgrade

# dependencies
RUN apt-get -y --force-yes install vim\
 nginx\
 python-dev\
 python-flup\
 python-pip\
 expect\
 git\
 memcached\
 sqlite3\
 libcairo2\
 libcairo2-dev\
 python-cairo\
 pkg-config\
 nodejs

# python dependencies
RUN pip install django==1.4\
 python-memcached==1.53\
 django-tagging==0.3.1\
 whisper==0.9.13\
 twisted==11.1.0\
 txAMQP==0.6.2

# install graphite
RUN git clone -b 0.9.14 https://github.com/graphite-project/graphite-web.git /usr/local/src/graphite-web
WORKDIR /usr/local/src/graphite-web
RUN python ./setup.py install
ADD scripts/local_settings.py /opt/graphite/webapp/graphite/local_settings.py
ADD conf/graphite/ /opt/graphite/conf/

# install whisper
RUN git clone -b 0.9.14 https://github.com/graphite-project/whisper.git /usr/local/src/whisper
WORKDIR /usr/local/src/whisper
RUN python ./setup.py install

# install carbon
RUN git clone -b 0.9.14 https://github.com/graphite-project/carbon.git /usr/local/src/carbon
WORKDIR /usr/local/src/carbon
RUN python ./setup.py install

# install statsd
#RUN git clone -b v0.7.2 https://github.com/etsy/statsd.git /opt/statsd
#ADD conf/statsd/config.js /opt/statsd/config.js

# config nginx
RUN rm /etc/nginx/sites-enabled/default
ADD conf/nginx/nginx.conf /etc/nginx/nginx.conf
ADD conf/nginx/graphite.conf /etc/nginx/sites-available/graphite.conf
ADD conf/nginx/.htpasswd /etc/nginx/.htpasswd
RUN ln -s /etc/nginx/sites-available/graphite.conf /etc/nginx/sites-enabled/graphite.conf

# init django admin
ADD scripts/django_admin_init.exp /usr/local/bin/django_admin_init.exp
RUN /usr/local/bin/django_admin_init.exp

# logging support
RUN mkdir -p /var/log/carbon /var/log/graphite /var/log/nginx
ADD conf/logrotate /etc/logrotate.d/graphite

# daemons
ADD daemons/carbon.sh /etc/service/carbon/run
ADD daemons/carbon-aggregator.sh /etc/service/carbon-aggregator/run
ADD daemons/graphite.sh /etc/service/graphite/run
# ADD daemons/statsd.sh /etc/service/statsd/run
ADD daemons/nginx.sh /etc/service/nginx/run

# cleanup
RUN apt-get clean\
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# defaults

VOLUME [""/opt/graphite"", ""/etc/nginx"", ""/etc/logrotate.d"", ""/var/log""]
ENV HOME /root
CMD [""/sbin/my_init""]
",sitespeedio/docker-graphite-statsd,Dockerfile
731cd0dad29fcb6e786009d524e1a75455be9295,928,"FROM node:5.10.1
# Author / Maintainer
MAINTAINER Composr Team <support-composr@bq.com >

WORKDIR /src

# Copy app source
COPY . /src

# Install packages
RUN apt-get update && \
 apt-get install -y net-tools && \
 apt-get clean && \
 rm -rf /var/lib/apt/lists/*

# Install dev dependencies
RUN npm install; npm rebuild; npm install -g bunyan

ENV PATH node_modules/pm2/bin:$PATH

# Global config environment variable

ENV URL_BASE ''
ENV RABBITMQ_HOST ''
ENV RABBITMQ_PASSWORD ''
ENV RABBITMQ_FORCE_CONNECT true
ENV RABBITMQ_HEARTBEAT 30
ENV CREDENTIALS_CLIENT_ID ''
ENV CREDENTIALS_CLIENT_SECRET ''
ENV CREDENTIALS_SCOPES ''
ENV LOG_LEVEL debug
ENV LOG_FILE ''
ENV ACCESS_LOG_FILE ''
ENV RABBITMQ_PORT ''
ENV RABBITMQ_USERNAME ''
ENV ACCESS_LOG true
ENV NRACTIVE false
ENV NRAPPNAME ''
ENV NRAPIKEY ''
ENV NODE_ENV production
ENV BUNYAN_LOG true
ENV PORT 3000

# Expose port
EXPOSE $PORT

# Enable corbel-composr
CMD npm start
",corbel-platform/corbel-composr,Dockerfile
82bff4d10fe5e7568e234ef748117eeda86af02e,870,"FROM kaixhin/torch:latest
RUN apt-get install -y git wget libprotobuf-dev protobuf-compiler libhdf5-serial-dev hdf5-tools python-setuptools python-dev
RUN cd / ; git clone https://github.com/karpathy/neuraltalk2.git
RUN luarocks install loadcaffe
#here CUDA toolkit is not intalled since I don't have a GPU to test it on, see this Dockerfile for examples https://hub.docker.com/r/halo9pan/cuda/~/dockerfile/
#RUN luarocks install cutorch
RUN cd / ; git clone https://github.com/deepmind/torch-hdf5.git
RUN cd /torch-hdf5/ && luarocks make hdf5-0-0.rockspec LIBHDF5_LIBDIR=""/usr/lib/x86_64-linux-gnu/""
RUN easy_install pip && pip install h5py
RUN curl https://deb.nodesource.com/setup_5.x|sh -
RUN apt-get install -y nodejs
ADD webapp /webapp
ADD README.md /webapp/README.md
RUN cd /webapp && /usr/bin/npm install
CMD [""/usr/bin/node"",""/webapp/index.js""]
WORKDIR /webapp
",jacopofar/neuraltalk2-web,Dockerfile
4a8e2fddf0a5b9a7bbbbf053ac80469afb17a5ad,4539,"FROM debian:jessie
MAINTAINER Helder Correia <me@heldercorreia.com>

# persistent / runtime deps
RUN apt-get update && apt-get install -y --no-install-recommends \
      ca-certificates \
      curl \
      librecode0 \
      libmysqlclient-dev \
      libsqlite3-0 \
      libxml2 \
    && apt-get clean \
    && rm -r /var/lib/apt/lists/*

# phpize deps
RUN apt-get update && apt-get install -y --no-install-recommends \
      autoconf \
      file \
      g++ \
      gcc \
      libc-dev \
      make \
      pkg-config \
      re2c \
    && apt-get clean \
    && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

ENV GPG_KEYS 0B96609E270F565C13292B24C13C70B87267B52D 0A95E9A026542D53835E3F3A7DEC4E69FC9C83D7 0E604491
RUN set -xe \
  && for key in $GPG_KEYS; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

# compile openssl, otherwise --with-openssl won't work
RUN OPENSSL_VERSION=""1.0.2d"" \
      && cd /tmp \
      && mkdir openssl \
      && curl -sL ""https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"" -o openssl.tar.gz \
      && curl -sL ""https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz.asc"" -o openssl.tar.gz.asc \
      && gpg --verify openssl.tar.gz.asc \
      && tar -xzf openssl.tar.gz -C openssl --strip-components=1 \
      && cd /tmp/openssl \
      && ./config && make && make install \
      && rm -rf /tmp/*

ENV PHP_VERSION 5.3.29

# php 5.3 needs older autoconf
# --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself)
RUN buildDeps="" \
                autoconf2.13 \
                libcurl4-openssl-dev \
                libreadline6-dev \
                librecode-dev \
                libsqlite3-dev \
                libssl-dev \
                libxml2-dev \
                xz-utils \
      "" \
      && set -x \
      && apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
      && curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror"" -o php.tar.xz \
      && curl -SL ""http://php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror"" -o php.tar.xz.asc \
      && gpg --verify php.tar.xz.asc \
      && mkdir -p /usr/src/php \
      && tar -xof php.tar.xz -C /usr/src/php --strip-components=1 \
      && rm php.tar.xz* \
      && cd /usr/src/php \
      && ./configure \
            --with-config-file-path=""$PHP_INI_DIR"" \
            --with-config-file-scan-dir=""$PHP_INI_DIR/conf.d"" \
            --enable-fpm \
            --with-fpm-user=www-data \
            --with-fpm-group=www-data \
            --disable-cgi \
            --enable-mysqlnd \
            --with-mysql \
            --with-curl \
            --with-openssl=/usr/local/ssl \
            --with-readline \
            --with-recode \
            --with-zlib \
      && make -j""$(nproc)"" \
      && make install \
      && { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
      && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps \
      && make clean

COPY docker-php-* /usr/local/bin/

WORKDIR /var/www/html

RUN set -ex \
  && cd /usr/local/etc \
  && if [ -d php-fpm.d ]; then \
    # for some reason, upstream's php-fpm.conf.default has ""include=NONE/etc/php-fpm.d/*.conf""
    sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
    cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
  else \
    # PHP 5.x don't use ""include="" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
    mkdir php-fpm.d; \
    cp php-fpm.conf.default php-fpm.d/www.conf; \
    { \
      echo '[global]'; \
      echo 'include=etc/php-fpm.d/*.conf'; \
    } | tee php-fpm.conf; \
  fi \
  && { \
    echo '[global]'; \
    echo 'error_log = /proc/self/fd/2'; \
    echo; \
    echo '[www]'; \
    echo '; if we send this to /proc/self/fd/1, it never appears'; \
    echo 'access.log = /proc/self/fd/2'; \
    echo; \
    echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
    echo 'catch_workers_output = yes'; \
  } | tee php-fpm.d/docker.conf \
  && { \
    echo '[global]'; \
    echo 'daemonize = no'; \
    echo; \
    echo '[www]'; \
    echo 'listen = 9000'; \
  } | tee php-fpm.d/zz-docker.conf

EXPOSE 9000
CMD [""php-fpm""]
",helderco/docker-php-5.3,Dockerfile
6759587f27422616261a3a8e37df08b306e499b9,1935,"FROM ubuntu:15.04
MAINTAINER Tom <tmbdev@gmail.com>
ENV DEBIAN_FRONTEND noninteractive

RUN echo hi
RUN apt-get -qqy update
RUN apt-get -qqy install mercurial
RUN apt-get -qqy install build-essential 
RUN apt-get -qqy install g++ gdb swig2.0 scons
RUN apt-get -qqy install git
RUN apt-get -qqy install wget
RUN cd /tmp && wget -nd http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1504/x86_64/cuda-repo-ubuntu1504_7.5-18_amd64.deb
RUN cd /tmp && dpkg -i cuda-repo-ubuntu1504*.deb
RUN apt-get -qqy update
RUN apt-get -qqy install cuda-7-5
RUN apt-get -qqy install cuda-command-line-tools-7-5
RUN apt-get -qqy install cuda-core-7-5
RUN apt-get -qqy install cuda-cublas-7-5
RUN apt-get -qqy install cuda-cublas-dev-7-5
RUN apt-get -qqy install cuda-cudart-7-5
RUN apt-get -qqy install cuda-cudart-dev-7-5
RUN apt-get -qqy install cuda-cufft-7-5
RUN apt-get -qqy install cuda-cufft-dev-7-5
RUN apt-get -qqy install cuda-curand-7-5
RUN apt-get -qqy install cuda-curand-dev-7-5
RUN apt-get -qqy install cuda-cusolver-7-5
RUN apt-get -qqy install cuda-cusolver-dev-7-5
RUN apt-get -qqy install cuda-cusparse-7-5
RUN apt-get -qqy install cuda-cusparse-dev-7-5
RUN apt-get -qqy install cuda-minimal-build-7-5
RUN apt-get -qqy install cuda-misc-headers-7-5
RUN apt-get -qqy install cuda-npp-7-5
RUN apt-get -qqy install cuda-npp-dev-7-5
RUN apt-get -qqy install cuda-nvrtc-7-5
RUN apt-get -qqy install cuda-nvrtc-dev-7-5
RUN apt-get -qqy install cuda-runtime-7-5
RUN apt-get -qqy install cuda-toolkit-7-5
RUN apt-get -qqy install cuda-visual-tools-7-5
RUN apt-get -qqy install cuda-samples-7-5

RUN apt-get -qqy install apt-utils
RUN apt-get -qqy install protobuf-compiler libprotobuf-dev
RUN apt-get -qqy install libpng12-dev
RUN cd /usr/local/include && hg clone http://bitbucket.org/eigen/eigen eigen3
RUN apt-get -qqy install strace

RUN apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*

VOLUME /work
WORKDIR /work
",tmbdev/clstm,Dockerfile
363b1a5f1c92d9fa60fd7e98651d6806aa9f10f4,425,"FROM java:8

ENV VERSION=1.1.0-SNAPSHOT

RUN wget https://bintray.com/artifact/download/jchampemont/wtfdyum/wtfdyum-${VERSION}.zip && \
    unzip wtfdyum-${VERSION}.zip && \
    cd wtfdyum-${VERSION} && \
    sed -i ""s/wtfdyum.redis.server=localhost/wtfdyum.redis.server=redis/g"" application.properties && \
    mv wtfdyum-${VERSION}.jar wtfdyum.jar

WORKDIR wtfdyum-${VERSION}

ENTRYPOINT java -jar wtfdyum.jar

EXPOSE 8080
",jchampemont/WTFDYUM,Dockerfile
eb2e2ca419503761f6e99cc04d4b9fa918bb459f,1404,"FROM ubuntu:trusty
MAINTAINER rjohnson@moflow.org

# dyninst ubuntu 14.04/x64
RUN apt-get update && apt-get install -y \
        build-essential \
        gcc \
        g++ \
        make \
        cmake \
        git \
        ca-certificates \
        tar \
        gzip \
        vim \
        curl \
        libelf-dev \
        libelf1 \
        libiberty-dev \
        libboost-all-dev \
    && rm -rf /var/lib/apt/lists/*

#RUN curl http://www.paradyn.org/release9.1.0/DyninstAPI-9.1.0.tgz | tar -zxvf - \
#    && cd DyninstAPI-9.1.0/ \
RUN git clone https://github.com/dyninst/dyninst.git \
        && cd dyninst && mkdir build && cd build \
        && cmake .. \
        && make \
        && make install \
        && cd ../..

RUN curl http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz | tar -zxvf - \
        && cd afl-2* \
        && make \
        && make install \
        && cd ..

RUN git clone https://github.com/talos-vulndev/afl-dyninst.git \
        && cd afl-dyninst \
        && ln -s `ls -d1 ../afl-2* | tail -1` afl \
        && make \
        && cp afl-dyninst /usr/bin \
        && cp libAflDyninst.so /usr/local/lib/ \
        && cd .. \
        && echo ""/usr/local/lib"" > /etc/ld.so.conf.d/dyninst.conf && ldconfig \
        && echo ""export DYNINSTAPI_RT_LIB=/usr/local/lib/libdyninstAPI_RT.so"" >> .bashrc

# output usage and give a shell 
CMD afl-dyninst ; /bin/bash -i
",talos-vulndev/afl-dyninst,Dockerfile
0b8281f9980e2f70f711461d454b1c14b5a3e2c2,124,"FROM tomcat
MAINTAINER David Bonner <dbonner@gmail.com>
COPY ./target/capstone-*.war /usr/local/tomcat/webapps/capstone.war
",platify/platify,Dockerfile
24e8030e2337317c56875d1c6ec6e006ce4b4c3c,102,"FROM python:2.7
ADD requirements.txt /root/requirements.txt
RUN pip install -r /root/requirements.txt
",DoubleCiti/daimaduan.com,Dockerfile
49b9ffdf12c54df0ae2233543bed3a23f81817f9,932,"from golang:1.6
# Install RocksDB
RUN cd /opt  && git clone --branch v4.1 --single-branch --depth 1 https://github.com/facebook/rocksdb.git && cd rocksdb && make shared_lib
ENV LD_LIBRARY_PATH=/opt/rocksdb:$LD_LIBRARY_PATH
RUN apt-get update && apt-get install -y libsnappy-dev zlib1g-dev libbz2-dev
# Copy GOPATH src and install Peer
RUN mkdir -p /var/openchain/db
RUN mkdir -p /var/openchain/production
WORKDIR $GOPATH/src/github.com/openblockchain/obc-peer/
COPY . .
RUN CGO_CFLAGS=""-I/opt/rocksdb/include"" CGO_LDFLAGS=""-L/opt/rocksdb -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy"" go install && cp $GOPATH/src/github.com/openblockchain/obc-peer/openchain.yaml $GOPATH/bin
RUN cp $GOPATH/src/github.com/openblockchain/obc-peer/openchain/consensus/obcpbft/config.yaml $GOPATH/bin
# RUN CGO_CFLAGS=""-I/opt/rocksdb/include"" CGO_LDFLAGS=""-L/opt/rocksdb -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy"" go install
# RUN cd obc-ca && go install
",rameshthoomu/obc-peer,Dockerfile
997ee7a7603286132f53552fccdd6e83e5d8dd35,1385,"# Use Ubuntu 14.04 as the base container
FROM ubuntu:14.04

# ADD the CRAN Repo to the apt sources list
RUN echo ""deb http://cran.fhcrc.org/bin/linux/ubuntu trusty/"" > /etc/apt/sources.list.d/cran.fhcrc.org.list

# Add the package verification key
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9

# Update the system and install packages
RUN apt-get -y -qq update && apt-get -y -qq install \

	r-base=3.2.2* \
	r-recommended=3.2.2-1trusty0* \
	make \
	gcc \
	g++ \
	libxml2 \
	libxml2-dev \
	python-pip

# Install latest version of Node 5.x
RUN curl -sL https://deb.nodesource.com/setup_5.x | bash -
RUN apt-get -y install nodejs

# Create the sttrweb user and data directory
RUN useradd -u 7534 -m -d /home/sttrweb -c ""sttr web application"" sttrweb && \
	mkdir /home/sttrweb/data && \
	mkdir /home/sttrweb/Oncoscape && \
	mkdir /home/sttrweb/rlib 

# Install R Modules
ADD r_modules /home/sttrweb/Oncoscape/r_modules
WORKDIR /home/sttrweb/Oncoscape/r_modules
RUN make install

# Install Node Server + Modules
ADD server /home/sttrweb/Oncoscape/server
WORKDIR /home/sttrweb/Oncoscape/server
RUN npm install

# Install Rstats
WORKDIR /home/sttrweb/Oncoscape/server/rstats
RUN npm install -g node-gyp && node-gyp configure build 

EXPOSE  80

# Switch to the server directory and start it up
WORKDIR /home/sttrweb/Oncoscape/server

CMD [""node"", ""start.js""]
",FredHutch/Oncoscape,Dockerfile
c97490dd9c66dc3e6992053db7111457c3430857,1681,"FROM phusion/baseimage:0.9.18

# Use baseimage-docker's init system.
CMD [""/sbin/my_init""]

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update

# Update Ubuntu itself.
RUN apt-get upgrade -y -o Dpkg::Options::=""--force-confold""

# Install Git.
RUN apt-get install -y git wget unzip

# Apt cleanup.
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Create dedicated resizer user.
RUN adduser --system --no-create-home --shell /bin/false resizer

# Install Golang.
WORKDIR /usr/local
RUN curl -O https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gz && \
    tar -xvf go1.5.3.linux-amd64.tar.gz

# Add Golang bin folder to path.
ENV PATH=$PATH:/usr/local/go/bin

# Set $GOPATH
RUN mkdir /var/gopath
ENV GOPATH=/var/gopath

# Install godep for Go dependency management.
RUN go get github.com/tools/godep

# Get the resizer git repo.
RUN mkdir -p /var/gopath/src/github.com/hellofresh/resizer

# Define DST_DIR var for further actions.
ENV DST_DIR=/var/gopath/src/github.com/hellofresh/resizer

# Copy supervise run scripts into place.
COPY docker-resources/resizer_service.sh /etc/service/resizer/run

# See config.json for port definition.
EXPOSE 8080

# Define directory where the cache is located.
RUN mkdir -p /var/resizer_cache/storage && \
    chown -R resizer:nogroup /var/resizer_cache

# Copy the relevant source files plus configuration into place.
COPY config.json ${DST_DIR}/
COPY Godeps/ ${DST_DIR}/Godeps/
COPY cache/ ${DST_DIR}/cache/
COPY *.go ${DST_DIR}/

# Here the work gets done.
WORKDIR /var/gopath/src/github.com/hellofresh/resizer

# Restore Go build dependencies and build resizer binary.
RUN  /var/gopath/bin/godep restore && \
     go build

",hellofresh/resizer,Dockerfile
26e63596ce0d35d37bccd4688ec13183e0c2c07f,1311,"FROM ubuntu:14.04
MAINTAINER Guillaume Claret

RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y gcc make git
RUN apt-get install -y curl m4 ruby

# OCaml
WORKDIR /root
RUN curl -L https://github.com/ocaml/ocaml/archive/4.02.3.tar.gz |tar -xz
WORKDIR /root/ocaml-4.02.3
RUN ./configure && make world.opt && make install

# Camlp4
WORKDIR /root
RUN curl -L https://github.com/ocaml/camlp4/archive/4.02+6.tar.gz |tar -xz
WORKDIR /root/camlp4-4.02-6
RUN ./configure && make all && make install

# OPAM
WORKDIR /root
RUN curl -L https://github.com/ocaml/opam/archive/1.2.2.tar.gz |tar -xz
WORKDIR opam-1.2.2
RUN ./configure && make lib-ext && make && make install

# Tools
RUN apt-get install -y inotify-tools aspcud unzip

# Initialize OPAM
RUN opam init
ENV OPAMJOBS 4

# Coq
RUN opam install -y coq

# Coq repository
RUN opam repo add coq-released https://coq.inria.fr/opam/released

# Dependencies
RUN opam install -y coq-error-handlers coq-function-ninjas coq-iterable coq-list-string coq-moment
RUN opam install -y coq-concurrency-proxy coq-concurrency-system

# Build
ADD . /root/pluto
WORKDIR /root/pluto
RUN eval `opam config env`; ./configure.sh && make -j
WORKDIR extraction
RUN eval `opam config env`; make

# Run the server
EXPOSE 80
CMD eval `opam config env`; ./pluto.native 80 ../html
",coq-concurrency/pluto,Dockerfile
2bac7a5b4d725967ce5f87549d1708ef1b130d16,1659,"# This file describes how to build Haraka into a runnable linux container with all dependencies installed
# To build:
# 1.) Install docker (http://docker.io)
# 2.) Clone Haraka repo if you haven't already: git clone https://github.com/haraka/Haraka.git
# 3.) Modify config/host_list with the domain(s) that you'd like to receive mail to
# 4.) Build: cd Haraka && docker build .
# 5.) Run:
# docker run -d <imageid>
#
# VERSION           0.1
# DOCKER-VERSION    0.5.3

# See http://phusion.github.io/baseimage-docker/
FROM phusion/baseimage:latest

MAINTAINER Justin Plock <jplock@gmail.com>

ENV HOME /root

RUN /etc/my_init.d/00_regen_ssh_host_keys.sh

RUN sed 's/main$/main universe/' -i /etc/apt/sources.list
RUN DEBIAN_FRONTEND=noninteractive apt-get -y -q update
RUN DEBIAN_FRONTEND=noninteractive apt-get -y -q install python-software-properties g++ make git curl
RUN curl -sL https://deb.nodesource.com/setup_5.x | sudo bash -
RUN DEBIAN_FRONTEND=noninteractive apt-get -y -q install nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Optional, useful for development
# See https://github.com/phusion/baseimage-docker#login_ssh
#RUN rm -f /etc/service/sshd/down
#RUN /usr/sbin/enable_insecure_key

# Install Haraka
RUN npm install -g Haraka
RUN haraka -i /usr/local/haraka
ADD ./config/host_list /usr/local/haraka/config/host_list
ADD ./config/plugins /usr/local/haraka/config/plugins
RUN cd /usr/local/haraka && npm install

# Create haraka runit service
RUN mkdir /etc/service/haraka
ADD haraka.sh /etc/service/haraka/run

EXPOSE 25

# Start the init daemon - runit will launch the Haraka process
CMD [""/sbin/my_init""]
",haraka/Haraka,Dockerfile
bc25c31a34599981026f9403b967994ee31d4e25,366,"FROM silintl/ubuntu:14.04
MAINTAINER Phillip Shipley <phillip_shipley@sil.org>

RUN apt-get update -y \
    && apt-get install -y \
        curl \
        python-setuptools \
        jq \
    && easy_install pip \
    && pip install awscli

COPY ecs-deploy /usr/local/bin/ecs-deploy

RUN chmod a+x /usr/local/bin/ecs-deploy

ENTRYPOINT [""/usr/local/bin/ecs-deploy""]
",silinternational/ecs-deploy,Dockerfile
ab604e8bb2d65b65416ce5ff352437078e0a5296,972,"FROM ubuntu:14.04
MAINTAINER Jonathan Ostrander ""jonathanost@gmail.com""

ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

# Required packages
RUN apt-get update
RUN apt-get -y install \
    build-essential \
    git \
    libhdf5-dev \
    software-properties-common \
    wget

# Torch and luarocks
RUN git clone https://github.com/torch/distro.git ~/torch --recursive && cd ~/torch && \
    bash install-deps && \
    ./install.sh -b

ENV PATH=/root/torch/install/bin:$PATH

RUN luarocks install torch
RUN luarocks install nn
RUN luarocks install optim
RUN luarocks install lua-cjson
RUN luarocks install https://raw.githubusercontent.com/benglard/htmlua/master/htmlua-scm-1.rockspec
RUN luarocks install https://raw.githubusercontent.com/benglard/waffle/master/waffle-scm-1.rockspec

RUN mkdir /opt/server
ADD . /opt/server

WORKDIR /opt/server/checkpoints
RUN wget http://from.robinsloan.com/rnn-writer/scifi-model.zip && unzip scifi-model.zip
",robinsloan/torch-rnn-server,Dockerfile
9931943e1fed56e4c8b3fc073b965823fabed79c,126,"FROM scratch
MAINTAINER CenturyLink Labs <clt-labs-futuretech@centurylink.com>
EXPOSE 3000

COPY dray /

ENTRYPOINT [""/dray""]
",CenturyLinkLabs/dray,Dockerfile
7b911b34bef8953a58ca042ae1b3e6993dfe90dc,355,"FROM ubuntu:trusty
MAINTAINER Ian Blenke <ian@blenke.com>

RUN apt-get -y update
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install kvm qemu-kvm libvirt-bin bridge-utils libguestfs-tools aria2 unzip dos2unix unrar-free wget git

ADD run.sh /run.sh
RUN chmod +x /run.sh

EXPOSE 3389
EXPOSE 5900

VOLUME /etc/libvirt
VOLUME /var/lib/libvirt

CMD /run.sh
",ianblenke/docker-kvm,Dockerfile
cfee5da635d69c136ca6560edb5aec853eb12586,215,"FROM golang

WORKDIR /go/src/

RUN go get github.com/nvisibleinc/go-ari-library
RUN go get golang.org/x/net/websocket
RUN mkdir go-ari-proxy
COPY . go-ari-proxy
RUN go install go-ari-proxy

CMD /go/bin/go-ari-proxy
",nvisibleinc/go-ari-proxy,Dockerfile
7a978e3b6965f70ef7427b688ee81c29abee0838,173,"FROM python:3.5.1

RUN apt-get update
RUN easy_install -U pip

RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/requirements.txt
RUN pip install -r requirements.txt
",PabloVallejo/docker-django,Dockerfile
bf6210f9c7ef826d5dc48c21ebc16e8297a1beab,218,"FROM pingcap/rust

MAINTAINER siddontang

ADD . /tikv

RUN cd /tikv && \
    cargo build --release && \
    cp -f target/release/tikv-server /tikv-server && \
    cargo clean

EXPOSE 20160

ENTRYPOINT [""/tikv-server""]
",pingcap/tikv,Dockerfile
d034a578c5b11786f352018e4ef2aefecf668e6b,1925,"#
# Dockerizing Neo4j graph database (http://www.github.com/kbastani/docker-neo4j)
#
FROM       java:openjdk-8-jdk
MAINTAINER K.B. Name <kb@socialmoon.com>

ENV HDFS_HOST hdfs://hdfs:9000

ENV NEO4j_VERSION community-2.2.3
#ENV NEO4j_VERSION enterprise-2.2.3

# Install Neo4j
RUN apt-get update && \
    apt-get install -y wget
RUN wget -q -O /tmp/neo4j-$NEO4j_VERSION-unix.tar.gz http://dist.neo4j.org/neo4j-$NEO4j_VERSION-unix.tar.gz && \
    tar -zxf /tmp/neo4j-$NEO4j_VERSION-unix.tar.gz -C /var/lib && \
    ln -s /var/lib/neo4j-$NEO4j_VERSION /var/lib/neo4j && \
    wget -q -O /var/lib/neo4j/lib/gson-2.2.4.jar http://search.maven.org/remotecontent?filepath=com/google/code/gson/gson/2.2.4/gson-2.2.4.jar

WORKDIR /var/lib/neo4j

# Copy graph analytics plugin
COPY plugins /var/lib/neo4j/plugins

# Copy configurations
COPY conf/neo4j /var/lib/neo4j/conf

# Copy the bootstrap shell script and set permissions
COPY sbin/bootstrap.sh /etc/bootstrap.sh
RUN chown root:root /etc/bootstrap.sh && \
    chmod 700 /etc/bootstrap.sh

# Customize configurations
RUN apt-get clean && \
    sed -i ""s|data/graph.db|/opt/data/graph.db|g"" /var/lib/neo4j/conf/neo4j-server.properties && \
    sed -i ""s|dbms.security.auth_enabled=true|dbms.security.auth_enabled=false|g"" /var/lib/neo4j/conf/neo4j-server.properties && \
    sed -i ""s|#org.neo4j.server.webserver.address|org.neo4j.server.webserver.address|g"" /var/lib/neo4j/conf/neo4j-server.properties && \
    sed -i ""s|#org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged|org.neo4j.server.thirdparty_jaxrs_classes=extension=/service|g"" /var/lib/neo4j/conf/neo4j-server.properties

# Expose the Neo4j browser to the host OS on port 7474 and 1337
EXPOSE 7474
EXPOSE 1337

# Mount a volume for persistent data
VOLUME /opt/data

# Set the bootstrap script on container run
ENV BOOTSTRAP /etc/bootstrap.sh
CMD [""/etc/bootstrap.sh"", ""-d""]
",kbastani/docker-neo4j,Dockerfile
70b463bf96de4adaa21b501f15dfacbfe524f37a,621,"FROM hypriot/rpi-alpine-scratch
MAINTAINER netzfisch

# add 'edge' respository to get 'latest greatest' packages
RUN echo ""http://nl.alpinelinux.org/alpine/v3.3/main"" > /etc/apk/repositories
RUN echo ""@edge http://nl.alpinelinux.org/alpine/edge/community"" >> /etc/apk/repositories

# install tvheadend packages
RUN apk add --update tvheadend@edge tvheadend-dvb-scan@edge \
    && rm -rf /var/cache/apk/*

# expose 'config' and 'recording' directory for persistence
VOLUME /config /recordings

# expose ports for 'web interface' and 'stream'
EXPOSE 9981 9982

ENTRYPOINT [""/usr/bin/tvheadend""]
CMD [""-C"", ""-c"", ""/config""]
",netzfisch/rpi-tvheadend,Dockerfile
cf8d13bade2cb8bd0faca87cbff947c1ffedef77,1494,"FROM ubuntu:14.04


# Install apt-getable dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git wget \
    python-dev python-pip libboost-python-dev \
    python-numpy python-scipy python-yaml python-pyexiv2 \
    libopencv-dev python-opencv \
    libgoogle-glog-dev libatlas-base-dev libeigen3-dev libsuitesparse-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# Install Ceres from source
RUN \
    mkdir -p /source && cd /source && \
    wget http://ceres-solver.org/ceres-solver-1.10.0.tar.gz && \
    tar xvzf ceres-solver-1.10.0.tar.gz && \
    cd /source/ceres-solver-1.10.0 && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_C_FLAGS=-fPIC -DCMAKE_CXX_FLAGS=-fPIC -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF -DOPENMP=OFF && \
    make install && \
    cd / && \
    rm -rf /source/ceres-solver-1.10.0 && \
    rm -f /source/ceres-solver-1.10.0.tar.gz


# Install opengv from source
RUN \
    mkdir -p /source && cd /source && \
    git clone https://github.com/paulinus/opengv.git && \
    cd /source/opengv && \
    mkdir -p build && cd build && \
    cmake .. -DBUILD_TESTS=OFF -DBUILD_PYTHON=ON && \
    make install && \
    cd / && \
    rm -rf /source/opengv


# OpenSfM
RUN \
    mkdir -p /source && cd /source && \
    git clone https://github.com/mapillary/OpenSfM.git && \
    cd /source/OpenSfM && \
    pip install -r requirements.txt && \
    python setup.py build


# GENERIC
WORKDIR /
",mapillary/OpenSfM,Dockerfile
bdc185d1f30aa38f9a34587c26fc264e661926e7,1162,"FROM tutum/nginx
MAINTAINER Feng Honglin <hfeng@tutum.co>

ENV GRAFANA_VERSION 1.9.1

RUN apt-get update && \
    apt-get install -y wget pwgen apache2-utils && \
    wget http://grafanarel.s3.amazonaws.com/grafana-${GRAFANA_VERSION}.tar.gz -O grafana.tar.gz && \
    tar zxf grafana.tar.gz && \
    rm grafana.tar.gz && \
    rm -rf app && \
    mv grafana-${GRAFANA_VERSION} app && \
    apt-get autoremove -y wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ADD config.js /app/config.js
ADD default /etc/nginx/sites-enabled/default

# Environment variables for HTTP AUTH
ENV HTTP_USER admin
ENV HTTP_PASS **Random**

ENV INFLUXDB_PROTO http
ENV INFLUXDB_HOST **ChangeMe**
ENV INFLUXDB_PORT 8086
ENV INFLUXDB_NAME **ChangeMe**
ENV INFLUXDB_USER root
ENV INFLUXDB_PASS root
ENV INFLUXDB_IS_GRAFANADB false

ENV ELASTICSEARCH_PROTO http
ENV ELASTICSEARCH_HOST **None**
ENV ELASTICSEARCH_PORT 9200
ENV ELASTICSEARCH_USER **None**
ENV ELASTICSEARCH_PASS **None**


ADD run.sh /run.sh
ADD set_influx_db.sh /set_influx_db.sh
ADD set_basic_auth.sh /set_basic_auth.sh
ADD set_elasticsearch.sh /set_elasticsearch.sh
RUN chmod +x /*.sh

CMD [""/run.sh""]
",tutumcloud/grafana,Dockerfile
bb094cba15d55851667b1b6c1fd113e83a8718e8,501,"# Start from a Debian image with the latest version of Go installed
# and a workspace (GOPATH) configured at /go.

FROM pubnative/gogeoipredisgom:1.4.2

# Copy the local package files to the container's workspace.
WORKDIR /gopath/src/github.com/pubnative/statusboard
ADD . /gopath/src/github.com/pubnative/statusboard

RUN go get -v .

# Run the outyet command by default when the container starts.
ENTRYPOINT [""/gopath/bin/statusboard""]

# Document that the service listens on port 8080.
EXPOSE 8080
",pubnative/statusboard,Dockerfile
8163834386cc3073dad958fcdfb43c3b104a621f,1567,"FROM ubuntu:14.04
MAINTAINER Ãscar de Arriba <odarriba@gmail.com>

##################
##   BUILDING   ##
##################

# Prerequisites
RUN apt-get --quiet --yes update
ENV DEBIAN_FRONTEND noninteractive
RUN ln -s -f /bin/true /usr/bin/chfn

# Versions to use
ENV libevent_version 2.0.22-stable
ENV netatalk_version 3.1.8
ENV dev_libraries libcrack2-dev libwrap0-dev autotools-dev libdb-dev libacl1-dev libdb5.3-dev libgcrypt11-dev libtdb-dev libkrb5-dev

# Install prerequisites:
RUN apt-get --quiet --yes install build-essential nano htop wget pkg-config checkinstall automake libtool db-util db5.3-util libgcrypt11 ${dev_libraries}

# Compiling netatalk
WORKDIR /usr/local/src
RUN wget http://prdownloads.sourceforge.net/netatalk/netatalk-${netatalk_version}.tar.gz \
	&& tar xvf netatalk-${netatalk_version}.tar.gz \
	&& cd netatalk-${netatalk_version} \
	&& ./configure \
		--enable-debian \
		--enable-krbV-uam \
		--disable-zeroconf \
		--enable-krbV-uam \
		--enable-tcp-wrappers \
		--with-cracklib \
		--with-acls \
		--with-dbus-sysconf-dir=/etc/dbus-1/system.d \
		--with-init-style=debian-sysv \
		--with-pam-confdir=/etc/pam.d \
	&& make \
	&& checkinstall \
		--pkgname=netatalk \
		--pkgversion=$netatalk_version \
		--backup=no \
		--deldoc=yes \
		--default \
		--fstrans=no

# Add default user and group
RUN  mkdir -p /timemachine

# Create the log file
RUN touch /var/log/afpd.log

ADD start_services.sh /start_services.sh
RUN update-rc.d netatalk defaults

EXPOSE 548 636

VOLUME [""/timemachine""]

CMD [ ""/bin/bash"", ""/start_services.sh"" ]
",odarriba/docker-timemachine,Dockerfile
0c5c6f7ea3a4430ca67a652d8d79abebbb7123e4,342,"#
# youtube-dl Server Dockerfile
#
# https://github.com/kmb32123/youtube-dl-server-dockerfile
#

# Pull base image.
FROM python:3-onbuild

# Install ffmpeg.
RUN \
  apt-get update && \
  apt-get install -y libav-tools && \
  rm -rf /var/lib/apt/lists/*
  
EXPOSE 8080

VOLUME [""/youtube-dl""]

CMD [ ""python"", ""-u"", ""./youtube-dl-server.py"" ]
",manbearwiz/youtube-dl-server,Dockerfile
3d3584ce5cb94f532fed2d9f7171debc6ab22836,1592,"FROM debian:wheezy
MAINTAINER Scott Kidder <kidder.scott@gmail.com>

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r aprs && useradd -r -g aprs aprs

RUN apt-get update \
    && apt-get install -y curl \
    && rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN curl -o /usr/local/bin/gosu -SL ""https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture)"" \
    && curl -o /usr/local/bin/gosu.asc -SL ""https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture).asc"" \
    && gpg --verify /usr/local/bin/gosu.asc \
    && rm /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu

RUN buildDeps='wget'; \
    set -x \
    && apt-get update && apt-get install -y $buildDeps --no-install-recommends \
    && cd ${HOME} \
    && wget http://www.pakettiradio.net/downloads/libfap/1.3/deb_amd64/libfap-dev_1.3_amd64.deb \
    && wget http://www.pakettiradio.net/downloads/libfap/1.3/deb_amd64/libfap5_1.3_amd64.deb \
    && dpkg -i libfap-dev_1.3_amd64.deb libfap5_1.3_amd64.deb \
    && rm -f libfap-dev_1.3_amd64.deb libfap5_1.3_amd64.deb \
    && apt-get purge -y --auto-remove $buildDeps

RUN mkdir /data && chown aprs:aprs /data
VOLUME /data
WORKDIR /data
COPY docker-entrypoint.sh /entrypoint.sh
COPY bin/aprs-dashboard /aprs-dashboard
ENTRYPOINT [""/entrypoint.sh""]

EXPOSE 3000
EXPOSE 3100
CMD [""/aprs-dashboard""]
",urlgrey/aprs-dashboard,Dockerfile
dfdafe0848872dfbda3a095dec40eaab112f2879,1018,"# Run opensse in a container
# More info, please visit https://github.com/zddhub/opensse

# # Install socat and xquartz if you want to run GUI demo.
# brew install socat
# brew cask install xquartz
#
# # Start XQuartz
# open -a XQuartz
#
# # Expose local xquartz socket via socat on a TCP port
# socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\""$DISPLAY\""
#
# # in another window under our opensse repo folder.
# docker build -t opensse .  # will takes ~15 minutes to build
# docker run -it opensse
#
# # or use inet ip, like:
# # docker run -it -e DISPLAY=$(ipconfig getifaddr en0):0 opensse
#
# # Run command lind demo
# docker run -it opensse /bin/bash
# cd ~/opensse/build/tools/bin
# # You will find all opensse tools

FROM zddhub/opensse-env:latest
MAINTAINER zdd <zddhub@gmail.com>

RUN mkdir /root/opensse
COPY . /root/opensse

RUN cd /root/opensse \
  && mkdir build \
  && cd build \
  && /opt/Qt5.3.1/5.3/gcc_64/bin/qmake ../opensse.pro \
  && make

CMD [ ""/root/opensse/build/gui/bin/SketchSearchDemo"" ]
",zddhub/opensse,Dockerfile
96329f034b307094c2c3458dac993de78c99d2cb,223,"FROM python:3.5-alpine
MAINTAINER maintainers@codeship.com

ENV \
  PIP_DISABLE_PIP_VERSION_CHECK=true

RUN \
  apk --no-cache add \
    bash \
    curl \
    jq \
    zip && \
  pip install awscli

COPY scripts/ /usr/bin/
",codeship-library/aws-deployment,Dockerfile
6f69f29cdc641906c4f7aa7bf5b2ee65c6e10999,847,"FROM alpine:3.4

MAINTAINER frekele <leandro.freitas@softdevelop.com.br>

RUN apk add --update --no-cache \
       bash \
       curl \
       wget \
       git \
       python\
       py-pip \
       docker \
    && curl -sL https://get.docker.com/builds/Linux/x86_64/docker-1.10.3 > /usr/bin/docker \
    && chmod +x /usr/bin/docker \
    && pip install --upgrade pip \
    && pip install awscli

ADD ./scripts /scripts

RUN chmod -R +x /scripts

ENV STORAGE_PROVIDER='' \
    BACKUP_NAME='' \
    DATA_PATH='/data/' \
    GZIP_COMPRESSION='true' \
    CLEAN_DATA_BEFORE_RESTORE='false' \
    BACKUP_VERSION='' \
    CRON_SCHEDULE='' \
    AWS_ACCESS_KEY_ID='' \
    AWS_SECRET_ACCESS_KEY='' \
    AWS_S3_BUCKET_NAME='' \
    AWS_S3_PATH='/' \
    AWS_DEFAULT_REGION='us-east-1' \
    AWS_S3_OPTIONS=''

ENTRYPOINT [""/scripts/run.sh""]

CMD [""""]
",frekele/helicopterizer,Dockerfile
c9f33a0337fb2f7d550f952ae91cfd8b8de49456,1010,"FROM ubuntu:14.04
MAINTAINER Brant Watson

# Install dependencies
RUN DEBIAN_FRONTEND=noninteractive apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common python-software-properties
RUN DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:irie/blender
RUN DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:jon-severinsson/ffmpeg
RUN DEBIAN_FRONTEND=noninteractive apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y blender git python3-pip python3-dev cython libavcodec-dev libavformat-dev libswscale-dev python-pyassimp sox libsox-fmt-mp3 ffmpeg libimage-exiftool-perl
RUN DEBIAN_FRONTEND=noninteractive apt-get -y build-dep python-matplotlib
RUN mkdir -p /root
RUN git clone https://github.com/wgwang/thrift.git /root/thrift
RUN cd /root/thrift/lib/py3 && python3 setup.py sdist
RUN pip3 install /root/thrift/lib/py3/dist/*.tar.gz
RUN pip3 -v install matplotlib
COPY dist /root
RUN pip3 -v install /root/*.tar.gz
RUN rm -rf root/*.tar.gz
",peragro/peragro-at,Dockerfile
4719690bc699045bc7b9d13a99c31cdb59c6fd3b,417,"FROM golang

# Copy the local package files to the container's workspace.
ADD . /go/src/github.com/ory-am/workshop-dbg

# Build the outyet command inside the container.
# (You may fetch or manage dependencies here,
# either manually or with a tool like ""godep"".)
RUN go install github.com/ory-am/workshop-dbg

# Run the outyet command by default when the container starts.
ENTRYPOINT /go/bin/workshop-dbg

EXPOSE 5678",ory-am/workshop-dbg,Dockerfile
16a219dd707d1620da4e4df37737acd7f02544f4,1030,"FROM resin/rpi-raspbian

MAINTAINER Andreas Eiermann <andreas@hypriot.com>

RUN apt-get update && \
apt-get install -yqq \
openssh-server \
rsync \
git-core \
net-tools

RUN addgroup git && \
adduser git --shell /bin/bash --ingroup git

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
RUN sed 's@UsePrivilegeSeparation yes@UsePrivilegeSeparation no@' -i /etc/ssh/sshd_config

RUN sed 's@#RSAAuthentication yes@RSAAuthentication yes@' -i /etc/ssh/sshd_config
RUN sed 's@#PubkeyAuthentication yes@PubkeyAuthentication yes@' -i /etc/ssh/sshd_config

RUN echo ""export VISIBLE=now"" >> /etc/profile
RUN echo ""PermitUserEnvironment yes"" >> /etc/ssh/sshd_config

# prepare data
ENV GOGS_CUSTOM /data/gogs
RUN echo ""export GOGS_CUSTOM=/data/gogs"" >> /etc/profile && \
mkdir /gogits

WORKDIR /gogits

ADD ./content/ /gogits/

ADD start.sh /gogits/
RUN chmod a+x start.sh

EXPOSE 22
EXPOSE 3000
ENTRYPOINT []
CMD [""./start.sh""]
",hypriot/rpi-gogs-raspbian,Dockerfile
e822972576d0701176accca1d27084d7cf7e9806,1210,"# Start from a Debian image with the latest version of Go installed
# and a workspace (GOPATH) configured at /go.
FROM marcbachmann/libvips
MAINTAINER tomas@aparicio.me

# Server port to listen
ENV PORT 9000

# Go version to use
ENV GOLANG_VERSION 1.6

# gcc for cgo
RUN apt-get update && apt-get install -y \
    gcc curl git libc6-dev make ca-certificates \
    --no-install-recommends \
  && rm -rf /var/lib/apt/lists/*

ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 5470eac05d273c74ff8bac7bef5bad0b5abbd1c4052efbdbc8db45332e836b0b

RUN curl -fsSL --insecure ""$GOLANG_DOWNLOAD_URL"" -o golang.tar.gz \
  && echo ""$GOLANG_DOWNLOAD_SHA256 golang.tar.gz"" | sha256sum -c - \
  && tar -C /usr/local -xzf golang.tar.gz \
  && rm golang.tar.gz

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p ""$GOPATH/src"" ""$GOPATH/bin"" && chmod -R 777 ""$GOPATH""
WORKDIR $GOPATH

# Fetch the latest version of the package
RUN go get -u golang.org/x/net/context
RUN go get -u github.com/h2non/imaginary

# Run the outyet command by default when the container starts.
ENTRYPOINT [""/go/bin/imaginary""]

# Expose the server TCP port
EXPOSE 9000
",h2non/imaginary,Dockerfile
d2c940940538a8e2597452b886fa0b7fd3c38dde,318,"FROM ubuntu:trusty
MAINTAINER Matthias Luedtke (matthiasluedtke)

RUN apt-get install -y -q ca-certificates
# Fixes 'Get https://github.com/: x509: failed to
# load system roots and no roots provided'

ADD bin/linux_amd64/iconserver /var/www/iconserver

EXPOSE 8080
ENV PORT=8080
WORKDIR /var/www
CMD [""./iconserver""]
",mat/besticon,Dockerfile
b451fc4f58175fd142ed16e1ce3c2ee6f872bc71,1051,"FROM base

MAINTAINER tcnksm ""https://github.com/tcnksm""

# Install packages for building ruby
RUN apt-get update
RUN apt-get install -y --force-yes build-essential curl git
RUN apt-get install -y --force-yes zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev
RUN apt-get clean

# Install rbenv and ruby-build
RUN git clone https://github.com/sstephenson/rbenv.git /root/.rbenv
RUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build
RUN /root/.rbenv/plugins/ruby-build/install.sh
ENV PATH /root/.rbenv/bin:$PATH
RUN echo 'eval ""$(rbenv init -)""' >> /etc/profile.d/rbenv.sh # or /etc/profile
RUN echo 'eval ""$(rbenv init -)""' >> .bashrc

# Install multiple versions of ruby
ENV CONFIGURE_OPTS --disable-install-doc
ADD ./versions.txt /root/versions.txt
RUN xargs -L 1 rbenv install < /root/versions.txt

# Install Bundler for each version of ruby
RUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc
RUN bash -l -c 'for v in $(cat /root/versions.txt); do rbenv global $v; gem install bundler; done'

",tcnksm/dockerfile-rbenv,Dockerfile
3c0f68c2fa80ee9079ccd96f913974c15e532e6d,594,"FROM python:3.5.1-slim
MAINTAINER rubik

WORKDIR /usr/src/app

RUN apt-get update && \
  apt-get install -y python2.7 python-pip && \
  apt-get clean

COPY tox_requirements.txt /usr/src/app/
RUN pip install --quiet --requirement tox_requirements.txt
RUN pip2 install --quiet --requirement tox_requirements.txt

RUN adduser -u 9000 app

COPY . /usr/src/app
RUN pip install --quiet . && \
  mv /usr/local/bin/radon /usr/local/bin/radon3
RUN pip2 install --quiet . && \
  mv /usr/local/bin/radon /usr/local/bin/radon2

WORKDIR /code

USER app

VOLUME /code

CMD [""/usr/src/app/codeclimate-radon""]
",rubik/radon,Dockerfile
86d9437c12d0a41d7864a8872a59bd394bcfa805,175,"FROM golang:1.3

COPY . /go/src/github.com/crosbymichael/dockersql
WORKDIR /go/src/github.com/crosbymichael/dockersql

RUN go get -d && go build .

ENTRYPOINT [""./dockersql""]
",crosbymichael/dockersql,Dockerfile
7172875296809edb5264e44e997b087b62ded5b6,69,"FROM alpine:3.2
ADD slack-srv /slack-srv
ENTRYPOINT [ ""/slack-srv"" ]
",micro/slack-srv,Dockerfile
e85dee516384386f836456e30b43d847a1d01b80,119,"FROM golang:onbuild
RUN apt-get update && apt-get install -y pkg-config python2.7-dev && apt-get clean
CMD /go/bin/app
",go-python/gopy,Dockerfile
52eda83e83009300d44923a749facae3a2f63554,435,"FROM justin8/archlinux
MAINTAINER justin@dray.be

RUN mkdir -p /build
WORKDIR /build
RUN pacman -Syuq --noconfirm --needed $(pacman -Sgq base-devel | grep -v gcc) gcc-multilib && rm -rf /var/cache/pacman/pkg/*
RUN pacman -Syuq --noconfirm --needed git mercurial bzr subversion openssh && rm -rf /var/cache/pacman/pkg/*
RUN useradd -d /build build-user
ADD sudoers /etc/sudoers
ADD run.sh /run.sh

VOLUME ""/src""

ENTRYPOINT [""/run.sh""]
",justin8/docker-makepkg,Dockerfile
41dc595c353a3cfd56c42041f18e3d3436882b8c,1423,"FROM alpine:3.3
ADD *.go .git /public-people-api/
ADD people/*.go /public-people-api/people/
RUN apk add --update bash \
  && apk --update add git go \
  && cd public-people-api \
  && git fetch origin 'refs/tags/*:refs/tags/*' \
  && BUILDINFO_PACKAGE=""github.com/Financial-Times/service-status-go/buildinfo."" \
  && VERSION=""version=$(git describe --tag --always 2> /dev/null)"" \
  && DATETIME=""dateTime=$(date -u +%Y%m%d%H%M%S)"" \
  && REPOSITORY=""repository=$(git config --get remote.origin.url)"" \
  && REVISION=""revision=$(git rev-parse HEAD)"" \
  && BUILDER=""builder=$(go version)"" \
  && LDFLAGS=""-X '""${BUILDINFO_PACKAGE}$VERSION""' -X '""${BUILDINFO_PACKAGE}$DATETIME""' -X '""${BUILDINFO_PACKAGE}$REPOSITORY""' -X '""${BUILDINFO_PACKAGE}$REVISION""' -X '""${BUILDINFO_PACKAGE}$BUILDER""'"" \
  && cd .. \
  && export GOPATH=/gopath \
  && REPO_PATH=""github.com/Financial-Times/public-people-api"" \
  && mkdir -p $GOPATH/src/${REPO_PATH} \
  && cp -r public-people-api/* $GOPATH/src/${REPO_PATH} \
  && cd $GOPATH/src/${REPO_PATH} \
  && go get ./... \
  && cd $GOPATH/src/${REPO_PATH} \
  && echo ${LDFLAGS} \
  && go build -ldflags=""${LDFLAGS}"" \
  && mv public-people-api /app \
  && apk del go git \
  && rm -rf $GOPATH /var/cache/apk/*
CMD exec /app --neo-url=$NEO_URL --port=$APP_PORT --graphiteTCPAddress=$GRAPHITE_ADDRESS --graphitePrefix=$GRAPHITE_PREFIX --logMetrics=$LOG_METRICS --cache-duration=$CACHE_DURATION
",Financial-Times/public-people-api,Dockerfile
c2724d05b65d10a486461444d448b212999ed765,537,"FROM ruby:2.3.0

RUN echo ""deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main"" >> /etc/apt/sources.list.d/pgdg.list \
    && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
    && apt-get update -qq \
    && apt-get install -y build-essential libpq-dev postgresql-client-9.5 postgresql-contrib-9.5


ENV APP_PATH=/app BUNDLE_JOBS=4 BUNDLE_RETRY=3 BUNDLE_PATH=/gems

RUN mkdir ${APP_PATH}
WORKDIR ${APP_PATH}

ADD . ${APP_PATH}

CMD bundle check || bundle install; bundle exec rspec spec
",krists/refile-postgres,Dockerfile
2f0720e3beac55b9ead7c5452bd5420cba318089,730,"FROM ubuntu

RUN apt-get update
RUN apt-get install -yq unzip
RUN apt-get install -yq git
RUN apt-get install -yq curl
RUN apt-get install -yq cmake build-essential
RUN apt-get install -yq \
    flex \
    bison \
    libkrb5-dev \
    libsasl2-dev \
    libnuma-dev \
    pkg-config \
    libssl-dev \
    libcap-dev \
    gperf \
    autoconf-archive \
    libevent-dev \
    libgoogle-glog-dev \
    wget
WORKDIR /home
RUN git clone https://github.com/facebook/proxygen.git
WORKDIR /home/proxygen/proxygen
RUN ./deps.sh && ./reinstall.sh
WORKDIR /home/proxygen/proxygen/httpserver/samples/echo
RUN g++ -I /home/proxygen -std=c++11 -o my_echo EchoServer.cpp EchoHandler.cpp -lproxygenhttpserver -lfolly -lglog -lgflags -pthread
",facebook/proxygen,Dockerfile
8bd48905c41500f5a79726cfbb6c1319ad81b3f2,81,"FROM alpine:3.2
ADD discovery-srv /discovery-srv
ENTRYPOINT [ ""/discovery-srv"" ]
",micro/discovery-srv,Dockerfile
cee1c855a22d5bfe881dbfa5e9d4264a9de46c2b,106,"# The ""onbuild"" image automatically runs pip install -r requirements.txt for us
FROM python:3.5.1-onbuild
",dhmncivichacks/timewebsite,Dockerfile
e0390660ac60b9aa065f79e5627fb7b73e3e6ae4,634,"#
# Nginx Dockerfile
#
# https://github.com/dockerfile/nginx
#

# Pull base image.
FROM dockerfile/ubuntu

# Install Nginx.
RUN \
  add-apt-repository -y ppa:nginx/stable && \
  apt-get update && \
  apt-get install -y nginx && \
  rm -rf /var/lib/apt/lists/* && \
  echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf && \
  chown -R www-data:www-data /var/lib/nginx

# Define mountable directories.
VOLUME [""/etc/nginx/sites-enabled"", ""/etc/nginx/certs"", ""/etc/nginx/conf.d"", ""/var/log/nginx"", ""/var/www/html""]

# Define working directory.
WORKDIR /etc/nginx

# Define default command.
CMD [""nginx""]

# Expose ports.
EXPOSE 80
EXPOSE 443
",dockerfile/nginx,Dockerfile
71712fcd305a0f510cca54a19ead8c3c404ee0a9,58,"FROM python:3.5.1-onbuild
ENV DJANGO_CONFIGURATION Docker
",Astonex/Antelope,Dockerfile
40a55870ea2ec71f7b8f346bc7c6748126c04542,290,"from node:latest

RUN mkdir /deps
ADD ./package.json /deps
WORKDIR /deps
RUN npm install --ignore-scripts --unsafe-perm
ENV NODE_PATH=/deps/node_modules

EXPOSE 3000

WORKDIR /app
COPY . /app

CMD /deps/node_modules/.bin/pm2 start --watch file server.js && /deps/node_modules/.bin/pm2 logs
",wadiwasi/btg,Dockerfile
61807bc384ddcf0f73359fe2e9b98a55a80dc819,191,"# board
#
# VERSION               1.0
FROM golang:alpine

RUN apk update
RUN apk add git

ADD . /go/src/board
WORKDIR /go/src/board

RUN go get -v ./...

EXPOSE 8080
ENTRYPOINT board -p 8080
",Lesterpig/board,Dockerfile
87fe74e5deedfa48e1c04dbbac6a7f0f536ec7a0,128,"FROM    node:0.12.7

ADD . /app

RUN cd /app && npm install && npm install -g nodemon

EXPOSE 4000 4000

CMD node /app/index.js
",developmentseed/landsat-api,Dockerfile
c8c4c1539102feccd255ebf1cc3f1d6ee57f0b87,1633,"FROM ubuntu:14.04
# install autobahn tests suite (python)
RUN apt-get update -y && apt-get install build-essential libssl-dev python -y
# install lua
ENV LUAROCKS_VERSION=2.0.13
ENV LUAROCKS_BASE=luarocks-$LUAROCKS_VERSION
ENV LUA luajit
ENV LUA_DEV libluajit-5.1-dev 
ENV LUA_VER 5.1
ENV LUA_SFX jit
ENV LUA_INCDIR /usr/include/luajit-2.0

#    - LUA=lua5.1 LUA_DEV=liblua5.1-dev LUA_VER=5.1 LUA_SFX=5.1 LUA_INCDIR=/usr/include/lua5.1
#   - LUA=lua5.2 LUA_DEV=liblua5.2-dev LUA_VER=5.2 LUA_SFX=5.2 LUA_INCDIR=/usr/include/lua5.2
#   - LUA=luajit LUA_DEV=libluajit-5.1-dev LUA_VER=5.1 LUA_SFX=jit LUA_INCDIR=/usr/include/luajit-2.0
RUN apt-get install ${LUA} ${LUA_DEV} wget libev-dev git-core unzip -y
RUN lua${LUA_SFX} -v
WORKDIR /
RUN wget --quiet https://github.com/keplerproject/luarocks/archive/v$LUAROCKS_VERSION.tar.gz -O $LUAROCKS_BASE.tar.gz
RUN wget --quiet https://nodejs.org/dist/v4.4.1/node-v4.4.1-linux-x64.tar.gz
RUN tar xf node-v4.4.1-linux-x64.tar.gz
ENV PATH /node-v4.4.1-linux-x64/bin:$PATH
RUN node --version
RUN npm install -g ws
RUN tar zxpf $LUAROCKS_BASE.tar.gz
RUN cd $LUAROCKS_BASE && ./configure --lua-version=$LUA_VER --lua-suffix=$LUA_SFX --with-lua-include=""$LUA_INCDIR"" && make install && cd ..
RUN luarocks --version
RUN git clone http://github.com/brimworks/lua-ev && cd lua-ev && luarocks make LIBEV_LIBDIR=/usr/lib/x86_64-linux-gnu/ rockspec/lua-ev-scm-1.rockspec && cd ..
RUN luarocks install LuaCov
RUN luarocks install lua_cliargs 2.3-3
RUN luarocks install busted 1.10.0-1
ADD . /lua-websockets
WORKDIR /lua-websockets
RUN luarocks make rockspecs/lua-websockets-scm-1.rockspec 
RUN ./test.sh

",lipp/lua-websockets,Dockerfile
d3ee2582cae630febd8b4155fac28e10c41aa729,91,"FROM nginx

MAINTAINER Robert Stern <lexandro2000@gmail.com>

COPY . /usr/share/nginx/html
",lexandro/dockery,Dockerfile
dae2a1c70c678704cf70c7390eef24755d587cf7,706,"FROM continuumio/anaconda

# dependencies
RUN apt-get update
RUN apt-get install -y pkg-config libzmq-dev build-essential

# set up golang
RUN wget https://storage.googleapis.com/golang/go1.5.linux-amd64.tar.gz
RUN tar -C /usr/local -xzf go1.5.linux-amd64.tar.gz
ENV PATH /usr/local/go/bin:$PATH
ENV GOPATH /go
ENV PATH $GOPATH/bin:$PATH
RUN mkdir -p ""$GOPATH/src"" ""$GOPATH/bin"" && chmod -R 777 ""$GOPATH""

# install gophernotes
RUN go get golang.org/x/tools/cmd/goimports
RUN go get github.com/gophergala2016/gophernotes
RUN mkdir -p ~/.ipython/kernels/gophernotes
RUN cp -r $GOPATH/src/github.com/gophergala2016/gophernotes/kernel/* ~/.ipython/kernels/gophernotes

EXPOSE 8888
CMD [""jupyter"", ""notebook""]
",gophergala2016/gophernotes,Dockerfile
e09895b165e744ebfb4d5a5528ebfed994d3305f,2135,"FROM ubuntu:14.10
MAINTAINER Tristan Rice, rice@outerearth.net

RUN apt-get update -y
RUN apt-get install -y software-properties-common build-essential

RUN apt-get install -y openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion pkg-config wget python-software-properties python python-setuptools libpq5 libpq-dev nodejs unoconv libhiredis-dev poppler-utils libreoffice-core libreoffice-calc libreoffice-writer libreoffice-impress nginx npm openjdk-7-jre-headless



# Install JRuby
#ENV JRUBY_OPTS ""--2.0 -Xcext.enabled=true""
#RUN wget http://jruby.org.s3.amazonaws.com/downloads/1.7.10/jruby-bin-1.7.10.tar.gz
#RUN tar xvf jruby-bin-1.7.10.tar.gz; ln -s /jruby-1.7.10/bin/jruby /jruby-1.7.10/bin/ruby
#ENV PATH /jruby-1.7.10/bin:$PATH

# Install MRI
#RUN wget -q ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz -O ruby.tar.gz
#RUN tar xvf ruby.tar.gz
#RUN cd ruby-2.0.0-p353; ./configure --enable-shared; make install -j4

#RUN gem update --system
#RUN gem install bundler rubygems-bundler

# Install RBX
#RUN wget -q http://releases.rubini.us/rubinius-2.2.3.tar.bz2
#RUN tar xvf rubinius-2.2.3.tar.bz2
#RUN cd rubinius-2.2.3; bundle install; ./configure --prefix=/opt/; rake install
#ENV PATH /opt/rubinius/2.2/bin:$PATH
#RUN gem update --system
#RUN gem install rubysl racc bundler rubygems-bundler

RUN ln -s /usr/bin/nodejs /usr/bin/node

# PM2 Fix
RUN npm install -g git+https://github.com/juice49/pm2.git#master
#RUN npm install -g pm2
RUN mkdir /.pm2; mkdir /.pm2/pids/; mkdir /.pm2/logs/; chown -R daemon /.pm2; chmod 755 -R /.pm2

RUN npm install -g js-beautify docco

ADD . /src

# Load balancer configuration.
RUN cp /src/config/nginx.conf /etc/nginx/

RUN chown -R daemon:daemon /src; chmod 777 -R /src; chown -R daemon:daemon /home; chmod 777 -R /home; usermod -d /home daemon


ENV HOME /home


# Download dependencies
RUN cd /src; bundle install --deployment; npm install

#USER daemon
RUN cd /src; rake deploy

ENV PATH /src/bin:$PATH

EXPOSE 4567 4568
",d4l3k/WebSync,Dockerfile
58f8be1c7a454ad7d6d56746fe63aae22b75336d,146,"FROM python:2.7
ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt
ADD . /code/
",luanfonceca/speakerfight,Dockerfile
17bc003c4b01dfd84397c4ab27cbdb14e0daa04d,5468,"# cis-ubuntu-ansible
#
# VERSION               1.0
FROM ubuntu:14.04
MAINTAINER Paul Chaignon <paul.chaignon@gmail.com>

ADD . /cis-ubuntu-ansible
WORKDIR /cis-ubuntu-ansible

RUN apt-get update
RUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev slapd nis libffi-dev libssl-dev
RUN pip install --upgrade setuptools ansible
RUN touch /etc/inetd.conf
RUN echo 'shell.bla' > /tmp/inetd
RUN cp /tmp/inetd /etc/inetd.conf
RUN echo 'start on runlevel [2345]' > /tmp/runxinit
RUN cp /tmp/runxinit /etc/init/xinetd.conf

RUN echo hello >> ""hard'to\""quote$file""
RUN chown 1234:4321 ""hard'to\""quote$file""
RUN cp tests/docker_defaults.yml vars/main.yml
RUN echo '[defaults]' > ansible.cfg
RUN echo 'roles_path = ../' >> ansible.cfg

RUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1 > results_indempotence.txt
RUN cat results_indempotence.txt
RUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)




FROM ubuntu:12.04
MAINTAINER Paul Chaignon <paul.chaignon@gmail.com>

ADD . /cis-ubuntu-ansible
WORKDIR /cis-ubuntu-ansible

RUN apt-get update
RUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev slapd nis sudo libffi-dev
RUN pip install ansible
RUN touch /etc/inetd.conf
RUN echo 'shell.bla' > /tmp/inetd
RUN cp /tmp/inetd /etc/inetd.conf
RUN echo 'start on runlevel [2345]' > /tmp/runxinit
RUN cp /tmp/runxinit /etc/init/xinetd.conf

RUN echo hello >> ""hard'to\""quote$file""
RUN chown 1234:4321 ""hard'to\""quote$file""
RUN cp tests/docker_defaults.yml vars/main.yml
RUN echo '[defaults]' > ansible.cfg
RUN echo 'roles_path = ../' >> ansible.cfg

RUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1 > results_indempotence.txt
RUN cat results_indempotence.txt
RUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)





FROM ubuntu:15.04
MAINTAINER Paul Chaignon <paul.chaignon@gmail.com>

ADD . /cis-ubuntu-ansible
WORKDIR /cis-ubuntu-ansible

RUN apt-get update
RUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev sudo libffi-dev libssl-dev
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install slapd nis
RUN pip install --upgrade setuptools ansible
RUN touch /etc/inetd.conf
RUN echo 'shell.bla' > /tmp/inetd
RUN cp /tmp/inetd /etc/inetd.conf
RUN echo 'start on runlevel [2345]' > /tmp/runxinit
RUN cp /tmp/runxinit /etc/init/xinetd.conf

RUN echo hello >> ""hard'to\""quote$file""
RUN chown 1234:4321 ""hard'to\""quote$file""
RUN cp tests/docker_nofirewall_defaults.yml vars/main.yml
RUN echo '[defaults]' > ansible.cfg
RUN echo 'roles_path = ../' >> ansible.cfg

RUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1 > results_indempotence.txt
RUN cat results_indempotence.txt
RUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)





FROM ubuntu:16.04
MAINTAINER Paul Chaignon <paul.chaignon@gmail.com>

ADD . /cis-ubuntu-ansible
WORKDIR /cis-ubuntu-ansible

RUN apt-get update
RUN apt-get -y install python-pip aptitude rsh-client rsh-redone-client talk avahi-daemon cups isc-dhcp-server ntp rpcbind nfs-kernel-server bind9 openssh-client openssh-server python-dev libffi-dev libssl-dev
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install slapd nis
RUN pip install ansible
RUN touch /etc/inetd.conf
RUN echo 'shell.bla' > /tmp/inetd
RUN cp /tmp/inetd /etc/inetd.conf
RUN echo 'start on runlevel [2345]' > /tmp/runxinit
RUN cp /tmp/runxinit /etc/init/xinetd.conf

RUN echo hello >> ""hard'to\""quote$file""
RUN chown 1234:4321 ""hard'to\""quote$file""
RUN cp tests/docker_nofirewall_defaults.yml vars/main.yml
RUN echo '[defaults]' > ansible.cfg
RUN echo 'roles_path = ../' >> ansible.cfg

RUN ansible-playbook -i tests/inventory tests/playbook.yml --syntax-check
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1
RUN ansible-playbook -i tests/inventory tests/playbook.yml --connection=local --sudo -e ""pipelining=True"" -t level1 > results_indempotence.txt
RUN cat results_indempotence.txt
RUN cat results_indempotence.txt | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)
",awailly/cis-ubuntu-ansible,Dockerfile
fa34ed68e39a40b6ec14a82b2fe37bc56ecc774a,817,"FROM debian:stretch

ENTRYPOINT [ ""/marathon-lb/run"" ]
CMD        [ ""sse"", ""-m"", ""http://master.mesos:8080"", ""--health-check"", ""--group"", ""external"" ]
EXPOSE     80 443 9090 9091

COPY requirements.txt /marathon-lb/requirements.txt
COPY build-haproxy.sh /marathon-lb/build-haproxy.sh

RUN apt-get update && apt-get install -y python3 python3-pip openssl libssl-dev runit procps \
    wget build-essential libpcre3 libpcre3-dev python3-dateutil socat iptables libreadline-dev \
    && pip3 install -r /marathon-lb/requirements.txt \
    && rm -rf /root/.cache \
    && /marathon-lb/build-haproxy.sh \
    && apt-get remove -yf wget libssl-dev build-essential libpcre3-dev libreadline-dev \
    && apt-get autoremove -yf \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

COPY  . /marathon-lb

WORKDIR /marathon-lb
",mesosphere/marathon-lb,Dockerfile
3e9ffd0a84b470fb5d849da4b23881a218b41c7f,155,"FROM debian:latest
MAINTAINER Didier Franc <contact@didierfranc.com>

COPY /scripts /
RUN sh install.sh

VOLUME /db
VOLUME /cloud

CMD [""bash"",""start.sh""]
",didierfranc/parse-docker,Dockerfile
3d5951e0c39f4c8d4e8a7480f1d292c67091135a,1879,"FROM ubuntu:trusty

RUN echo ""deb http://ppa.launchpad.net/jon-severinsson/ffmpeg/ubuntu trusty main"" >> /etc/apt/sources.list

RUN echo 'deb http://archive.ubuntu.com/ubuntu trusty main' >> /etc/apt/sources.list

RUN echo 'deb http://archive.ubuntu.com/ubuntu trusty multiverse' >> /etc/apt/sources.list

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1DB8ADC1CFCA9579

RUN apt-get update

RUN apt-get install -q -y frei0r-plugins

RUN apt-get install -y -q python-pip

RUN apt-get install -y -q wget curl unzip

RUN apt-get install -y -q build-essential

RUN apt-get install -y -q cmake

RUN apt-get install -y -q python2.7 python2.7-dev

#RUN wget 'https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg' && /bin/sh setuptools-0.6c11-py2.7.egg && rm -f setuptools-0.6c11-py2.7.egg

RUN pip install numpy

RUN apt-get install -y -q libavformat-dev libavcodec-dev libavfilter-dev libswscale-dev

RUN apt-get install -y -q libjpeg-dev libpng-dev libtiff-dev libjasper-dev zlib1g-dev libopenexr-dev libxine-dev libeigen3-dev libtbb-dev

RUN apt-get install -y libopencv-dev checkinstall pkg-config yasm libtiff4-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy libtbb-dev libqt4-dev libgtk2.0-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils ffmpeg

RUN apt-get update -y && apt-get install --no-install-recommends -y -q curl build-essential ca-certificates git mercurial bzr

RUN mkdir /goroot && curl https://storage.googleapis.com/golang/go1.3.1.linux-amd64.tar.gz | tar xvzf - -C /goroot --strip-components=1

RUN mkdir /gopath

ENV GOROOT /goroot

ENV GOPATH /gopath

ENV PATH $PATH:$GOROOT/bin:$GOPATH/bin
",lazywei/go-opencv,Dockerfile
10a93894d8d1f470c50ee2b7fc668cf40c813c8c,1600,"FROM ubuntu:latest
MAINTAINER GreenPioneer
# Install Utilities
RUN apt-get update -q
# RUN apt-get install -yqq wget aptitude htop vim git traceroute dnsutils curl ssh sudo tree tcpdump nano psmisc gcc make build-essential libfreetype6 libfontconfig libkrb5-dev
RUN apt-get install -yqq wget vim git curl ssh build-essential

# Install NodeJS
RUN curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
RUN sudo apt-get install -yq nodejs

# Install Meanstackjs Prerequisites
RUN npm install --quiet -g  bower mocha pm2 mongo-express nodemon node-inspector

RUN mkdir /opt/meanstackjs
WORKDIR /opt/meanstackjs

# Copies the local package.json file to the container
# and utilities docker container cache to not needing to rebuild
# and install node_modules/ everytime we build the docker, but only
# when the local package.json file changes.
# Install npm packages
ADD package.json /opt/meanstackjs/package.json
RUN npm install --quiet

# Install bower packages
ADD bower.json /opt/meanstackjs/bower.json
ADD .bowerrc /opt/meanstackjs/.bowerrc
RUN bower install --quiet --allow-root --config.interactive=false

# Share local directory on the docker container
ADD . /opt/meanstackjs

# Machine cleanup
RUN npm cache clean
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set development environment as default
ENV NODE_ENV development

# Ports generic
EXPOSE 80:80
EXPOSE 443:443

# Port 3000 for Meanstackjs server
EXPOSE 3000:3000

# Port 5858 for node debug
EXPOSE 5858:5858

# Port 35729 for livereload
EXPOSE 35729:35729

# Run Meanstackjs server
CMD [""npm"", ""start""]
",greenpioneersolutions/meanstackjs,Dockerfile
2698138610d72eb6125ddbaaf450bc43780e5b7f,1033,"FROM heroku/cedar:14

RUN useradd -d /app -m app
USER app

ENV HOME /app
ENV PORT 3000
ENV PATH /app/.heroku/php/bin:/app/.heroku/php/sbin:/tmp/php-pack/bin:$PATH
ENV STACK cedar-14
ENV DOCKER_BUILD 1


RUN mkdir -p /app/.heroku
RUN mkdir -p /tmp/app
RUN mkdir -p /app/src
RUN mkdir -p /app/.profile.d
RUN mkdir -p /tmp/php-pack
RUN mkdir -p /tmp/cache
RUN mkdir -p /tmp/environment

WORKDIR /app/
RUN git clone https://github.com/heroku/heroku-buildpack-php.git /tmp/php-pack --depth 1

COPY . /app
RUN bash -l /tmp/php-pack/bin/compile /app /tmp/cache /app/.env
RUN rm vendor/piwik/piwik/config/config.ini.php
RUN rm -rf /tmp/cache
RUN rm -rf /tmp/php-pack

RUN cd vendor/piwik/piwik/misc \
 && curl http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz > GeoLiteCity.dat.gz \
 && gunzip GeoLiteCity.dat.gz \
 && mv GeoLiteCity.dat GeoIPCity.dat

ENTRYPOINT [""/app/entrypoint.sh""]
CMD [""/app/vendor/heroku/heroku-buildpack-php/bin/heroku-php-nginx -C nginx.conf -F fpm_custom.conf vendor/piwik/piwik/""]
EXPOSE 3000
",dz0ny/heroku-docker-piwik,Dockerfile
c89ea5fa83bf74b618a4a1875b999b4e6d86a15b,656,"FROM selenium/standalone-firefox

USER root

# The Basics
RUN apt-get update && apt-get -y install curl

# Go
RUN curl https://storage.googleapis.com/golang/go1.6.1.linux-amd64.tar.gz | tar -C /usr/local -xzf -
ENV PATH $PATH:/usr/local/go/bin

# PostgreSQL
RUN apt-get update && apt-get -y install postgresql

# install selenium-driver wrapper binary for Agouti
RUN echo '#!/bin/sh' >> /usr/local/bin/selenium-server && \
    echo 'exec java -jar /opt/selenium/selenium-server-standalone.jar ""$@"" > /tmp/selenium.log 2>&1' >> /usr/local/bin/selenium-server && \
    chmod +x /usr/local/bin/selenium-server

RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
",concourse/atc,Dockerfile
38ce2369cd7a87669fefb97678ebc57bdd7fa83d,591,"FROM ubuntu:15.10
MAINTAINER Oskar WickstrÃ¶m <oskar.wickstrom@gmail.com>

# HASKELL

RUN apt-get update && \
    apt-get install -y haskell-platform

## DATAFLOW

ENV LANG C.UTF-8

ADD . /usr/local/dataflow
WORKDIR /usr/local/dataflow

RUN ghc-pkg unregister HTTP
RUN ghc-pkg unregister vector
RUN ghc-pkg unregister QuickCheck
RUN ghc-pkg unregister tf-random

RUN cabal update && \
    cabal sandbox init && \
    cabal install --only-dependencies && \
    cabal configure && \
    cabal install

RUN ln -s /usr/local/dataflow/.cabal-sandbox/bin/dataflow /usr/bin/dataflow

WORKDIR /root
",sonyxperiadev/dataflow,Dockerfile
8a63dfa15db74aae0d461d7cfc6a45dc1549e5d6,830,"FROM ubuntu:wily

RUN apt-get update && \
	DEBIAN_FRONTEND=noninteractive apt-get install -yq ca-certificates ssh ruby git curl && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

ENV DOCKER_VERSION=1.8.2
RUN curl -sL -o /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}
RUN chmod +sx /usr/bin/docker && \
    sed -i ""s/#PasswordAuthentication yes/PasswordAuthentication no/"" /etc/ssh/sshd_config && \
    echo ""ClientAliveInterval 30"" >> /etc/ssh/sshd_config && \
    mkdir -p /var/run/sshd && \
    useradd -d /home/git -m -s /bin/bash git && \
    mkdir -p /home/git/deploy && \
    gem install --no-ri --no-doc kontena-cli
ENV GIT_CLONE_OPTS=""--recursive""
ADD gitserve.rb /usr/bin/gitserve
ADD post_receive.rb /home/git/post-receive
ADD run.sh /

VOLUME /home/git
ENTRYPOINT [""/run.sh""]
",kontena/kontena-git-builder,Dockerfile
090a895c1d97a00c28a8b0ccbab5196a9cb6568b,956,"from    ubuntu:precise
run     echo ""deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu precise main"" >> /etc/apt/sources.list
run     echo ""deb http://ppa.launchpad.net/chris-lea/redis-server/ubuntu precise main"" >> /etc/apt/sources.list
run     gpg --keyserver keyserver.ubuntu.com --recv-keys F5DA5F09C3173AA6 B9316A7BC7917B12
run     gpg --armor --export F5DA5F09C3173AA6 | apt-key add -
run     gpg --armor --export B9316A7BC7917B12 | apt-key add -
run     apt-get update
run     apt-get install --force-yes -y ca-certificates ruby2.2 redis-server
add     .  /
run     gem install bundler --no-ri --no-rdoc
run     apt-get install --force-yes -y build-essential ruby2.2-dev
run     bundle install
run     compass compile
run     cp logbot.rb.example logbot.rb
expose  6379
expose  15000
env     LOGBOT_NICK logbot_
env     LOGBOT_SERVER irc.freenode.net
env     LOGBOT_CHANNELS #test56
cmd     [""sh"", ""-c"", ""/usr/bin/redis-server | foreman start""]
",g0v/Logbot,Dockerfile
f9441c98a7feda2df6eb501f7e8b8fba0cdafbc0,452,"# docker file for creating a container that has kloudbuster installed and ready to use
FROM ubuntu:14.04
MAINTAINER kloudbuster-core <kloudbuster-core@lists.launchpad.net>

# Install KloudBuster script and dependencies
RUN apt-get update && apt-get install -y \
       libyaml-dev \
       python \
       python-dev \
       python-pip \
       python-virtualenv \
    && rm -rf /var/lib/apt/lists/*

RUN pip install pytz 
RUN pip install kloudbuster
",openstack/kloudbuster,Dockerfile
a878613374ab25a58333431461425d477d43da7e,1098,"FROM debian:jessie

ENV POSTGREST_VERSION 0.3.2.0
ENV POSTGREST_SCHEMA public
ENV POSTGREST_ANONYMOUS postgres
ENV POSTGREST_JWT_SECRET thisisnotarealsecret
ENV POSTGREST_MAX_ROWS 1000000
ENV POSTGREST_POOL 200

RUN apt-get update && \
    apt-get install -y tar xz-utils wget libpq-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN wget http://github.com/begriffs/postgrest/releases/download/v${POSTGREST_VERSION}/postgrest-${POSTGREST_VERSION}-ubuntu.tar.xz && \
    tar --xz -xvf postgrest-${POSTGREST_VERSION}-ubuntu.tar.xz && \
    mv postgrest /usr/local/bin/postgrest && \
    rm postgrest-${POSTGREST_VERSION}-ubuntu.tar.xz

CMD exec postgrest postgres://${PG_ENV_POSTGRES_USER}:${PG_ENV_POSTGRES_PASSWORD}@${PG_PORT_5432_TCP_ADDR}:${PG_PORT_5432_TCP_PORT}/${PG_ENV_POSTGRES_DB} \
              --port 3000 \
              --schema ${POSTGREST_SCHEMA} \
              --anonymous ${POSTGREST_ANONYMOUS} \
              --pool ${POSTGREST_POOL} \
              --jwt-secret ${POSTGREST_JWT_SECRET} \
              --max-rows ${POSTGREST_MAX_ROWS}

EXPOSE 3000
",begriffs/postgrest,Dockerfile
4846e3b48ba78a952ebb1ee1849d173e8f7e2220,281,"FROM golang:1.5.3
MAINTAINER Eric Holmes <eric@remind101.com>

LABEL version 0.10.1

ADD . /go/src/github.com/remind101/empire
WORKDIR /go/src/github.com/remind101/empire
RUN GO15VENDOREXPERIMENT=1 go install ./cmd/empire

ENTRYPOINT [""/go/bin/empire""]
CMD [""server""]

EXPOSE 8080
",remind101/empire,Dockerfile
1f41db168c180dfd4b4ac500542a88a25fc31554,4336,"FROM java:8-jre

MAINTAINER blacktop, https://github.com/blacktop

ENV KIBANA 4.5
ENV ELASTIC 2.x
ENV LOGSTASH 2.3
ENV GOSU_VERSION 1.7
ENV GOSU_URL https://github.com/tianon/gosu/releases/download

# Grab gosu for easy step-down from root
RUN set -x \
	&& wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
	&& wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
	&& export GNUPGHOME=""$(mktemp -d)"" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
	&& gosu nobody true

# Grab tini for signal processing and zombie killing
# ENV TINI_VERSION v0.9.0
# RUN set -x \
# 	&& wget -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini"" \
# 	&& wget -O /usr/local/bin/tini.asc ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini.asc"" \
# 	&& export GNUPGHOME=""$(mktemp -d)"" \
# 	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 \
# 	&& gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
# 	&& rm -r ""$GNUPGHOME"" /usr/local/bin/tini.asc \
# 	&& chmod +x /usr/local/bin/tini \
# 	&& tini -h

# Install ELK Required Dependancies
RUN set -x \
	&& apt-get -qq update \
	&& apt-get install -yq wget ca-certificates \
	&& wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | apt-key add - \
	&& echo ""deb http://packages.elastic.co/elasticsearch/$ELASTIC/debian stable main"" >> /etc/apt/sources.list \
	&& echo ""deb http://packages.elasticsearch.org/logstash/$LOGSTASH/debian stable main"" >> /etc/apt/sources.list \
	&& echo ""deb http://packages.elastic.co/kibana/$KIBANA/debian stable main"" >> /etc/apt/sources.list \
	&& echo ""NOTE: the 'ffi-rzmq-core' gem is very picky about where it looks for libzmq.so"" \
	&& mkdir -p /usr/local/lib && ln -s /usr/lib/*/libzmq.so.3 /usr/local/lib/libzmq.so \
	&& groupadd -r kibana && useradd -r -m -g kibana kibana \
	&& apt-get -qq update && apt-get -yq install elasticsearch \
                                               apache2-utils \
                                               supervisor \
                                               logstash \
                                               libzmq3 \
                                               kibana \
                                               nginx --no-install-recommends \
  && apt-get purge -y --auto-remove wget \
  && apt-get clean \
  && apt-get autoclean \
  && apt-get autoremove \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
	&& echo ""Creating Elasticsearch Paths..."" \
	&& for path in \
		/usr/share/elasticsearch/data \
		/usr/share/elasticsearch/logs \
		/usr/share/elasticsearch/config \
		/usr/share/elasticsearch/config/scripts \
	; do \
	mkdir -p ""$path""; \
	chown -R elasticsearch:elasticsearch ""$path""; \
	done

# Configure Nginx
ADD config/nginx/kibana.conf /etc/nginx/sites-available/
RUN cd /opt \
	&& echo ""Configuring Nginx..."" \
	&& mkdir -p /var/www \
	&& ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log \
	&& echo ""\ndaemon off;"" >> /etc/nginx/nginx.conf \
	&& rm /etc/nginx/sites-enabled/default \
	&& ln -s /etc/nginx/sites-available/kibana.conf /etc/nginx/sites-enabled/kibana.conf

# Install Timelion Kibana Plugin
RUN /opt/kibana/bin/kibana plugin -i kibana/timelion

# Add ELK PATHs
ENV PATH /usr/share/elasticsearch/bin:$PATH
ENV PATH /opt/logstash/bin:$PATH
ENV PATH /opt/kibana/bin:$PATH

# Add elastic config
COPY config/elastic /usr/share/elasticsearch/config
# Add admin/admin web user account
COPY config/nginx/htpasswd /etc/nginx/.htpasswd
# Add configs
COPY config/supervisord/supervisord.conf /etc/supervisor/conf.d/
# Add entrypoints
COPY entrypoints/elastic-entrypoint.sh /
COPY entrypoints/logstash-entrypoint.sh /
COPY entrypoints/kibana-entrypoint.sh /
RUN chmod +x /*.sh

VOLUME [""/usr/share/elasticsearch/data""]
VOLUME [""/etc/logstash/conf.d""]
VOLUME [""/etc/nginx""]

EXPOSE 80 443 9200 9300

CMD [""/usr/bin/supervisord""]
",blacktop/docker-elk,Dockerfile
a04f5f17ca7fb3daeda503c4325a9e21765300bb,304,"FROM alpine

# install dependencies for imagemin
RUN apk update && apk add \
	autoconf \
	automake \
	build-base \
	file \
	libpng-dev \
	nasm \
	nodejs \
	&& rm -rf /var/cache/apk/*

RUN npm install -g gulp

COPY . /usr/src/dcos-ui
WORKDIR /usr/src/dcos-ui

RUN npm install

CMD [""npm"", ""run"", ""serve""]
",dcos/dcos-ui,Dockerfile
3c7b04a72238a72e131057f1872aad1756b52f92,1568,"# Dockerfile for rundeck
# https://github.com/jjethwa/rundeck
# Bump to 2.6.8

FROM debian:jessie

MAINTAINER Jordan Jethwa

ENV DEBIAN_FRONTEND noninteractive
ENV SERVER_URL https://localhost:4443
ENV RUNDECK_STORAGE_PROVIDER file
ENV RUNDECK_PROJECT_STORAGE_TYPE file
ENV NO_LOCAL_MYSQL false

RUN apt-get -qq update && apt-get -qqy upgrade && apt-get -qqy install --no-install-recommends bash supervisor procps sudo ca-certificates openjdk-7-jre-headless openssh-client mysql-server mysql-client pwgen curl git && apt-get clean

RUN curl -Lo /tmp/rundeck.deb http://dl.bintray.com/rundeck/rundeck-deb/rundeck-2.6.8-1-GA.deb

ADD content/ /

RUN dpkg -i /tmp/rundeck.deb && rm /tmp/rundeck.deb
RUN chown rundeck:rundeck /tmp/rundeck
RUN chmod u+x /opt/run
RUN mkdir -p /var/lib/rundeck/.ssh
RUN chown rundeck:rundeck /var/lib/rundeck/.ssh

# Supervisor
RUN mkdir -p /var/log/supervisor && mkdir -p /opt/supervisor
RUN chmod u+x /opt/supervisor/rundeck && chmod u+x /opt/supervisor/mysql_supervisor

# Give a chance to customize default installation
RUN sed -i ""s/export RDECK_JVM=\""/export RDECK_JVM=\""\${RDECK_JVM} /"" /etc/rundeck/profile

# Slack plugin
RUN curl -Lo /var/lib/rundeck/libext/rundeck-slack-incoming-webhook-plugin-0.6.jar https://github.com/higanworks/rundeck-slack-incoming-webhook-plugin/releases/download/v0.6.dev/rundeck-slack-incoming-webhook-plugin-0.6.jar

EXPOSE 4440 4443

VOLUME  [""/etc/rundeck"", ""/var/rundeck"", ""/var/lib/rundeck"", ""/var/lib/mysql"", ""/var/log/rundeck"", ""/opt/rundeck-plugins""]

# Start Supervisor
ENTRYPOINT [""/opt/run""]
",jjethwa/rundeck,Dockerfile
e3c776a11739dfffe7c8424310c397a0f9babdaf,225,"FROM golang:alpine

MAINTAINER Carlos Cirello <carlos.cirello.nl@gmail.com>

# Uncomment the following line to import plugins into the image
# COPY gochatbot-plugin-* /
COPY gochatbot-container /

CMD [""/gochatbot-container""]",ccirello/gochatbot,Dockerfile
c3e2e6197dc5355f81f14ac89d59c94f5052dc1d,870,"FROM node:5.10

# Install gem sass for  grunt-contrib-sass
RUN apt-get update -qq && apt-get install -y build-essential
RUN apt-get install -y ruby
RUN gem install sass

WORKDIR /home/modern-mean
RUN mkdir -p /home/modern-mean/logs

# disable NPM color output to keep logs cleaner
RUN npm config set color false

# Install Modern-MEAN Prerequisites
RUN npm install -g gulpjs/gulp-cli#4.0
RUN npm install -g bower

# Install Modern-MEAN packages
ADD package.json /home/modern-mean/package.json
RUN npm install

# Manually trigger bower. Why doesnt this work via npm install?
ADD .bowerrc /home/modern-mean/.bowerrc
ADD bower.json /home/modern-mean/bower.json
RUN bower install --config.interactive=false --allow-root

# Make everything available for start
ADD . /home/modern-mean

# Port 8080 for server
# Port 35729 for livereload
EXPOSE 8080 35729
CMD [""gulp"",""prod""]

",modern-mean/modern-mean-core,Dockerfile
8f4e975b9f1aa9c1bad2e032ffc06467941e010e,1009,"FROM java:8u72-jre

RUN useradd opentsdb && \
    apt-get update && \
    apt-get install --no-install-recommends -y gnuplot-nox && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    curl -L https://github.com/OpenTSDB/opentsdb/releases/download/v2.3.0RC1/opentsdb-2.3.0-RC1_all.deb > /tmp/opentsdb.deb && \
    echo ""c8503bcb09c747cffb878c28f9d121c3c0ec20164240920579bea9e4ba9c86cb0cd9d9ef75c774dbd955f388162d5df83ff2a23813d43ce7213707d7d68c7fca  /tmp/opentsdb.deb"" | sha512sum -c && \
    dpkg -i /tmp/opentsdb.deb && \
    rm /tmp/opentsdb.deb && \
    rm /etc/opentsdb/opentsdb.conf && \
    curl -sL ""https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"" > /usr/sbin/gosu && \
    echo ""34049cfc713e8b74b90d6de49690fa601dc040021980812b2f1f691534be8a50  /usr/sbin/gosu"" | sha256sum -c && \
    chmod +x /usr/sbin/gosu

COPY ./logback.xml /etc/opentsdb/logback.xml

COPY ./run.sh /run.sh
COPY ./unprivileged.sh /unprivileged.sh

VOLUME /var/cache/opentsdb

ENTRYPOINT [""/run.sh""]
",cloudflare/docker-opentsdb,Dockerfile
e5d397098d07f522bca1df60bb466a57135b118a,613,"FROM debian:experimental
MAINTAINER Jens Erat <email@jenserat.de>

# Remove SUID programs
RUN for i in `find / -perm +6000 -type f 2>/dev/null`; do chmod a-s $i; done

RUN echo ""deb http://http.debian.net/debian experimental main"" >> /etc/apt/sources.list && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y -t experimental tinc && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

EXPOSE 655/tcp 655/udp
VOLUME /etc/tinc

ENTRYPOINT [ ""/usr/sbin/tinc"" ]
CMD [ ""start"", ""-D"", ""-U"", ""nobody"" ]
",JensErat/docker-tinc,Dockerfile
66ac807ff7ea1010829052903e9db8d7c3661a43,242,"FROM chef/ubuntu-14.04:latest

# berks package && docker build -t chef-system .

COPY .chef/ /etc/chef/

ADD ./cookbooks-*.tar.gz /var/chef/

RUN chef-init --bootstrap
RUN rm -rf /etc/chef/secure/*

ENTRYPOINT [""chef-init""]

CMD [""--onboot""]
",xhost-cookbooks/system,Dockerfile
59d5817264c90b05f506ec6a4b1b7df8cca17075,786,"FROM node

MAINTAINER  Attila Szeremi <attila+webdev@szeremi.com>

RUN mkdir /src
WORKDIR /src
RUN cd /src

# Copy just the package.json file file as a cache step.
COPY package.json /src
# Disable progress so npm would install faster.
# Disable colors, because Dockerhub can't display them.
# Install NPM packages excluding the dev dependencies.
RUN npm set progress=false && npm set color=false && npm install

COPY elm-package.json /src
# Now run the elm package installer, saying ""yes"" to everything.
RUN node_modules/.bin/elm-package install -y

COPY . .
# LC_ALL needs to be set to C.UTF-8, otherwise compiling elm doesn't work too well.
# https://github.com/elm-lang/elm-make/issues/33
RUN NODE_ENV=production LC_ALL=C.UTF-8 npm run build
EXPOSE  8080
CMD [""npm"", ""run"", ""start""]
",amcsi/elm-tic-tac-toe,Dockerfile
e97a1945d6910c3fd09a423ee87f5ee202eab650,375,"FROM ruby:2.3.0

RUN apt-get update -qq && apt-get install -y build-essential libpq-dev postgresql-client nodejs poppler-utils advancecomp gifsicle jhead jpegoptim libjpeg-progs optipng pngcrush pngquant

# enable utf8 in irb
ENV LANG C.UTF-8

RUN mkdir /app
WORKDIR /app
ADD Gemfile /app/Gemfile
ADD Gemfile.lock /app/Gemfile.lock
RUN bundle install

ADD . /app

EXPOSE 5000",robbi5/kleineanfragen,Dockerfile
5fb0032d375b63779cec23e8824f87a97bf26508,437,"FROM ruby:2.2.0

RUN apt-get update -qq && apt-get install -y build-essential

# for postgres
RUN apt-get install -y libpq-dev

# for nokogiri
RUN apt-get install -y libxml2-dev libxslt1-dev

# for capybara-webkit
RUN apt-get install -y libqt4-webkit libqt4-dev xvfb

# for a JS runtime
RUN apt-get install -y nodejs

ENV APP_HOME /myapp
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

ADD Gemfile* $APP_HOME/
RUN bundle install

ADD . $APP_HOME
",joshuaclayton/backbone-data-bootstrap,Dockerfile
54aa03844e6ee8e233773fca0a3e09f7247e6da1,643,"#
# Node.js Dockerfile
#
# https://github.com/dockerfile/nodejs
#

# Pull base image.
FROM dockerfile/python

# Install Node.js
RUN \
  cd /tmp && \
  wget http://nodejs.org/dist/node-latest.tar.gz && \
  tar xvzf node-latest.tar.gz && \
  rm -f node-latest.tar.gz && \
  cd node-v* && \
  ./configure && \
  CXX=""g++ -Wno-unused-local-typedefs"" make && \
  CXX=""g++ -Wno-unused-local-typedefs"" make install && \
  cd /tmp && \
  rm -rf /tmp/node-v* && \
  npm install -g npm && \
  printf '\n# Node.js\nexport PATH=""node_modules/.bin:$PATH""' >> /root/.bashrc

# Define working directory.
WORKDIR /data

# Define default command.
CMD [""bash""]
",dockerfile/nodejs,Dockerfile
781c12c6bece7bcf46f39198cb0687726bf3e2b9,865,"#
# Build from the go source directory:
#   docker build -t goroom:1.5 .

FROM golang:1.5

# We need gorilla, so go get it.
RUN cd $GOPATH && go get github.com/gorilla/websocket

# Copy our go source files and build/install the
# code.  If successful, the executable file,
# $GOPATH/bin/gameon-room-go, will be built.
RUN mkdir -p $GOPATH/src/gameon-room-go
COPY ./*.go $GOPATH/src/gameon-room-go/
COPY ./container-startup.sh /usr/bin/container-startup.sh
RUN cd $GOPATH/src/gameon-room-go && go install

# Our room should always listen on port 3000 (-lp)
# although the mapped host callback port (-cp) may
# be different.
EXPOSE 3000
WORKDIR $GOPATH/gameon-room-go/src

# The real work of running the game is done in the startup script
# which reads environment variables to drive its choices for startup.
ENTRYPOINT [""/bin/bash"", ""/usr/bin/container-startup.sh""]
",cfsworkload/gameon-room-go,Dockerfile
7eb274933121613b79ebf90ab17ee26f9b021d9d,236,"FROM mhart/alpine-node:5.5.0

RUN mkdir -p /usr/src/app

WORKDIR /usr/src/app

COPY package.json /usr/src/app/package.json

RUN npm install

COPY . /usr/src/app

ENV VERSION $CIRCLE_BUILD_NUM

RUN npm run compile:prod

CMD npm run prod
",VictorBjelkholm/ipfsbin,Dockerfile
4ffeab6becfb0cff3198e156c67c12f96b6092bc,290,"FROM maven

WORKDIR /root
COPY pom.xml /root/pom.xml
COPY src /root/src

RUN mvn install

EXPOSE 8080

CMD [""bash"", ""-c"", ""java -Xmx256M -jar target/amazon-echo-bridge-*.jar --upnp.config.address=$(ip route get 8.8.8.8 | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\s*$')""]
",armzilla/amazon-echo-ha-bridge,Dockerfile
d955b332768281d681a794a552d7c438bbe3237d,592,"FROM ruby:2.2.3

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

RUN apt-get update
RUN apt-get install locales
RUN echo 'ru_RU.UTF-8 UTF-8' >> /etc/locale.gen
RUN locale-gen ru_RU.UTF-8
RUN dpkg-reconfigure -fnoninteractive locales
ENV LC_ALL=ru_RU.utf8
ENV LANGUAGE=ru_RU.utf8
RUN update-locale LC_ALL=""ru_RU.utf8"" LANG=""ru_RU.utf8"" LANGUAGE=""ru_RU""
RUN apt-get install -y vim

COPY lib/kirpich/version.rb /usr/src/app/lib/kirpich/
COPY kirpich.gemspec /usr/src/app/
COPY Gemfile /usr/src/app/
COPY Gemfile.lock /usr/src/app/
RUN bundle install --jobs 4

COPY . /usr/src/app

CMD 'bin/run'
",Andrew8xx8/kirpich,Dockerfile
e47a876345f427c60a39814c5652ec8bb4c9f298,895,"FROM frodenas/ruby
MAINTAINER Ferran Rodenas <frodenas@gmail.com>

# Add application code
ADD . /app

# Prepare application (cache gems & precompile assets)
RUN cd /app && \
    bundle package --all && \
    RAILS_ENV=assets bundle exec rake assets:precompile && \
    rm -rf spec && \
    mkdir /config

# Add default configuration files
ADD ./config/unicorn.conf.rb /config/unicorn.conf.rb
ADD ./config/settings.yml /config/settings.yml

# Working directory
WORKDIR /app

# Define Rails environment
ENV RAILS_ENV development

# Define Settings file path
ENV SETTINGS_PATH /config/settings.yml

# Define Docker Remote API
ENV DOCKER_URL unix:///var/run/docker.sock

# Command to run
ENTRYPOINT [""/app/bin/run.sh""]
CMD [""bundle"", ""exec"", ""unicorn"", ""-c"", ""/config/unicorn.conf.rb""]

# Expose listen port
EXPOSE 80

# Expose the configuration and logs directories
VOLUME [""/config"", ""/app/log""]

",cloudfoundry-community/cf-containers-broker,Dockerfile
125fc11e4a080e87c78775cf6e9ae809f9f72fbd,248,"FROM node:5.5.0-slim

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install app dependencies
COPY package.json /usr/src/app/
RUN npm install

# Bundle app source
COPY src /usr/src/app

EXPOSE 3000

CMD [ ""npm"", ""start"" ]
",mpj/kyrene,Dockerfile
446d436e3664b745fbf3f4908679b0bb7c26e21f,855,"FROM quay.io/aptible/alpine:latest

# Install NGiNX.
RUN apk-install apache2-utils curl nginx openssl ruby

# Ensure that the nginx user can write to temp paths like client_body_temp_path.
RUN chown -R nginx:nginx /var/lib/nginx

# Overwrite default nginx config with our config.
RUN mkdir -p /etc/nginx/sites-enabled
ADD nginx.conf /etc/nginx/nginx.conf
ADD templates/sites-enabled /

# Add script that starts NGiNX in front of the registries and tails the NGiNX access/error logs.
ADD bin .
RUN chmod 700 ./run-docker-registry-proxy.sh

# Run tests.
ADD test /tmp/test
RUN bats /tmp/test

# When running a container from this image, map a directory containing
# docker-registry-proxy.crt and docker-registry-proxy.key to this volume, e.g.,
# ""-v /path/to/my/keys:/etc/nginx/ssl""
VOLUME /etc/nginx/ssl

EXPOSE 443

CMD [""./run-docker-registry-proxy.sh""]
",aptible/docker-registry-proxy,Dockerfile
a3ca519cca507a9f3b25d34ce57c49a5190295e8,300,"FROM    alpine:3.2
MAINTAINER Kyle Anderson <kwa@yelp.com>

RUN     apk add -U python py-pip
ADD     requirements.txt /code/requirements.txt
RUN     pip install -r /code/requirements.txt
ADD     docker_custodian/ /code/docker_custodian/
ADD     setup.py /code/
RUN     pip install --no-deps -e /code
",Yelp/docker-custodian,Dockerfile
a06bb5a55f3656cabe3de684aa22e988e64c56c8,907,"FROM alpine:3.1

RUN apk add python3 --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted
RUN apk add python3-dev build-base --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted

RUN apk add --update libxslt-dev
RUN apk add --update libxml2-dev
RUN apk add git

RUN python3 --version
RUN pip3 --version

RUN git clone https://github.com/cpfair/tapiriik.git

WORKDIR /tapiriik
RUN pip3 install -r requirements.txt
RUN cp tapiriik/local_settings.py.example tapiriik/local_settings.py
RUN python3 credentialstore_keygen.py >> tapiriik/local_settings.py

EXPOSE 8000

RUN echo MONGO_HOST = \""mongo\"" >> tapiriik/local_settings.py
RUN echo REDIS_HOST = \""redis\"" >> tapiriik/local_settings.py
RUN echo RABBITMQ_BROKER_URL = \""amqp://guest@rabbitmq//\"" >> tapiriik/local_settings.py

CMD python3 manage.py runserver 0.0.0.0:8000
",jeroenpeeters/tapiriik-docker,Dockerfile
266bdc4b997151ffe4904cadc247c59bf6c43738,1821,"# ------------------------------------------------------------------------------
# Based on a work at https://github.com/docker/docker.
# ------------------------------------------------------------------------------
# Pull base image.
FROM tutum/ubuntu:trusty
MAINTAINER Agung Firdaus <agung@jagad.co.id>

# ------------------------------------------------------------------------------
# Install dependencies
RUN apt-get update && apt-get -y install git curl build-essential supervisor

# ------------------------------------------------------------------------------
# Install nodejs
RUN curl -sL https://deb.nodesource.com/setup | sudo bash -
RUN apt-get -y install nodejs

# ------------------------------------------------------------------------------
# Get cloud9 source and install
RUN git clone https://github.com/c9/core.git /tmp/c9
RUN cd /tmp/c9 && scripts/install-sdk.sh
RUN mv /tmp/c9 /cloud9
WORKDIR /cloud9

# ------------------------------------------------------------------------------
# Add workspace volumes
RUN mkdir /cloud9/workspace
VOLUME /cloud9/workspace

# ------------------------------------------------------------------------------
# Set default workspace dir
ENV C9_WORKSPACE /cloud9/workspace

# ------------------------------------------------------------------------------
# Add supervisord conf
ADD supervisord.conf /etc/supervisor/conf.d/

# ------------------------------------------------------------------------------
# Clean up APT when done.
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ------------------------------------------------------------------------------
# Expose ports.
EXPOSE 8181

# ------------------------------------------------------------------------------
# Start supervisor, define default command.
ENTRYPOINT /usr/bin/supervisord
",agungf/cloud9-ide,Dockerfile
f6510b7d49f874f3e6a1dc3bc0a00a88138fce27,472,"# setup a centos image with bitcore binary components
FROM centos:latest
MAINTAINER Chris Kleeschulte <chrisk@bitpay.com>
RUN yum -y install git curl which xz tar findutils
RUN groupadd bitcore
RUN useradd bitcore -m -s /bin/bash -g bitcore
ENV HOME /home/bitcore
USER bitcore
RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash
RUN /bin/bash -l -c ""nvm install v4 && nvm alias default v4""
RUN /bin/bash -l -c ""npm install bitcore -g""

",bitpay/bitcore,Dockerfile
6415aef22b5e97e7a151e4d7cc22c32b5d124c82,671,"FROM python:3.5
MAINTAINER Onion Tech <webtech@theonion.com>

RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get update \
    && apt-get install -y \
        git-core \
        libmemcached-dev \
        libpq-dev \
        postgresql-client-9.4 \
        vim \
    && rm -rf /var/lib/apt/lists/*

# Setup app directory
WORKDIR /webapp

# Install as much as possible before adding app directory, to take advantage of
# Docker's layer caching.

# Container includes all requirements (so it works in dev + prod)
# Add app as late as possibly (will always trigger cache miss and rebuild from here)
ADD . /webapp
RUN pip install -e .
RUN pip install -e "".[dev]""
",theonion/django-bulbs,Dockerfile
ed5ed056b1edca69123f335dac892948f33529cc,622,"FROM gliderlabs/alpine:3.1
RUN apk-install espeak opus lame flac && \
    apk del libstdc++
RUN cd /tmp && \
    wget http://downloads.xiph.org/releases/opus/opus-tools-0.1.9.tar.gz && \
    tar xzf opus-tools-0.1.9.tar.gz && \
    cd opus-tools-0.1.9/ && \
    apk-install build-base flac-dev opus-dev libogg-dev && \
    ./configure && \
    make && \
    make install && \
    rm -rf /tmp/* && \
    apk del build-base flac-dev opus-dev libogg-dev
COPY server.go /tmp/
RUN cd /tmp && \
    apk-install go && \
    go build -o /server server.go && \
    apk del go && \
    rm /tmp/server.go
EXPOSE 8080
CMD [""/server""]
",parente/espeakbox,Dockerfile
45aad9ea0332410ba6098088f7b040b19e2444ad,286,"FROM python:3.5

MAINTAINER AHAPX
MAINTAINER anarchy.b@gmail.com

RUN git clone https://github.com/AHAPX/dark-chess.git /dark-chess
RUN pip install -U pip
RUN pip install -r /dark-chess/requirements.txt

VOLUME /dark-chess/src/
WORKDIR /dark-chess/src/
EXPOSE 38599

CMD python main.py
",AHAPX/dark-chess,Dockerfile
356b11b865cb09372de596d5ad414ee2f8e5aa6e,241,"FROM node:4.4.0

RUN mkdir -p /usr/src/app

WORKDIR /usr/src/app

RUN npm install -g elm
COPY . /usr/src/app


ENV NPM_CONFIG_LOGLEVEL error


RUN npm install

RUN npm run installextra


EXPOSE 8080

ENV LC_ALL C.UTF-8

CMD [""npm"", ""start""]
",GabiGrin/ElmFiddle.io,Dockerfile
db2bf1bafde164bae0a5e4ccba23165cac45d256,4535,"FROM python:2.7.11

# add our user and group first to make sure their IDs get assigned consistently
RUN groupadd -r freight && useradd -r -m -g freight freight

ENV PYTHONUNBUFFERED 1

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

RUN apt-get update && apt-get install -y --no-install-recommends \
        unzip \
        zip \
    && rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.9
RUN set -x \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/gosu ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"" \
    && wget -O /usr/local/bin/gosu.asc ""https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true \
    && apt-get purge -y --auto-remove wget

# grab tini for signal processing and zombie killing
ENV TINI_VERSION v0.9.0
RUN set -x \
    && apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/* \
    && wget -O /usr/local/bin/tini ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini"" \
    && wget -O /usr/local/bin/tini.asc ""https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini.asc"" \
    && export GNUPGHOME=""$(mktemp -d)"" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 \
    && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
    && rm -r ""$GNUPGHOME"" /usr/local/bin/tini.asc \
    && chmod +x /usr/local/bin/tini \
    && tini -h \
    && apt-get purge -y --auto-remove wget

# gpg keys listed at https://github.com/nodejs/node
RUN set -ex \
  && for key in \
    9554F04D7259F04124DE6B476D5A82AC7E37093B \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  ; do \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys ""$key""; \
  done

ENV NODE_VERSION 0.12.14
ENV NPM_VERSION 2.15.6

RUN curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"" \
    && curl -SLO ""https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"" \
    && gpg --verify SHASUMS256.txt.asc \
    && grep "" node-v$NODE_VERSION-linux-x64.tar.gz\$"" SHASUMS256.txt.asc | sha256sum -c - \
    && tar -xzf ""node-v$NODE_VERSION-linux-x64.tar.gz"" -C /usr/local --strip-components=1 \
    && rm ""node-v$NODE_VERSION-linux-x64.tar.gz"" SHASUMS256.txt.asc \
    && npm set progress=false \
    && npm install -g ""npm@${NPM_VERSION}"" \
    && npm cache clear

ENV REDIS_VERSION 3.0.7
ENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-3.0.7.tar.gz
ENV REDIS_DOWNLOAD_SHA1 e56b4b7e033ae8dbf311f9191cf6fdf3ae974d1c

RUN set -x \
    && mkdir -p /usr/src/redis \
    && curl -sSL ""$REDIS_DOWNLOAD_URL"" -o redis.tar.gz \
    && echo ""$REDIS_DOWNLOAD_SHA1 *redis.tar.gz"" | sha1sum -c - \
    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    && rm redis.tar.gz \
    && make -C /usr/src/redis \
    && make -C /usr/src/redis install \
    && rm -r /usr/src/redis

ENV DOCKER_VERSION 1.10.3
ENV DOCKER_SHA256 d0df512afa109006a450f41873634951e19ddabf8c7bd419caeb5a526032d86d

RUN curl -fSL ""https://get.docker.com/builds/Linux/x86_64/docker-$DOCKER_VERSION"" -o /usr/local/bin/docker \
    && echo ""${DOCKER_SHA256}  /usr/local/bin/docker"" | sha256sum -c - \
    && chmod +x /usr/local/bin/docker

ENV DOCKER_HOST tcp://docker:2375

COPY package.json /usr/src/app/
RUN npm install && npm cache clear

COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r requirements.txt

COPY . /usr/src/app
RUN node_modules/.bin/webpack -p \
    && pip install --no-cache-dir -e .

ENV WORKSPACE_ROOT /workspace
RUN mkdir -p $WORKSPACE_ROOT

ENV PATH /usr/src/app/bin:$PATH

EXPOSE 5000
VOLUME /workspace

ENTRYPOINT [""/usr/src/app/docker-entrypoint.sh""]
CMD [""web"", ""--no-debug"", ""--addr"", ""0.0.0.0:5000""]
",getsentry/freight,Dockerfile
1627b8bde5ebe2656aa444f2ac82835486a0da49,659,"FROM ubuntu:latest
MAINTAINER Cyrille Rossant ""cyrille.rossant at gmail dot com""

RUN apt-get update && apt-get install -y \
    wget \
    git \
    curl \
    fontconfig \
    mesa-utils \
    binutils \
    libfontconfig1 \
    libsm6 \
    libXrender1 \
    libfreetype6 \
    libglib2.0-0 \
    xvfb

# Install miniconda and phy.
RUN wget -qO- http://phy.cortexlab.net/install/latest.sh | bash

# Install test dependencies.
RUN $HOME/miniconda/bin/conda install --yes \
    pytest \
    flake8 \
    requests && \
    $HOME/miniconda/bin/pip install --upgrade \
    pip \
    responses

ENV PATH=$HOME/miniconda/bin:$PATH
ENV DISPLAY=:99.0
WORKDIR $HOME
",kwikteam/phy,Dockerfile
ce3291fe910b9105189aa7861556e8f457a74db5,4276,"#	Jenkins on tomcat + nginx
#	=========================
#	## Description:
#
#	Dockerfile for running
# 	Jenkins on top of Tomcat (with
# 	nginx serving the static content)
# 	within a docker container.
#
#	## Maintainer(s)
#
#	Jonathan Rosado Lugo <jonathan.rosado-lugo@hp.com>
#	Ricardo Quintana <ricardo.quintana@hp.com>
#
#	## References
#
#	- [Jenkins offical docker image](https://github.com/jenkinsci/docker)
#	- [Tomcat official docker image](https://github.com/docker-library/tomcat/)
#


FROM nginx:1.7.12
MAINTAINER Jonathan Rosado <jonathan.rosado-lugo@hp.com>

# Version for jenkins
# Update center for jenkins
# Versions for tomcat
# Tomcat home
ENV JENKINS_VERSION=1.625.2 \
	JENKINS_UC=https://updates.jenkins-ci.org \
	TOMCAT_MAJOR_VERSION=7 \
	TOMCAT_MINOR_VERSION=7.0.55 \
	CATALINA_HOME=/tomcat \
        JAVA_HOME='/usr/lib/jvm/java-7-openjdk-amd64'


# Install the supervisor process management tool to run both nginx and jetty
# Install the necessary packages to download and install Tomcat and Jenkins
# Clean up packages
# TODO: openjdk-7-jre endpoints seem to be unreliable. apt-get fails to get packages, causing image build to fail.
RUN apt-get update && apt-get install -y git 
RUN apt-get install -y wget 
RUN apt-get install -y curl 
RUN apt-get install -y supervisor 
RUN apt-get install -y openjdk-7-jre
RUN apt-get install -y fastjar
RUN apt-get install -y ca-certificates 
RUN apt-get install -y xmlstarlet
RUN apt-get install -y python-lxml
RUN wget -q https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR_VERSION}/v${TOMCAT_MINOR_VERSION}/bin/apache-tomcat-${TOMCAT_MINOR_VERSION}.tar.gz
RUN wget -qO- https://archive.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR_VERSION}/v${TOMCAT_MINOR_VERSION}/bin/apache-tomcat-${TOMCAT_MINOR_VERSION}.tar.gz.md5 | md5sum -c - 
RUN curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | python2.7 
RUN pip install pyyaml 
RUN tar zxf apache-tomcat-*.tar.gz 
RUN rm apache-tomcat-*.tar.gz 
RUN mv apache-tomcat* tomcat 
RUN rm -rf /tomcat/webapps/* 
RUN curl -L http://mirrors.jenkins-ci.org/war-stable/$JENKINS_VERSION/jenkins.war -o /tomcat/webapps/ROOT.war
RUN mkdir /tomcat/webapps/ROOT && cd /tomcat/webapps/ROOT && jar -xvf '/tomcat/webapps/ROOT.war' && cd / 
RUN rm -rf /var/lib/apt/lists/* 
RUN mkdir -p /tomcat/webapps/ROOT/ref/init.groovy.d 
RUN mkdir -p /var/log/nginx/jenkins/

# Add script for running Tomcat
ADD run-tomcat.sh /run.sh


# General YAML parser
ADD configparser.py /configparser.py

# Job migration tools
ADD xml2jobDSL.py /xml2jobDSL.py
ADD xml2yaml.py /xml2yaml.py

# Set the home folder for jenkins
ENV JENKINS_HOME /var/jenkins_home


# Add jenkins user
RUN useradd -d ""$JENKINS_HOME"" -u 1000 -m -s /bin/bash jenkins


# Add default config.xml
ADD config.xml /config.xml


# Add init file for setting the agent port for jnlp
ADD init.groovy /tomcat/webapps/ROOT/ref/init.groovy.d/tcp-slave-angent-port.groovy


# Add script for adding Jenkins plugins via text file
ADD download-plugins.sh /usr/local/bin/plugins.sh


# Add the text file containing the necessary plugins to be installed
ADD default_jenkins_plugins.txt /usr/share/jenkins/plugins.txt


# Execute the plugins.sh script against plugins.txt to install the necessary plugins
RUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt && > /usr/share/jenkins/plugins.txt


# Add the default nginx configuration
ADD nginx.conf /etc/nginx/nginx.conf


# Add the default supervisor conf
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf


# Add the job (seed job) that will build all the groovy defined jobs to the container
ADD groovy-dsl-job /var/tmp/groovy-dsl-job


# Add the script that will trigger the seed job
ADD build-groovy-jobs.sh /build-groovy-jobs.sh


# Jenkins CLI tool
ADD jenkins-cli.jar /jenkins-cli.jar


# Script that dispatches the CLI commands to Jenkins
ADD execute-jenkins-cli-commands.sh /execute-jenkins-cli-commands.sh


# XML templates
ADD user-template.xml /user-template.xml


# Script for PW encryption
ADD pwencrypt /usr/bin/pwencrypt


# Port 50000 will be used by jenkins slave
# Port 8080 will be used for the Jenkins web interface
EXPOSE 8080 50000


# Run NGINX, Tomcat, plugins.sh (to install the plugins)
CMD [""/usr/bin/supervisord""]
",Verigreen/jenkins-tomcat-nginx,Dockerfile
7a0c5bc08d8456be15c9476226503f3625d3cd94,2184,"FROM ubuntu:14.04

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
  DEBIAN_FRONTEND=noninteractive apt-get -y install \
    build-essential \
    curl \
    git-core \
    libcurl4-openssl-dev \
    libreadline-dev \
    libssl-dev \
    libxml2-dev \
    libxslt1-dev \
    libyaml-dev \
    redis-server \
    maven \
    mininet \
    lsof \
    openjdk-7-jdk \
    python2.7-dev \
    python-setuptools \
    libsqlite3-dev \
    libpcap-dev \
    zlib1g-dev && \    
    curl -O http://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p645.tar.gz && \
    tar -zxvf ruby-2.0.0-p645.tar.gz && \
    cd ruby-2.0.0-p645 && \
    ./configure --disable-install-doc && \
    make && \
    make install && \
    cd .. && \
    rm -r ruby-2.0.0-p645 ruby-2.0.0-p645.tar.gz && \
    echo 'gem: --no-document' > /usr/local/etc/gemrc

#Install Bundler for each version of ruby
RUN \
  echo 'gem: --no-rdoc --no-ri' >> /.gemrc && \
  gem install bundler

  
ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64 
ENV HOME /root 
WORKDIR /root

RUN easy_install pip
RUN pip install msgpack-python==0.4.6 redis==2.10.3 futures==2.2.0 mock==1.0.1 coverage==4.0a5 kazoo==2.2.1

RUN git clone https://github.com/o3project/odenos.git
RUN cd odenos && mvn install && bundle install && \
    cd etc && echo ""PROCESS romgr2,python,apps/python/sample_components"" >> odenos.conf

RUN git clone http://github.com/trema/trema-edge.git
RUN cd trema-edge && git checkout -b 148acb9cd7f654020098a5e769bfedad273a687b && bundle install && rake

RUN curl -O http://neo4j.com/artifact.php?name=neo4j-community-2.2.3-unix.tar.gz && \
    tar -zxvf artifact.php?name=neo4j-community-2.2.3-unix.tar.gz && \
    rm -r artifact.php?name=neo4j-community-2.2.3-unix.tar.gz

RUN echo ""service redis-server restart"" >> ~/.bashrc
RUN echo ""service openvswitch-switch restart"" >> ~/.bashrc
RUN echo ""org.neo4j.server.webserver.address=0.0.0.0"" >> ./neo4j-community-2.2.3/conf/neo4j-server.properties
RUN sed -i -e ""s/dbms.security.auth_enabled=true/dbms.security.auth_enabled=false/g"" ~/neo4j-community-2.2.3/conf/neo4j-server.properties 
RUN echo ""neo4j-community-2.2.3/bin/neo4j start"" >> ~/.bashrc
",o3project/odenos,Dockerfile
609701d87f0775799f0e047c1a90873149ef8323,639,"# Start from a Debian image with the latest version of Go installed
# and a workspace (GOPATH) configured at /go.
FROM golang

#Configure bunch
RUN mkdir /bunch
RUN mkdir /app

ENV GOPATH /bunch
WORKDIR /bunch
RUN go get github.com/dkulchenko/bunch
RUN go install github.com/dkulchenko/bunch
RUN pwd;ls bin
RUN cp /bunch/bin/bunch /usr/bin/bunch 
RUN which bunch

WORKDIR /app
ADD . /app
RUN bunch 


ENV GOPATH /app
RUN pwd

# Install my dependencies
RUN bunch update 

# Recompile the binaries
RUN bunch rebuild


# Launch the server 
ENTRYPOINT bunch go run /app/server.go

# Document that the service listens on port 8080.
EXPOSE 9091
",gayanhewa/Go-CRUD-MongoDB,Dockerfile
15f8f537d7713c80e7db6ccc3e27ec3399b8f62b,615,"FROM debian:jessie

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 575159689BEFB442 && \
    echo 'deb http://download.fpcomplete.com/debian jessie main'| tee /etc/apt/sources.list.d/fpco.list

RUN apt-get update && apt-get install  -y stack wget autoconf libtool bzip2 && \
    git clone https://github.com/serokell/rscoin.git && cd rscoin && \
    stack setup && \
    stack build && mkdir /app && cp bin/* /app/ && cd / && rm -rvf /rscoin /root/.stack && \
    apt-get remove -y stack wget autoconf libtool bzip2 && \
    apt-get autoremove -y && rm -rvf /var/lib/apt/lists/*

EXPOSE 3000
",serokell/rscoin,Dockerfile
a8226127c08fa997ddfc1ba3376f2e6da388d81c,651,"FROM hpess/chef:master
MAINTAINER Karl Stoney <karl.stoney@hp.com>

RUN yum -y -q install make gcc && \
    cd /tmp && \
    wget --quiet http://download.redis.io/releases/redis-3.0.2.tar.gz && \
    tar -xzf redis-*.tar.gz && \
    cd redis-* && \
    make -s && \
    make install && \
    rm -rf /tmp/redis* && \
    yum -y -q autoremove make gcc && \
    yum -y -q clean all

# Setup the redis specifics
RUN mkdir -p /var/run/redis && \
    chown -R docker:docker /var/run/redis

COPY cookbooks/ /chef/cookbooks/
COPY preboot/* /preboot/

ENV HPESS_ENV redis

EXPOSE 6379
EXPOSE 26379
ENV chef_node_name redis.docker.local
ENV chef_run_list redis
",Hewlett-Packard-ESS/docker-redis,Dockerfile
b38e947ae510484ce5d59a451e5847f3923d4e1a,843,"FROM golang

EXPOSE 10080
EXPOSE 10443

ADD . /go/src/github.com/jmhodges/howsmyssl

RUN go install github.com/jmhodges/howsmyssl

# Provided by kubernetes secrets or some such
VOLUME ""/secrets""

RUN chown -R www-data /go/src/github.com/jmhodges/howsmyssl

USER www-data

CMD howsmyssl \
    -httpsAddr=:10443 \
    -httpAddr=:10080 \
    -adminAddr=:4567 \
    -templateDir=/go/src/github.com/jmhodges/howsmyssl/templates \
    -staticDir=/go/src/github.com/jmhodges/howsmyssl/static \
    -vhost=www.howsmyssl.com \
    -acmeRedirect=$ACME_REDIRECT_URL \
    -originsConf=/etc/howsmyssl-origins/origins.json \
    -googAcctConf=/secrets/howsmyssl-logging-svc-account/howsmyssl-logging.json \
    -allowLogName=howsmyssl_allowance_checks \
    -cert=/secrets/howsmyssltls/howsmyssl.com.cert \
    -key=/secrets/howsmyssltls/howsmyssl.com.key
",jmhodges/howsmyssl,Dockerfile
a5762e0c8380ade0bc003d74a0fa5a3283e1e204,80,"FROM busybox
CMD echo 'dummy image used to trigger downstream dockerhub builds'
",fabric8io/jenkins-workflow-library,Dockerfile
89b281fb550ca6a3f2697fd1153e794253c9a453,166,"FROM alpine:latest

MAINTAINER alex <alexwhen@gmail.com> 

RUN apk --update add nginx

COPY 2048 /usr/share/nginx/html

EXPOSE 80

CMD [""nginx"", ""-g"", ""daemon off;""]
",alexwhen/docker-2048,Dockerfile
0bb035e4e8841e1dd7ce3b4e5598af0ca175d4f4,389,"FROM manastech/crystal

RUN apt-get update && \
    apt-get install -y liblapack-dev liblapack-doc-man liblapack-doc liblapack-pic liblapack3 liblapack-test liblapack3gf liblapacke liblapacke-dev libblas-dev libblas-doc liblapacke-dev liblapack-doc && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN mkdir /opt/crystalla
WORKDIR /opt/crystalla

CMD [""/bin/bash""]
",mverzilli/crystalla,Dockerfile
9e37311a38c4087e5092f83b4261f12cb899e336,354,"FROM debian:latest
MAINTAINER Oleg Morozenkov

RUN apt-get -qq update && \
	apt-get -qq install -y g++ make binutils cmake libssl-dev libboost-system-dev libboost-iostreams-dev libboost-test-dev

WORKDIR /tmp/tgbot-cpp
COPY include include
COPY src src
COPY CMakeLists.txt ./
RUN \
	cmake . && \
	make -j4 && \
	make install  && \
	rm -rf /tmp/tgbot-cpp
",reo7sp/tgbot-cpp,Dockerfile
8294ca13f690bd4b48e8f266e5b6481b4009a870,2023,"FROM node:5
RUN apt-get update

RUN apt-get install -y git

RUN git clone https://github.com/michaelgrosner/tribeca.git

WORKDIR tribeca

RUN npm install -g grunt-cli typings@0.8.1 forever
RUN npm install
RUN typings install
RUN grunt compile

EXPOSE 3000 5000

# General config properties. Properties with `NULL` should be replaced with your own exchange account information.
ENV TRIBECA_MODE dev
ENV EXCHANGE null
ENV TradedPair BTC/USD
ENV WebClientUsername NULL
ENV WebClientPassword NULL
ENV WebClientListenPort 3000
# IP to access mongo instance. If you are on a mac, run `boot2docker ip` and replace `tribeca-mongo`.
ENV MongoDbUrl mongodb://tribeca-mongo:27017/tribeca

# DEV
## HitBtc
ENV HitBtcPullUrl http://demo-api.hitbtc.com 
ENV HitBtcOrderEntryUrl ws://demo-api.hitbtc.com:8080
ENV HitBtcMarketDataUrl ws://demo-api.hitbtc.com:80
ENV HitBtcSocketIoUrl https://demo-api.hitbtc.com:8081
ENV HitBtcApiKey NULL
ENV HitBtcSecret NULL
ENV HitBtcOrderDestination HitBtc
## Coinbase
ENV CoinbaseRestUrl https://api-public.sandbox.exchange.coinbase.com
ENV CoinbaseWebsocketUrl https://ws-feed-public.sandbox.exchange.coinbase.com
ENV CoinbasePassphrase NULL
ENV CoinbaseApiKey NULL
ENV CoinbaseSecret NULL
ENV CoinbaseOrderDestination Coinbase
## OkCoin
ENV OkCoinWsUrl wss://real.okcoin.com:10440/websocket/okcoinapi
ENV OkCoinHttpUrl https://www.okcoin.com/api/v1/
ENV OkCoinApiKey NULL
ENV OkCoinSecretKey NULL
ENV OkCoinOrderDestination OkCoin
## Bitfinex
ENV BitfinexHttpUrl https://api.bitfinex.com/v1
ENV BitfinexKey NULL
ENV BitfinexSecret NULL
ENV BitfinexOrderDestination Bitfinex

# PROD - values provided for reference.
## HitBtc
#ENV HitBtcPullUrl http://api.hitbtc.com 
#ENV HitBtcOrderEntryUrl wss://api.hitbtc.com:8080
#ENV HitBtcMarketDataUrl ws://api.hitbtc.com:80
#ENV HitBtcSocketIoUrl https://api.hitbtc.com:8081
## Coinbase
#ENV CoinbaseRestUrl https://api.exchange.coinbase.com
#ENV CoinbaseWebsocketUrl wss://ws-feed.exchange.coinbase.com

WORKDIR tribeca/service
CMD [""forever"", ""main.js""]
",michaelgrosner/tribeca,Dockerfile
eb6ba36b70fc8a3025ec9fb177fbe7630be37695,331,"FROM ruby:2.3.0

RUN apt-get update -qq && apt-get install -y build-essential libpq-dev postgresql-client nodejs poppler-utils

# enable utf8 in irb
ENV LANG C.UTF-8

RUN mkdir /app
WORKDIR /app
ADD Gemfile /app/Gemfile
ADD Gemfile.lock /app/Gemfile.lock
ADD vendor/gems /app/vendor/gems
RUN bundle install

ADD . /app

EXPOSE 5000",okfde/sehrgutachten,Dockerfile
e55c246c97f89b3b279e9fafc4c7ed0c99e11f43,398,"FROM ubuntu:latest

RUN apt-get update -y
RUN apt-get install -y wget make git

RUN wget --no-check-certificate -O ruby-install-0.4.3.tar.gz https://github.com/postmodern/ruby-install/archive/v0.4.3.tar.gz
RUN tar -xzvf ruby-install-0.4.3.tar.gz
RUN cd ruby-install-0.4.3 && make install

RUN ruby-install ruby 1.9.3
RUN ruby-install ruby 2.1.1
RUN ruby-install ruby 2.1.2

ADD . /pry
WORKDIR /pry
",pry/pry,Dockerfile
f9d2cc8a5be40b70c8bdf62d5c7b5768a40646fa,302,"#
# Node.js Versioned w/ Bower & Gulp Dockerfile
#
# https://github.com/dorkusprime/nodejs_versioned-bower-gulp
#

# Pull base image.
FROM dorkusprime/nodejs:latest

# Install Bower & Gulp
RUN npm install -g bower gulp

# Define working directory.
WORKDIR /data

# Define default command.
CMD [""bash""]
",dorkusprime/nodejs_versioned-bower-gulp,Dockerfile
31ae453227dd8267a43dc5dcfd61b315ee7867c9,509,"FROM centos:6

MAINTAINER lokori <antti.virtanen@iki.fi>

RUN yum update -y 
RUN yum install -y java-1.8.0-openjdk

# jar command
RUN yum install -y java-1.8.0-openjdk-devel

RUN yum clean all

# Set environment variables.
ENV HOME /root

# Get the JAR file 
CMD mkdir /var/clamav-rest
COPY clamav-rest-1.0.0.jar /var/clamav-rest/

# Define working directory.
WORKDIR /var/clamav-rest/

# Open up the server 
EXPOSE 8080

ADD bootstrap.sh /
ENTRYPOINT [""/bootstrap.sh""]

# docker build -t lokori/clamav-rest .",solita/clamav-rest,Dockerfile
4963f3d2f8e9e8ccbf3495f738ebd296b027d850,300,"FROM ruby:2.1.2

RUN apt-get update
RUN apt-get install -y \
  build-essential \
  libpq-dev imagemagick \
  libmagickwand-dev \
  libmagic-dev \
  pdftk \
  libpq-dev \
  python-pygments

ADD . /doubtfire-api
WORKDIR /doubtfire-api

EXPOSE 3000

RUN bundle install --without production test replica
",doubtfire-lms/doubtfire-api,Dockerfile
97bee559dd10375d3a5914de68c1a53da0f8e3ee,375,"FROM gliderlabs/alpine

MAINTAINER Chris Aubuchon <Chris.Aubuchon@gmail.com>

COPY . /go/src/github.com/CiscoCloud/consul-cli
RUN apk add --update go git mercurial \
	&& cd /go/src/github.com/CiscoCloud/consul-cli \
	&& export GOPATH=/go \
	&& go get \
	&& go build -o /bin/consul-cli \
	&& rm -rf /go \
	&& apk del --purge go git mercurial

ENTRYPOINT [ ""/bin/consul-cli"" ]
",CiscoCloud/consul-cli,Dockerfile
e8bc37f678a1130fec6b6d0b6ad3e77cf7d2730c,1201,"FROM debian:jessie
MAINTAINER Hardware <contact@meshup.net>

ENV TINI_VER=0.9.0

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q --no-install-recommends  \
    postfix postfix-mysql postfix-pcre postgrey \
    dovecot-core dovecot-imapd dovecot-lmtpd dovecot-mysql dovecot-sieve dovecot-managesieved \
    opendkim opendkim-tools opendmarc \
    amavisd-new amavisd-milter spamassassin clamav-daemon clamav-milter \
    libsys-syslog-perl libmail-spf-perl libhttp-message-perl altermime \
    supervisor openssl rsyslog python-pip \
    pigz pxz pbzip2 \
    wget ca-certificates \
 && pip install envtpl \
 && wget -q https://github.com/krallin/tini/releases/download/v$TINI_VER/tini_$TINI_VER.deb -P /tmp \
 && dpkg -i /tmp/tini_$TINI_VER.deb \
 && apt-get purge -y wget \
 && apt-get autoremove -y \
 && apt-get clean \
 && rm -rf /tmp/* /var/lib/apt/lists/* /var/cache/debconf/*-old /usr/share/doc/* /usr/share/man/* \
 && cp -r /usr/share/locale/en\@* /tmp/ && rm -rf /usr/share/locale/* && mv /tmp/en\@* /usr/share/locale/

VOLUME /var/mail /var/lib/dovecot /etc/opendkim/keys /etc/letsencrypt
EXPOSE 25 143 465 587 993 4190

COPY rootfs /
CMD [""tini"",""--"",""startup""]
",hardware/mailserver,Dockerfile
315e894ff9858cc1ef0aa7677d3d3d0df7895c8a,728,"FROM ubuntu:14.04
MAINTAINER arthur@caranta.com
RUN apt-get update && apt-get install -y git apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysqlnd php5-ldap php5-gd
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2

ADD . /teampassinit

RUN php5enmod mcrypt
RUN php5enmod mysql
RUN php5enmod ldap

RUN perl -p -i -e ""s/max_execution_time = 30/max_execution_time = 120/g"" /etc/php5/apache2/php.ini
RUN perl -p -i -e ""s#Directory /var/www#Directory /teampass#g"" /etc/apache2/apache2.conf

RUN mv /teampassinit/apache-default.conf /etc/apache2/sites-available/000-default.conf
RUN mv /teampassinit/start.sh /start.sh && chmod a+x /start.sh
EXPOSE 80
VOLUME /teampass

CMD /start.sh
",nilsteampassnet/TeamPass,Dockerfile
2cc4143111ea05efea2bd50ef35b723bc8f43564,482,"FROM msaraiva/elixir-dev:1.1.1

ENV APP_NAME poxa

RUN apk --update add erlang-xmerl erlang-crypto erlang-sasl && rm -rf /var/cache/apk/*

COPY . /source
WORKDIR /source

RUN mix local.hex --force && mix local.rebar --force
RUN MIX_ENV=prod mix deps.get
RUN MIX_ENV=prod mix compile
RUN MIX_ENV=prod mix release --verbosity=verbose --no-confirm-missing
RUN mkdir /app && cp -r rel/$APP_NAME /app && rm -rf /source

CMD trap exit TERM; /app/$APP_NAME/bin/$APP_NAME foreground & wait
",edgurgel/poxa,Dockerfile
f54fa9ed85307173833189ceb038dacea6ba5a6e,120,"FROM rancher/docker-dind-base:v0.4.1
COPY ./scripts/bootstrap /scripts/bootstrap
RUN /scripts/bootstrap
WORKDIR /source
",vincent99/ui,Dockerfile
d7a580208eb644da1194dc63b53c4a84e87289f3,982,"# pdf2pdfocr
#
# version 1.0
FROM ubuntu:15.10
MAINTAINER Leonardo F. Cardoso <leonardo.f.cardoso@gmail.com>

RUN useradd docker \
  && mkdir /home/docker \
  && chown docker:docker /home/docker

# Update system and install dependencies
# Please uncomment tesseract-ocr-all if you want all languages to be installed
RUN apt-get update && apt-get install -y --no-install-recommends \
  file \
  imagemagick \
  locales \
  parallel \
  pdftk \
  poppler-utils \
  python3 \
  python3-pil \
  python3-pip \
  python3-reportlab \
  tesseract-ocr \
#  tesseract-ocr-all
  tesseract-ocr-osd tesseract-ocr-por tesseract-ocr-eng
  
# Complete python install
RUN pip3 install --upgrade pip \
  && pip3 install --upgrade pypdf2

# Clean
RUN apt-get autoremove -y && apt-get clean -y
RUN rm -rf /tmp/* /var/tmp/*

# Install application
COPY . /opt/install
WORKDIR /opt/install
RUN /opt/install/install_command

USER docker
WORKDIR /home/docker

ENTRYPOINT [""/opt/install/docker-wrapper.sh""]
#",LeoFCardoso/pdf2pdfocr,Dockerfile
d99c2c75397b779c45bc2c285cedf28a0e292375,143,"FROM busybox:ubuntu-14.04

MAINTAINER Stephan Zeissler <stephan@giantswarm.io>

COPY kocho /usr/local/bin/

ENTRYPOINT [""/usr/local/bin/kocho""]",giantswarm/kocho,Dockerfile
3ec8cdf7ef2b866bf724bc6ccd74403c815a8e29,351,"FROM node:0.10.40
MAINTAINER Octoblu, Inc. <docker@octoblu.com>

EXPOSE 80
EXPOSE 1883
EXPOSE 5683/udp

ENV PATH $PATH:/usr/local/bin

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY package.json /usr/src/app/
RUN npm install --production
COPY . /usr/src/app

CMD [ ""node"", ""--max-old-space-size=300"", ""server.js"", ""--http"", ""--coap"", ""--mqtt"" ]
",octoblu/meshblu,Dockerfile
f533c20a7d904a80ca59cf3a2c136e2c0d1bcd65,171,"FROM library/node:5.6.0

MAINTAINER ContainerShip Developers <developers@containership.io>

RUN mkdir /app
ADD . /app
WORKDIR /app
RUN npm install
CMD node application.js
",containership/elb-registrator,Dockerfile
7c700aebac312ffc7d80f464384fd66827a95dc0,490,"FROM ruby:2.1-onbuild
ENV RACK_ENV production
ENV GITHUB_PUSH_SOURCE_TO Transifex Project Name
ENV GITHUB_USERNAME Your github username
ENV GITHUB_TOKEN Transifex API Token
ENV GITHUB_WEBHOOK_SECRET Auth for Github Webhook
ENV GITHUB_BRANCH master
ENV TX_CONFIG_PATH config/tx.config
ENV TX_USERNAME Transifex Username
ENV TX_PASSWORD Transifex Password
ENV TX_PUSH_TRANSLATIONS_TO Github Repo Name
ENV TX_WEBHOOK_SECRET Auth for Transifex Webhook

EXPOSE 9292
CMD [""puma"", ""-p"", ""9292""]


",transifex/txgh,Dockerfile
5db5f2c4e55e4e252e655196c20d743e0d14494f,1113,"# Based on ruby image, packed with a lot of development dependencies
FROM ruby:2.3

# Install all dependencies for development and testing
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      mysql-client \
      libv8-dev \
      libmysqlclient-dev \
      xvfb \
      iceweasel && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Run app and all commands as user 'app'. This avoids changing permissions
# for files in mounted volume.
RUN adduser --gecos GECOS --disabled-password --shell /bin/bash app
USER app

# Create an directory to store the application code.
RUN mkdir /home/app/src
WORKDIR /home/app/src

# Copy plugins before the rest to allow bundler loading gemspecs
# TODO: Move plugins to gems and add them to Gemfile instead
COPY plugins ./plugins

# Add Gemfiles and run bundle.
COPY Gemfile Gemfile.lock ./
ENV BUNDLE_JOBS=4 BUNDLE_PATH=/home/app/bundle \
    BUNDLE_APP_CONFIG=/home/app/bundle/config
RUN bundle install

# Copy the application code. (Excluded files see .dockerignore)
COPY . ./

EXPOSE 3000

CMD [""rails"", ""server"", ""--binding"", ""0.0.0.0""]
",foodcoops/foodsoft,Dockerfile
a8a329aa95f4ed8100e08c28388df094dd600821,463,"FROM ubuntu:12.04
MAINTAINER Nolan Nichols <nolan.nichols@gmail.com>
ENV UPDATED ""Wed Apr 30 18:29:41 PDT 2014""

RUN echo ""deb http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse"" >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y ansible git sudo bzip2
RUN ansible-galaxy install nicholsn.miniconda --force
WORKDIR /etc/ansible/roles/nicholsn.miniconda
RUN ansible-playbook -i hosts local.yml -v

EXPOSE 22 ",nicholsn/ansible-role-miniconda,Dockerfile
ec132eb92530aab33e07c3e6a19e768fb1bd3be4,517," Test default configuration scheme (config.sls)
FROM      martinhoefling/salt-minion:debian
MAINTAINER Martin Hoefling <martin.hoefling@gmx.de>
# push formula
ADD fail2ban /srv/salt/fail2ban
ADD pillar.example /srv/pillar/example.sls
RUN echo ""file_client: local"" > /etc/salt/minion.d/local.conf
RUN echo ""base:"" > /srv/pillar/top.sls
RUN echo ""  '*':"" >> /srv/pillar/top.sls
RUN echo ""    - example"" >> /srv/pillar/top.sls
RUN salt-call --local state.sls fail2ban.config | tee log.txt && grep ""Failed:    0"" log.txt
",saltstack-formulas/fail2ban-formula,Dockerfile
7449bde1e3afa3ce66aa27f4b4099f42d4b85629,687,"FROM mhart/alpine-node
MAINTAINER hmalphettes@gmail.com

ENV KIBANA_VERSION 4.5.0

RUN apk add --update curl && \
  ( curl -Lskj https://download.elastic.co/kibana/kibana/kibana-${KIBANA_VERSION}-linux-x64.tar.gz | \
  gunzip -c - | tar xf - ) && \
  mv /kibana-$KIBANA_VERSION-linux-x64 /kibana && \
  rm -rf /kibana/node && \
  rm /kibana/bin/*.bat && \
  cd /kibana && \
  npm i hapi-auth-cookie && \
  bin/kibana plugin --install kibana-auth-plugin -u https://github.com/hmalphettes/kibana-auth-plugin/archive/master.tar.gz && \
  apk del curl && \
  rm -rfv /var/cache/apk/* /tmp/* /var/tmp/* /root/.npm

ENV LOCAL_AUTH_LOGINS=admin:password
EXPOSE 5601

CMD [""/kibana/bin/kibana""]
",hmalphettes/kibana-auth-plugin,docker/Dockerfile
03432e76f62c38aee03a77e27e93442d98b69cfe,2431,"##########################################################################
# Dockerfile to build Dynomite container images with Redis as the backend
# Based on Ubuntu
##########################################################################
# Copyright 2015 Netflix, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##########################################################################

# Set the base image to Ubuntu
FROM ubuntu

# File Author / Maintainer
MAINTAINER Ioannis Papapanagiotou - dynomite@netflix.com

# Update the repository sources list and Install package Build Essential
RUN apt-get update && apt-get install -y \
	autoconf \
	build-essential \
	dh-autoreconf \
	git \
	libssl-dev \
	libtool \
	python-software-properties \
	redis-server \
	tcl8.5

# Get Redis Running
RUN service redis-server start

# Clone the Dynomite Git
RUN git clone https://github.com/Netflix/dynomite.git
RUN echo 'Git repo has been cloned in your Docker VM'

# Move to working directory
WORKDIR dynomite/

# Autoreconf
RUN autoreconf -fvi \
	&& ./configure --enable-debug=log \
	&& CFLAGS=""-ggdb3 -O0"" ./configure --enable-debug=full \
	&& make \
	&& make install

##################### INSTALLATION ENDS #####################

# Expose the peer port
RUN echo 'Exposing peer port 8101'
EXPOSE 8101

# Expose the underlying Redis port
RUN echo 'Exposing Redis port 22122'
EXPOSE 22122

# Expose the stats/admin port
RUN echo 'Exposing stats/admin port 22222'
EXPOSE 22222

# Default port to acccess Dynomite
RUN echo 'Exposing client port for Dynomite 8102'
EXPOSE 8102

# Default port to execute the entrypoint (Dynomite)
CMD [""--port 8102""]

# Setting overcommit for Redis to be able to do BGSAVE/BGREWRITEAOF
RUN sysctl vm.overcommit_memory=1

# Setting the dynomite as the dockerized entry-point application
RUN echo 'Starting Dynomite'
ENTRYPOINT [""src/dynomite"", ""--conf-file=conf/redis_single.yml"", ""-v11""]

CMD [""run""]


",Netflix/dynomite,docker/Dockerfile
15c7689088d847c961ef8800583f756149f15f31,1799,"FROM nvidia/cuda:7.5-centos7

MAINTAINER Andrea Peruffo <andrea.peruffo1982@gmail.com>

# --- --- ---  Proxy Settings --- --- ---
#UNCOMMENT IF BHEIND A PROXY
#SET A PROPER PROXY IP

#ENV DOCKER_PROXY YOUR_PROXY_IP

#ENV http_proxy ${DOCKER_PROXY}
#ENV HTTP_PROXY ${DOCKER_PROXY}
#ENV https_proxy ${DOCKER_PROXY}
#ENV HTTPS_PROXY ${DOCKER_PROXY}
#ENV NO_PROXY '127.0.0.1, localhost, /var/run/docker.sock'

# --- --- ---  Update OS --- --- ---
RUN yum -y update; yum clean all

# --- --- ---  Tar --- --- ---
RUN yum -y install tar bzip2

# --- --- ---  Gcc / C++ --- --- ---
RUN yum -y install gcc gcc-c++

# --- --- ---  Make --- --- ---
RUN yum -y install make

# --- --- ---  Gcc compilation deps --- --- ---
RUN yum -y install gmp gmp-devel mpfr mpfr-devel libmpc libmpc-devel

# --- --- ---  Libtool --- --- ---
RUN yum -y install libtool

WORKDIR /home/

# --- --- ---  GCC 4.9 --- --- ---
RUN curl -L ""http://gcc.skazkaforyou.com/releases/gcc-4.9.3/gcc-4.9.3.tar.bz2"" -o /home/gcc.tar.bz2

RUN tar xvfj /home/gcc.tar.bz2

WORKDIR /home/gcc-4.9.3

RUN ./configure --disable-multilib --enable-languages=c,c++
RUN make
RUN make install

# --- --- ---  NTL --- --- ---
WORKDIR /home

RUN curl -L ""http://www.shoup.net/ntl/ntl-9.8.1.tar.gz"" -o /home/ntl.tar.gz

RUN tar xvf /home/ntl.tar.gz

WORKDIR /home/ntl-9.8.1/src

RUN ./configure SHARED=on NTL_EXCEPTIONS=on
RUN make
RUN make install

# --- --- ---  Cmake --- --- ---
RUN yum install -y cmake

# Fix cuda GCC
RUN ln -fs /usr/local/bin/gcc /usr/bin/gcc
RUN ln -fs /usr/local/bin/g++ /usr/bin/g++
RUN ln -fs /usr/local/bin/cpp /usr/bin/cpp
RUN ln -fs /usr/local/bin/c++ /usr/bin/c++

#Fix library path
RUN echo ""export LD_LIBRARY_PATH=/usr/local/lib64/:/usr/local/lib:${LD_LIBRARY_PATH}"" >> ~/.bashrc

WORKDIR /home/sources

CMD [""/bin/bash""]",vernamlab/cuHE,docker/Dockerfile
bd5c115deaa16389422c5322481c82f5ae185de0,924,"FROM centos:latest
MAINTAINER zhoujing_k49@163.com zhoujing00k@gmail.com https://hub.docker.com/u/zhoujing/
WORKDIR /tmp
RUN yum localinstall http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm -y && yum -y install supervisor && \
    yum install -y automake autoconf libtool make gcc wget lua-devel git unzip readline-devel pcre-devel openssl-devel && \
    wget https://github.com/keplerproject/luarocks/archive/v2.2.2.tar.gz && wget https://openresty.org/download/ngx_openresty-1.9.3.1.tar.gz && \
    tar zxf v2.2.2.tar.gz && cd luarocks-2.2.2 && ./configure && make build && make install && cd .. && \
    luarocks install vanilla && \
    tar zxf ngx_openresty-1.9.3.1.tar.gz && cd ngx_openresty-1.9.3.1 && ./configure && gmake && gmake install && cd .. && \
    ln -sf /usr/local/openresty/nginx/sbin/nginx /usr/bin/nginx 
ADD ./supervisord.conf /etc/
EXPOSE 9110
CMD [""/usr/bin/supervisord""]
",idevz/vanilla,docker/Dockerfile
f07bda34adcd0539f06de9e4cf591c8ce0c03457,1588,"# VERSION:        0.1
# DESCRIPTION:    PLE
# AUTHOR:         Eder Santana <edercsjr@gmail.com>
# COMMENTS:
#     Pygame learning environment
# SETUP:
#   # Download PLE Dockerfile
#   wget ...
#
#   # Build atom image
#   docker build -t ple .
#
#   UBUNTU:
#   docker run -it -v /tmp/.X11-unix:/tmp/.X11-unix \
#       -e DISPLAY=unix$DISPLAY ple /bin/bash
#
#   MAC:
#   in a separate window run:
#       brew install socat
#       socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\""$DISPLAY\""
#   finally:
#       run ifcongi and look for the ip of vboxnet0, say 192.168.99.1
#       docker run -i -t -e DISPLAY=192.168.99.1:0 ple /bin/bash
#
# USAGE:
#   cd ple/examples
#   python keras_nonvis.py

# FROM ubuntu:14.04
FROM ubuntu

MAINTAINER Eder Santana <edercsjr@gmail.com>

RUN apt-get update && apt-get install -y \
    mercurial \
    libav-tools \
    libsdl-image1.2-dev \
    libsdl-mixer1.2-dev \
    libsdl-ttf2.0-dev \
    libsmpeg-dev \
    libsdl1.2-dev \
    libportmidi-dev \
    libswscale-dev \
    libavformat-dev \
    libavcodec-dev \
    libplib-dev \
    libopenal-dev \
    libalut-dev \
    libvorbis-dev \
    libxxf86vm-dev \
    libxmu-dev \
    libgl1-mesa-dev \
    python-dev \
    python-pip \
    python-numpy \
    python-scipy \
    python-pygame \
    git

# RUN hg clone https://bitbucket.org/pygame/pygame && cd pygame && python setup.py build && sudo python setup.py install && cd ..
RUN pip install keras git+https://github.com/ntasfi/PyGame-Learning-Environment.git
RUN git clone https://github.com/ntasfi/PyGame-Learning-Environment.git ple
",ntasfi/PyGame-Learning-Environment,docker/Dockerfile
8f277cc408cb010b60facf68d947fedb14d4b150,161,"# Docker file for EcoData Retriever

FROM python:2.7
MAINTAINER Ethan White <ethan@weecology.org>
RUN pip install xlrd pymysql psycopg2
RUN pip install retriever",weecology/retriever,docker/Dockerfile
01792f1766133ad83495f3ef40394e058527f2e7,505,"FROM debian:jessie

ENV API_UMBRELLA_VERSION 0.11.1-1~jessie

# Install API Umbrella
RUN echo ""deb http://dl.bintray.com/nrel/api-umbrella-debian jessie main"" >> /etc/apt/sources.list.d/api-umbrella.list
RUN apt-get update && apt-get -y --allow-unauthenticated install api-umbrella

# Define mountable directories
VOLUME [""/etc/api-umbrella"", ""/opt/api-umbrella/var/db"", ""/opt/api-umbrella/var/log""]

# Expose HTTP and HTTPS ports
EXPOSE 80 443

# Run the API Umbrella service
CMD [""api-umbrella"", ""run""]
",NREL/api-umbrella,docker/Dockerfile
f4aaa75032e9a26f32b1c9900e96f88f329fe6c2,2445,"FROM debian:jessie
MAINTAINER Joshua Warner, joshuawarner32@gmail.com

RUN echo 'deb http://http.debian.net/debian jessie-backports main' >> /etc/apt/sources.list && \
    echo 'deb-src http://http.debian.net/debian jessie-backports main' >> /etc/apt/sources.list && \
    dpkg --add-architecture i386 && \
    apt-get update && \
    mkdir /var/src/

# Install base dependencies and build tools, general debugging tools
RUN apt-get install -y \
        build-essential \
        g++-4.9 \
        zlib1g-dev \
        openjdk-8-jdk \
        locales \
        --no-install-recommends && \
    apt-get clean all

# Fix utf-8 default locale - we'd otherwise have trouble with the Strings and Misc tests
RUN dpkg-reconfigure locales && \
    locale-gen C.UTF-8 && \
    /usr/sbin/update-locale LANG=C.UTF-8

ENV LC_ALL C.UTF-8

# Set JAVA_HOME for avian's benefit
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64

# Add i386 libraries
RUN apt-get install -y \
        libc6-dev-i386 && \
    apt-get download \
        zlib1g-dev:i386 && \
    dpkg -x *.deb / && \
    rm *.deb && \
    apt-get clean all

# Install cross-compile toolchain and emulator for testing
RUN apt-get install -y \
        mingw-w64 \
        wget \
        unzip \
        --no-install-recommends && \
    apt-get clean all

# Download win32 and win64 adjacent to avian
RUN cd /var/src/ && \
    wget https://github.com/ReadyTalk/win32/archive/master.zip -O win32.zip && \
    unzip win32.zip && \
    rm win32.zip && \
    mv win32-* win32 && \
    wget https://github.com/ReadyTalk/win64/archive/master.zip -O win64.zip && \
    unzip win64.zip && \
    rm win64.zip && \
    mv win64-* win64			

# Add openjdk-src stuff
RUN apt-get install -y \
    libcups2-dev \
    libgconf2-dev && \
    mkdir /var/src/openjdk/ && \
    cd /var/src/openjdk/ && \
    apt-get source openjdk-8 && \
    apt-get clean all && \
    find /var/src/openjdk && \
    rm /var/src/openjdk/*.gz /var/src/openjdk/*.dsc && \
    cd /var/src/openjdk/ && \
    tar -xf /var/src/openjdk/openjdk*/jdk.tar.xz && \
    mv /var/src/openjdk/jdk-*/src /var/src/openjdk-src && \
    rm -rf /var/src/openjdk && \
    apt-get clean all

# Download/extract lzma source
RUN mkdir /var/src/lzma && \
    cd /var/src/lzma && \
    apt-get install -y p7zip && \
    wget http://www.7-zip.org/a/lzma1507.7z -O lzma.7z && \
    p7zip -d lzma.7z

# Avian build location
VOLUME /var/src/avian
WORKDIR /var/src/avian
",ReadyTalk/avian,docker/Dockerfile
b526f60798446a2b3d046a1ed2d5f80207bea139,4485,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This Dockerfile will build the required environment and stack to easily 
# get up and running with running LegisGATE
# For more documentation please see https://github.com/lewismc/legisgate

FROM google/debian:wheezy

MAINTAINER Lewis John McGibbney <lewis.j.mcgibbney@jpl.nasa.gov>

# Get the package containing apt-add-repository installed for adding repositories
RUN apt-get update && apt-get install -y software-properties-common

# Install openJDK 1.7
RUN apt-get install -y openjdk-7-jdk 

# Install various dependencies
RUN apt-get install -y ant wget maven openssh-server openssh-client git vim telnet subversion rsync curl build-essential

RUN echo ""JAVA_HOME=/usr/bin"" >> /etc/environment

RUN echo 'PATH=$PATH:HOME/bin:$JAVA_HOME/bin' >> /etc/profile &&\
    echo 'export JAVA_HOME' >> /etc/profile &&\
    echo 'export PATH' >> /etc/profile

RUN addgroup hadoop
RUN adduser -ingroup hadoop --gecos """" --disabled-password hduser

RUN rm -rf /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key
RUN ssh-keygen -q -N """" -t dsa -f /etc/ssh/ssh_host_dsa_key
RUN ssh-keygen -q -N """" -t rsa -f /etc/ssh/ssh_host_rsa_key

USER hduser

RUN ssh-keygen -q -N """" -t rsa -f /home/hduser/.ssh/id_rsa
RUN cp /home/hduser/.ssh/id_rsa.pub /home/hduser/.ssh/authorized_keys
# add localhost to hduser's list of known_hosts files without need ssh login
RUN ssh-keyscan -H localhost >> ~/.ssh/known_hosts

USER root

WORKDIR /tmp

########################
# Apache Mahout 0.10.0 #
########################
ENV MAHOUT_PKG_NAME mahout-distribution-0.10.0
RUN wget http://archive.apache.org/dist/mahout/0.10.0/$MAHOUT_PKG_NAME.tar.gz && \
    tar -xvzf $MAHOUT_PKG_NAME.tar.gz && \
    rm -f $MAHOUT_PKG_NAME.tar.gz && \
    mv $MAHOUT_PKG_NAME /usr/local/mahout

# Needed to specify that we are running without a cluster
ENV MAHOUT_LOCAL true
ENV MAHOUT_HOME /usr/local/mahout

# SSH login fix so user isn't kicked after login
RUN sed 's#session\s*required\s*pam_loginuid.so#session optional pam_loginuid.so#g' -i /etc/pam.d/sshd

# so you can call 'mahout'
ENV PATH $PATH:/usr/local/mahout/bin

########################
# Apache Hadoop 2.2.0  #
########################
ENV HADOOP_PKG_NAME hadoop-2.2.0
RUN wget http://archive.apache.org/dist/hadoop/core/hadoop-2.2.0/$HADOOP_PKG_NAME.tar.gz && \
    tar -xvzf $HADOOP_PKG_NAME.tar.gz && \
    rm -f $HADOOP_PKG_NAME.tar.gz && \
    mv $HADOOP_PKG_NAME /usr/local/hadoop

WORKDIR /usr/local
RUN chown -R hduser:hadoop hadoop

# ENV needs to be used, as the above doesn't seem to be visible from cli
ENV JAVA_HOME /usr
ENV HADOOP_HOME /usr/local/hadoop

# so you can call 'hadoop', etc
ENV PATH $PATH:/usr/local/hadoop/bin

#######################
# Elasticsearch 1.5.0 #
#######################
ENV ES_PKG_NAME elasticsearch-1.5.0
RUN wget https://download.elasticsearch.org/elasticsearch/elasticsearch/$ES_PKG_NAME.tar.gz && \
  tar -xvzf $ES_PKG_NAME.tar.gz && \
  rm -f $ES_PKG_NAME.tar.gz && \
  mv $ES_PKG_NAME /usr/local/elasticsearch

# Define mountable directories.
VOLUME [""/data""]

# Mount elasticsearch.yml config
ADD config/elasticsearch.yml /usr/local/elasticsearch/config/elasticsearch.yml

# Define default command.
CMD [""/usr/local/elasticsearch/bin/elasticsearch""]

# Expose ports.
# - 9200: HTTP
# - 9300: transport
EXPOSE 9200
EXPOSE 9300

# Obtain the sources for DigitalPebble's Behemoth
#WORKDIR /usr/local
#RUN git clone https://github.com/DigitalPebble/behemoth.git
#cd behemoth && mvn clean install -DskipTests

#############
# MemexGATE #
#############
WORKDIR /usr/local
RUN git clone https://github.com/memex-explorer/memex-gate.git
ENV MEMEXGATE_HOME /usr/local/memex-gate 
#so you can call 'memexgate'
ENV PATH $PATH:$MEMEXGATE_HOME/bin

",memex-explorer/memex-gate,docker/Dockerfile
60fe586b8f8ea807395322258bf8fa0cf2edb7f4,578,"FROM alpine:3.3

MAINTAINER PÃ©ter SzilÃ¡gyi <peterke@gmail.com>

# Install any runtime dependencies
RUN \
  apk add --update ffmpeg bash && \
  rm -rf /var/cache/apk/*

# Install the media source extension patcher
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:$PATH

RUN \
  apk add --update go git                               && \
  go get github.com/acolwell/mse-tools/mse_webm_remuxer && \
  apk del go git                                        && \
  rm -rf /var/cache/apk/*

# Prep the image for encoding
ADD encode.sh encode.sh
RUN chmod +x encode.sh

ENTRYPOINT [""/encode.sh""]
",etherapis/webmcoder,docker/Dockerfile
cc7a6c1a3dd76fda0ad26360151ed9dcbcbb78ad,1038,"FROM node:0.12-slim
MAINTAINER Simon Bartlett

WORKDIR /usr/src/app

ADD https://raw.githubusercontent.com/colonizers/colonizers/master/package.json ./package.json

ENV buildDeps='gcc git make python'

RUN set -x \
&&  apt-get update \
&&  apt-get install -y $buildDeps --no-install-recommends \
&&  rm -rf /var/lib/apt/lists/* \
&&  npm install --production \
&&  npm dedupe \
&&  npm cache clean \
&&  rm -rf /tmp/npm* \
&&  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps

ADD https://github.com/colonizers/colonizers/archive/master.tar.gz ./master.tar.gz

RUN tar -xzvf master.tar.gz \
&&  cp -a colonizers-master/. . \
&&  rm -rf colonizers-master

RUN groupadd -r node \
&&  useradd -r -g node node

ENV COLONIZERS_HOST 0.0.0.0
ENV COLONIZERS_PORT 8080
ENV NODE_ENV production
ENV COLONIZERS_MONGO_URL mongodb://mongo/colonizers
ENV COLONIZERS_RABBITMQ_URL amqp://rabbitmq/

VOLUME /usr/src/app/server

EXPOSE 8080

USER node

CMD [""npm"", ""start""]
",colonizers/colonizers,docker/Dockerfile
3550b021573cd2acda06f30d8e71401760d2b30b,466,"# There's an image at joevandyk/que-web.
# Run like:
# docker run -e DATABASE_URL=postgres://username:password@hostname/db_name -p 3002:8080 joevandyk/que-web

FROM dockerfile/ruby

# Define working directory.
WORKDIR /app

EXPOSE 8080

# Define default command.
CMD bundle exec puma -e production -p 8080 /app/config.ru

RUN apt-get update && \
    apt-get install libpq-dev -y && \
    rm -rf /var/cache/apt/* /var/lib/apt/lists/*


ADD . /app
RUN bundle install

",statianzo/que-web,docker/Dockerfile
bfaa709ca270a33fae5b067661e487e0af0f52ba,623,"FROM ubuntu:latest

MAINTAINER Marius Magureanu

RUN export DEBIAN_FRONTEND=""noninteractive""

RUN apt-get update
RUN apt-get upgrade -y

RUN echo ""mariadb-server mariadb-server/root_password password rootpw"" | debconf-set-selections
RUN echo ""mariadb-server mariadb-server/root_password_again password rootpw"" | debconf-set-selections
RUN apt-get -y install mariadb-server-10.0

ENV user zipnish
ENV password secret
ENV db_script /var/db/database.sql

ADD ./init-db.sh /usr/local/bin/init-db.sh
ADD ./database.sql /var/db/database.sql

RUN chmod +x /usr/local/bin/init-db.sh

EXPOSE 3306

CMD [""/usr/local/bin/init-db.sh""]
",varnish/zipnish,docker/Dockerfile
195affdf1f492538c37e183738e5f18fe1ffac02,1477,"#
# This Docker image encapsulates Maltrieve, a tool to retrieve malware
# directly from the source for security researchers.
# which was created by Kyle Maxwell (krmaxwell) and is
# available at https://github.com/krmaxwell/maltrieve.
#
# The file below is based on ideas from Spenser Reinhardt's Dockerfile
# (https://registry.hub.docker.com/u/sreinhardt/honeynet/dockerfile)
# and on instructions outlined by M. Fields (@shakey_1).
#
# To run this image after installing Docker, use a command like this:
#
# sudo docker run --rm -it technoskald/maltrieve

FROM ubuntu:14.04
MAINTAINER Michael Boman <michael@michaelboman.org>

USER root
RUN apt-get update && \
  apt-get dist-upgrade -y
RUN apt-get install -y --no-install-recommends \
    gcc \
    git \
    libpython2.7-stdlib \
    python2.7 \
    python2.7-dev \
    python-pip \
    python-setuptools
RUN rm -rf /var/lib/apt/lists/* && \
  pip install --upgrade pip && \
  groupadd -r maltrieve && \
  useradd -r -g maltrieve -d /home/maltrieve -s /sbin/nologin -c ""Maltrieve User"" maltrieve

WORKDIR /home
RUN git clone https://github.com/krmaxwell/maltrieve.git && \
  cd maltrieve && \
  git checkout dev && \
  pip install -e . && \
  chown -R maltrieve:maltrieve /home/maltrieve

RUN mkdir /archive && \
  chown maltrieve:maltrieve /archive

USER maltrieve
ENV HOME /home/maltrieve
ENV USER maltrieve
WORKDIR /home/maltrieve
ENTRYPOINT [""maltrieve""]
CMD [""-d"", ""/archive/samples"", ""-l"", ""/archive/maltrieve.log""]
",krmaxwell/maltrieve,docker/Dockerfile
edb555aee71315ad814997c6d6b52e72d120c590,586,"FROM kennedyoliveira/java8
MAINTAINER Kennedy Oliveira <kennedy.oliveira@outlook.com>

ENV STANDALONE_HYSTRIX_VERSION 1.5.3
ENV HYSTRIX_DASHBOARD_HOME /opt/standalone-hystrix-dashboard/

RUN mkdir -p $HYSTRIX_DASHBOARD_HOME && cd $HYSTRIX_DASHBOARD_HOME
RUN wget https://bintray.com/artifact/download/kennedyoliveira/maven/com/github/kennedyoliveira/standalone-hystrix-dashboard/$STANDALONE_HYSTRIX_VERSION/standalone-hystrix-dashboard-$STANDALONE_HYSTRIX_VERSION-all.jar

EXPOSE 7979

ENTRYPOINT exec java -jar $JVM_ARGS standalone-hystrix-dashboard-$STANDALONE_HYSTRIX_VERSION-all.jar",kennedyoliveira/standalone-hystrix-dashboard,docker/Dockerfile
e00f6f34f20eb515efb528d2956481986d103be4,551,"FROM java:openjdk-8

#
# expose the grails default port
#

EXPOSE 8080 22

RUN ln -snf /bin/bash /bin/sh && apt-get update && apt-get install -y redis-server supervisor git openssh-server

COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

COPY start.sh /opt/start.sh

WORKDIR ""/opt/""

RUN git clone https://github.com/schmalle/ElasticPot.git

WORKDIR ""/opt/ElasticPot""

ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64

#
# this is only needed to download all needed libraries for grails 2.5.3
#

RUN ./gradlew war

CMD supervisord







",schmalle/ElasticPot,docker/Dockerfile
f3e9a73e72b43a16c032c961e027d6fc6f14b411,289,"FROM mhart/alpine-node:4.3.1

ENV NODE_ENV=production MYSQL_URI=mysql://webconsole@mysql/IOTDB PORT=8080 ADDRESS=0.0.0.0

# Define working directory.
WORKDIR /app/

ADD dist /app

RUN /usr/bin/npm install --prod

# Define default command.
CMD [""npm"", ""start""]

# Expose ports.
EXPOSE 8080
",meccano-iot/webconsole,docker/Dockerfile
3a1765e042bbacb7c8b64059380e67861efb10da,463,"FROM debian:jessie

RUN apt-get -q update && \
    apt-get install -yq --no-install-recommends wget ca-certificates

RUN echo 'deb http://www.rabbitmq.com/debian/ testing main' > /etc/apt/sources.list.d/rabbitmq.list && \
    wget -O- https://www.rabbitmq.com/rabbitmq-signing-key-public.asc | apt-key add -

RUN apt-get -q update && \
    apt-get install -yq --no-install-recommends rabbitmq-server

COPY docker-entrypoint.sh /

ENTRYPOINT /docker-entrypoint.sh
",ruby-amqp/bunny,docker/Dockerfile
8c34e965c6396d63e4ce08dca7fd024e36d6e79d,2993,"FROM alpine:3.3

ENV LUA_SUFFIX=jit-2.1.0-beta1 \
    LUAJIT_VERSION=2.1 \
    NGINX_PREFIX=/opt/openresty/nginx \
    OPENRESTY_PREFIX=/opt/openresty \
    OPENRESTY_SRC_SHA1=1a2029e1c854b6ac788b4d734dd6b5c53a3987ff \
    OPENRESTY_VERSION=1.9.7.3 \
    VAR_PREFIX=/var/nginx  \
    LOR_VERSION=V0.0.9   \
    LOR_PREFIX=/usr/local/lor \
	PYTHON_VERSION=2.7.11-r3 \
	PY_PIP_VERSION=7.1.2-r0 \
	SUPERVISOR_VERSION=3.2.0


RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/' /etc/apk/repositories

## install openresty with luajit 
RUN set -ex \
  && apk --no-cache add --virtual .openresty-build-dependencies \
    curl \
    make \
    musl-dev \
    gcc \
    ncurses-dev \
    openssl-dev \
    pcre-dev \
    perl \
    readline-dev \
    zlib-dev \
  \
  && curl -fsSL http://openresty.org/download/openresty-${OPENRESTY_VERSION}.tar.gz -o /tmp/openresty.tar.gz \
  \
  && cd /tmp \
  && echo ""${OPENRESTY_SRC_SHA1} *openresty.tar.gz"" | sha1sum -c - \
  && tar -xzf openresty.tar.gz \
  \
  && cd openresty-* \
  && readonly NPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \
  && ./configure \
    --prefix=${OPENRESTY_PREFIX} \
    --http-client-body-temp-path=${VAR_PREFIX}/client_body_temp \
    --http-proxy-temp-path=${VAR_PREFIX}/proxy_temp \
    --http-log-path=${VAR_PREFIX}/access.log \
    --error-log-path=${VAR_PREFIX}/error.log \
    --pid-path=${VAR_PREFIX}/nginx.pid \
    --lock-path=${VAR_PREFIX}/nginx.lock \
    --with-luajit \
    --with-pcre-jit \
    --with-ipv6 \
    --with-http_ssl_module \
    --without-http_ssi_module \
    --with-http_realip_module \
    --without-http_scgi_module \
    --without-http_uwsgi_module \
    --without-http_userid_module \
    -j${NPROC} \
  && make -j${NPROC} \
  && make install \
  \
  && rm -rf /tmp/openresty* \
  && apk del .openresty-build-dependencies

RUN ln -sf ${NGINX_PREFIX}/sbin/nginx /usr/local/bin/nginx \
  && ln -sf ${NGINX_PREFIX}/sbin/nginx /usr/local/bin/openresty \
  && ln -sf ${OPENRESTY_PREFIX}/bin/resty /usr/local/bin/resty \
  && ln -sf ${OPENRESTY_PREFIX}/luajit/bin/luajit-* ${OPENRESTY_PREFIX}/luajit/bin/lua \
  && ln -sf ${OPENRESTY_PREFIX}/luajit/bin/luajit-* /usr/local/bin/lua \
  && ln -sf /opt/openresty/luajit/bin/luajit /usr/bin/luajit

RUN apk --no-cache add \
    libgcc \
    libpcrecpp \
    libpcre16 \
    libpcre32 \
    libssl1.0 \
    libstdc++ \
    openssl \
    pcre
	
	

RUN apk update && apk add -u python=$PYTHON_VERSION py-pip=$PY_PIP_VERSION
RUN pip install supervisor==$SUPERVISOR_VERSION

RUN apk update \
  && apk add --virtual .lor-build-deps  \
  	 git \
  && cd /tmp \
  && git clone https://github.com/sumory/lor  \
  && cd lor \
  && sh install.sh \
  && rm -rf /tmp/lor \
  && adduser -D -g '' -u 1000 nginx



RUN apk --update add libuuid && rm -f /var/cache/apk/*  \
&& ln -s /usr/lib/libuuid.so $OPENRESTY_PREFIX/lualib



ADD ./supervisord.conf /etc/
RUN mkdir -p /var/log/supervisor 
WORKDIR /tmp


EXPOSE 8888
CMD [""/usr/bin/supervisord""]
",sumory/lor,docker/Dockerfile
9f8dc42a694063a812aa19b7c5e094d90328bf21,1310,"FROM debian
MAINTAINER Miguel de la Cruz <mgdelacroix@gmail.com>

# Locale setup
RUN apt-get update && \
    apt-get install -yq locales ca-certificates wget sudo && \
    rm -rf /var/lib/apt/lists/* && \
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

# Add dev user
RUN useradd user -d /home/user -s /bin/bash && cp -r /etc/skel /home/user && chown user.user -R /home/user

# Dependencies
RUN apt-get update && apt-get install -yq \
                                      tmux \
                                      vim \
                                      git \
                                      xz-utils \
                                      curl \
                                      rlwrap

# Install nvm
RUN mkdir -p /opt/nodejs && \
          curl https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz | tar Jx -C /opt/nodejs --strip-components=1 && \
          ln -s /opt/nodejs/bin/node /usr/local/bin/node && ln -s /opt/nodejs/bin/npm /usr/local/bin/npm && \
          /opt/nodejs/bin/npm install -g ionic gulp bower cordova

# Change user
USER user
WORKDIR /home/user
RUN echo ""export PATH=/opt/nodejs/bin:$PATH"" >> ~/.bashrc
COPY entrypoint.sh .

# PORTS
EXPOSE 8100
EXPOSE 35729

CMD ./entrypoint.sh
",PIWEEK/eve2,docker/Dockerfile
a3d21b70eb76df1a6b85445e2954966a4bb5eb84,320,"FROM ubuntu:xenial
MAINTAINER Lexman <tuttle@lexman.org>
RUN apt-get update && apt-get install -y python python-psycopg2 postgresql-client python-pip
RUN pip install --upgrade pip
RUN pip install https://github.com/lexman/tuttle/archive/master.zip
RUN chmod +x /usr/local/bin/tuttle*
VOLUME [""/project""]
WORKDIR /project",lexman/tuttle,docker/Dockerfile
